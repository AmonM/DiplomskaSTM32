
Diplomska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  0800a94c  0800a94c  0001a94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac80  0800ac80  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac80  0800ac80  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac80  0800ac80  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac84  0800ac84  0001ac84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ac88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001434  200001f8  0800ae80  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000162c  0800ae80  0002162c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a247  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003808  00000000  00000000  0003a46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001678  00000000  00000000  0003dc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  0003f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd62  00000000  00000000  000407a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001414e  00000000  00000000  0005c502  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c36b  00000000  00000000  00070650  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c9bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006264  00000000  00000000  0010ca38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a934 	.word	0x0800a934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800a934 	.word	0x0800a934

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 fe74 	bl	8000f7e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f009 fc80 	bl	8009b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f009 faf8 	bl	8009890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_IncTick+0x20>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_IncTick+0x24>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4413      	add	r3, r2
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <HAL_IncTick+0x24>)
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000280 	.word	0x20000280

080002d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <HAL_GetTick+0x14>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000280 	.word	0x20000280

080002ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f4:	f7ff ffee 	bl	80002d4 <HAL_GetTick>
 80002f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000304:	d005      	beq.n	8000312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <HAL_Delay+0x40>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4413      	add	r3, r2
 8000310:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000312:	bf00      	nop
 8000314:	f7ff ffde 	bl	80002d4 <HAL_GetTick>
 8000318:	4602      	mov	r2, r0
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	429a      	cmp	r2, r3
 8000322:	d8f7      	bhi.n	8000314 <HAL_Delay+0x28>
  {
  }
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000004 	.word	0x20000004

08000330 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09a      	sub	sp, #104	; 0x68
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800033e:	2300      	movs	r3, #0
 8000340:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d101      	bne.n	8000350 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800034c:	2301      	movs	r3, #1
 800034e:	e172      	b.n	8000636 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035a:	f003 0310 	and.w	r3, r3, #16
 800035e:	2b00      	cmp	r3, #0
 8000360:	d176      	bne.n	8000450 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000366:	2b00      	cmp	r3, #0
 8000368:	d152      	bne.n	8000410 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2200      	movs	r2, #0
 800036e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2200      	movs	r2, #0
 8000374:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2200      	movs	r2, #0
 800037a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f009 faab 	bl	80098e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d13b      	bne.n	8000410 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000398:	6878      	ldr	r0, [r7, #4]
 800039a:	f000 fce3 	bl	8000d64 <ADC_Disable>
 800039e:	4603      	mov	r3, r0
 80003a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a8:	f003 0310 	and.w	r3, r3, #16
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d12f      	bne.n	8000410 <HAL_ADC_Init+0xe0>
 80003b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d12b      	bne.n	8000410 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003c0:	f023 0302 	bic.w	r3, r3, #2
 80003c4:	f043 0202 	orr.w	r2, r3, #2
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	689a      	ldr	r2, [r3, #8]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80003da:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003ea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003ec:	4b94      	ldr	r3, [pc, #592]	; (8000640 <HAL_ADC_Init+0x310>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a94      	ldr	r2, [pc, #592]	; (8000644 <HAL_ADC_Init+0x314>)
 80003f2:	fba2 2303 	umull	r2, r3, r2, r3
 80003f6:	0c9a      	lsrs	r2, r3, #18
 80003f8:	4613      	mov	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000402:	e002      	b.n	800040a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	3b01      	subs	r3, #1
 8000408:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d1f9      	bne.n	8000404 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d007      	beq.n	800042e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800042c:	d110      	bne.n	8000450 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000432:	f023 0312 	bic.w	r3, r3, #18
 8000436:	f043 0210 	orr.w	r2, r3, #16
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000442:	f043 0201 	orr.w	r2, r3, #1
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800044a:	2301      	movs	r3, #1
 800044c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	2b00      	cmp	r3, #0
 800045a:	f040 80df 	bne.w	800061c <HAL_ADC_Init+0x2ec>
 800045e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000462:	2b00      	cmp	r3, #0
 8000464:	f040 80da 	bne.w	800061c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000472:	2b00      	cmp	r3, #0
 8000474:	f040 80d2 	bne.w	800061c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800047c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000480:	f043 0202 	orr.w	r2, r3, #2
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000488:	4b6f      	ldr	r3, [pc, #444]	; (8000648 <HAL_ADC_Init+0x318>)
 800048a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000494:	d102      	bne.n	800049c <HAL_ADC_Init+0x16c>
 8000496:	4b6d      	ldr	r3, [pc, #436]	; (800064c <HAL_ADC_Init+0x31c>)
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	e002      	b.n	80004a2 <HAL_ADC_Init+0x172>
 800049c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80004a0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d108      	bne.n	80004c2 <HAL_ADC_Init+0x192>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d101      	bne.n	80004c2 <HAL_ADC_Init+0x192>
 80004be:	2301      	movs	r3, #1
 80004c0:	e000      	b.n	80004c4 <HAL_ADC_Init+0x194>
 80004c2:	2300      	movs	r3, #0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d11c      	bne.n	8000502 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004c8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d010      	beq.n	80004f0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	f003 0303 	and.w	r3, r3, #3
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d107      	bne.n	80004ea <HAL_ADC_Init+0x1ba>
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d101      	bne.n	80004ea <HAL_ADC_Init+0x1ba>
 80004e6:	2301      	movs	r3, #1
 80004e8:	e000      	b.n	80004ec <HAL_ADC_Init+0x1bc>
 80004ea:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d108      	bne.n	8000502 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80004f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	431a      	orrs	r2, r3
 80004fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000500:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	7e5b      	ldrb	r3, [r3, #25]
 8000506:	035b      	lsls	r3, r3, #13
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800050c:	2a01      	cmp	r2, #1
 800050e:	d002      	beq.n	8000516 <HAL_ADC_Init+0x1e6>
 8000510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000514:	e000      	b.n	8000518 <HAL_ADC_Init+0x1e8>
 8000516:	2200      	movs	r2, #0
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	431a      	orrs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4313      	orrs	r3, r2
 8000526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000528:	4313      	orrs	r3, r2
 800052a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d11b      	bne.n	800056e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7e5b      	ldrb	r3, [r3, #25]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d109      	bne.n	8000552 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000542:	3b01      	subs	r3, #1
 8000544:	045a      	lsls	r2, r3, #17
 8000546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000548:	4313      	orrs	r3, r2
 800054a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800054e:	663b      	str	r3, [r7, #96]	; 0x60
 8000550:	e00d      	b.n	800056e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000556:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800055a:	f043 0220 	orr.w	r2, r3, #32
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000566:	f043 0201 	orr.w	r2, r3, #1
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000572:	2b01      	cmp	r3, #1
 8000574:	d007      	beq.n	8000586 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057e:	4313      	orrs	r3, r2
 8000580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000582:	4313      	orrs	r3, r2
 8000584:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f003 030c 	and.w	r3, r3, #12
 8000590:	2b00      	cmp	r3, #0
 8000592:	d114      	bne.n	80005be <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	6812      	ldr	r2, [r2, #0]
 800059e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005a2:	f023 0302 	bic.w	r3, r3, #2
 80005a6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7e1b      	ldrb	r3, [r3, #24]
 80005ac:	039a      	lsls	r2, r3, #14
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4313      	orrs	r3, r2
 80005b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80005ba:	4313      	orrs	r3, r2
 80005bc:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68da      	ldr	r2, [r3, #12]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <HAL_ADC_Init+0x320>)
 80005c6:	4013      	ands	r3, r2
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80005ce:	430b      	orrs	r3, r1
 80005d0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10c      	bne.n	80005f4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	f023 010f 	bic.w	r1, r3, #15
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	430a      	orrs	r2, r1
 80005f0:	631a      	str	r2, [r3, #48]	; 0x30
 80005f2:	e007      	b.n	8000604 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f022 020f 	bic.w	r2, r2, #15
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f023 0303 	bic.w	r3, r3, #3
 8000612:	f043 0201 	orr.w	r2, r3, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	641a      	str	r2, [r3, #64]	; 0x40
 800061a:	e00a      	b.n	8000632 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f023 0312 	bic.w	r3, r3, #18
 8000624:	f043 0210 	orr.w	r2, r3, #16
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800062c:	2301      	movs	r3, #1
 800062e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000632:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000636:	4618      	mov	r0, r3
 8000638:	3768      	adds	r7, #104	; 0x68
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000010 	.word	0x20000010
 8000644:	431bde83 	.word	0x431bde83
 8000648:	50000300 	.word	0x50000300
 800064c:	50000100 	.word	0x50000100
 8000650:	fff0c007 	.word	0xfff0c007

08000654 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000654:	b480      	push	{r7}
 8000656:	b09b      	sub	sp, #108	; 0x6c
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800066e:	2b01      	cmp	r3, #1
 8000670:	d101      	bne.n	8000676 <HAL_ADC_ConfigChannel+0x22>
 8000672:	2302      	movs	r3, #2
 8000674:	e2a5      	b.n	8000bc2 <HAL_ADC_ConfigChannel+0x56e>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2201      	movs	r2, #1
 800067a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	2b00      	cmp	r3, #0
 800068a:	f040 8289 	bne.w	8000ba0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	2b04      	cmp	r3, #4
 8000694:	d81c      	bhi.n	80006d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	461a      	mov	r2, r3
 80006aa:	231f      	movs	r3, #31
 80006ac:	4093      	lsls	r3, r2
 80006ae:	43db      	mvns	r3, r3
 80006b0:	4019      	ands	r1, r3
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	4613      	mov	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4413      	add	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	fa00 f203 	lsl.w	r2, r0, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	631a      	str	r2, [r3, #48]	; 0x30
 80006ce:	e063      	b.n	8000798 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	2b09      	cmp	r3, #9
 80006d6:	d81e      	bhi.n	8000716 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	3b1e      	subs	r3, #30
 80006ec:	221f      	movs	r2, #31
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43db      	mvns	r3, r3
 80006f4:	4019      	ands	r1, r3
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	4613      	mov	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	3b1e      	subs	r3, #30
 8000708:	fa00 f203 	lsl.w	r2, r0, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	430a      	orrs	r2, r1
 8000712:	635a      	str	r2, [r3, #52]	; 0x34
 8000714:	e040      	b.n	8000798 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	2b0e      	cmp	r3, #14
 800071c:	d81e      	bhi.n	800075c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	3b3c      	subs	r3, #60	; 0x3c
 8000732:	221f      	movs	r2, #31
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	4019      	ands	r1, r3
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	4613      	mov	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	3b3c      	subs	r3, #60	; 0x3c
 800074e:	fa00 f203 	lsl.w	r2, r0, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	430a      	orrs	r2, r1
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
 800075a:	e01d      	b.n	8000798 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	3b5a      	subs	r3, #90	; 0x5a
 8000770:	221f      	movs	r2, #31
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43db      	mvns	r3, r3
 8000778:	4019      	ands	r1, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	3b5a      	subs	r3, #90	; 0x5a
 800078c:	fa00 f203 	lsl.w	r2, r0, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	430a      	orrs	r2, r1
 8000796:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	f003 030c 	and.w	r3, r3, #12
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f040 80e5 	bne.w	8000972 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b09      	cmp	r3, #9
 80007ae:	d91c      	bls.n	80007ea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6999      	ldr	r1, [r3, #24]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4613      	mov	r3, r2
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	4413      	add	r3, r2
 80007c0:	3b1e      	subs	r3, #30
 80007c2:	2207      	movs	r2, #7
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4019      	ands	r1, r3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	6898      	ldr	r0, [r3, #8]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	3b1e      	subs	r3, #30
 80007dc:	fa00 f203 	lsl.w	r2, r0, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	430a      	orrs	r2, r1
 80007e6:	619a      	str	r2, [r3, #24]
 80007e8:	e019      	b.n	800081e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6959      	ldr	r1, [r3, #20]
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4613      	mov	r3, r2
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	4413      	add	r3, r2
 80007fa:	2207      	movs	r2, #7
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	4019      	ands	r1, r3
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	6898      	ldr	r0, [r3, #8]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4413      	add	r3, r2
 8000812:	fa00 f203 	lsl.w	r2, r0, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	430a      	orrs	r2, r1
 800081c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	3b01      	subs	r3, #1
 800083c:	2b03      	cmp	r3, #3
 800083e:	d84f      	bhi.n	80008e0 <HAL_ADC_ConfigChannel+0x28c>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <HAL_ADC_ConfigChannel+0x1f4>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	08000859 	.word	0x08000859
 800084c:	0800087b 	.word	0x0800087b
 8000850:	0800089d 	.word	0x0800089d
 8000854:	080008bf 	.word	0x080008bf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800085e:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <HAL_ADC_ConfigChannel+0x484>)
 8000860:	4013      	ands	r3, r2
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	6812      	ldr	r2, [r2, #0]
 8000866:	0691      	lsls	r1, r2, #26
 8000868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800086a:	430a      	orrs	r2, r1
 800086c:	431a      	orrs	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000876:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000878:	e07e      	b.n	8000978 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000880:	4b95      	ldr	r3, [pc, #596]	; (8000ad8 <HAL_ADC_ConfigChannel+0x484>)
 8000882:	4013      	ands	r3, r2
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	0691      	lsls	r1, r2, #26
 800088a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800088c:	430a      	orrs	r2, r1
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000898:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800089a:	e06d      	b.n	8000978 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80008a2:	4b8d      	ldr	r3, [pc, #564]	; (8000ad8 <HAL_ADC_ConfigChannel+0x484>)
 80008a4:	4013      	ands	r3, r2
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	0691      	lsls	r1, r2, #26
 80008ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008ae:	430a      	orrs	r2, r1
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80008ba:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80008bc:	e05c      	b.n	8000978 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80008c4:	4b84      	ldr	r3, [pc, #528]	; (8000ad8 <HAL_ADC_ConfigChannel+0x484>)
 80008c6:	4013      	ands	r3, r2
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	6812      	ldr	r2, [r2, #0]
 80008cc:	0691      	lsls	r1, r2, #26
 80008ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008d0:	430a      	orrs	r2, r1
 80008d2:	431a      	orrs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80008dc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80008de:	e04b      	b.n	8000978 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	069b      	lsls	r3, r3, #26
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d107      	bne.n	8000904 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000902:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800090a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	069b      	lsls	r3, r3, #26
 8000914:	429a      	cmp	r2, r3
 8000916:	d107      	bne.n	8000928 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000926:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800092e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	069b      	lsls	r3, r3, #26
 8000938:	429a      	cmp	r2, r3
 800093a:	d107      	bne.n	800094c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800094a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	069b      	lsls	r3, r3, #26
 800095c:	429a      	cmp	r2, r3
 800095e:	d10a      	bne.n	8000976 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800096e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000970:	e001      	b.n	8000976 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000972:	bf00      	nop
 8000974:	e000      	b.n	8000978 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000976:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b01      	cmp	r3, #1
 8000984:	d108      	bne.n	8000998 <HAL_ADC_ConfigChannel+0x344>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b01      	cmp	r3, #1
 8000992:	d101      	bne.n	8000998 <HAL_ADC_ConfigChannel+0x344>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <HAL_ADC_ConfigChannel+0x346>
 8000998:	2300      	movs	r3, #0
 800099a:	2b00      	cmp	r3, #0
 800099c:	f040 810b 	bne.w	8000bb6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d00f      	beq.n	80009c8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2201      	movs	r2, #1
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	400a      	ands	r2, r1
 80009c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80009c6:	e049      	b.n	8000a5c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2201      	movs	r2, #1
 80009d6:	409a      	lsls	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	430a      	orrs	r2, r1
 80009de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b09      	cmp	r3, #9
 80009e8:	d91c      	bls.n	8000a24 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6999      	ldr	r1, [r3, #24]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	3b1b      	subs	r3, #27
 80009fc:	2207      	movs	r2, #7
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4019      	ands	r1, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	6898      	ldr	r0, [r3, #8]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	3b1b      	subs	r3, #27
 8000a16:	fa00 f203 	lsl.w	r2, r0, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	619a      	str	r2, [r3, #24]
 8000a22:	e01b      	b.n	8000a5c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6959      	ldr	r1, [r3, #20]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1c5a      	adds	r2, r3, #1
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	2207      	movs	r2, #7
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	4019      	ands	r1, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	6898      	ldr	r0, [r3, #8]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	fa00 f203 	lsl.w	r2, r0, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_ADC_ConfigChannel+0x488>)
 8000a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b10      	cmp	r3, #16
 8000a66:	d105      	bne.n	8000a74 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d015      	beq.n	8000aa0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a78:	2b11      	cmp	r3, #17
 8000a7a:	d105      	bne.n	8000a88 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00b      	beq.n	8000aa0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a8c:	2b12      	cmp	r3, #18
 8000a8e:	f040 8092 	bne.w	8000bb6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f040 808b 	bne.w	8000bb6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aa8:	d102      	bne.n	8000ab0 <HAL_ADC_ConfigChannel+0x45c>
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_ADC_ConfigChannel+0x48c>)
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	e002      	b.n	8000ab6 <HAL_ADC_ConfigChannel+0x462>
 8000ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ab4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d10f      	bne.n	8000ae4 <HAL_ADC_ConfigChannel+0x490>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d108      	bne.n	8000ae4 <HAL_ADC_ConfigChannel+0x490>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e007      	b.n	8000ae6 <HAL_ADC_ConfigChannel+0x492>
 8000ad6:	bf00      	nop
 8000ad8:	83fff000 	.word	0x83fff000
 8000adc:	50000300 	.word	0x50000300
 8000ae0:	50000100 	.word	0x50000100
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d150      	bne.n	8000b8c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000aea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d010      	beq.n	8000b12 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	f003 0303 	and.w	r3, r3, #3
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d107      	bne.n	8000b0c <HAL_ADC_ConfigChannel+0x4b8>
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d101      	bne.n	8000b0c <HAL_ADC_ConfigChannel+0x4b8>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e000      	b.n	8000b0e <HAL_ADC_ConfigChannel+0x4ba>
 8000b0c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d13c      	bne.n	8000b8c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b10      	cmp	r3, #16
 8000b18:	d11d      	bne.n	8000b56 <HAL_ADC_ConfigChannel+0x502>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b22:	d118      	bne.n	8000b56 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b2e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_ADC_ConfigChannel+0x57c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <HAL_ADC_ConfigChannel+0x580>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	0c9a      	lsrs	r2, r3, #18
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b46:	e002      	b.n	8000b4e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1f9      	bne.n	8000b48 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000b54:	e02e      	b.n	8000bb4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b11      	cmp	r3, #17
 8000b5c:	d10b      	bne.n	8000b76 <HAL_ADC_ConfigChannel+0x522>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b66:	d106      	bne.n	8000b76 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b72:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000b74:	e01e      	b.n	8000bb4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d11a      	bne.n	8000bb4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b88:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000b8a:	e013      	b.n	8000bb4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f043 0220 	orr.w	r2, r3, #32
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000b9e:	e00a      	b.n	8000bb6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f043 0220 	orr.w	r2, r3, #32
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000bb2:	e000      	b.n	8000bb6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000bb4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000bbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	376c      	adds	r7, #108	; 0x6c
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000010 	.word	0x20000010
 8000bd4:	431bde83 	.word	0x431bde83

08000bd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b099      	sub	sp, #100	; 0x64
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bf0:	d102      	bne.n	8000bf8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8000bf2:	4b5a      	ldr	r3, [pc, #360]	; (8000d5c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	e002      	b.n	8000bfe <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000bfc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e0a2      	b.n	8000d4e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d101      	bne.n	8000c16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8000c12:	2302      	movs	r3, #2
 8000c14:	e09b      	b.n	8000d4e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d17f      	bne.n	8000d2c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d179      	bne.n	8000d2c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c38:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8000c3a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d040      	beq.n	8000cc6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6859      	ldr	r1, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c56:	035b      	lsls	r3, r3, #13
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c5e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d108      	bne.n	8000c80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d101      	bne.n	8000c80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e000      	b.n	8000c82 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000c80:	2300      	movs	r3, #0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d15c      	bne.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d107      	bne.n	8000ca2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8000ca2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14b      	bne.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000ca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000cb0:	f023 030f 	bic.w	r3, r3, #15
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	6811      	ldr	r1, [r2, #0]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	6892      	ldr	r2, [r2, #8]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cc2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000cc4:	e03c      	b.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000cc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cd0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d108      	bne.n	8000cf2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d123      	bne.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d107      	bne.n	8000d14 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8000d10:	2301      	movs	r3, #1
 8000d12:	e000      	b.n	8000d16 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8000d14:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d112      	bne.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000d22:	f023 030f 	bic.w	r3, r3, #15
 8000d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000d28:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000d2a:	e009      	b.n	8000d40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f043 0220 	orr.w	r2, r3, #32
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000d3e:	e000      	b.n	8000d42 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000d40:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3764      	adds	r7, #100	; 0x64
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	50000100 	.word	0x50000100
 8000d60:	50000300 	.word	0x50000300

08000d64 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d108      	bne.n	8000d90 <ADC_Disable+0x2c>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d101      	bne.n	8000d90 <ADC_Disable+0x2c>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <ADC_Disable+0x2e>
 8000d90:	2300      	movs	r3, #0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d040      	beq.n	8000e18 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f003 030d 	and.w	r3, r3, #13
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d10f      	bne.n	8000dc4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0202 	orr.w	r2, r2, #2
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2203      	movs	r2, #3
 8000dba:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000dbc:	f7ff fa8a 	bl	80002d4 <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000dc2:	e022      	b.n	8000e0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f043 0210 	orr.w	r2, r3, #16
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f043 0201 	orr.w	r2, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e01c      	b.n	8000e1a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000de0:	f7ff fa78 	bl	80002d4 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d90d      	bls.n	8000e0a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f043 0210 	orr.w	r2, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f043 0201 	orr.w	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e007      	b.n	8000e1a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d0e3      	beq.n	8000de0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff4c 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa6:	f7ff ff61 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000faa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	6978      	ldr	r0, [r7, #20]
 8000fb2:	f7ff ffb1 	bl	8000f18 <NVIC_EncodePriority>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff80 	bl	8000ec4 <__NVIC_SetPriority>
}
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff54 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e037      	b.n	800106e <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2202      	movs	r2, #2
 8001002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001014:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001018:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f8f1 	bl	8001238 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}  
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001076:	b580      	push	{r7, lr}
 8001078:	b084      	sub	sp, #16
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001088:	2b02      	cmp	r3, #2
 800108a:	d005      	beq.n	8001098 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2204      	movs	r2, #4
 8001090:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	e027      	b.n	80010e8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 020e 	bic.w	r2, r2, #14
 80010a6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c0:	2101      	movs	r1, #1
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	4798      	blx	r3
    } 
  }
  return status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2204      	movs	r2, #4
 8001110:	409a      	lsls	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d024      	beq.n	8001164 <HAL_DMA_IRQHandler+0x72>
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01f      	beq.n	8001164 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	2b00      	cmp	r3, #0
 8001130:	d107      	bne.n	8001142 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0204 	bic.w	r2, r2, #4
 8001140:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114a:	2104      	movs	r1, #4
 800114c:	fa01 f202 	lsl.w	r2, r1, r2
 8001150:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	2b00      	cmp	r3, #0
 8001158:	d06a      	beq.n	8001230 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001162:	e065      	b.n	8001230 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	2202      	movs	r2, #2
 800116a:	409a      	lsls	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d02c      	beq.n	80011ce <HAL_DMA_IRQHandler+0xdc>
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d027      	beq.n	80011ce <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10b      	bne.n	80011a4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 020a 	bic.w	r2, r2, #10
 800119a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	2102      	movs	r1, #2
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d035      	beq.n	8001230 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80011cc:	e030      	b.n	8001230 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	2208      	movs	r2, #8
 80011d4:	409a      	lsls	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d028      	beq.n	8001230 <HAL_DMA_IRQHandler+0x13e>
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d023      	beq.n	8001230 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 020e 	bic.w	r2, r2, #14
 80011f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001200:	2101      	movs	r1, #1
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
 8001206:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	4798      	blx	r3
    }
  }
}  
 800122e:	e7ff      	b.n	8001230 <HAL_DMA_IRQHandler+0x13e>
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <DMA_CalcBaseAndBitshift+0x34>)
 8001248:	4413      	add	r3, r2
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <DMA_CalcBaseAndBitshift+0x38>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	009a      	lsls	r2, r3, #2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <DMA_CalcBaseAndBitshift+0x3c>)
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	bffdfff8 	.word	0xbffdfff8
 8001270:	cccccccd 	.word	0xcccccccd
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	e14e      	b.n	8001526 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8140 	beq.w	8001520 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x38>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b12      	cmp	r3, #18
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	6939      	ldr	r1, [r7, #16]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d00b      	beq.n	800134c <HAL_GPIO_Init+0xd4>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001340:	2b11      	cmp	r3, #17
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b12      	cmp	r3, #18
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 809a 	beq.w	8001520 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ec:	4b55      	ldr	r3, [pc, #340]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a54      	ldr	r2, [pc, #336]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001404:	4a50      	ldr	r2, [pc, #320]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142e:	d013      	beq.n	8001458 <HAL_GPIO_Init+0x1e0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a46      	ldr	r2, [pc, #280]	; (800154c <HAL_GPIO_Init+0x2d4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d00d      	beq.n	8001454 <HAL_GPIO_Init+0x1dc>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a45      	ldr	r2, [pc, #276]	; (8001550 <HAL_GPIO_Init+0x2d8>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d007      	beq.n	8001450 <HAL_GPIO_Init+0x1d8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a44      	ldr	r2, [pc, #272]	; (8001554 <HAL_GPIO_Init+0x2dc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d101      	bne.n	800144c <HAL_GPIO_Init+0x1d4>
 8001448:	2303      	movs	r3, #3
 800144a:	e006      	b.n	800145a <HAL_GPIO_Init+0x1e2>
 800144c:	2305      	movs	r3, #5
 800144e:	e004      	b.n	800145a <HAL_GPIO_Init+0x1e2>
 8001450:	2302      	movs	r3, #2
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x1e2>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_GPIO_Init+0x1e2>
 8001458:	2300      	movs	r3, #0
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	f002 0203 	and.w	r2, r2, #3
 8001460:	0092      	lsls	r2, r2, #2
 8001462:	4093      	lsls	r3, r2
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800146a:	4937      	ldr	r1, [pc, #220]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800149c:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014c6:	4a24      	ldr	r2, [pc, #144]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3301      	adds	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	f47f aea9 	bne.w	8001288 <HAL_GPIO_Init+0x10>
  }
}
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	40010000 	.word	0x40010000
 800154c:	48000400 	.word	0x48000400
 8001550:	48000800 	.word	0x48000800
 8001554:	48000c00 	.word	0x48000c00
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f000 bef4 	b.w	80023be <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 816a 	beq.w	80018ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015e6:	4bb3      	ldr	r3, [pc, #716]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d00c      	beq.n	800160c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f2:	4bb0      	ldr	r3, [pc, #704]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d159      	bne.n	80016b2 <HAL_RCC_OscConfig+0xf6>
 80015fe:	4bad      	ldr	r3, [pc, #692]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160a:	d152      	bne.n	80016b2 <HAL_RCC_OscConfig+0xf6>
 800160c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001610:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001620:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d102      	bne.n	800163e <HAL_RCC_OscConfig+0x82>
 8001638:	4b9e      	ldr	r3, [pc, #632]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0xae>
 800163e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001642:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001652:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001656:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800165a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001666:	4b93      	ldr	r3, [pc, #588]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800166e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001672:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001676:	fa92 f2a2 	rbit	r2, r2
 800167a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800167e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001682:	fab2 f282 	clz	r2, r2
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	f042 0220 	orr.w	r2, r2, #32
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	f002 021f 	and.w	r2, r2, #31
 8001692:	2101      	movs	r1, #1
 8001694:	fa01 f202 	lsl.w	r2, r1, r2
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 810c 	beq.w	80018b8 <HAL_RCC_OscConfig+0x2fc>
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 8106 	bne.w	80018b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f000 be86 	b.w	80023be <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016bc:	d106      	bne.n	80016cc <HAL_RCC_OscConfig+0x110>
 80016be:	4b7d      	ldr	r3, [pc, #500]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a7c      	ldr	r2, [pc, #496]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e030      	b.n	800172e <HAL_RCC_OscConfig+0x172>
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x134>
 80016d6:	4b77      	ldr	r3, [pc, #476]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a76      	ldr	r2, [pc, #472]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80016dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b74      	ldr	r3, [pc, #464]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a73      	ldr	r2, [pc, #460]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e01e      	b.n	800172e <HAL_RCC_OscConfig+0x172>
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x15a>
 80016fc:	4b6d      	ldr	r3, [pc, #436]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6c      	ldr	r2, [pc, #432]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 8001702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a69      	ldr	r2, [pc, #420]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x172>
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a66      	ldr	r2, [pc, #408]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800171c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b64      	ldr	r3, [pc, #400]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a63      	ldr	r2, [pc, #396]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 8001728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800172e:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f023 020f 	bic.w	r2, r3, #15
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	495d      	ldr	r1, [pc, #372]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800173e:	4313      	orrs	r3, r2
 8001740:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d059      	beq.n	8001800 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7fe fdc2 	bl	80002d4 <HAL_GetTick>
 8001750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001756:	f7fe fdbd 	bl	80002d4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d902      	bls.n	800176c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	f000 be29 	b.w	80023be <HAL_RCC_OscConfig+0xe02>
 800176c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001770:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001780:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d102      	bne.n	800179e <HAL_RCC_OscConfig+0x1e2>
 8001798:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x20e>
 800179e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017c6:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ce:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80017d2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017d6:	fa92 f2a2 	rbit	r2, r2
 80017da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80017de:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f042 0220 	orr.w	r2, r2, #32
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f002 021f 	and.w	r2, r2, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0ab      	beq.n	8001756 <HAL_RCC_OscConfig+0x19a>
 80017fe:	e05c      	b.n	80018ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7fe fd68 	bl	80002d4 <HAL_GetTick>
 8001804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800180a:	f7fe fd63 	bl	80002d4 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	; 0x64
 8001818:	d902      	bls.n	8001820 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	f000 bdcf 	b.w	80023be <HAL_RCC_OscConfig+0xe02>
 8001820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001824:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800182c:	fa93 f3a3 	rbit	r3, r3
 8001830:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001834:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d102      	bne.n	8001852 <HAL_RCC_OscConfig+0x296>
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x2c2>
 8001852:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001856:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800186e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001872:	fa93 f3a3 	rbit	r3, r3
 8001876:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_RCC_OscConfig+0x2f8>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001882:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001886:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800188a:	fa92 f2a2 	rbit	r2, r2
 800188e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001892:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001896:	fab2 f282 	clz	r2, r2
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	f042 0220 	orr.w	r2, r2, #32
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	f002 021f 	and.w	r2, r2, #31
 80018a6:	2101      	movs	r1, #1
 80018a8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1ab      	bne.n	800180a <HAL_RCC_OscConfig+0x24e>
 80018b2:	e002      	b.n	80018ba <HAL_RCC_OscConfig+0x2fe>
 80018b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 816f 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018ca:	4bd0      	ldr	r3, [pc, #832]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00b      	beq.n	80018ee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018d6:	4bcd      	ldr	r3, [pc, #820]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d16c      	bne.n	80019bc <HAL_RCC_OscConfig+0x400>
 80018e2:	4bca      	ldr	r3, [pc, #808]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d166      	bne.n	80019bc <HAL_RCC_OscConfig+0x400>
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001900:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0x362>
 8001918:	4bbc      	ldr	r3, [pc, #752]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	e013      	b.n	8001946 <HAL_RCC_OscConfig+0x38a>
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001936:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001942:	4bb2      	ldr	r3, [pc, #712]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	2202      	movs	r2, #2
 8001948:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800194c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001950:	fa92 f2a2 	rbit	r2, r2
 8001954:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001958:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	f042 0220 	orr.w	r2, r2, #32
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f002 021f 	and.w	r2, r2, #31
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_RCC_OscConfig+0x3cc>
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d002      	beq.n	8001988 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	f000 bd1b 	b.w	80023be <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4ba0      	ldr	r3, [pc, #640]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	21f8      	movs	r1, #248	; 0xf8
 8001998:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019a0:	fa91 f1a1 	rbit	r1, r1
 80019a4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019ac:	fab1 f181 	clz	r1, r1
 80019b0:	b2c9      	uxtb	r1, r1
 80019b2:	408b      	lsls	r3, r1
 80019b4:	4995      	ldr	r1, [pc, #596]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e0f5      	b.n	8001ba8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8085 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x516>
 80019c8:	2301      	movs	r3, #1
 80019ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80019da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	461a      	mov	r2, r3
 80019f0:	2301      	movs	r3, #1
 80019f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7fe fc6e 	bl	80002d4 <HAL_GetTick>
 80019f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fe:	f7fe fc69 	bl	80002d4 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d902      	bls.n	8001a14 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	f000 bcd5 	b.w	80023be <HAL_RCC_OscConfig+0xe02>
 8001a14:	2302      	movs	r3, #2
 8001a16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0x488>
 8001a3e:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	e013      	b.n	8001a6c <HAL_RCC_OscConfig+0x4b0>
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a5c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001a72:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a76:	fa92 f2a2 	rbit	r2, r2
 8001a7a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001a7e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a82:	fab2 f282 	clz	r2, r2
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f042 0220 	orr.w	r2, r2, #32
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	f002 021f 	and.w	r2, r2, #31
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0af      	beq.n	80019fe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	21f8      	movs	r1, #248	; 0xf8
 8001aae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ab6:	fa91 f1a1 	rbit	r1, r1
 8001aba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001abe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ac2:	fab1 f181 	clz	r1, r1
 8001ac6:	b2c9      	uxtb	r1, r1
 8001ac8:	408b      	lsls	r3, r1
 8001aca:	4950      	ldr	r1, [pc, #320]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e06a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x5ec>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ae4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	461a      	mov	r2, r3
 8001afa:	2300      	movs	r3, #0
 8001afc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7fe fbe9 	bl	80002d4 <HAL_GetTick>
 8001b02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b08:	f7fe fbe4 	bl	80002d4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d902      	bls.n	8001b1e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	f000 bc50 	b.w	80023be <HAL_RCC_OscConfig+0xe02>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_OscConfig+0x592>
 8001b48:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	e013      	b.n	8001b76 <HAL_RCC_OscConfig+0x5ba>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b66:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x650>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	2202      	movs	r2, #2
 8001b78:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001b7c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b80:	fa92 f2a2 	rbit	r2, r2
 8001b84:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001b88:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b8c:	fab2 f282 	clz	r2, r2
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f042 0220 	orr.w	r2, r2, #32
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f002 021f 	and.w	r2, r2, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1af      	bne.n	8001b08 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80da 	beq.w	8001d6c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d069      	beq.n	8001c96 <HAL_RCC_OscConfig+0x6da>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd8:	fab3 f383 	clz	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <HAL_RCC_OscConfig+0x654>)
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	461a      	mov	r2, r3
 8001be8:	2301      	movs	r3, #1
 8001bea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7fe fb72 	bl	80002d4 <HAL_GetTick>
 8001bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf4:	e00e      	b.n	8001c14 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7fe fb6d 	bl	80002d4 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d906      	bls.n	8001c14 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e3d9      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	10908120 	.word	0x10908120
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c42:	2202      	movs	r2, #2
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4ba5      	ldr	r3, [pc, #660]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c5e:	2102      	movs	r1, #2
 8001c60:	6019      	str	r1, [r3, #0]
 8001c62:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f1a3 	rbit	r1, r3
 8001c6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c70:	6019      	str	r1, [r3, #0]
  return result;
 8001c72:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0b0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x63a>
 8001c94:	e06a      	b.n	8001d6c <HAL_RCC_OscConfig+0x7b0>
 8001c96:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cac:	601a      	str	r2, [r3, #0]
  return result;
 8001cae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cb2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <HAL_RCC_OscConfig+0x934>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe fb04 	bl	80002d4 <HAL_GetTick>
 8001ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7fe faff 	bl	80002d4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e36b      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
 8001ce6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d02:	2202      	movs	r2, #2
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2e:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d36:	2102      	movs	r1, #2
 8001d38:	6019      	str	r1, [r3, #0]
 8001d3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f1a3 	rbit	r1, r3
 8001d44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d48:	6019      	str	r1, [r3, #0]
  return result;
 8001d4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1b2      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8158 	beq.w	800202c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d82:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d112      	bne.n	8001db4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a56      	ldr	r2, [pc, #344]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b54      	ldr	r3, [pc, #336]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <HAL_RCC_OscConfig+0x938>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11a      	bne.n	8001df6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc0:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_RCC_OscConfig+0x938>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_RCC_OscConfig+0x938>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dcc:	f7fe fa82 	bl	80002d4 <HAL_GetTick>
 8001dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd6:	f7fe fa7d 	bl	80002d4 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e2e9      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <HAL_RCC_OscConfig+0x938>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0ef      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x852>
 8001e00:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a39      	ldr	r2, [pc, #228]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	e02f      	b.n	8001e6e <HAL_RCC_OscConfig+0x8b2>
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x876>
 8001e18:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a33      	ldr	r2, [pc, #204]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a30      	ldr	r2, [pc, #192]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e2a:	f023 0304 	bic.w	r3, r3, #4
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	e01d      	b.n	8001e6e <HAL_RCC_OscConfig+0x8b2>
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d10c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x89a>
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0x8b2>
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a24      	ldr	r2, [pc, #144]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d06b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e78:	f7fe fa2c 	bl	80002d4 <HAL_GetTick>
 8001e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7fe fa27 	bl	80002d4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e291      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
 8001e9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ec8:	601a      	str	r2, [r3, #0]
  return result;
 8001eca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ece:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d109      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x93c>
 8001ee4:	4b01      	ldr	r3, [pc, #4]	; (8001eec <HAL_RCC_OscConfig+0x930>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	e014      	b.n	8001f14 <HAL_RCC_OscConfig+0x958>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	10908120 	.word	0x10908120
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001efc:	2202      	movs	r2, #2
 8001efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	4bbb      	ldr	r3, [pc, #748]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f18:	2102      	movs	r1, #2
 8001f1a:	6011      	str	r1, [r2, #0]
 8001f1c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	fa92 f1a2 	rbit	r1, r2
 8001f26:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f2a:	6011      	str	r1, [r2, #0]
  return result;
 8001f2c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	fab2 f282 	clz	r2, r2
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f002 021f 	and.w	r2, r2, #31
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d099      	beq.n	8001e82 <HAL_RCC_OscConfig+0x8c6>
 8001f4e:	e063      	b.n	8002018 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7fe f9c0 	bl	80002d4 <HAL_GetTick>
 8001f54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7fe f9bb 	bl	80002d4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e225      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
 8001f72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f8e:	2202      	movs	r2, #2
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fa0:	601a      	str	r2, [r3, #0]
  return result;
 8001fa2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fa6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f043 0302 	orr.w	r3, r3, #2
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_OscConfig+0xa06>
 8001fbc:	4b90      	ldr	r3, [pc, #576]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	e00d      	b.n	8001fde <HAL_RCC_OscConfig+0xa22>
 8001fc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	fa93 f2a3 	rbit	r2, r3
 8001fd4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	6011      	str	r1, [r2, #0]
 8001fe6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	fa92 f1a2 	rbit	r1, r2
 8001ff0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ff4:	6011      	str	r1, [r2, #0]
  return result;
 8001ff6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1a0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002018:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002020:	4b77      	ldr	r3, [pc, #476]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	4a76      	ldr	r2, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 8002026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 81c2 	beq.w	80023bc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002038:	4b71      	ldr	r3, [pc, #452]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b08      	cmp	r3, #8
 8002042:	f000 819c 	beq.w	800237e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b02      	cmp	r3, #2
 800204e:	f040 8114 	bne.w	800227a <HAL_RCC_OscConfig+0xcbe>
 8002052:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002056:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800205a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fa93 f2a3 	rbit	r2, r3
 8002066:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800206a:	601a      	str	r2, [r3, #0]
  return result;
 800206c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002070:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800207c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	461a      	mov	r2, r3
 8002084:	2300      	movs	r3, #0
 8002086:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe f924 	bl	80002d4 <HAL_GetTick>
 800208c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	e009      	b.n	80020a6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7fe f91f 	bl	80002d4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e18b      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
 80020a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	fa93 f2a3 	rbit	r2, r3
 80020ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020be:	601a      	str	r2, [r3, #0]
  return result;
 80020c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_OscConfig+0xb24>
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e01b      	b.n	8002118 <HAL_RCC_OscConfig+0xb5c>
 80020e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80020fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	fa93 f2a3 	rbit	r2, r3
 800210e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800211c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002120:	6011      	str	r1, [r2, #0]
 8002122:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	fa92 f1a2 	rbit	r1, r2
 800212c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002130:	6011      	str	r1, [r2, #0]
  return result;
 8002132:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	fab2 f282 	clz	r2, r2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f042 0220 	orr.w	r2, r2, #32
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f002 021f 	and.w	r2, r2, #31
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d19e      	bne.n	8002092 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	430b      	orrs	r3, r1
 800216a:	4925      	ldr	r1, [pc, #148]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
 8002170:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002188:	601a      	str	r2, [r3, #0]
  return result;
 800218a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800218e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800219a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	461a      	mov	r2, r3
 80021a2:	2301      	movs	r3, #1
 80021a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7fe f895 	bl	80002d4 <HAL_GetTick>
 80021aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ae:	e009      	b.n	80021c4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe f890 	bl	80002d4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0fc      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
 80021c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fa93 f2a3 	rbit	r2, r3
 80021d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021dc:	601a      	str	r2, [r3, #0]
  return result;
 80021de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0xc48>
 80021f8:	4b01      	ldr	r3, [pc, #4]	; (8002200 <HAL_RCC_OscConfig+0xc44>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	e01e      	b.n	800223c <HAL_RCC_OscConfig+0xc80>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002208:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_RCC_OscConfig+0xe0c>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002240:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002244:	6011      	str	r1, [r2, #0]
 8002246:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	fa92 f1a2 	rbit	r1, r2
 8002250:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002254:	6011      	str	r1, [r2, #0]
  return result;
 8002256:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d09b      	beq.n	80021b0 <HAL_RCC_OscConfig+0xbf4>
 8002278:	e0a0      	b.n	80023bc <HAL_RCC_OscConfig+0xe00>
 800227a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800227e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	fa93 f2a3 	rbit	r2, r3
 800228e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002292:	601a      	str	r2, [r3, #0]
  return result;
 8002294:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002298:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	461a      	mov	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe f810 	bl	80002d4 <HAL_GetTick>
 80022b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	e009      	b.n	80022ce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ba:	f7fe f80b 	bl	80002d4 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e077      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
 80022ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	601a      	str	r2, [r3, #0]
  return result;
 80022e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_RCC_OscConfig+0xd4c>
 8002302:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_RCC_OscConfig+0xe0c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e01b      	b.n	8002340 <HAL_RCC_OscConfig+0xd84>
 8002308:	f107 0320 	add.w	r3, r7, #32
 800230c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	fa93 f2a3 	rbit	r2, r3
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f107 0318 	add.w	r3, r7, #24
 8002326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCC_OscConfig+0xe0c>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	f107 0210 	add.w	r2, r7, #16
 8002344:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002348:	6011      	str	r1, [r2, #0]
 800234a:	f107 0210 	add.w	r2, r7, #16
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	fa92 f1a2 	rbit	r1, r2
 8002354:	f107 020c 	add.w	r2, r7, #12
 8002358:	6011      	str	r1, [r2, #0]
  return result;
 800235a:	f107 020c 	add.w	r2, r7, #12
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	fab2 f282 	clz	r2, r2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f042 0220 	orr.w	r2, r2, #32
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	f002 021f 	and.w	r2, r2, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d19e      	bne.n	80022ba <HAL_RCC_OscConfig+0xcfe>
 800237c:	e01e      	b.n	80023bc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e018      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_RCC_OscConfig+0xe0c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002394:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002398:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b09e      	sub	sp, #120	; 0x78
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e162      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b90      	ldr	r3, [pc, #576]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b8d      	ldr	r3, [pc, #564]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	498b      	ldr	r1, [pc, #556]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e14a      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b82      	ldr	r3, [pc, #520]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	497f      	ldr	r1, [pc, #508]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80dc 	beq.w	80025f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d13c      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xf6>
 8002448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d102      	bne.n	8002472 <HAL_RCC_ClockConfig+0xa6>
 800246c:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	e00f      	b.n	8002492 <HAL_RCC_ClockConfig+0xc6>
 8002472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002476:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	667b      	str	r3, [r7, #100]	; 0x64
 8002480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002484:	663b      	str	r3, [r7, #96]	; 0x60
 8002486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002496:	65ba      	str	r2, [r7, #88]	; 0x58
 8002498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800249a:	fa92 f2a2 	rbit	r2, r2
 800249e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024a2:	fab2 f282 	clz	r2, r2
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	f002 021f 	and.w	r2, r2, #31
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d17b      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e0f3      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d13c      	bne.n	8002544 <HAL_RCC_ClockConfig+0x178>
 80024ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x128>
 80024ee:	4b4f      	ldr	r3, [pc, #316]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e00f      	b.n	8002514 <HAL_RCC_ClockConfig+0x148>
 80024f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
 8002502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002506:	643b      	str	r3, [r7, #64]	; 0x40
 8002508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002510:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	63ba      	str	r2, [r7, #56]	; 0x38
 800251a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800251c:	fa92 f2a2 	rbit	r2, r2
 8002520:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002524:	fab2 f282 	clz	r2, r2
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	f002 021f 	and.w	r2, r2, #31
 8002534:	2101      	movs	r1, #1
 8002536:	fa01 f202 	lsl.w	r2, r1, r2
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d13a      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b2      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
 8002544:	2302      	movs	r3, #2
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_RCC_ClockConfig+0x1a0>
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	e00d      	b.n	8002588 <HAL_RCC_ClockConfig+0x1bc>
 800256c:	2302      	movs	r3, #2
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
 8002578:	2302      	movs	r3, #2
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	4b29      	ldr	r3, [pc, #164]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	2202      	movs	r2, #2
 800258a:	61ba      	str	r2, [r7, #24]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	fa92 f2a2 	rbit	r2, r2
 8002592:	617a      	str	r2, [r7, #20]
  return result;
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	fab2 f282 	clz	r2, r2
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	f042 0220 	orr.w	r2, r2, #32
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f002 021f 	and.w	r2, r2, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e079      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	491a      	ldr	r1, [pc, #104]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7fd fe84 	bl	80002d4 <HAL_GetTick>
 80025cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7fd fe80 	bl	80002d4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e061      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 020c 	and.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1eb      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d214      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4906      	ldr	r1, [pc, #24]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e040      	b.n	80026aa <HAL_RCC_ClockConfig+0x2de>
 8002628:	40022000 	.word	0x40022000
 800262c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	491a      	ldr	r1, [pc, #104]	; (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4912      	ldr	r1, [pc, #72]	; (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800266e:	f000 f829 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002672:	4601      	mov	r1, r0
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_RCC_ClockConfig+0x2e8>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267c:	22f0      	movs	r2, #240	; 0xf0
 800267e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	60fa      	str	r2, [r7, #12]
  return result;
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	fab2 f282 	clz	r2, r2
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	40d3      	lsrs	r3, r2
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x2ec>)
 8002694:	5cd3      	ldrb	r3, [r2, r3]
 8002696:	fa21 f303 	lsr.w	r3, r1, r3
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <HAL_RCC_ClockConfig+0x2f0>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_ClockConfig+0x2f4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f007 fa7a 	bl	8009b9c <HAL_InitTick>
  
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3778      	adds	r7, #120	; 0x78
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	0800ab28 	.word	0x0800ab28
 80026bc:	20000010 	.word	0x20000010
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b08b      	sub	sp, #44	; 0x2c
 80026c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	2300      	movs	r3, #0
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x30>
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x36>
 80026f2:	e03c      	b.n	800276e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026f6:	623b      	str	r3, [r7, #32]
      break;
 80026f8:	e03c      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002700:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002704:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	fa92 f2a2 	rbit	r2, r2
 800270c:	607a      	str	r2, [r7, #4]
  return result;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	40d3      	lsrs	r3, r2
 8002718:	4a1c      	ldr	r2, [pc, #112]	; (800278c <HAL_RCC_GetSysClockFreq+0xc8>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	220f      	movs	r2, #15
 8002728:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	fa92 f2a2 	rbit	r2, r2
 8002730:	60fa      	str	r2, [r7, #12]
  return result;
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	40d3      	lsrs	r3, r2
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_RCC_GetSysClockFreq+0xcc>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800274c:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc4>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	fbb2 f2f3 	udiv	r2, r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
 800275c:	e004      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	623b      	str	r3, [r7, #32]
      break;
 800276c:	e002      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002770:	623b      	str	r3, [r7, #32]
      break;
 8002772:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002774:	6a3b      	ldr	r3, [r7, #32]
}
 8002776:	4618      	mov	r0, r3
 8002778:	372c      	adds	r7, #44	; 0x2c
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	007a1200 	.word	0x007a1200
 800278c:	0800aa88 	.word	0x0800aa88
 8002790:	0800aa98 	.word	0x0800aa98
 8002794:	003d0900 	.word	0x003d0900

08002798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_RCC_GetHCLKFreq+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000010 	.word	0x20000010

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027b6:	f7ff ffef 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027ba:	4601      	mov	r1, r0
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	603a      	str	r2, [r7, #0]
  return result;
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	40d3      	lsrs	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40021000 	.word	0x40021000
 80027f0:	0800ab38 	.word	0x0800ab38

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027fa:	f7ff ffcd 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027fe:	4601      	mov	r1, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002808:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800280c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	603a      	str	r2, [r7, #0]
  return result;
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	40d3      	lsrs	r3, r2
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	0800ab38 	.word	0x0800ab38

08002838 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	220f      	movs	r2, #15
 8002846:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0203 	and.w	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	08db      	lsrs	r3, r3, #3
 8002872:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_RCC_GetClockConfig+0x60>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0207 	and.w	r2, r3, #7
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	601a      	str	r2, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	40022000 	.word	0x40022000

0800289c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b092      	sub	sp, #72	; 0x48
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80d0 	beq.w	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c0:	4b86      	ldr	r3, [pc, #536]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10e      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4b83      	ldr	r3, [pc, #524]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4a82      	ldr	r2, [pc, #520]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d6:	61d3      	str	r3, [r2, #28]
 80028d8:	4b80      	ldr	r3, [pc, #512]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	4b7d      	ldr	r3, [pc, #500]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d118      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f6:	4b7a      	ldr	r3, [pc, #488]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a79      	ldr	r2, [pc, #484]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002902:	f7fd fce7 	bl	80002d4 <HAL_GetTick>
 8002906:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	e008      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290a:	f7fd fce3 	bl	80002d4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	; 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e0db      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	4b70      	ldr	r3, [pc, #448]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002928:	4b6c      	ldr	r3, [pc, #432]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d07d      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002942:	429a      	cmp	r2, r3
 8002944:	d076      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	4b5e      	ldr	r3, [pc, #376]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	461a      	mov	r2, r3
 8002970:	2301      	movs	r3, #1
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002984:	fab3 f383 	clz	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	461a      	mov	r2, r3
 8002994:	2300      	movs	r3, #0
 8002996:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002998:	4a50      	ldr	r2, [pc, #320]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800299a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800299e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d045      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fd fc94 	bl	80002d4 <HAL_GetTick>
 80029ac:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fd fc90 	bl	80002d4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e086      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80029c6:	2302      	movs	r3, #2
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	2302      	movs	r3, #2
 80029d4:	623b      	str	r3, [r7, #32]
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	61fb      	str	r3, [r7, #28]
  return result;
 80029de:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d102      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	e007      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	613a      	str	r2, [r7, #16]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	fa92 f2a2 	rbit	r2, r2
 8002a14:	60fa      	str	r2, [r7, #12]
  return result;
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	fab2 f282 	clz	r2, r2
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f002 021f 	and.w	r2, r2, #31
 8002a28:	2101      	movs	r1, #1
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0bd      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4926      	ldr	r1, [pc, #152]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	491a      	ldr	r1, [pc, #104]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f023 0210 	bic.w	r2, r3, #16
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4912      	ldr	r1, [pc, #72]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	490b      	ldr	r1, [pc, #44]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3748      	adds	r7, #72	; 0x48
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	10908100 	.word	0x10908100

08002ae8 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e083      	b.n	8002c02 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7f5b      	ldrb	r3, [r3, #29]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f006 ff50 	bl	80099b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	22ca      	movs	r2, #202	; 0xca
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2253      	movs	r2, #83	; 0x53
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fc26 	bl	8003378 <RTC_EnterInitMode>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	22ff      	movs	r2, #255	; 0xff
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e05e      	b.n	8002c02 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b56:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6919      	ldr	r1, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	041a      	lsls	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fbb8 	bl	8003328 <HAL_RTC_WaitForSynchro>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	22ff      	movs	r2, #255	; 0xff
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e018      	b.n	8002c02 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	22ff      	movs	r2, #255	; 0xff
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
  }
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002c0a:	b590      	push	{r4, r7, lr}
 8002c0c:	b087      	sub	sp, #28
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	7f1b      	ldrb	r3, [r3, #28]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_RTC_SetTime+0x1c>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0aa      	b.n	8002d7c <HAL_RTC_SetTime+0x172>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d126      	bne.n	8002c86 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fbbd 	bl	80033d0 <RTC_ByteToBcd2>
 8002c56:	4603      	mov	r3, r0
 8002c58:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fbb6 	bl	80033d0 <RTC_ByteToBcd2>
 8002c64:	4603      	mov	r3, r0
 8002c66:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c68:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	789b      	ldrb	r3, [r3, #2]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fbae 	bl	80033d0 <RTC_ByteToBcd2>
 8002c74:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002c76:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	78db      	ldrb	r3, [r3, #3]
 8002c7e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e018      	b.n	8002cb8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ca6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002cac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	78db      	ldrb	r3, [r3, #3]
 8002cb2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	22ca      	movs	r2, #202	; 0xca
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2253      	movs	r2, #83	; 0x53
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fb55 	bl	8003378 <RTC_EnterInitMode>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	22ff      	movs	r2, #255	; 0xff
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e047      	b.n	8002d7c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cf6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d111      	bne.n	8002d66 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 faf0 	bl	8003328 <HAL_RTC_WaitForSynchro>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2204      	movs	r2, #4
 8002d5a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00a      	b.n	8002d7c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	22ff      	movs	r2, #255	; 0xff
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	371c      	adds	r7, #28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}

08002d84 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002db6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002dba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11a      	bne.n	8002e36 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fb01 	bl	800340c <RTC_Bcd2ToByte>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 faf8 	bl	800340c <RTC_Bcd2ToByte>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	789b      	ldrb	r3, [r3, #2]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 faef 	bl	800340c <RTC_Bcd2ToByte>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	7f1b      	ldrb	r3, [r3, #28]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_RTC_SetDate+0x1c>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e094      	b.n	8002f86 <HAL_RTC_SetDate+0x146>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2202      	movs	r2, #2
 8002e66:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10e      	bne.n	8002e8c <HAL_RTC_SetDate+0x4c>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	785b      	ldrb	r3, [r3, #1]
 8002e7e:	f023 0310 	bic.w	r3, r3, #16
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	330a      	adds	r3, #10
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11c      	bne.n	8002ecc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	78db      	ldrb	r3, [r3, #3]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fa9a 	bl	80033d0 <RTC_ByteToBcd2>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fa93 	bl	80033d0 <RTC_ByteToBcd2>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002eae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	789b      	ldrb	r3, [r3, #2]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fa8b 	bl	80033d0 <RTC_ByteToBcd2>
 8002eba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002ebc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e00e      	b.n	8002eea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	78db      	ldrb	r3, [r3, #3]
 8002ed0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	785b      	ldrb	r3, [r3, #1]
 8002ed6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ed8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ede:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	22ca      	movs	r2, #202	; 0xca
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2253      	movs	r2, #83	; 0x53
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fa3c 	bl	8003378 <RTC_EnterInitMode>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	22ff      	movs	r2, #255	; 0xff
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2204      	movs	r2, #4
 8002f12:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e033      	b.n	8002f86 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f2c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d111      	bne.n	8002f70 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f9eb 	bl	8003328 <HAL_RTC_WaitForSynchro>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2204      	movs	r2, #4
 8002f64:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e00a      	b.n	8002f86 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}

08002f8e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	0b5b      	lsrs	r3, r3, #13
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11a      	bne.n	8003022 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	78db      	ldrb	r3, [r3, #3]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fa0b 	bl	800340c <RTC_Bcd2ToByte>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fa02 	bl	800340c <RTC_Bcd2ToByte>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	789b      	ldrb	r3, [r3, #2]
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f9f9 	bl	800340c <RTC_Bcd2ToByte>
 800301a:	4603      	mov	r3, r0
 800301c:	461a      	mov	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	7f1b      	ldrb	r3, [r3, #28]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_RTC_SetAlarm_IT+0x24>
 800304c:	2302      	movs	r3, #2
 800304e:	e11f      	b.n	8003290 <HAL_RTC_SetAlarm_IT+0x264>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2202      	movs	r2, #2
 800305a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d137      	bne.n	80030d2 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f9a8 	bl	80033d0 <RTC_ByteToBcd2>
 8003080:	4603      	mov	r3, r0
 8003082:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	785b      	ldrb	r3, [r3, #1]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f9a1 	bl	80033d0 <RTC_ByteToBcd2>
 800308e:	4603      	mov	r3, r0
 8003090:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003092:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	789b      	ldrb	r3, [r3, #2]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f999 	bl	80033d0 <RTC_ByteToBcd2>
 800309e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030a0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	78db      	ldrb	r3, [r3, #3]
 80030a8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80030aa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f98b 	bl	80033d0 <RTC_ByteToBcd2>
 80030ba:	4603      	mov	r3, r0
 80030bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	e023      	b.n	800311a <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030f2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030f8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	78db      	ldrb	r3, [r3, #3]
 80030fe:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003100:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003108:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800310a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003110:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003116:	4313      	orrs	r3, r2
 8003118:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	22ca      	movs	r2, #202	; 0xca
 800312c:	625a      	str	r2, [r3, #36]	; 0x24
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2253      	movs	r2, #83	; 0x53
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313e:	d148      	bne.n	80031d2 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800314e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003160:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003162:	f7fd f8b7 	bl	80002d4 <HAL_GetTick>
 8003166:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003168:	e013      	b.n	8003192 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800316a:	f7fd f8b3 	bl	80002d4 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003178:	d90b      	bls.n	8003192 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2203      	movs	r2, #3
 8003186:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e07e      	b.n	8003290 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0e4      	beq.n	800316a <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031be:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e047      	b.n	8003262 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031e0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f462 7220 	orn	r2, r2, #640	; 0x280
 80031f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80031f4:	f7fd f86e 	bl	80002d4 <HAL_GetTick>
 80031f8:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80031fa:	e013      	b.n	8003224 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031fc:	f7fd f86a 	bl	80002d4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800320a:	d90b      	bls.n	8003224 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	22ff      	movs	r2, #255	; 0xff
 8003212:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2203      	movs	r2, #3
 8003218:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e035      	b.n	8003290 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0e4      	beq.n	80031fc <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003250:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003260:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326c:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003278:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	22ff      	movs	r2, #255	; 0xff
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3724      	adds	r7, #36	; 0x24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd90      	pop	{r4, r7, pc}
 8003298:	40010400 	.word	0x40010400

0800329c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f005 feab 	bl	800901c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80032d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f8a7 	bl	8003448 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f462 7220 	orn	r2, r2, #640	; 0x280
 800330a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RTC_AlarmIRQHandler+0x88>)
 800330e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003312:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	775a      	strb	r2, [r3, #29]
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40010400 	.word	0x40010400

08003328 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003342:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003344:	f7fc ffc6 	bl	80002d4 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800334a:	e009      	b.n	8003360 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800334c:	f7fc ffc2 	bl	80002d4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335a:	d901      	bls.n	8003360 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e007      	b.n	8003370 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d119      	bne.n	80033c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800339a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800339c:	f7fc ff9a 	bl	80002d4 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033a2:	e009      	b.n	80033b8 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033a4:	f7fc ff96 	bl	80002d4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033b2:	d901      	bls.n	80033b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e007      	b.n	80033c8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ee      	beq.n	80033a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80033de:	e005      	b.n	80033ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3301      	adds	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	3b0a      	subs	r3, #10
 80033ea:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	2b09      	cmp	r3, #9
 80033f0:	d8f6      	bhi.n	80033e0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	b2db      	uxtb	r3, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	b2db      	uxtb	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	b2da      	uxtb	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4413      	add	r3, r2
 800343a:	b2db      	uxtb	r3, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07c      	b.n	8003568 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f006 fabd 	bl	8009a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ae:	d902      	bls.n	80034b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e002      	b.n	80034bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034c4:	d007      	beq.n	80034d6 <HAL_SPI_Init+0x7a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10b      	bne.n	80034f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034e6:	d903      	bls.n	80034f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	631a      	str	r2, [r3, #48]	; 0x30
 80034ee:	e002      	b.n	80034f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	ea42 0103 	orr.w	r1, r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0204 	and.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	ea42 0103 	orr.w	r1, r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_SPI_Transmit+0x22>
 800358e:	2302      	movs	r3, #2
 8003590:	e150      	b.n	8003834 <HAL_SPI_Transmit+0x2c4>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800359a:	f7fc fe9b 	bl	80002d4 <HAL_GetTick>
 800359e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d002      	beq.n	80035b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
 80035b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035b4:	e135      	b.n	8003822 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Transmit+0x52>
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035c6:	e12c      	b.n	8003822 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2203      	movs	r2, #3
 80035cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003612:	d107      	bne.n	8003624 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003622:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d007      	beq.n	8003642 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800364a:	d94b      	bls.n	80036e4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_SPI_Transmit+0xea>
 8003654:	8afb      	ldrh	r3, [r7, #22]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d13e      	bne.n	80036d8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	881a      	ldrh	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800367e:	e02b      	b.n	80036d8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b02      	cmp	r3, #2
 800368c:	d112      	bne.n	80036b4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	881a      	ldrh	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036b2:	e011      	b.n	80036d8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b4:	f7fc fe0e 	bl	80002d4 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d803      	bhi.n	80036cc <HAL_SPI_Transmit+0x15c>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ca:	d102      	bne.n	80036d2 <HAL_SPI_Transmit+0x162>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036d6:	e0a4      	b.n	8003822 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ce      	bne.n	8003680 <HAL_SPI_Transmit+0x110>
 80036e2:	e07c      	b.n	80037de <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <HAL_SPI_Transmit+0x182>
 80036ec:	8afb      	ldrh	r3, [r7, #22]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d170      	bne.n	80037d4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d912      	bls.n	8003722 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b02      	subs	r3, #2
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003720:	e058      	b.n	80037d4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003748:	e044      	b.n	80037d4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b02      	cmp	r3, #2
 8003756:	d12b      	bne.n	80037b0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d912      	bls.n	8003788 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	1c9a      	adds	r2, r3, #2
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b02      	subs	r3, #2
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003786:	e025      	b.n	80037d4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	7812      	ldrb	r2, [r2, #0]
 8003794:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037ae:	e011      	b.n	80037d4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b0:	f7fc fd90 	bl	80002d4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d803      	bhi.n	80037c8 <HAL_SPI_Transmit+0x258>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c6:	d102      	bne.n	80037ce <HAL_SPI_Transmit+0x25e>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037d2:	e026      	b.n	8003822 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1b5      	bne.n	800374a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	6839      	ldr	r1, [r7, #0]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fb22 	bl	8003e2c <SPI_EndRxTxTransaction>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e000      	b.n	8003822 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003820:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003832:	7ffb      	ldrb	r3, [r7, #31]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800384a:	2301      	movs	r3, #1
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x26>
 800385e:	2302      	movs	r3, #2
 8003860:	e1fb      	b.n	8003c5a <HAL_SPI_TransmitReceive+0x41e>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386a:	f7fc fd33 	bl	80002d4 <HAL_GetTick>
 800386e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003876:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800387e:	887b      	ldrh	r3, [r7, #2]
 8003880:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003886:	7efb      	ldrb	r3, [r7, #27]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d00e      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x6e>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003892:	d106      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x66>
 800389c:	7efb      	ldrb	r3, [r7, #27]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d003      	beq.n	80038aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
 80038a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80038a8:	e1cd      	b.n	8003c46 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x80>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x80>
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d103      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80038c2:	e1c0      	b.n	8003c46 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d003      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2205      	movs	r2, #5
 80038d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	887a      	ldrh	r2, [r7, #2]
 80038e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	887a      	ldrh	r2, [r7, #2]
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800391a:	d802      	bhi.n	8003922 <HAL_SPI_TransmitReceive+0xe6>
 800391c:	8a3b      	ldrh	r3, [r7, #16]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d908      	bls.n	8003934 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	e007      	b.n	8003944 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003942:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d007      	beq.n	8003962 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800396a:	d97c      	bls.n	8003a66 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_SPI_TransmitReceive+0x13e>
 8003974:	8a7b      	ldrh	r3, [r7, #18]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d169      	bne.n	8003a4e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	881a      	ldrh	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	1c9a      	adds	r2, r3, #2
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800399e:	e056      	b.n	8003a4e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d11b      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x1aa>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d016      	beq.n	80039e6 <HAL_SPI_TransmitReceive+0x1aa>
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d113      	bne.n	80039e6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	881a      	ldrh	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	1c9a      	adds	r2, r3, #2
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d11c      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x1f2>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d016      	beq.n	8003a2e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a2e:	f7fc fc51 	bl	80002d4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d807      	bhi.n	8003a4e <HAL_SPI_TransmitReceive+0x212>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a44:	d003      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a4c:	e0fb      	b.n	8003c46 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1a3      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x164>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d19d      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x164>
 8003a64:	e0df      	b.n	8003c26 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_SPI_TransmitReceive+0x23a>
 8003a6e:	8a7b      	ldrh	r3, [r7, #18]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f040 80cb 	bne.w	8003c0c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d912      	bls.n	8003aa6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	881a      	ldrh	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	1c9a      	adds	r2, r3, #2
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b02      	subs	r3, #2
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aa4:	e0b2      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	7812      	ldrb	r2, [r2, #0]
 8003ab2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003acc:	e09e      	b.n	8003c0c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d134      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x30a>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d02f      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0x30a>
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d12c      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d912      	bls.n	8003b1c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	881a      	ldrh	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	1c9a      	adds	r2, r3, #2
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b02      	subs	r3, #2
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b1a:	e012      	b.n	8003b42 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d148      	bne.n	8003be6 <HAL_SPI_TransmitReceive+0x3aa>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d042      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d923      	bls.n	8003bb4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	b292      	uxth	r2, r2
 8003b78:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b02      	subs	r3, #2
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d81f      	bhi.n	8003be2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	e016      	b.n	8003be2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f103 020c 	add.w	r2, r3, #12
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	7812      	ldrb	r2, [r2, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003be2:	2301      	movs	r3, #1
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003be6:	f7fc fb75 	bl	80002d4 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d803      	bhi.n	8003bfe <HAL_SPI_TransmitReceive+0x3c2>
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bfc:	d102      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x3c8>
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d103      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003c0a:	e01c      	b.n	8003c46 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f47f af5b 	bne.w	8003ace <HAL_SPI_TransmitReceive+0x292>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f af54 	bne.w	8003ace <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f8fe 	bl	8003e2c <SPI_EndRxTxTransaction>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	661a      	str	r2, [r3, #96]	; 0x60
 8003c42:	e000      	b.n	8003c46 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003c44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3728      	adds	r7, #40	; 0x28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c70:	b2db      	uxtb	r3, r3
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c8e:	e04c      	b.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c96:	d048      	beq.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c98:	f7fc fb1c 	bl	80002d4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d902      	bls.n	8003cae <SPI_WaitFlagStateUntilTimeout+0x30>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d13d      	bne.n	8003d2a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc6:	d111      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd0:	d004      	beq.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cda:	d107      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf4:	d10f      	bne.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e00f      	b.n	8003d4a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4013      	ands	r3, r2
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	bf0c      	ite	eq
 8003d3a:	2301      	moveq	r3, #1
 8003d3c:	2300      	movne	r3, #0
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1a3      	bne.n	8003c90 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d60:	e057      	b.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d68:	d106      	bne.n	8003d78 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d7e:	d048      	beq.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d80:	f7fc faa8 	bl	80002d4 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d902      	bls.n	8003d96 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d13d      	bne.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003da4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dae:	d111      	bne.n	8003dd4 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db8:	d004      	beq.n	8003dc4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	d107      	bne.n	8003dd4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d10f      	bne.n	8003dfe <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e008      	b.n	8003e24 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d19f      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff ff84 	bl	8003d52 <SPI_WaitFifoStateUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e027      	b.n	8003eb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2200      	movs	r2, #0
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff ff07 	bl	8003c7e <SPI_WaitFlagStateUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e014      	b.n	8003eb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff ff5d 	bl	8003d52 <SPI_WaitFifoStateUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea2:	f043 0220 	orr.w	r2, r3, #32
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e000      	b.n	8003eb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e01d      	b.n	8003f06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f005 fdf2 	bl	8009ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f000 fa5e 	bl	80043b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <HAL_TIM_Base_Start+0x50>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d00b      	beq.n	8003f4a <HAL_TIM_Base_Start+0x3a>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d007      	beq.n	8003f4a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	00010007 	.word	0x00010007

08003f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <HAL_TIM_Base_Start_IT+0x50>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_TIM_Base_Start_IT+0x42>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d007      	beq.n	8003fa6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	00010007 	.word	0x00010007

08003fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0202 	mvn.w	r2, #2
 8003fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f9be 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f9b0 	bl	8004368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f9c1 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d122      	bne.n	8004068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d11b      	bne.n	8004068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0204 	mvn.w	r2, #4
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f994 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f986 	bl	8004368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f997 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b08      	cmp	r3, #8
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b08      	cmp	r3, #8
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0208 	mvn.w	r2, #8
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2204      	movs	r2, #4
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f96a 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f95c 	bl	8004368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f96d 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d122      	bne.n	8004110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d11b      	bne.n	8004110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0210 	mvn.w	r2, #16
 80040e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2208      	movs	r2, #8
 80040e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f940 	bl	800437c <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f932 	bl	8004368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f943 	bl	8004390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0201 	mvn.w	r2, #1
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f005 fb90 	bl	800985c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d10e      	bne.n	8004168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d107      	bne.n	8004168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fab2 	bl	80046cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004176:	d10e      	bne.n	8004196 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d107      	bne.n	8004196 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800418e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 faa5 	bl	80046e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d10e      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d107      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f8f1 	bl	80043a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d10e      	bne.n	80041ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d107      	bne.n	80041ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f06f 0220 	mvn.w	r2, #32
 80041e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fa65 	bl	80046b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_TIM_ConfigClockSource+0x18>
 800420a:	2302      	movs	r3, #2
 800420c:	e0a8      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x16a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004230:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004238:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d067      	beq.n	800431a <HAL_TIM_ConfigClockSource+0x124>
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d80b      	bhi.n	8004266 <HAL_TIM_ConfigClockSource+0x70>
 800424e:	2b10      	cmp	r3, #16
 8004250:	d073      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x144>
 8004252:	2b10      	cmp	r3, #16
 8004254:	d802      	bhi.n	800425c <HAL_TIM_ConfigClockSource+0x66>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d06f      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800425a:	e078      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800425c:	2b20      	cmp	r3, #32
 800425e:	d06c      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x144>
 8004260:	2b30      	cmp	r3, #48	; 0x30
 8004262:	d06a      	beq.n	800433a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004264:	e073      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004266:	2b70      	cmp	r3, #112	; 0x70
 8004268:	d00d      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x90>
 800426a:	2b70      	cmp	r3, #112	; 0x70
 800426c:	d804      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x82>
 800426e:	2b50      	cmp	r3, #80	; 0x50
 8004270:	d033      	beq.n	80042da <HAL_TIM_ConfigClockSource+0xe4>
 8004272:	2b60      	cmp	r3, #96	; 0x60
 8004274:	d041      	beq.n	80042fa <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004276:	e06a      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d066      	beq.n	800434c <HAL_TIM_ConfigClockSource+0x156>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	d017      	beq.n	80042b4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004284:	e063      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f000 f981 	bl	800459c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
      break;
 80042b2:	e04c      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6818      	ldr	r0, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6899      	ldr	r1, [r3, #8]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f000 f96a 	bl	800459c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d6:	609a      	str	r2, [r3, #8]
      break;
 80042d8:	e039      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f000 f8de 	bl	80044a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2150      	movs	r1, #80	; 0x50
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f937 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 80042f8:	e029      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6859      	ldr	r1, [r3, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	461a      	mov	r2, r3
 8004308:	f000 f8fd 	bl	8004506 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2160      	movs	r1, #96	; 0x60
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f927 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8004318:	e019      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	f000 f8be 	bl	80044a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2140      	movs	r1, #64	; 0x40
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f917 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 8004338:	e009      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f000 f90e 	bl	8004566 <TIM_ITRx_SetConfig>
      break;
 800434a:	e000      	b.n	800434e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800434c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a32      	ldr	r2, [pc, #200]	; (8004494 <TIM_Base_SetConfig+0xdc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x28>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x28>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <TIM_Base_SetConfig+0xe0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a27      	ldr	r2, [pc, #156]	; (8004494 <TIM_Base_SetConfig+0xdc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <TIM_Base_SetConfig+0x6a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d00f      	beq.n	8004422 <TIM_Base_SetConfig+0x6a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a24      	ldr	r2, [pc, #144]	; (8004498 <TIM_Base_SetConfig+0xe0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00b      	beq.n	8004422 <TIM_Base_SetConfig+0x6a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a23      	ldr	r2, [pc, #140]	; (800449c <TIM_Base_SetConfig+0xe4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <TIM_Base_SetConfig+0x6a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <TIM_Base_SetConfig+0xe8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_Base_SetConfig+0x6a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a21      	ldr	r2, [pc, #132]	; (80044a4 <TIM_Base_SetConfig+0xec>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <TIM_Base_SetConfig+0xdc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_Base_SetConfig+0xc0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a0e      	ldr	r2, [pc, #56]	; (800449c <TIM_Base_SetConfig+0xe4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_Base_SetConfig+0xc0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a0d      	ldr	r2, [pc, #52]	; (80044a0 <TIM_Base_SetConfig+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_Base_SetConfig+0xc0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <TIM_Base_SetConfig+0xec>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d103      	bne.n	8004480 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	615a      	str	r2, [r3, #20]
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40012c00 	.word	0x40012c00
 8004498:	40000400 	.word	0x40000400
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800

080044a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 030a 	bic.w	r3, r3, #10
 80044e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004506:	b480      	push	{r7}
 8004508:	b087      	sub	sp, #28
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0210 	bic.w	r2, r3, #16
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	031b      	lsls	r3, r3, #12
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004566:	b480      	push	{r7}
 8004568:	b085      	sub	sp, #20
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	f043 0307 	orr.w	r3, r3, #7
 8004588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	021a      	lsls	r2, r3, #8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	431a      	orrs	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e054      	b.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a24      	ldr	r2, [pc, #144]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d108      	bne.n	8004630 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004624:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a17      	ldr	r2, [pc, #92]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d009      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a13      	ldr	r2, [pc, #76]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a11      	ldr	r2, [pc, #68]	; (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10c      	bne.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	4313      	orrs	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40014000 	.word	0x40014000

080046b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e040      	b.n	8004788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f005 f9f4 	bl	8009b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	; 0x24
 8004720:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fae6 	bl	8004d04 <UART_SetConfig>
 8004738:	4603      	mov	r3, r0
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e022      	b.n	8004788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fc5c 	bl	8005008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fce3 	bl	800514c <UART_CheckIdleState>
 8004786:	4603      	mov	r3, r0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	f040 8081 	bne.w	80048ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_Transmit+0x26>
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e079      	b.n	80048ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Transmit+0x38>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e072      	b.n	80048ae <HAL_UART_Transmit+0x11e>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2221      	movs	r2, #33	; 0x21
 80047da:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80047dc:	f7fb fd7a 	bl	80002d4 <HAL_GetTick>
 80047e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	88fa      	ldrh	r2, [r7, #6]
 80047ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	d108      	bne.n	800480e <HAL_UART_Transmit+0x7e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e003      	b.n	8004816 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004816:	e02d      	b.n	8004874 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2200      	movs	r2, #0
 8004820:	2180      	movs	r1, #128	; 0x80
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fcd7 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e03d      	b.n	80048ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	881a      	ldrh	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004844:	b292      	uxth	r2, r2
 8004846:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	3302      	adds	r3, #2
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	e008      	b.n	8004862 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	b292      	uxth	r2, r2
 800485a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	3301      	adds	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1cb      	bne.n	8004818 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2200      	movs	r2, #0
 8004888:	2140      	movs	r1, #64	; 0x40
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fca3 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e009      	b.n	80048ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b08a      	sub	sp, #40	; 0x28
 80048ba:	af02      	add	r7, sp, #8
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	f040 80bb 	bne.w	8004a46 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_UART_Receive+0x26>
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0b3      	b.n	8004a48 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_UART_Receive+0x38>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0ac      	b.n	8004a48 <HAL_UART_Receive+0x192>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2222      	movs	r2, #34	; 0x22
 8004900:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004902:	f7fb fce7 	bl	80002d4 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	88fa      	ldrh	r2, [r7, #6]
 800490c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	88fa      	ldrh	r2, [r7, #6]
 8004914:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d10e      	bne.n	8004940 <HAL_UART_Receive+0x8a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <HAL_UART_Receive+0x80>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004930:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004934:	e02d      	b.n	8004992 <HAL_UART_Receive+0xdc>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800493e:	e028      	b.n	8004992 <HAL_UART_Receive+0xdc>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10d      	bne.n	8004964 <HAL_UART_Receive+0xae>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_UART_Receive+0xa4>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	22ff      	movs	r2, #255	; 0xff
 8004954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004958:	e01b      	b.n	8004992 <HAL_UART_Receive+0xdc>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	227f      	movs	r2, #127	; 0x7f
 800495e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004962:	e016      	b.n	8004992 <HAL_UART_Receive+0xdc>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800496c:	d10d      	bne.n	800498a <HAL_UART_Receive+0xd4>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <HAL_UART_Receive+0xca>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	227f      	movs	r2, #127	; 0x7f
 800497a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800497e:	e008      	b.n	8004992 <HAL_UART_Receive+0xdc>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	223f      	movs	r2, #63	; 0x3f
 8004984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004988:	e003      	b.n	8004992 <HAL_UART_Receive+0xdc>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004998:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d108      	bne.n	80049b6 <HAL_UART_Receive+0x100>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	e003      	b.n	80049be <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80049be:	e033      	b.n	8004a28 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2200      	movs	r2, #0
 80049c8:	2120      	movs	r1, #32
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fc03 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e036      	b.n	8004a48 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10c      	bne.n	80049fa <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	8a7b      	ldrh	r3, [r7, #18]
 80049ea:	4013      	ands	r3, r2
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	3302      	adds	r3, #2
 80049f6:	61bb      	str	r3, [r7, #24]
 80049f8:	e00d      	b.n	8004a16 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	8a7b      	ldrh	r3, [r7, #18]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	3301      	adds	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1c5      	bne.n	80049c0 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d113      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00e      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d009      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8114 	beq.w	8004cc6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	4798      	blx	r3
      }
      return;
 8004aa6:	e10e      	b.n	8004cc6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 80d6 	beq.w	8004c5c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80cb 	beq.w	8004c5c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00e      	beq.n	8004aee <HAL_UART_IRQHandler+0x9e>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae6:	f043 0201 	orr.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00e      	beq.n	8004b16 <HAL_UART_IRQHandler+0xc6>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2202      	movs	r2, #2
 8004b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00e      	beq.n	8004b3e <HAL_UART_IRQHandler+0xee>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b36:	f043 0202 	orr.w	r2, r3, #2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d013      	beq.n	8004b70 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d104      	bne.n	8004b5c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d009      	beq.n	8004b70 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2208      	movs	r2, #8
 8004b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b68:	f043 0208 	orr.w	r2, r3, #8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00f      	beq.n	8004b9a <HAL_UART_IRQHandler+0x14a>
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8093 	beq.w	8004cca <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00c      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bcc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d004      	beq.n	8004be6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d031      	beq.n	8004c4a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fb70 	bl	80052cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d123      	bne.n	8004c42 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c08:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d013      	beq.n	8004c3a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c16:	4a30      	ldr	r2, [pc, #192]	; (8004cd8 <HAL_UART_IRQHandler+0x288>)
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fc fa29 	bl	8001076 <HAL_DMA_Abort_IT>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004c34:	4610      	mov	r0, r2
 8004c36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	e00e      	b.n	8004c58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f858 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	e00a      	b.n	8004c58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f854 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c48:	e006      	b.n	8004c58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f850 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004c56:	e038      	b.n	8004cca <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	bf00      	nop
    return;
 8004c5a:	e036      	b.n	8004cca <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <HAL_UART_IRQHandler+0x232>
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fb75 	bl	800536a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c80:	e026      	b.n	8004cd0 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d017      	beq.n	8004cce <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
    }
    return;
 8004ca6:	e012      	b.n	8004cce <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x280>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fb3b 	bl	8005338 <UART_EndTransmit_IT>
    return;
 8004cc2:	bf00      	nop
 8004cc4:	e004      	b.n	8004cd0 <HAL_UART_IRQHandler+0x280>
      return;
 8004cc6:	bf00      	nop
 8004cc8:	e002      	b.n	8004cd0 <HAL_UART_IRQHandler+0x280>
    return;
 8004cca:	bf00      	nop
 8004ccc:	e000      	b.n	8004cd0 <HAL_UART_IRQHandler+0x280>
    return;
 8004cce:	bf00      	nop
  }

}
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	0800530d 	.word	0x0800530d

08004cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4ba2      	ldr	r3, [pc, #648]	; (8004fbc <UART_SetConfig+0x2b8>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	6939      	ldr	r1, [r7, #16]
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a90      	ldr	r2, [pc, #576]	; (8004fc0 <UART_SetConfig+0x2bc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d121      	bne.n	8004dc8 <UART_SetConfig+0xc4>
 8004d84:	4b8f      	ldr	r3, [pc, #572]	; (8004fc4 <UART_SetConfig+0x2c0>)
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d817      	bhi.n	8004dc0 <UART_SetConfig+0xbc>
 8004d90:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <UART_SetConfig+0x94>)
 8004d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d96:	bf00      	nop
 8004d98:	08004da9 	.word	0x08004da9
 8004d9c:	08004db5 	.word	0x08004db5
 8004da0:	08004dbb 	.word	0x08004dbb
 8004da4:	08004daf 	.word	0x08004daf
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e01e      	b.n	8004dec <UART_SetConfig+0xe8>
 8004dae:	2302      	movs	r3, #2
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e01b      	b.n	8004dec <UART_SetConfig+0xe8>
 8004db4:	2304      	movs	r3, #4
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e018      	b.n	8004dec <UART_SetConfig+0xe8>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e015      	b.n	8004dec <UART_SetConfig+0xe8>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	bf00      	nop
 8004dc6:	e011      	b.n	8004dec <UART_SetConfig+0xe8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a7e      	ldr	r2, [pc, #504]	; (8004fc8 <UART_SetConfig+0x2c4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d102      	bne.n	8004dd8 <UART_SetConfig+0xd4>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e009      	b.n	8004dec <UART_SetConfig+0xe8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a7b      	ldr	r2, [pc, #492]	; (8004fcc <UART_SetConfig+0x2c8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d102      	bne.n	8004de8 <UART_SetConfig+0xe4>
 8004de2:	2300      	movs	r3, #0
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e001      	b.n	8004dec <UART_SetConfig+0xe8>
 8004de8:	2310      	movs	r3, #16
 8004dea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df4:	f040 8082 	bne.w	8004efc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004df8:	7ffb      	ldrb	r3, [r7, #31]
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d85e      	bhi.n	8004ebc <UART_SetConfig+0x1b8>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0x100>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e49 	.word	0x08004e49
 8004e0c:	08004e69 	.word	0x08004e69
 8004e10:	08004ebd 	.word	0x08004ebd
 8004e14:	08004e85 	.word	0x08004e85
 8004e18:	08004ebd 	.word	0x08004ebd
 8004e1c:	08004ebd 	.word	0x08004ebd
 8004e20:	08004ebd 	.word	0x08004ebd
 8004e24:	08004ea5 	.word	0x08004ea5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fd fcc2 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	005a      	lsls	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	441a      	add	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	61bb      	str	r3, [r7, #24]
        break;
 8004e46:	e03c      	b.n	8004ec2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7fd fcd4 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8004e4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	005a      	lsls	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	441a      	add	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	61bb      	str	r3, [r7, #24]
        break;
 8004e66:	e02c      	b.n	8004ec2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004e72:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6852      	ldr	r2, [r2, #4]
 8004e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	61bb      	str	r3, [r7, #24]
        break;
 8004e82:	e01e      	b.n	8004ec2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e84:	f7fd fc1e 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8004e88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	005a      	lsls	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	61bb      	str	r3, [r7, #24]
        break;
 8004ea2:	e00e      	b.n	8004ec2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	61bb      	str	r3, [r7, #24]
        break;
 8004eba:	e002      	b.n	8004ec2 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
        break;
 8004ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	d916      	bls.n	8004ef6 <UART_SetConfig+0x1f2>
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ece:	d212      	bcs.n	8004ef6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f023 030f 	bic.w	r3, r3, #15
 8004ed8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	085b      	lsrs	r3, r3, #1
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	897a      	ldrh	r2, [r7, #10]
 8004ef2:	60da      	str	r2, [r3, #12]
 8004ef4:	e07d      	b.n	8004ff2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
 8004efa:	e07a      	b.n	8004ff2 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8004efc:	7ffb      	ldrb	r3, [r7, #31]
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d866      	bhi.n	8004fd0 <UART_SetConfig+0x2cc>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x204>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004fd1 	.word	0x08004fd1
 8004f18:	08004f85 	.word	0x08004f85
 8004f1c:	08004fd1 	.word	0x08004fd1
 8004f20:	08004fd1 	.word	0x08004fd1
 8004f24:	08004fd1 	.word	0x08004fd1
 8004f28:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f2c:	f7fd fc40 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8004f30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	085a      	lsrs	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	441a      	add	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	61bb      	str	r3, [r7, #24]
        break;
 8004f48:	e045      	b.n	8004fd6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f4a:	f7fd fc53 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8004f4e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	085a      	lsrs	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	61bb      	str	r3, [r7, #24]
        break;
 8004f66:	e036      	b.n	8004fd6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004f72:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6852      	ldr	r2, [r2, #4]
 8004f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	61bb      	str	r3, [r7, #24]
        break;
 8004f82:	e028      	b.n	8004fd6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f84:	f7fd fb9e 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8004f88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	085a      	lsrs	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	441a      	add	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	61bb      	str	r3, [r7, #24]
        break;
 8004fa0:	e019      	b.n	8004fd6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	61bb      	str	r3, [r7, #24]
        break;
 8004fb8:	e00d      	b.n	8004fd6 <UART_SetConfig+0x2d2>
 8004fba:	bf00      	nop
 8004fbc:	efff69f3 	.word	0xefff69f3
 8004fc0:	40013800 	.word	0x40013800
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	75fb      	strb	r3, [r7, #23]
        break;
 8004fd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	d908      	bls.n	8004fee <UART_SetConfig+0x2ea>
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe2:	d204      	bcs.n	8004fee <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	60da      	str	r2, [r3, #12]
 8004fec:	e001      	b.n	8004ff2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005106:	d10a      	bne.n	800511e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800515a:	f7fb f8bb 	bl	80002d4 <HAL_GetTick>
 800515e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b08      	cmp	r3, #8
 800516c:	d10e      	bne.n	800518c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f82a 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e020      	b.n	80051ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b04      	cmp	r3, #4
 8005198:	d10e      	bne.n	80051b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f814 	bl	80051d6 <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e00a      	b.n	80051ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e6:	e05d      	b.n	80052a4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ee:	d059      	beq.n	80052a4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f0:	f7fb f870 	bl	80002d4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d302      	bcc.n	8005206 <UART_WaitOnFlagUntilTimeout+0x30>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11b      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005214:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e042      	b.n	80052c4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d02b      	beq.n	80052a4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525a:	d123      	bne.n	80052a4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005264:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005274:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e00f      	b.n	80052c4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d092      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f7ff fce0 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800534e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fcbd 	bl	8004cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	4a08      	ldr	r2, [pc, #32]	; (80053b0 <disk_status+0x30>)
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	79fa      	ldrb	r2, [r7, #7]
 8005398:	4905      	ldr	r1, [pc, #20]	; (80053b0 <disk_status+0x30>)
 800539a:	440a      	add	r2, r1
 800539c:	7a12      	ldrb	r2, [r2, #8]
 800539e:	4610      	mov	r0, r2
 80053a0:	4798      	blx	r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000234 	.word	0x20000234

080053b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <disk_initialize+0x48>)
 80053c6:	5cd3      	ldrb	r3, [r2, r3]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d111      	bne.n	80053f0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	4a0b      	ldr	r2, [pc, #44]	; (80053fc <disk_initialize+0x48>)
 80053d0:	2101      	movs	r1, #1
 80053d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	4a09      	ldr	r2, [pc, #36]	; (80053fc <disk_initialize+0x48>)
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	79fa      	ldrb	r2, [r7, #7]
 80053e2:	4906      	ldr	r1, [pc, #24]	; (80053fc <disk_initialize+0x48>)
 80053e4:	440a      	add	r2, r1
 80053e6:	7a12      	ldrb	r2, [r2, #8]
 80053e8:	4610      	mov	r0, r2
 80053ea:	4798      	blx	r3
 80053ec:	4603      	mov	r3, r0
 80053ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000234 	.word	0x20000234

08005400 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4603      	mov	r3, r0
 800540e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	4a0a      	ldr	r2, [pc, #40]	; (800543c <disk_read+0x3c>)
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	689c      	ldr	r4, [r3, #8]
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	4a07      	ldr	r2, [pc, #28]	; (800543c <disk_read+0x3c>)
 8005420:	4413      	add	r3, r2
 8005422:	7a18      	ldrb	r0, [r3, #8]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	47a0      	blx	r4
 800542c:	4603      	mov	r3, r0
 800542e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005430:	7dfb      	ldrb	r3, [r7, #23]
}
 8005432:	4618      	mov	r0, r3
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd90      	pop	{r4, r7, pc}
 800543a:	bf00      	nop
 800543c:	20000234 	.word	0x20000234

08005440 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	4a0a      	ldr	r2, [pc, #40]	; (800547c <disk_write+0x3c>)
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68dc      	ldr	r4, [r3, #12]
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	4a07      	ldr	r2, [pc, #28]	; (800547c <disk_write+0x3c>)
 8005460:	4413      	add	r3, r2
 8005462:	7a18      	ldrb	r0, [r3, #8]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	47a0      	blx	r4
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
}
 8005472:	4618      	mov	r0, r3
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd90      	pop	{r4, r7, pc}
 800547a:	bf00      	nop
 800547c:	20000234 	.word	0x20000234

08005480 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	603a      	str	r2, [r7, #0]
 800548a:	71fb      	strb	r3, [r7, #7]
 800548c:	460b      	mov	r3, r1
 800548e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <disk_ioctl+0x38>)
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	79fa      	ldrb	r2, [r7, #7]
 800549e:	4906      	ldr	r1, [pc, #24]	; (80054b8 <disk_ioctl+0x38>)
 80054a0:	440a      	add	r2, r1
 80054a2:	7a10      	ldrb	r0, [r2, #8]
 80054a4:	79b9      	ldrb	r1, [r7, #6]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	4798      	blx	r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000234 	.word	0x20000234

080054bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80054d0:	e007      	b.n	80054e2 <mem_cpy+0x26>
		*d++ = *s++;
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	1c53      	adds	r3, r2, #1
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	1c59      	adds	r1, r3, #1
 80054dc:	6179      	str	r1, [r7, #20]
 80054de:	7812      	ldrb	r2, [r2, #0]
 80054e0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	1e5a      	subs	r2, r3, #1
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f2      	bne.n	80054d2 <mem_cpy+0x16>
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005508:	e005      	b.n	8005516 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	617a      	str	r2, [r7, #20]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	1e5a      	subs	r2, r3, #1
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f4      	bne.n	800550a <mem_set+0x12>
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005544:	bf00      	nop
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	1e5a      	subs	r2, r3, #1
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00d      	beq.n	800556c <mem_cmp+0x40>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	61fa      	str	r2, [r7, #28]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	4619      	mov	r1, r3
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	61ba      	str	r2, [r7, #24]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	1acb      	subs	r3, r1, r3
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0ec      	beq.n	8005546 <mem_cmp+0x1a>
	return r;
 800556c:	697b      	ldr	r3, [r7, #20]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005584:	e002      	b.n	800558c <chk_chr+0x12>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3301      	adds	r3, #1
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <chk_chr+0x26>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	4293      	cmp	r3, r2
 800559e:	d1f2      	bne.n	8005586 <chk_chr+0xc>
	return *str;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	781b      	ldrb	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80055ba:	2300      	movs	r3, #0
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e038      	b.n	8005636 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80055c4:	4930      	ldr	r1, [pc, #192]	; (8005688 <chk_lock+0xd8>)
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d029      	beq.n	800562c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80055d8:	492b      	ldr	r1, [pc, #172]	; (8005688 <chk_lock+0xd8>)
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4613      	mov	r3, r2
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d11e      	bne.n	8005630 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80055f2:	4925      	ldr	r1, [pc, #148]	; (8005688 <chk_lock+0xd8>)
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	3304      	adds	r3, #4
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800560a:	429a      	cmp	r2, r3
 800560c:	d110      	bne.n	8005630 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800560e:	491e      	ldr	r1, [pc, #120]	; (8005688 <chk_lock+0xd8>)
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	3308      	adds	r3, #8
 800561e:	881a      	ldrh	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005626:	429a      	cmp	r2, r3
 8005628:	d102      	bne.n	8005630 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800562a:	e007      	b.n	800563c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800562c:	2301      	movs	r3, #1
 800562e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d9c3      	bls.n	80055c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d109      	bne.n	8005656 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <chk_lock+0x9e>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d101      	bne.n	8005652 <chk_lock+0xa2>
 800564e:	2300      	movs	r3, #0
 8005650:	e013      	b.n	800567a <chk_lock+0xca>
 8005652:	2312      	movs	r3, #18
 8005654:	e011      	b.n	800567a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <chk_lock+0xc4>
 800565c:	490a      	ldr	r1, [pc, #40]	; (8005688 <chk_lock+0xd8>)
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4613      	mov	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	330a      	adds	r3, #10
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005672:	d101      	bne.n	8005678 <chk_lock+0xc8>
 8005674:	2310      	movs	r3, #16
 8005676:	e000      	b.n	800567a <chk_lock+0xca>
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	2000021c 	.word	0x2000021c

0800568c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
 8005696:	e002      	b.n	800569e <enq_lock+0x12>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3301      	adds	r3, #1
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d809      	bhi.n	80056b8 <enq_lock+0x2c>
 80056a4:	490a      	ldr	r1, [pc, #40]	; (80056d0 <enq_lock+0x44>)
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1ef      	bne.n	8005698 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	bf14      	ite	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	2300      	moveq	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	2000021c 	.word	0x2000021c

080056d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e02b      	b.n	800573c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80056e4:	4956      	ldr	r1, [pc, #344]	; (8005840 <inc_lock+0x16c>)
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d11b      	bne.n	8005736 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80056fe:	4950      	ldr	r1, [pc, #320]	; (8005840 <inc_lock+0x16c>)
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	3304      	adds	r3, #4
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8005716:	429a      	cmp	r2, r3
 8005718:	d10d      	bne.n	8005736 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800571a:	4949      	ldr	r1, [pc, #292]	; (8005840 <inc_lock+0x16c>)
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4613      	mov	r3, r2
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	3308      	adds	r3, #8
 800572a:	881a      	ldrh	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8005732:	429a      	cmp	r2, r3
 8005734:	d006      	beq.n	8005744 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3301      	adds	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d9d0      	bls.n	80056e4 <inc_lock+0x10>
 8005742:	e000      	b.n	8005746 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8005744:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d145      	bne.n	80057d8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	e002      	b.n	8005758 <inc_lock+0x84>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3301      	adds	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d809      	bhi.n	8005772 <inc_lock+0x9e>
 800575e:	4938      	ldr	r1, [pc, #224]	; (8005840 <inc_lock+0x16c>)
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4613      	mov	r3, r2
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ef      	bne.n	8005752 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d101      	bne.n	800577c <inc_lock+0xa8>
 8005778:	2300      	movs	r3, #0
 800577a:	e05a      	b.n	8005832 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005782:	482f      	ldr	r0, [pc, #188]	; (8005840 <inc_lock+0x16c>)
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4403      	add	r3, r0
 8005790:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005798:	4829      	ldr	r0, [pc, #164]	; (8005840 <inc_lock+0x16c>)
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4403      	add	r3, r0
 80057a6:	3304      	adds	r3, #4
 80057a8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80057b0:	4923      	ldr	r1, [pc, #140]	; (8005840 <inc_lock+0x16c>)
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	3308      	adds	r3, #8
 80057c0:	4602      	mov	r2, r0
 80057c2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80057c4:	491e      	ldr	r1, [pc, #120]	; (8005840 <inc_lock+0x16c>)
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	330a      	adds	r3, #10
 80057d4:	2200      	movs	r2, #0
 80057d6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <inc_lock+0x124>
 80057de:	4918      	ldr	r1, [pc, #96]	; (8005840 <inc_lock+0x16c>)
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4613      	mov	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	330a      	adds	r3, #10
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <inc_lock+0x124>
 80057f4:	2300      	movs	r3, #0
 80057f6:	e01c      	b.n	8005832 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <inc_lock+0x142>
 80057fe:	4910      	ldr	r1, [pc, #64]	; (8005840 <inc_lock+0x16c>)
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	330a      	adds	r3, #10
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	b299      	uxth	r1, r3
 8005814:	e001      	b.n	800581a <inc_lock+0x146>
 8005816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800581a:	4809      	ldr	r0, [pc, #36]	; (8005840 <inc_lock+0x16c>)
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4613      	mov	r3, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4403      	add	r3, r0
 8005828:	330a      	adds	r3, #10
 800582a:	460a      	mov	r2, r1
 800582c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	2000021c 	.word	0x2000021c

08005844 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3b01      	subs	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d82e      	bhi.n	80058b6 <dec_lock+0x72>
		n = Files[i].ctr;
 8005858:	491b      	ldr	r1, [pc, #108]	; (80058c8 <dec_lock+0x84>)
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	330a      	adds	r3, #10
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800586c:	89fb      	ldrh	r3, [r7, #14]
 800586e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005872:	d101      	bne.n	8005878 <dec_lock+0x34>
 8005874:	2300      	movs	r3, #0
 8005876:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005878:	89fb      	ldrh	r3, [r7, #14]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <dec_lock+0x40>
 800587e:	89fb      	ldrh	r3, [r7, #14]
 8005880:	3b01      	subs	r3, #1
 8005882:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005884:	4910      	ldr	r1, [pc, #64]	; (80058c8 <dec_lock+0x84>)
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	330a      	adds	r3, #10
 8005894:	89fa      	ldrh	r2, [r7, #14]
 8005896:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005898:	89fb      	ldrh	r3, [r7, #14]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d108      	bne.n	80058b0 <dec_lock+0x6c>
 800589e:	490a      	ldr	r1, [pc, #40]	; (80058c8 <dec_lock+0x84>)
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	440b      	add	r3, r1
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	737b      	strb	r3, [r7, #13]
 80058b4:	e001      	b.n	80058ba <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80058b6:	2302      	movs	r3, #2
 80058b8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80058ba:	7b7b      	ldrb	r3, [r7, #13]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	2000021c 	.word	0x2000021c

080058cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e016      	b.n	8005908 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80058da:	4910      	ldr	r1, [pc, #64]	; (800591c <clear_lock+0x50>)
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d108      	bne.n	8005902 <clear_lock+0x36>
 80058f0:	490a      	ldr	r1, [pc, #40]	; (800591c <clear_lock+0x50>)
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4613      	mov	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d9e5      	bls.n	80058da <clear_lock+0xe>
	}
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	2000021c 	.word	0x2000021c

08005920 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005932:	2b00      	cmp	r3, #0
 8005934:	d038      	beq.n	80059a8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800593c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	2301      	movs	r3, #1
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	f7ff fd79 	bl	8005440 <disk_write>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
 8005958:	e026      	b.n	80059a8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005972:	429a      	cmp	r2, r3
 8005974:	d218      	bcs.n	80059a8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	e010      	b.n	80059a2 <sync_window+0x82>
					wsect += fs->fsize;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4413      	add	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	2301      	movs	r3, #1
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	f7ff fd52 	bl	8005440 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3b01      	subs	r3, #1
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d8eb      	bhi.n	8005980 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d01b      	beq.n	8005a04 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ffa7 	bl	8005920 <sync_window>
 80059d2:	4603      	mov	r3, r0
 80059d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d113      	bne.n	8005a04 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	2301      	movs	r3, #1
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	f7ff fd0a 	bl	8005400 <disk_read>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff ff82 	bl	8005920 <sync_window>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f040 809b 	bne.w	8005b5e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	f040 8088 	bne.w	8005b44 <sync_fs+0x136>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	f040 8082 	bne.w	8005b44 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a46:	2100      	movs	r1, #0
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fd55 	bl	80054f8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2255      	movs	r2, #85	; 0x55
 8005a52:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	22aa      	movs	r2, #170	; 0xaa
 8005a5a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2252      	movs	r2, #82	; 0x52
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2252      	movs	r2, #82	; 0x52
 8005a68:	705a      	strb	r2, [r3, #1]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2261      	movs	r2, #97	; 0x61
 8005a6e:	709a      	strb	r2, [r3, #2]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2241      	movs	r2, #65	; 0x41
 8005a74:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2272      	movs	r2, #114	; 0x72
 8005a7a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2272      	movs	r2, #114	; 0x72
 8005a82:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2241      	movs	r2, #65	; 0x41
 8005a8a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2261      	movs	r2, #97	; 0x61
 8005a92:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	0a1b      	lsrs	r3, r3, #8
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005abe:	0c1b      	lsrs	r3, r3, #16
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ace:	0e1b      	lsrs	r3, r3, #24
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005b10:	0e1b      	lsrs	r3, r3, #24
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005b36:	2301      	movs	r3, #1
 8005b38:	f7ff fc82 	bl	8005440 <disk_write>
			fs->fsi_flag = 0;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff fc96 	bl	8005480 <disk_ioctl>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	3b02      	subs	r3, #2
 8005b76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b7e:	3b02      	subs	r3, #2
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d301      	bcc.n	8005b8a <clust2sect+0x22>
 8005b86:	2300      	movs	r3, #0
 8005b88:	e00a      	b.n	8005ba0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b90:	461a      	mov	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	fb03 f202 	mul.w	r2, r3, r2
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005b9e:	4413      	add	r3, r2
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d905      	bls.n	8005bc8 <get_fat+0x1c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d302      	bcc.n	8005bce <get_fat+0x22>
		val = 1;	/* Internal error */
 8005bc8:	2301      	movs	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e0a0      	b.n	8005d10 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bd2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d044      	beq.n	8005c68 <get_fat+0xbc>
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d063      	beq.n	8005caa <get_fat+0xfe>
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	f040 808a 	bne.w	8005cfc <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	0a5b      	lsrs	r3, r3, #9
 8005c00:	4413      	add	r3, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fed4 	bl	80059b2 <move_window>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d178      	bne.n	8005d02 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	60fa      	str	r2, [r7, #12]
 8005c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	5cd3      	ldrb	r3, [r2, r3]
 8005c1e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	0a5b      	lsrs	r3, r3, #9
 8005c2a:	4413      	add	r3, r2
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff febf 	bl	80059b2 <move_window>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d165      	bne.n	8005d06 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	5cd3      	ldrb	r3, [r2, r3]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	461a      	mov	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <get_fat+0xb2>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	e002      	b.n	8005c64 <get_fat+0xb8>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c64:	617b      	str	r3, [r7, #20]
			break;
 8005c66:	e053      	b.n	8005d10 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	4413      	add	r3, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff fe9b 	bl	80059b2 <move_window>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d143      	bne.n	8005d0a <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	3301      	adds	r3, #1
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	b21a      	sxth	r2, r3
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	b21b      	sxth	r3, r3
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	617b      	str	r3, [r7, #20]
			break;
 8005ca8:	e032      	b.n	8005d10 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	09db      	lsrs	r3, r3, #7
 8005cb4:	4413      	add	r3, r2
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fe7a 	bl	80059b2 <move_window>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d124      	bne.n	8005d0e <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4413      	add	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3303      	adds	r3, #3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	061a      	lsls	r2, r3, #24
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3302      	adds	r3, #2
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	7812      	ldrb	r2, [r2, #0]
 8005cea:	0212      	lsls	r2, r2, #8
 8005cec:	4313      	orrs	r3, r2
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cf8:	617b      	str	r3, [r7, #20]
			break;
 8005cfa:	e009      	b.n	8005d10 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	e006      	b.n	8005d10 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d02:	bf00      	nop
 8005d04:	e004      	b.n	8005d10 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d06:	bf00      	nop
 8005d08:	e002      	b.n	8005d10 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d0e:	bf00      	nop
		}
	}

	return val;
 8005d10:	697b      	ldr	r3, [r7, #20]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b088      	sub	sp, #32
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d905      	bls.n	8005d38 <put_fat+0x1e>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <put_fat+0x24>
		res = FR_INT_ERR;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e0f3      	b.n	8005f26 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d074      	beq.n	8005e32 <put_fat+0x118>
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	f000 8099 	beq.w	8005e80 <put_fat+0x166>
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	f040 80df 	bne.w	8005f12 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	0a5b      	lsrs	r3, r3, #9
 8005d6c:	4413      	add	r3, r2
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff fe1e 	bl	80059b2 <move_window>
 8005d76:	4603      	mov	r3, r0
 8005d78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d7a:	7ffb      	ldrb	r3, [r7, #31]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f040 80cb 	bne.w	8005f18 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	617a      	str	r2, [r7, #20]
 8005d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00d      	beq.n	8005db8 <put_fat+0x9e>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b25b      	sxtb	r3, r3
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	b25a      	sxtb	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	b25b      	sxtb	r3, r3
 8005db0:	4313      	orrs	r3, r2
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e001      	b.n	8005dbc <put_fat+0xa2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	0a5b      	lsrs	r3, r3, #9
 8005dd2:	4413      	add	r3, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff fdeb 	bl	80059b2 <move_window>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005de0:	7ffb      	ldrb	r3, [r7, #31]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 809a 	bne.w	8005f1c <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <put_fat+0xec>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	e00e      	b.n	8005e24 <put_fat+0x10a>
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	b25b      	sxtb	r3, r3
 8005e0c:	f023 030f 	bic.w	r3, r3, #15
 8005e10:	b25a      	sxtb	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0a1b      	lsrs	r3, r3, #8
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b25b      	sxtb	r3, r3
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005e30:	e079      	b.n	8005f26 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	0a1b      	lsrs	r3, r3, #8
 8005e3c:	4413      	add	r3, r2
 8005e3e:	4619      	mov	r1, r3
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff fdb6 	bl	80059b2 <move_window>
 8005e46:	4603      	mov	r3, r0
 8005e48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e4a:	7ffb      	ldrb	r3, [r7, #31]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d167      	bne.n	8005f20 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	3301      	adds	r3, #1
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005e7e:	e052      	b.n	8005f26 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	09db      	lsrs	r3, r3, #7
 8005e8a:	4413      	add	r3, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff fd8f 	bl	80059b2 <move_window>
 8005e94:	4603      	mov	r3, r0
 8005e96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e98:	7ffb      	ldrb	r3, [r7, #31]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d142      	bne.n	8005f24 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	3303      	adds	r3, #3
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	061a      	lsls	r2, r3, #24
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	3201      	adds	r2, #1
 8005ec2:	7812      	ldrb	r2, [r2, #0]
 8005ec4:	0212      	lsls	r2, r2, #8
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	3301      	adds	r3, #1
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0c1a      	lsrs	r2, r3, #16
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0e1a      	lsrs	r2, r3, #24
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	3303      	adds	r3, #3
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005f10:	e009      	b.n	8005f26 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8005f12:	2302      	movs	r3, #2
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e006      	b.n	8005f26 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005f18:	bf00      	nop
 8005f1a:	e004      	b.n	8005f26 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005f1c:	bf00      	nop
 8005f1e:	e002      	b.n	8005f26 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005f20:	bf00      	nop
 8005f22:	e000      	b.n	8005f26 <put_fat+0x20c>
			if (res != FR_OK) break;
 8005f24:	bf00      	nop
		}
	}

	return res;
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3720      	adds	r7, #32
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d905      	bls.n	8005f4c <remove_chain+0x1c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <remove_chain+0x22>
		res = FR_INT_ERR;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	73fb      	strb	r3, [r7, #15]
 8005f50:	e043      	b.n	8005fda <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005f56:	e036      	b.n	8005fc6 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff fe26 	bl	8005bac <get_fat>
 8005f60:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d035      	beq.n	8005fd4 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d102      	bne.n	8005f74 <remove_chain+0x44>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	73fb      	strb	r3, [r7, #15]
 8005f72:	e032      	b.n	8005fda <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7a:	d102      	bne.n	8005f82 <remove_chain+0x52>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
 8005f80:	e02b      	b.n	8005fda <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005f82:	2200      	movs	r2, #0
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff fec7 	bl	8005d1a <put_fat>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d120      	bne.n	8005fd8 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa0:	d00f      	beq.n	8005fc2 <remove_chain+0x92>
				fs->free_clust++;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005fb6:	f043 0301 	orr.w	r3, r3, #1
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d3c2      	bcc.n	8005f58 <remove_chain+0x28>
 8005fd2:	e002      	b.n	8005fda <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005fd4:	bf00      	nop
 8005fd6:	e000      	b.n	8005fda <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005fd8:	bf00      	nop
		}
	}

	return res;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10f      	bne.n	8006014 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005ffa:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <create_chain+0x2a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	d31c      	bcc.n	8006048 <create_chain+0x64>
 800600e:	2301      	movs	r3, #1
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	e019      	b.n	8006048 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fdc8 	bl	8005bac <get_fat>
 800601c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d801      	bhi.n	8006028 <create_chain+0x44>
 8006024:	2301      	movs	r3, #1
 8006026:	e076      	b.n	8006116 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602e:	d101      	bne.n	8006034 <create_chain+0x50>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	e070      	b.n	8006116 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	429a      	cmp	r2, r3
 800603e:	d201      	bcs.n	8006044 <create_chain+0x60>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	e068      	b.n	8006116 <create_chain+0x132>
		scl = clst;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3301      	adds	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	429a      	cmp	r2, r3
 800605c:	d307      	bcc.n	800606e <create_chain+0x8a>
			ncl = 2;
 800605e:	2302      	movs	r3, #2
 8006060:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	429a      	cmp	r2, r3
 8006068:	d901      	bls.n	800606e <create_chain+0x8a>
 800606a:	2300      	movs	r3, #0
 800606c:	e053      	b.n	8006116 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800606e:	6979      	ldr	r1, [r7, #20]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff fd9b 	bl	8005bac <get_fat>
 8006076:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00e      	beq.n	800609c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006084:	d002      	beq.n	800608c <create_chain+0xa8>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <create_chain+0xac>
			return cs;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	e042      	b.n	8006116 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	429a      	cmp	r2, r3
 8006096:	d1d9      	bne.n	800604c <create_chain+0x68>
 8006098:	2300      	movs	r3, #0
 800609a:	e03c      	b.n	8006116 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800609c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800609e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fe38 	bl	8005d1a <put_fat>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d109      	bne.n	80060c8 <create_chain+0xe4>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d006      	beq.n	80060c8 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fe2b 	bl	8005d1a <put_fat>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d11a      	bne.n	8006104 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e0:	d018      	beq.n	8006114 <create_chain+0x130>
			fs->free_clust--;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060e8:	1e5a      	subs	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8006102:	e007      	b.n	8006114 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d102      	bne.n	8006110 <create_chain+0x12c>
 800610a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610e:	e000      	b.n	8006112 <create_chain+0x12e>
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006114:	697b      	ldr	r3, [r7, #20]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800611e:	b480      	push	{r7}
 8006120:	b087      	sub	sp, #28
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800612e:	3304      	adds	r3, #4
 8006130:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	0a5b      	lsrs	r3, r3, #9
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800613c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006140:	fbb3 f3f2 	udiv	r3, r3, r2
 8006144:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1d1a      	adds	r2, r3, #4
 800614a:	613a      	str	r2, [r7, #16]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <clmt_clust+0x3c>
 8006156:	2300      	movs	r3, #0
 8006158:	e010      	b.n	800617c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	429a      	cmp	r2, r3
 8006160:	d307      	bcc.n	8006172 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3304      	adds	r3, #4
 800616e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006170:	e7e9      	b.n	8006146 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006172:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4413      	add	r3, r2
}
 800617c:	4618      	mov	r0, r3
 800617e:	371c      	adds	r7, #28
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80061a2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d007      	beq.n	80061ba <dir_sdi+0x32>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d301      	bcc.n	80061be <dir_sdi+0x36>
		return FR_INT_ERR;
 80061ba:	2302      	movs	r3, #2
 80061bc:	e074      	b.n	80062a8 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10c      	bne.n	80061de <dir_sdi+0x56>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d105      	bne.n	80061de <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061d8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80061dc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d111      	bne.n	8006208 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80061ee:	461a      	mov	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d301      	bcc.n	80061fa <dir_sdi+0x72>
			return FR_INT_ERR;
 80061f6:	2302      	movs	r3, #2
 80061f8:	e056      	b.n	80062a8 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006200:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	e032      	b.n	800626e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800620e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006216:	e01e      	b.n	8006256 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800621e:	6979      	ldr	r1, [r7, #20]
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fcc3 	bl	8005bac <get_fat>
 8006226:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800622e:	d101      	bne.n	8006234 <dir_sdi+0xac>
 8006230:	2301      	movs	r3, #1
 8006232:	e039      	b.n	80062a8 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d907      	bls.n	800624a <dir_sdi+0xc2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006240:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	429a      	cmp	r2, r3
 8006248:	d301      	bcc.n	800624e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800624a:	2302      	movs	r3, #2
 800624c:	e02c      	b.n	80062a8 <dir_sdi+0x120>
			idx -= ic;
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	429a      	cmp	r2, r3
 800625c:	d2dc      	bcs.n	8006218 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006264:	6979      	ldr	r1, [r7, #20]
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fc7e 	bl	8005b68 <clust2sect>
 800626c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <dir_sdi+0xf8>
 800627c:	2302      	movs	r3, #2
 800627e:	e013      	b.n	80062a8 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	091a      	lsrs	r2, r3, #4
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	441a      	add	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006294:	461a      	mov	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	015b      	lsls	r3, r3, #5
 800629e:	441a      	add	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80062b0:	b590      	push	{r4, r7, lr}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80062c0:	3301      	adds	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d004      	beq.n	80062d6 <dir_next+0x26>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <dir_next+0x2a>
		return FR_NO_FILE;
 80062d6:	2304      	movs	r3, #4
 80062d8:	e0dd      	b.n	8006496 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 80c6 	bne.w	8006472 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10b      	bne.n	8006316 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006304:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006308:	461a      	mov	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4293      	cmp	r3, r2
 800630e:	f0c0 80b0 	bcc.w	8006472 <dir_next+0x1c2>
				return FR_NO_FILE;
 8006312:	2304      	movs	r3, #4
 8006314:	e0bf      	b.n	8006496 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006320:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006324:	3a01      	subs	r2, #1
 8006326:	4013      	ands	r3, r2
 8006328:	2b00      	cmp	r3, #0
 800632a:	f040 80a2 	bne.w	8006472 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7ff fc35 	bl	8005bac <get_fat>
 8006342:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d801      	bhi.n	800634e <dir_next+0x9e>
 800634a:	2302      	movs	r3, #2
 800634c:	e0a3      	b.n	8006496 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006354:	d101      	bne.n	800635a <dir_next+0xaa>
 8006356:	2301      	movs	r3, #1
 8006358:	e09d      	b.n	8006496 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006360:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d374      	bcc.n	8006454 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <dir_next+0xc4>
 8006370:	2304      	movs	r3, #4
 8006372:	e090      	b.n	8006496 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f7ff fe2e 	bl	8005fe4 <create_chain>
 8006388:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <dir_next+0xe4>
 8006390:	2307      	movs	r3, #7
 8006392:	e080      	b.n	8006496 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <dir_next+0xee>
 800639a:	2302      	movs	r3, #2
 800639c:	e07b      	b.n	8006496 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a4:	d101      	bne.n	80063aa <dir_next+0xfa>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e075      	b.n	8006496 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fab5 	bl	8005920 <sync_window>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <dir_next+0x110>
 80063bc:	2301      	movs	r3, #1
 80063be:	e06a      	b.n	8006496 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff f893 	bl	80054f8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80063de:	6979      	ldr	r1, [r7, #20]
 80063e0:	4610      	mov	r0, r2
 80063e2:	f7ff fbc1 	bl	8005b68 <clust2sect>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	e01b      	b.n	800642a <dir_next+0x17a>
						dp->fs->wflag = 1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fa8b 	bl	8005920 <sync_window>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <dir_next+0x164>
 8006410:	2301      	movs	r3, #1
 8006412:	e040      	b.n	8006496 <dir_next+0x1e6>
						dp->fs->winsect++;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800641a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800641e:	3201      	adds	r2, #1
 8006420:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	3301      	adds	r3, #1
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006430:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006434:	461a      	mov	r2, r3
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4293      	cmp	r3, r2
 800643a:	d3da      	bcc.n	80063f2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006442:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	1a8a      	subs	r2, r1, r2
 8006450:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006462:	6979      	ldr	r1, [r7, #20]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fb7f 	bl	8005b68 <clust2sect>
 800646a:	4602      	mov	r2, r0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	b29a      	uxth	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006482:	461a      	mov	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	015b      	lsls	r3, r3, #5
 800648c:	441a      	add	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	371c      	adds	r7, #28
 800649a:	46bd      	mov	sp, r7
 800649c:	bd90      	pop	{r4, r7, pc}

0800649e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80064a8:	2100      	movs	r1, #0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff fe6c 	bl	8006188 <dir_sdi>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d131      	bne.n	800651e <dir_alloc+0x80>
		n = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f7ff fa70 	bl	80059b2 <move_window>
 80064d2:	4603      	mov	r3, r0
 80064d4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11f      	bne.n	800651c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2be5      	cmp	r3, #229	; 0xe5
 80064e6:	d005      	beq.n	80064f4 <dir_alloc+0x56>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d102      	bne.n	8006508 <dir_alloc+0x6a>
 8006502:	e00c      	b.n	800651e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006504:	2300      	movs	r3, #0
 8006506:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006508:	2101      	movs	r1, #1
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fed0 	bl	80062b0 <dir_next>
 8006510:	4603      	mov	r3, r0
 8006512:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0d1      	beq.n	80064be <dir_alloc+0x20>
 800651a:	e000      	b.n	800651e <dir_alloc+0x80>
			if (res != FR_OK) break;
 800651c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b04      	cmp	r3, #4
 8006522:	d101      	bne.n	8006528 <dir_alloc+0x8a>
 8006524:	2307      	movs	r3, #7
 8006526:	73fb      	strb	r3, [r7, #15]
	return res;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	331b      	adds	r3, #27
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	b21a      	sxth	r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	331a      	adds	r3, #26
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	b21b      	sxth	r3, r3
 800654e:	4313      	orrs	r3, r2
 8006550:	b21b      	sxth	r3, r3
 8006552:	b29b      	uxth	r3, r3
 8006554:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800655c:	2b03      	cmp	r3, #3
 800655e:	d10f      	bne.n	8006580 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	3315      	adds	r3, #21
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	b21a      	sxth	r2, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	3314      	adds	r3, #20
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b21b      	sxth	r3, r3
 8006572:	4313      	orrs	r3, r2
 8006574:	b21b      	sxth	r3, r3
 8006576:	b29b      	uxth	r3, r3
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]

	return cl;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	331a      	adds	r3, #26
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	0a1b      	lsrs	r3, r3, #8
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	331b      	adds	r3, #27
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	0c1a      	lsrs	r2, r3, #16
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3314      	adds	r3, #20
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	0a1b      	lsrs	r3, r3, #8
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3315      	adds	r3, #21
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fdce 	bl	8006188 <dir_sdi>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <dir_find+0x1e>
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	e03b      	b.n	8006672 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f7ff f9d2 	bl	80059b2 <move_window>
 800660e:	4603      	mov	r3, r0
 8006610:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d128      	bne.n	800666a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800661e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <dir_find+0x56>
 800662c:	2304      	movs	r3, #4
 800662e:	75fb      	strb	r3, [r7, #23]
 8006630:	e01e      	b.n	8006670 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	330b      	adds	r3, #11
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <dir_find+0x7a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006646:	220b      	movs	r2, #11
 8006648:	4619      	mov	r1, r3
 800664a:	6938      	ldr	r0, [r7, #16]
 800664c:	f7fe ff6e 	bl	800552c <mem_cmp>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006656:	2100      	movs	r1, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fe29 	bl	80062b0 <dir_next>
 800665e:	4603      	mov	r3, r0
 8006660:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006662:	7dfb      	ldrb	r3, [r7, #23]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0c8      	beq.n	80065fa <dir_find+0x1e>
 8006668:	e002      	b.n	8006670 <dir_find+0x94>
		if (res != FR_OK) break;
 800666a:	bf00      	nop
 800666c:	e000      	b.n	8006670 <dir_find+0x94>
			break;
 800666e:	bf00      	nop

	return res;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006682:	2101      	movs	r1, #1
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff ff0a 	bl	800649e <dir_alloc>
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d126      	bne.n	80066e2 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	f7ff f985 	bl	80059b2 <move_window>
 80066a8:	4603      	mov	r3, r0
 80066aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d117      	bne.n	80066e2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066b8:	2220      	movs	r2, #32
 80066ba:	2100      	movs	r1, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fe ff1b 	bl	80054f8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80066ce:	220b      	movs	r2, #11
 80066d0:	4619      	mov	r1, r3
 80066d2:	f7fe fef3 	bl	80054bc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	3309      	adds	r3, #9
 80066fa:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006702:	2b00      	cmp	r3, #0
 8006704:	d05a      	beq.n	80067bc <get_fileinfo+0xd0>
		dir = dp->dir;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800670c:	60bb      	str	r3, [r7, #8]
		i = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8006712:	e01c      	b.n	800674e <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	617a      	str	r2, [r7, #20]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4413      	add	r3, r2
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b20      	cmp	r3, #32
 8006726:	d100      	bne.n	800672a <get_fileinfo+0x3e>
 8006728:	e011      	b.n	800674e <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2b05      	cmp	r3, #5
 800672e:	d101      	bne.n	8006734 <get_fileinfo+0x48>
 8006730:	23e5      	movs	r3, #229	; 0xe5
 8006732:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b09      	cmp	r3, #9
 8006738:	d104      	bne.n	8006744 <get_fileinfo+0x58>
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	613a      	str	r2, [r7, #16]
 8006740:	222e      	movs	r2, #46	; 0x2e
 8006742:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	613a      	str	r2, [r7, #16]
 800674a:	7bfa      	ldrb	r2, [r7, #15]
 800674c:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b0a      	cmp	r3, #10
 8006752:	d9df      	bls.n	8006714 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	7ada      	ldrb	r2, [r3, #11]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	331f      	adds	r3, #31
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	061a      	lsls	r2, r3, #24
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	331e      	adds	r3, #30
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	041b      	lsls	r3, r3, #16
 800676c:	4313      	orrs	r3, r2
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	321d      	adds	r2, #29
 8006772:	7812      	ldrb	r2, [r2, #0]
 8006774:	0212      	lsls	r2, r2, #8
 8006776:	4313      	orrs	r3, r2
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	321c      	adds	r2, #28
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	431a      	orrs	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	3319      	adds	r3, #25
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	b21a      	sxth	r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	3318      	adds	r3, #24
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	b21b      	sxth	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b21b      	sxth	r3, r3
 800679a:	b29a      	uxth	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	3317      	adds	r3, #23
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	b21a      	sxth	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	3316      	adds	r3, #22
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b21b      	sxth	r3, r3
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b21b      	sxth	r3, r3
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2200      	movs	r2, #0
 80067c0:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e002      	b.n	80067e8 <create_name+0x18>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b2f      	cmp	r3, #47	; 0x2f
 80067ee:	d0f8      	beq.n	80067e2 <create_name+0x12>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b5c      	cmp	r3, #92	; 0x5c
 80067f6:	d0f4      	beq.n	80067e2 <create_name+0x12>
	sfn = dp->fn;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80067fe:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006800:	220b      	movs	r2, #11
 8006802:	2120      	movs	r1, #32
 8006804:	68b8      	ldr	r0, [r7, #8]
 8006806:	f7fe fe77 	bl	80054f8 <mem_set>
	si = i = b = 0; ni = 8;
 800680a:	2300      	movs	r3, #0
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	2300      	movs	r3, #0
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	2308      	movs	r3, #8
 8006818:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	617a      	str	r2, [r7, #20]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006828:	7fbb      	ldrb	r3, [r7, #30]
 800682a:	2b20      	cmp	r3, #32
 800682c:	d953      	bls.n	80068d6 <create_name+0x106>
 800682e:	7fbb      	ldrb	r3, [r7, #30]
 8006830:	2b2f      	cmp	r3, #47	; 0x2f
 8006832:	d050      	beq.n	80068d6 <create_name+0x106>
 8006834:	7fbb      	ldrb	r3, [r7, #30]
 8006836:	2b5c      	cmp	r3, #92	; 0x5c
 8006838:	d04d      	beq.n	80068d6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800683a:	7fbb      	ldrb	r3, [r7, #30]
 800683c:	2b2e      	cmp	r3, #46	; 0x2e
 800683e:	d003      	beq.n	8006848 <create_name+0x78>
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	429a      	cmp	r2, r3
 8006846:	d30f      	bcc.n	8006868 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b08      	cmp	r3, #8
 800684c:	d102      	bne.n	8006854 <create_name+0x84>
 800684e:	7fbb      	ldrb	r3, [r7, #30]
 8006850:	2b2e      	cmp	r3, #46	; 0x2e
 8006852:	d001      	beq.n	8006858 <create_name+0x88>
 8006854:	2306      	movs	r3, #6
 8006856:	e073      	b.n	8006940 <create_name+0x170>
			i = 8; ni = 11;
 8006858:	2308      	movs	r3, #8
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	230b      	movs	r3, #11
 800685e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006860:	7ffb      	ldrb	r3, [r7, #31]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	77fb      	strb	r3, [r7, #31]
 8006866:	e035      	b.n	80068d4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006868:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800686c:	2b00      	cmp	r3, #0
 800686e:	da08      	bge.n	8006882 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006870:	7ffb      	ldrb	r3, [r7, #31]
 8006872:	f043 0303 	orr.w	r3, r3, #3
 8006876:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006878:	7fbb      	ldrb	r3, [r7, #30]
 800687a:	3b80      	subs	r3, #128	; 0x80
 800687c:	4a32      	ldr	r2, [pc, #200]	; (8006948 <create_name+0x178>)
 800687e:	5cd3      	ldrb	r3, [r2, r3]
 8006880:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006882:	7fbb      	ldrb	r3, [r7, #30]
 8006884:	4619      	mov	r1, r3
 8006886:	4831      	ldr	r0, [pc, #196]	; (800694c <create_name+0x17c>)
 8006888:	f7fe fe77 	bl	800557a <chk_chr>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <create_name+0xc6>
				return FR_INVALID_NAME;
 8006892:	2306      	movs	r3, #6
 8006894:	e054      	b.n	8006940 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006896:	7fbb      	ldrb	r3, [r7, #30]
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d907      	bls.n	80068ac <create_name+0xdc>
 800689c:	7fbb      	ldrb	r3, [r7, #30]
 800689e:	2b5a      	cmp	r3, #90	; 0x5a
 80068a0:	d804      	bhi.n	80068ac <create_name+0xdc>
				b |= 2;
 80068a2:	7ffb      	ldrb	r3, [r7, #31]
 80068a4:	f043 0302 	orr.w	r3, r3, #2
 80068a8:	77fb      	strb	r3, [r7, #31]
 80068aa:	e00c      	b.n	80068c6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80068ac:	7fbb      	ldrb	r3, [r7, #30]
 80068ae:	2b60      	cmp	r3, #96	; 0x60
 80068b0:	d909      	bls.n	80068c6 <create_name+0xf6>
 80068b2:	7fbb      	ldrb	r3, [r7, #30]
 80068b4:	2b7a      	cmp	r3, #122	; 0x7a
 80068b6:	d806      	bhi.n	80068c6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80068b8:	7ffb      	ldrb	r3, [r7, #31]
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	77fb      	strb	r3, [r7, #31]
 80068c0:	7fbb      	ldrb	r3, [r7, #30]
 80068c2:	3b20      	subs	r3, #32
 80068c4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	613a      	str	r2, [r7, #16]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	4413      	add	r3, r2
 80068d0:	7fba      	ldrb	r2, [r7, #30]
 80068d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80068d4:	e7a1      	b.n	800681a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	441a      	add	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80068e0:	7fbb      	ldrb	r3, [r7, #30]
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d801      	bhi.n	80068ea <create_name+0x11a>
 80068e6:	2304      	movs	r3, #4
 80068e8:	e000      	b.n	80068ec <create_name+0x11c>
 80068ea:	2300      	movs	r3, #0
 80068ec:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <create_name+0x128>
 80068f4:	2306      	movs	r3, #6
 80068f6:	e023      	b.n	8006940 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2be5      	cmp	r3, #229	; 0xe5
 80068fe:	d102      	bne.n	8006906 <create_name+0x136>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2205      	movs	r2, #5
 8006904:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d102      	bne.n	8006912 <create_name+0x142>
 800690c:	7ffb      	ldrb	r3, [r7, #31]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006912:	7ffb      	ldrb	r3, [r7, #31]
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	2b01      	cmp	r3, #1
 800691a:	d103      	bne.n	8006924 <create_name+0x154>
 800691c:	7fbb      	ldrb	r3, [r7, #30]
 800691e:	f043 0310 	orr.w	r3, r3, #16
 8006922:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006924:	7ffb      	ldrb	r3, [r7, #31]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b04      	cmp	r3, #4
 800692c:	d103      	bne.n	8006936 <create_name+0x166>
 800692e:	7fbb      	ldrb	r3, [r7, #30]
 8006930:	f043 0308 	orr.w	r3, r3, #8
 8006934:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	330b      	adds	r3, #11
 800693a:	7fba      	ldrb	r2, [r7, #30]
 800693c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800693e:	2300      	movs	r3, #0
#endif
}
 8006940:	4618      	mov	r0, r3
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	0800aaa8 	.word	0x0800aaa8
 800694c:	0800a94c 	.word	0x0800a94c

08006950 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b2f      	cmp	r3, #47	; 0x2f
 8006960:	d003      	beq.n	800696a <follow_path+0x1a>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b5c      	cmp	r3, #92	; 0x5c
 8006968:	d102      	bne.n	8006970 <follow_path+0x20>
		path++;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b1f      	cmp	r3, #31
 800697e:	d80a      	bhi.n	8006996 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006980:	2100      	movs	r1, #0
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff fc00 	bl	8006188 <dir_sdi>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006994:	e045      	b.n	8006a22 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006996:	463b      	mov	r3, r7
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff ff18 	bl	80067d0 <create_name>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d136      	bne.n	8006a18 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff fe16 	bl	80065dc <dir_find>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069ba:	7adb      	ldrb	r3, [r3, #11]
 80069bc:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d128      	bne.n	8006a1c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80069ca:	7bbb      	ldrb	r3, [r7, #14]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d123      	bne.n	8006a1c <follow_path+0xcc>
 80069d4:	2305      	movs	r3, #5
 80069d6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80069d8:	e020      	b.n	8006a1c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11d      	bne.n	8006a20 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069ea:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	330b      	adds	r3, #11
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80069fa:	2305      	movs	r3, #5
 80069fc:	73fb      	strb	r3, [r7, #15]
 80069fe:	e010      	b.n	8006a22 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff fd92 	bl	8006532 <ld_clust>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a16:	e7be      	b.n	8006996 <follow_path+0x46>
			if (res != FR_OK) break;
 8006a18:	bf00      	nop
 8006a1a:	e002      	b.n	8006a22 <follow_path+0xd2>
				break;
 8006a1c:	bf00      	nop
 8006a1e:	e000      	b.n	8006a22 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a20:	bf00      	nop
		}
	}

	return res;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a38:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d031      	beq.n	8006aa6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e002      	b.n	8006a50 <get_ldnumber+0x24>
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d903      	bls.n	8006a60 <get_ldnumber+0x34>
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b3a      	cmp	r3, #58	; 0x3a
 8006a5e:	d1f4      	bne.n	8006a4a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b3a      	cmp	r3, #58	; 0x3a
 8006a66:	d11c      	bne.n	8006aa2 <get_ldnumber+0x76>
			tp = *path;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	60fa      	str	r2, [r7, #12]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	3b30      	subs	r3, #48	; 0x30
 8006a78:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	d80e      	bhi.n	8006a9e <get_ldnumber+0x72>
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d10a      	bne.n	8006a9e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d107      	bne.n	8006a9e <get_ldnumber+0x72>
					vol = (int)i;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	3301      	adds	r3, #1
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	e002      	b.n	8006aa8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006aa6:	693b      	ldr	r3, [r7, #16]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006acc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fe ff6d 	bl	80059b2 <move_window>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <check_fs+0x2e>
		return 3;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e04a      	b.n	8006b78 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ae8:	3301      	adds	r3, #1
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	b21a      	sxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006af6:	b21b      	sxth	r3, r3
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b21b      	sxth	r3, r3
 8006afc:	4a20      	ldr	r2, [pc, #128]	; (8006b80 <check_fs+0xcc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d001      	beq.n	8006b06 <check_fs+0x52>
		return 2;
 8006b02:	2302      	movs	r3, #2
 8006b04:	e038      	b.n	8006b78 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3336      	adds	r3, #54	; 0x36
 8006b0a:	3303      	adds	r3, #3
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	061a      	lsls	r2, r3, #24
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3336      	adds	r3, #54	; 0x36
 8006b14:	3302      	adds	r3, #2
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	3236      	adds	r2, #54	; 0x36
 8006b20:	3201      	adds	r2, #1
 8006b22:	7812      	ldrb	r2, [r2, #0]
 8006b24:	0212      	lsls	r2, r2, #8
 8006b26:	4313      	orrs	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b34:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <check_fs+0xd0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d101      	bne.n	8006b3e <check_fs+0x8a>
		return 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e01c      	b.n	8006b78 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3352      	adds	r3, #82	; 0x52
 8006b42:	3303      	adds	r3, #3
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	061a      	lsls	r2, r3, #24
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3352      	adds	r3, #82	; 0x52
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	041b      	lsls	r3, r3, #16
 8006b52:	4313      	orrs	r3, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	3252      	adds	r2, #82	; 0x52
 8006b58:	3201      	adds	r2, #1
 8006b5a:	7812      	ldrb	r2, [r2, #0]
 8006b5c:	0212      	lsls	r2, r2, #8
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b6c:	4a05      	ldr	r2, [pc, #20]	; (8006b84 <check_fs+0xd0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d101      	bne.n	8006b76 <check_fs+0xc2>
		return 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e000      	b.n	8006b78 <check_fs+0xc4>

	return 1;
 8006b76:	2301      	movs	r3, #1
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	ffffaa55 	.word	0xffffaa55
 8006b84:	00544146 	.word	0x00544146

08006b88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b096      	sub	sp, #88	; 0x58
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006b9c:	68b8      	ldr	r0, [r7, #8]
 8006b9e:	f7ff ff45 	bl	8006a2c <get_ldnumber>
 8006ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da01      	bge.n	8006bae <find_volume+0x26>
 8006baa:	230b      	movs	r3, #11
 8006bac:	e2aa      	b.n	8007104 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006bae:	4a9e      	ldr	r2, [pc, #632]	; (8006e28 <find_volume+0x2a0>)
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <find_volume+0x3a>
 8006bbe:	230c      	movs	r3, #12
 8006bc0:	e2a0      	b.n	8007104 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01b      	beq.n	8006c0a <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe fbd1 	bl	8005380 <disk_status>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006be4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10c      	bne.n	8006c0a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <find_volume+0x7e>
 8006bf6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006c02:	230a      	movs	r3, #10
 8006c04:	e27e      	b.n	8007104 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8006c06:	2300      	movs	r3, #0
 8006c08:	e27c      	b.n	8007104 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe fbc6 	bl	80053b4 <disk_initialize>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e262      	b.n	8007104 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <find_volume+0xcc>
 8006c44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006c50:	230a      	movs	r3, #10
 8006c52:	e257      	b.n	8007104 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006c58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c5c:	f7ff ff2a 	bl	8006ab4 <check_fs>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006c66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d155      	bne.n	8006d1a <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006c6e:	2300      	movs	r3, #0
 8006c70:	643b      	str	r3, [r7, #64]	; 0x40
 8006c72:	e029      	b.n	8006cc8 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006c7e:	4413      	add	r3, r2
 8006c80:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	3304      	adds	r3, #4
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d012      	beq.n	8006cb2 <find_volume+0x12a>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	330b      	adds	r3, #11
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	061a      	lsls	r2, r3, #24
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	330a      	adds	r3, #10
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca0:	3209      	adds	r2, #9
 8006ca2:	7812      	ldrb	r2, [r2, #0]
 8006ca4:	0212      	lsls	r2, r2, #8
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006caa:	3208      	adds	r2, #8
 8006cac:	7812      	ldrb	r2, [r2, #0]
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	e000      	b.n	8006cb4 <find_volume+0x12c>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d9d2      	bls.n	8006c74 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006cce:	2300      	movs	r3, #0
 8006cd0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <find_volume+0x156>
 8006cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006cec:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <find_volume+0x178>
 8006cf4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cf8:	f7ff fedc 	bl	8006ab4 <check_fs>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	e000      	b.n	8006d02 <find_volume+0x17a>
 8006d00:	2302      	movs	r3, #2
 8006d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006d06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <find_volume+0x192>
 8006d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d10:	3301      	adds	r3, #1
 8006d12:	643b      	str	r3, [r7, #64]	; 0x40
 8006d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d9e1      	bls.n	8006cde <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006d1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d101      	bne.n	8006d26 <find_volume+0x19e>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e1ee      	b.n	8007104 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006d26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <find_volume+0x1aa>
 8006d2e:	230d      	movs	r3, #13
 8006d30:	e1e8      	b.n	8007104 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	7b1b      	ldrb	r3, [r3, #12]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	b21a      	sxth	r2, r3
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	7adb      	ldrb	r3, [r3, #11]
 8006d3e:	b21b      	sxth	r3, r3
 8006d40:	4313      	orrs	r3, r2
 8006d42:	b21b      	sxth	r3, r3
 8006d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d48:	d001      	beq.n	8006d4e <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8006d4a:	230d      	movs	r3, #13
 8006d4c:	e1da      	b.n	8007104 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	7ddb      	ldrb	r3, [r3, #23]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	b21a      	sxth	r2, r3
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	7d9b      	ldrb	r3, [r3, #22]
 8006d5a:	b21b      	sxth	r3, r3
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	b21b      	sxth	r3, r3
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d112      	bne.n	8006d90 <find_volume+0x208>
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006d70:	061a      	lsls	r2, r3, #24
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006d78:	041b      	lsls	r3, r3, #16
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006d82:	0212      	lsls	r2, r2, #8
 8006d84:	4313      	orrs	r3, r2
 8006d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d88:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	7c1a      	ldrb	r2, [r3, #16]
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d006      	beq.n	8006dba <find_volume+0x232>
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d001      	beq.n	8006dba <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8006db6:	230d      	movs	r3, #13
 8006db8:	e1a4      	b.n	8007104 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc4:	fb02 f303 	mul.w	r3, r2, r3
 8006dc8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	7b5a      	ldrb	r2, [r3, #13]
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <find_volume+0x26c>
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006de4:	461a      	mov	r2, r3
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006dec:	3b01      	subs	r3, #1
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8006df4:	230d      	movs	r3, #13
 8006df6:	e185      	b.n	8007104 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	7c9b      	ldrb	r3, [r3, #18]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	b21a      	sxth	r2, r3
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	7c5b      	ldrb	r3, [r3, #17]
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b21b      	sxth	r3, r3
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e14:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8006e22:	230d      	movs	r3, #13
 8006e24:	e16e      	b.n	8007104 <find_volume+0x57c>
 8006e26:	bf00      	nop
 8006e28:	20000214 	.word	0x20000214

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	7d1b      	ldrb	r3, [r3, #20]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	b21a      	sxth	r2, r3
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	7cdb      	ldrb	r3, [r3, #19]
 8006e38:	b21b      	sxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b21b      	sxth	r3, r3
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d112      	bne.n	8006e6e <find_volume+0x2e6>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006e4e:	061a      	lsls	r2, r3, #24
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006e56:	041b      	lsls	r3, r3, #16
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e5c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006e60:	0212      	lsls	r2, r2, #8
 8006e62:	4313      	orrs	r3, r2
 8006e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e66:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	7bdb      	ldrb	r3, [r3, #15]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	b21a      	sxth	r2, r3
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	7b9b      	ldrb	r3, [r3, #14]
 8006e7a:	b21b      	sxth	r3, r3
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	b21b      	sxth	r3, r3
 8006e80:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <find_volume+0x304>
 8006e88:	230d      	movs	r3, #13
 8006e8a:	e13b      	b.n	8007104 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006e8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e90:	4413      	add	r3, r2
 8006e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e94:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006e98:	0912      	lsrs	r2, r2, #4
 8006e9a:	b292      	uxth	r2, r2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d201      	bcs.n	8006eac <find_volume+0x324>
 8006ea8:	230d      	movs	r3, #13
 8006eaa:	e12b      	b.n	8007104 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <find_volume+0x340>
 8006ec4:	230d      	movs	r3, #13
 8006ec6:	e11d      	b.n	8007104 <find_volume+0x57c>
	fmt = FS_FAT12;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d902      	bls.n	8006ede <find_volume+0x356>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d902      	bls.n	8006eee <find_volume+0x366>
 8006ee8:	2303      	movs	r3, #3
 8006eea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	1c9a      	adds	r2, r3, #2
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006efc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006f00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f04:	441a      	add	r2, r3
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8006f0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	441a      	add	r2, r3
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8006f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d121      	bne.n	8006f64 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <find_volume+0x3a6>
 8006f2a:	230d      	movs	r3, #13
 8006f2c:	e0ea      	b.n	8007104 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006f34:	061a      	lsls	r2, r3, #24
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006f3c:	041b      	lsls	r3, r3, #16
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f42:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006f46:	0212      	lsls	r2, r2, #8
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f4c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006f50:	431a      	orrs	r2, r3
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	647b      	str	r3, [r7, #68]	; 0x44
 8006f62:	e025      	b.n	8006fb0 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <find_volume+0x3ea>
 8006f6e:	230d      	movs	r3, #13
 8006f70:	e0c8      	b.n	8007104 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7a:	441a      	add	r2, r3
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006f82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d104      	bne.n	8006f94 <find_volume+0x40c>
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	e00c      	b.n	8006fae <find_volume+0x426>
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	4413      	add	r3, r2
 8006fa0:	085a      	lsrs	r2, r3, #1
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006fae:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006fbc:	0a5b      	lsrs	r3, r3, #9
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d201      	bcs.n	8006fc6 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8006fc2:	230d      	movs	r3, #13
 8006fc4:	e09e      	b.n	8007104 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fcc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	2280      	movs	r2, #128	; 0x80
 8006fe0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d177      	bne.n	80070dc <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	b21a      	sxth	r2, r3
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ffc:	b21b      	sxth	r3, r3
 8006ffe:	4313      	orrs	r3, r2
 8007000:	b21b      	sxth	r3, r3
 8007002:	2b01      	cmp	r3, #1
 8007004:	d16a      	bne.n	80070dc <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007008:	3301      	adds	r3, #1
 800700a:	4619      	mov	r1, r3
 800700c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800700e:	f7fe fcd0 	bl	80059b2 <move_window>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d161      	bne.n	80070dc <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	b21a      	sxth	r2, r3
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007030:	b21b      	sxth	r3, r3
 8007032:	4313      	orrs	r3, r2
 8007034:	b21b      	sxth	r3, r3
 8007036:	4a35      	ldr	r2, [pc, #212]	; (800710c <find_volume+0x584>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d14f      	bne.n	80070dc <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	78db      	ldrb	r3, [r3, #3]
 8007040:	061a      	lsls	r2, r3, #24
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	789b      	ldrb	r3, [r3, #2]
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	4313      	orrs	r3, r2
 800704a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800704c:	7852      	ldrb	r2, [r2, #1]
 800704e:	0212      	lsls	r2, r2, #8
 8007050:	4313      	orrs	r3, r2
 8007052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	4313      	orrs	r3, r2
 8007058:	4a2d      	ldr	r2, [pc, #180]	; (8007110 <find_volume+0x588>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d13e      	bne.n	80070dc <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007064:	061a      	lsls	r2, r3, #24
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800706c:	041b      	lsls	r3, r3, #16
 800706e:	4313      	orrs	r3, r2
 8007070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007072:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007076:	0212      	lsls	r2, r2, #8
 8007078:	4313      	orrs	r3, r2
 800707a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800707c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007080:	4313      	orrs	r3, r2
 8007082:	4a24      	ldr	r2, [pc, #144]	; (8007114 <find_volume+0x58c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d129      	bne.n	80070dc <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800708e:	061a      	lsls	r2, r3, #24
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	4313      	orrs	r3, r2
 800709a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80070a0:	0212      	lsls	r2, r2, #8
 80070a2:	4313      	orrs	r3, r2
 80070a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80070aa:	431a      	orrs	r2, r3
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80070b8:	061a      	lsls	r2, r3, #24
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	4313      	orrs	r3, r2
 80070c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80070ca:	0212      	lsls	r2, r2, #8
 80070cc:	4313      	orrs	r3, r2
 80070ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80070d4:	431a      	orrs	r2, r3
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80070e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <find_volume+0x590>)
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <find_volume+0x590>)
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <find_volume+0x590>)
 80070f4:	881a      	ldrh	r2, [r3, #0]
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80070fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070fe:	f7fe fbe5 	bl	80058cc <clear_lock>
#endif

	return FR_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3758      	adds	r7, #88	; 0x58
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	ffffaa55 	.word	0xffffaa55
 8007110:	41615252 	.word	0x41615252
 8007114:	61417272 	.word	0x61417272
 8007118:	20000218 	.word	0x20000218

0800711c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d022      	beq.n	8007174 <validate+0x58>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01d      	beq.n	8007174 <validate+0x58>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800713e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <validate+0x58>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800714c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007156:	429a      	cmp	r2, r3
 8007158:	d10c      	bne.n	8007174 <validate+0x58>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007160:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe f90b 	bl	8005380 <disk_status>
 800716a:	4603      	mov	r3, r0
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007174:	2309      	movs	r3, #9
 8007176:	e000      	b.n	800717a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007196:	f107 0310 	add.w	r3, r7, #16
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fc46 	bl	8006a2c <get_ldnumber>
 80071a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da01      	bge.n	80071ac <f_mount+0x28>
 80071a8:	230b      	movs	r3, #11
 80071aa:	e02d      	b.n	8007208 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071ac:	4a18      	ldr	r2, [pc, #96]	; (8007210 <f_mount+0x8c>)
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d006      	beq.n	80071ca <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80071bc:	69b8      	ldr	r0, [r7, #24]
 80071be:	f7fe fb85 	bl	80058cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	490d      	ldr	r1, [pc, #52]	; (8007210 <f_mount+0x8c>)
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <f_mount+0x6a>
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d001      	beq.n	80071f2 <f_mount+0x6e>
 80071ee:	2300      	movs	r3, #0
 80071f0:	e00a      	b.n	8007208 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80071f2:	f107 0108 	add.w	r1, r7, #8
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	2200      	movs	r2, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fcc3 	bl	8006b88 <find_volume>
 8007202:	4603      	mov	r3, r0
 8007204:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007206:	7dfb      	ldrb	r3, [r7, #23]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3720      	adds	r7, #32
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000214 	.word	0x20000214

08007214 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800721a:	af00      	add	r7, sp, #0
 800721c:	f107 030c 	add.w	r3, r7, #12
 8007220:	6018      	str	r0, [r3, #0]
 8007222:	f107 0308 	add.w	r3, r7, #8
 8007226:	6019      	str	r1, [r3, #0]
 8007228:	1dfb      	adds	r3, r7, #7
 800722a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <f_open+0x26>
 8007236:	2309      	movs	r3, #9
 8007238:	e1f2      	b.n	8007620 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800723a:	f107 030c 	add.w	r3, r7, #12
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007246:	1dfb      	adds	r3, r7, #7
 8007248:	1dfa      	adds	r2, r7, #7
 800724a:	7812      	ldrb	r2, [r2, #0]
 800724c:	f002 021f 	and.w	r2, r2, #31
 8007250:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007252:	1dfb      	adds	r3, r7, #7
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	f107 0108 	add.w	r1, r7, #8
 8007260:	f107 0320 	add.w	r3, r7, #32
 8007264:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fc8d 	bl	8006b88 <find_volume>
 800726e:	4603      	mov	r3, r0
 8007270:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007274:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007278:	2b00      	cmp	r3, #0
 800727a:	f040 81cf 	bne.w	800761c <f_open+0x408>
		INIT_BUF(dj);
 800727e:	f107 0320 	add.w	r3, r7, #32
 8007282:	f107 0214 	add.w	r2, r7, #20
 8007286:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	f107 0320 	add.w	r3, r7, #32
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff fb5a 	bl	8006950 <follow_path>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80072a2:	f107 0320 	add.w	r3, r7, #32
 80072a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072aa:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80072ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d11a      	bne.n	80072ec <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 80072b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <f_open+0xb2>
				res = FR_INVALID_NAME;
 80072be:	2306      	movs	r3, #6
 80072c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80072c4:	e012      	b.n	80072ec <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072c6:	1dfb      	adds	r3, r7, #7
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bf14      	ite	ne
 80072d2:	2301      	movne	r3, #1
 80072d4:	2300      	moveq	r3, #0
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	461a      	mov	r2, r3
 80072da:	f107 0320 	add.w	r3, r7, #32
 80072de:	4611      	mov	r1, r2
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fe f965 	bl	80055b0 <chk_lock>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80072ec:	1dfb      	adds	r3, r7, #7
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 031c 	and.w	r3, r3, #28
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80cc 	beq.w	8007492 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80072fa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01f      	beq.n	8007342 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007302:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007306:	2b04      	cmp	r3, #4
 8007308:	d10e      	bne.n	8007328 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800730a:	f7fe f9bf 	bl	800568c <enq_lock>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d006      	beq.n	8007322 <f_open+0x10e>
 8007314:	f107 0320 	add.w	r3, r7, #32
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff f9ae 	bl	800667a <dir_register>
 800731e:	4603      	mov	r3, r0
 8007320:	e000      	b.n	8007324 <f_open+0x110>
 8007322:	2312      	movs	r3, #18
 8007324:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007328:	1dfb      	adds	r3, r7, #7
 800732a:	1dfa      	adds	r2, r7, #7
 800732c:	7812      	ldrb	r2, [r2, #0]
 800732e:	f042 0208 	orr.w	r2, r2, #8
 8007332:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007334:	f107 0320 	add.w	r3, r7, #32
 8007338:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800733c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007340:	e014      	b.n	800736c <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007342:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007346:	330b      	adds	r3, #11
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f003 0311 	and.w	r3, r3, #17
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <f_open+0x146>
					res = FR_DENIED;
 8007352:	2307      	movs	r3, #7
 8007354:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007358:	e008      	b.n	800736c <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800735a:	1dfb      	adds	r3, r7, #7
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <f_open+0x158>
						res = FR_EXIST;
 8007366:	2308      	movs	r3, #8
 8007368:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800736c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007370:	2b00      	cmp	r3, #0
 8007372:	f040 80af 	bne.w	80074d4 <f_open+0x2c0>
 8007376:	1dfb      	adds	r3, r7, #7
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b00      	cmp	r3, #0
 8007380:	f000 80a8 	beq.w	80074d4 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8007384:	f001 f818 	bl	80083b8 <get_fattime>
 8007388:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800738c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007390:	330e      	adds	r3, #14
 8007392:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800739e:	b29b      	uxth	r3, r3
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073a8:	330f      	adds	r3, #15
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80073b2:	0c1a      	lsrs	r2, r3, #16
 80073b4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073b8:	3310      	adds	r3, #16
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80073c2:	0e1a      	lsrs	r2, r3, #24
 80073c4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073c8:	3311      	adds	r3, #17
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80073ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073d2:	330b      	adds	r3, #11
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80073d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073dc:	331c      	adds	r3, #28
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073e6:	331d      	adds	r3, #29
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073f0:	331e      	adds	r3, #30
 80073f2:	2200      	movs	r2, #0
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073fa:	331f      	adds	r3, #31
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007400:	f107 0320 	add.w	r3, r7, #32
 8007404:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007408:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff f890 	bl	8006532 <ld_clust>
 8007412:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8007416:	2100      	movs	r1, #0
 8007418:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800741c:	f7ff f8b7 	bl	800658e <st_clust>
				dj.fs->wflag = 1;
 8007420:	f107 0320 	add.w	r3, r7, #32
 8007424:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800742e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007432:	2b00      	cmp	r3, #0
 8007434:	d04e      	beq.n	80074d4 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8007436:	f107 0320 	add.w	r3, r7, #32
 800743a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800743e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007442:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8007446:	f107 0320 	add.w	r3, r7, #32
 800744a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800744e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe fd6c 	bl	8005f30 <remove_chain>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800745e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007462:	2b00      	cmp	r3, #0
 8007464:	d136      	bne.n	80074d4 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007466:	f107 0320 	add.w	r3, r7, #32
 800746a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800746e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8007472:	3a01      	subs	r2, #1
 8007474:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8007478:	f107 0320 	add.w	r3, r7, #32
 800747c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007480:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fa94 	bl	80059b2 <move_window>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007490:	e020      	b.n	80074d4 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007492:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007496:	2b00      	cmp	r3, #0
 8007498:	d11c      	bne.n	80074d4 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800749a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800749e:	330b      	adds	r3, #11
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	f003 0310 	and.w	r3, r3, #16
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <f_open+0x29e>
					res = FR_NO_FILE;
 80074aa:	2304      	movs	r3, #4
 80074ac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80074b0:	e010      	b.n	80074d4 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80074b2:	1dfb      	adds	r3, r7, #7
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <f_open+0x2c0>
 80074be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074c2:	330b      	adds	r3, #11
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <f_open+0x2c0>
						res = FR_DENIED;
 80074ce:	2307      	movs	r3, #7
 80074d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80074d4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d13d      	bne.n	8007558 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80074dc:	1dfb      	adds	r3, r7, #7
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80074e8:	1dfb      	adds	r3, r7, #7
 80074ea:	1dfa      	adds	r2, r7, #7
 80074ec:	7812      	ldrb	r2, [r2, #0]
 80074ee:	f042 0220 	orr.w	r2, r2, #32
 80074f2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80074f4:	f107 0320 	add.w	r3, r7, #32
 80074f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074fc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800750a:	f107 030c 	add.w	r3, r7, #12
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007514:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007518:	1dfb      	adds	r3, r7, #7
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	bf14      	ite	ne
 8007524:	2301      	movne	r3, #1
 8007526:	2300      	moveq	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	461a      	mov	r2, r3
 800752c:	f107 0320 	add.w	r3, r7, #32
 8007530:	4611      	mov	r1, r2
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe f8ce 	bl	80056d4 <inc_lock>
 8007538:	4602      	mov	r2, r0
 800753a:	f107 030c 	add.w	r3, r7, #12
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8007544:	f107 030c 	add.w	r3, r7, #12
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <f_open+0x344>
 8007552:	2302      	movs	r3, #2
 8007554:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007558:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800755c:	2b00      	cmp	r3, #0
 800755e:	d15d      	bne.n	800761c <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8007560:	f107 030c 	add.w	r3, r7, #12
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	1dfa      	adds	r2, r7, #7
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800756e:	f107 030c 	add.w	r3, r7, #12
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800757a:	f107 0320 	add.w	r3, r7, #32
 800757e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007582:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007586:	4618      	mov	r0, r3
 8007588:	f7fe ffd3 	bl	8006532 <ld_clust>
 800758c:	4602      	mov	r2, r0
 800758e:	f107 030c 	add.w	r3, r7, #12
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007598:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800759c:	331f      	adds	r3, #31
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	061a      	lsls	r2, r3, #24
 80075a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80075a6:	331e      	adds	r3, #30
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	041b      	lsls	r3, r3, #16
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80075b2:	321d      	adds	r2, #29
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	0212      	lsls	r2, r2, #8
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80075be:	321c      	adds	r2, #28
 80075c0:	7812      	ldrb	r2, [r2, #0]
 80075c2:	431a      	orrs	r2, r3
 80075c4:	f107 030c 	add.w	r3, r7, #12
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80075ce:	f107 030c 	add.w	r3, r7, #12
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80075da:	f107 030c 	add.w	r3, r7, #12
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80075e6:	f107 030c 	add.w	r3, r7, #12
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80075f2:	f107 0320 	add.w	r3, r7, #32
 80075f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80075fa:	f107 030c 	add.w	r3, r7, #12
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800760e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800761c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8007620:	4618      	mov	r0, r3
 8007622:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b08c      	sub	sp, #48	; 0x30
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
 8007636:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff fd6a 	bl	800711c <validate>
 8007648:	4603      	mov	r3, r0
 800764a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800764c:	7ffb      	ldrb	r3, [r7, #31]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <f_read+0x2c>
 8007652:	7ffb      	ldrb	r3, [r7, #31]
 8007654:	e150      	b.n	80078f8 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007666:	e147      	b.n	80078f8 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007676:	2307      	movs	r3, #7
 8007678:	e13e      	b.n	80078f8 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	429a      	cmp	r2, r3
 8007690:	f240 812d 	bls.w	80078ee <f_read+0x2c4>
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007698:	e129      	b.n	80078ee <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80076a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f040 80f2 	bne.w	800788e <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80076b0:	0a5b      	lsrs	r3, r3, #9
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076ba:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80076be:	3b01      	subs	r3, #1
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	4013      	ands	r3, r2
 80076c4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d139      	bne.n	8007740 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076de:	e018      	b.n	8007712 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80076f0:	4619      	mov	r1, r3
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7fe fd13 	bl	800611e <clmt_clust>
 80076f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80076fa:	e00a      	b.n	8007712 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f7fe fa4e 	bl	8005bac <get_fat>
 8007710:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	2b01      	cmp	r3, #1
 8007716:	d805      	bhi.n	8007724 <f_read+0xfa>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007720:	2302      	movs	r3, #2
 8007722:	e0e9      	b.n	80078f8 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800772a:	d105      	bne.n	8007738 <f_read+0x10e>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007734:	2301      	movs	r3, #1
 8007736:	e0df      	b.n	80078f8 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800773c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f7fe fa0a 	bl	8005b68 <clust2sect>
 8007754:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d105      	bne.n	8007768 <f_read+0x13e>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007764:	2302      	movs	r3, #2
 8007766:	e0c7      	b.n	80078f8 <f_read+0x2ce>
			sect += csect;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	4413      	add	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	0a5b      	lsrs	r3, r3, #9
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d046      	beq.n	800780a <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800777c:	7dfa      	ldrb	r2, [r7, #23]
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	4413      	add	r3, r2
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007788:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800778c:	4293      	cmp	r3, r2
 800778e:	d908      	bls.n	80077a2 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007796:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800779a:	461a      	mov	r2, r3
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077a8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	6a39      	ldr	r1, [r7, #32]
 80077b2:	f7fd fe25 	bl	8005400 <disk_read>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80077c4:	2301      	movs	r3, #1
 80077c6:	e097      	b.n	80078f8 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d015      	beq.n	8007802 <f_read+0x1d8>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d90d      	bls.n	8007802 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	025b      	lsls	r3, r3, #9
 80077f2:	6a3a      	ldr	r2, [r7, #32]
 80077f4:	4413      	add	r3, r2
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fd fe5d 	bl	80054bc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	025b      	lsls	r3, r3, #9
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007808:	e05b      	b.n	80078c2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	d037      	beq.n	8007886 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01d      	beq.n	8007860 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800782a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007836:	2301      	movs	r3, #1
 8007838:	f7fd fe02 	bl	8005440 <disk_write>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800784a:	2301      	movs	r3, #1
 800784c:	e054      	b.n	80078f8 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007866:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800786a:	68f9      	ldr	r1, [r7, #12]
 800786c:	2301      	movs	r3, #1
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	f7fd fdc6 	bl	8005400 <disk_read>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007882:	2301      	movs	r3, #1
 8007884:	e038      	b.n	80078f8 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007898:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800789e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d901      	bls.n	80078aa <f_read+0x280>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80078b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078ba:	4619      	mov	r1, r3
 80078bc:	6a38      	ldr	r0, [r7, #32]
 80078be:	f7fd fdfd 	bl	80054bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078c2:	6a3a      	ldr	r2, [r7, #32]
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	4413      	add	r3, r2
 80078c8:	623b      	str	r3, [r7, #32]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	441a      	add	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	441a      	add	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f aed2 	bne.w	800769a <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3730      	adds	r7, #48	; 0x30
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff fc07 	bl	800711c <validate>
 800790e:	4603      	mov	r3, r0
 8007910:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007912:	7dfb      	ldrb	r3, [r7, #23]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 80a8 	bne.w	8007a6a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80a0 	beq.w	8007a6a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b00      	cmp	r3, #0
 8007936:	d019      	beq.n	800796c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800793e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800794a:	2301      	movs	r3, #1
 800794c:	f7fd fd78 	bl	8005440 <disk_write>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007956:	2301      	movs	r3, #1
 8007958:	e088      	b.n	8007a6c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007964:	b2da      	uxtb	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f7fe f819 	bl	80059b2 <move_window>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d16f      	bne.n	8007a6a <f_sync+0x16a>
				dir = fp->dir_ptr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007990:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	330b      	adds	r3, #11
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	330b      	adds	r3, #11
 800799c:	f042 0220 	orr.w	r2, r2, #32
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	331c      	adds	r3, #28
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	0a1b      	lsrs	r3, r3, #8
 80079bc:	b29a      	uxth	r2, r3
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	331d      	adds	r3, #29
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80079cc:	0c1a      	lsrs	r2, r3, #16
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	331e      	adds	r3, #30
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80079dc:	0e1a      	lsrs	r2, r3, #24
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	331f      	adds	r3, #31
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079ec:	4619      	mov	r1, r3
 80079ee:	6938      	ldr	r0, [r7, #16]
 80079f0:	f7fe fdcd 	bl	800658e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80079f4:	f000 fce0 	bl	80083b8 <get_fattime>
 80079f8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	3316      	adds	r3, #22
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	0a1b      	lsrs	r3, r3, #8
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	3317      	adds	r3, #23
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	0c1a      	lsrs	r2, r3, #16
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3318      	adds	r3, #24
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	0e1a      	lsrs	r2, r3, #24
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	3319      	adds	r3, #25
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	3312      	adds	r3, #18
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	3313      	adds	r3, #19
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a42:	f023 0320 	bic.w	r3, r3, #32
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7fd ffd4 	bl	8005a0e <sync_fs>
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff ff3f 	bl	8007900 <f_sync>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d116      	bne.n	8007aba <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff fb45 	bl	800711c <validate>
 8007a92:	4603      	mov	r3, r0
 8007a94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10e      	bne.n	8007aba <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fd fece 	bl	8005844 <dec_lock>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d103      	bne.n	8007aba <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b090      	sub	sp, #64	; 0x40
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fb24 	bl	800711c <validate>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007ada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <f_lseek+0x24>
 8007ae2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ae6:	e247      	b.n	8007f78 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007af8:	e23e      	b.n	8007f78 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 80f2 	beq.w	8007cea <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0c:	d164      	bne.n	8007bd8 <f_lseek+0x114>
			tbl = fp->cltbl;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	627a      	str	r2, [r7, #36]	; 0x24
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	2302      	movs	r3, #2
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b2a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d041      	beq.n	8007bb6 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	2300      	movs	r3, #0
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	3302      	adds	r3, #2
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	3301      	adds	r3, #1
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe f82a 	bl	8005bac <get_fat>
 8007b58:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d805      	bhi.n	8007b6c <f_lseek+0xa8>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e205      	b.n	8007f78 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b72:	d105      	bne.n	8007b80 <f_lseek+0xbc>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e1fb      	b.n	8007f78 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d0da      	beq.n	8007b40 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d809      	bhi.n	8007ba6 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	1d1a      	adds	r2, r3, #4
 8007b96:	627a      	str	r2, [r7, #36]	; 0x24
 8007b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	1d1a      	adds	r2, r3, #4
 8007ba0:	627a      	str	r2, [r7, #36]	; 0x24
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d3bd      	bcc.n	8007b32 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bbe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d803      	bhi.n	8007bd0 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	e1d1      	b.n	8007f74 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007bd0:	2311      	movs	r3, #17
 8007bd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007bd6:	e1cd      	b.n	8007f74 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d903      	bls.n	8007bec <f_lseek+0x128>
				ofs = fp->fsize;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007bea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 81bc 	beq.w	8007f74 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fe fa8b 	bl	800611e <clmt_clust>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f7fd ffa2 	bl	8005b68 <clust2sect>
 8007c24:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d105      	bne.n	8007c38 <f_lseek+0x174>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007c34:	2302      	movs	r3, #2
 8007c36:	e19f      	b.n	8007f78 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	0a5b      	lsrs	r3, r3, #9
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007c44:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007c48:	3a01      	subs	r2, #1
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	4413      	add	r3, r2
 8007c50:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8189 	beq.w	8007f74 <f_lseek+0x4b0>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	f000 8182 	beq.w	8007f74 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01d      	beq.n	8007cba <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c84:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007c90:	2301      	movs	r3, #1
 8007c92:	f7fd fbd5 	bl	8005440 <disk_write>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e167      	b.n	8007f78 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cc0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	f7fd fb99 	bl	8005400 <disk_read>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e14b      	b.n	8007f78 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8007ce8:	e144      	b.n	8007f74 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d90a      	bls.n	8007d0c <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d0a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007d12:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d1c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80c6 	beq.w	8007eb4 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d2e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007d32:	025b      	lsls	r3, r3, #9
 8007d34:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01e      	beq.n	8007d7a <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	1e5a      	subs	r2, r3, #1
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	1e59      	subs	r1, r3, #1
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d312      	bcc.n	8007d7a <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	1e5a      	subs	r2, r3, #1
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	425b      	negs	r3, r3
 8007d5c:	401a      	ands	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d78:	e029      	b.n	8007dce <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d80:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11e      	bne.n	8007dc6 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe f927 	bl	8005fe4 <create_chain>
 8007d96:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d105      	bne.n	8007daa <f_lseek+0x2e6>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007da6:	2302      	movs	r3, #2
 8007da8:	e0e6      	b.n	8007f78 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db0:	d105      	bne.n	8007dbe <f_lseek+0x2fa>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e0dc      	b.n	8007f78 <f_lseek+0x4b4>
					fp->sclust = clst;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d06f      	beq.n	8007eb4 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8007dd4:	e047      	b.n	8007e66 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00d      	beq.n	8007e00 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007dea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe f8f9 	bl	8005fe4 <create_chain>
 8007df2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10a      	bne.n	8007e10 <f_lseek+0x34c>
							ofs = bcs; break;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	603b      	str	r3, [r7, #0]
 8007dfe:	e036      	b.n	8007e6e <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fd fecf 	bl	8005bac <get_fat>
 8007e0e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e16:	d105      	bne.n	8007e24 <f_lseek+0x360>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0a9      	b.n	8007f78 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d907      	bls.n	8007e3a <f_lseek+0x376>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d305      	bcc.n	8007e46 <f_lseek+0x382>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e42:	2302      	movs	r3, #2
 8007e44:	e098      	b.n	8007f78 <f_lseek+0x4b4>
					fp->clust = clst;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	441a      	add	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d8b3      	bhi.n	8007dd6 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	441a      	add	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d015      	beq.n	8007eb4 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fd fe69 	bl	8005b68 <clust2sect>
 8007e96:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <f_lseek+0x3e6>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e066      	b.n	8007f78 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	0a5b      	lsrs	r3, r3, #9
 8007eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eb0:	4413      	add	r3, r2
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d041      	beq.n	8007f46 <f_lseek+0x482>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d03b      	beq.n	8007f46 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01d      	beq.n	8007f18 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ee2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f7fd faa6 	bl	8005440 <disk_write>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007f02:	2301      	movs	r3, #1
 8007f04:	e038      	b.n	8007f78 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f1e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	2301      	movs	r3, #1
 8007f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f28:	f7fd fa6a 	bl	8005400 <disk_read>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e01c      	b.n	8007f78 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d90e      	bls.n	8007f74 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007f68:	f043 0320 	orr.w	r3, r3, #32
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007f74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3740      	adds	r7, #64	; 0x40
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	1d3b      	adds	r3, r7, #4
 8007f8a:	6018      	str	r0, [r3, #0]
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8007f90:	1d39      	adds	r1, r7, #4
 8007f92:	f107 0314 	add.w	r3, r7, #20
 8007f96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe fdf3 	bl	8006b88 <find_volume>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 8007fa8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d129      	bne.n	8008004 <f_stat+0x84>
		INIT_BUF(dj);
 8007fb0:	f107 0314 	add.w	r3, r7, #20
 8007fb4:	f107 0208 	add.w	r2, r7, #8
 8007fb8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8007fbc:	1d3b      	adds	r3, r7, #4
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fcc2 	bl	8006950 <follow_path>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 8007fd2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d114      	bne.n	8008004 <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 8007fda:	f107 0314 	add.w	r3, r7, #20
 8007fde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00b      	beq.n	8007ffe <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <f_stat+0x84>
 8007fee:	463b      	mov	r3, r7
 8007ff0:	f107 0214 	add.w	r2, r7, #20
 8007ff4:	6819      	ldr	r1, [r3, #0]
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f7fe fb78 	bl	80066ec <get_fileinfo>
 8007ffc:	e002      	b.n	8008004 <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8007ffe:	2306      	movs	r3, #6
 8008000:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8008004:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8008008:	4618      	mov	r0, r3
 800800a:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	4613      	mov	r3, r2
 8008020:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008022:	2301      	movs	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800802a:	4b1f      	ldr	r3, [pc, #124]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 800802c:	7a5b      	ldrb	r3, [r3, #9]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b01      	cmp	r3, #1
 8008032:	d831      	bhi.n	8008098 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008034:	4b1c      	ldr	r3, [pc, #112]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 8008036:	7a5b      	ldrb	r3, [r3, #9]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	4b1a      	ldr	r3, [pc, #104]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 800803e:	2100      	movs	r1, #0
 8008040:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008042:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 8008044:	7a5b      	ldrb	r3, [r3, #9]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008052:	4b15      	ldr	r3, [pc, #84]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 8008054:	7a5b      	ldrb	r3, [r3, #9]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	461a      	mov	r2, r3
 800805a:	4b13      	ldr	r3, [pc, #76]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 800805c:	4413      	add	r3, r2
 800805e:	79fa      	ldrb	r2, [r7, #7]
 8008060:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 8008064:	7a5b      	ldrb	r3, [r3, #9]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	b2d1      	uxtb	r1, r2
 800806c:	4a0e      	ldr	r2, [pc, #56]	; (80080a8 <FATFS_LinkDriverEx+0x94>)
 800806e:	7251      	strb	r1, [r2, #9]
 8008070:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008072:	7dbb      	ldrb	r3, [r7, #22]
 8008074:	3330      	adds	r3, #48	; 0x30
 8008076:	b2da      	uxtb	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	3301      	adds	r3, #1
 8008080:	223a      	movs	r2, #58	; 0x3a
 8008082:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	3302      	adds	r3, #2
 8008088:	222f      	movs	r2, #47	; 0x2f
 800808a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	3303      	adds	r3, #3
 8008090:	2200      	movs	r2, #0
 8008092:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20000234 	.word	0x20000234

080080ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80080b6:	2200      	movs	r2, #0
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff ffaa 	bl	8008014 <FATFS_LinkDriverEx>
 80080c0:	4603      	mov	r3, r0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

uint8_t Mount_SD (const TCHAR* path)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80080d4:	2201      	movs	r2, #1
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4808      	ldr	r0, [pc, #32]	; (80080fc <Mount_SD+0x30>)
 80080da:	f7ff f853 	bl	8007184 <f_mount>
 80080de:	4603      	mov	r3, r0
 80080e0:	461a      	mov	r2, r3
 80080e2:	4b07      	ldr	r3, [pc, #28]	; (8008100 <Mount_SD+0x34>)
 80080e4:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80080e6:	4b06      	ldr	r3, [pc, #24]	; (8008100 <Mount_SD+0x34>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <Mount_SD+0x26>
		return 1;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e000      	b.n	80080f4 <Mount_SD+0x28>
	return 0;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200002a0 	.word	0x200002a0
 8008100:	200004e0 	.word	0x200004e0

08008104 <Unmount_SD>:

uint8_t Unmount_SD (const TCHAR* path)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800810c:	2201      	movs	r2, #1
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	2000      	movs	r0, #0
 8008112:	f7ff f837 	bl	8007184 <f_mount>
 8008116:	4603      	mov	r3, r0
 8008118:	461a      	mov	r2, r3
 800811a:	4b03      	ldr	r3, [pc, #12]	; (8008128 <Unmount_SD+0x24>)
 800811c:	701a      	strb	r2, [r3, #0]
}
 800811e:	bf00      	nop
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	200004e0 	.word	0x200004e0

0800812c <open_file>:
	    	}
	    }
	    return fresult;
}

FRESULT open_file(char *name){
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
	if((fresult = f_stat (name, &fno)) == FR_OK){
 8008134:	4910      	ldr	r1, [pc, #64]	; (8008178 <open_file+0x4c>)
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff ff22 	bl	8007f80 <f_stat>
 800813c:	4603      	mov	r3, r0
 800813e:	461a      	mov	r2, r3
 8008140:	4b0e      	ldr	r3, [pc, #56]	; (800817c <open_file+0x50>)
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	4b0d      	ldr	r3, [pc, #52]	; (800817c <open_file+0x50>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10f      	bne.n	800816c <open_file+0x40>
		if((fresult = f_open(&fil, name, FA_READ)) == FR_OK){
 800814c:	2201      	movs	r2, #1
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	480b      	ldr	r0, [pc, #44]	; (8008180 <open_file+0x54>)
 8008152:	f7ff f85f 	bl	8007214 <f_open>
 8008156:	4603      	mov	r3, r0
 8008158:	461a      	mov	r2, r3
 800815a:	4b08      	ldr	r3, [pc, #32]	; (800817c <open_file+0x50>)
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	4b07      	ldr	r3, [pc, #28]	; (800817c <open_file+0x50>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <open_file+0x40>
			open = 1;
 8008166:	4b07      	ldr	r3, [pc, #28]	; (8008184 <open_file+0x58>)
 8008168:	2201      	movs	r2, #1
 800816a:	701a      	strb	r2, [r3, #0]
		}
	}
	return fresult;
 800816c:	4b03      	ldr	r3, [pc, #12]	; (800817c <open_file+0x50>)
 800816e:	781b      	ldrb	r3, [r3, #0]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000288 	.word	0x20000288
 800817c:	200004e0 	.word	0x200004e0
 8008180:	200004e8 	.word	0x200004e8
 8008184:	20000240 	.word	0x20000240

08008188 <close_file>:

FRESULT close_file(){
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
	if(open){
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <close_file+0x30>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00d      	beq.n	80081b0 <close_file+0x28>
		if((fresult = f_close(&fil)) == FR_OK){
 8008194:	4809      	ldr	r0, [pc, #36]	; (80081bc <close_file+0x34>)
 8008196:	f7ff fc6d 	bl	8007a74 <f_close>
 800819a:	4603      	mov	r3, r0
 800819c:	461a      	mov	r2, r3
 800819e:	4b08      	ldr	r3, [pc, #32]	; (80081c0 <close_file+0x38>)
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <close_file+0x38>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d102      	bne.n	80081b0 <close_file+0x28>
			open = 0;
 80081aa:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <close_file+0x30>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]
		}
	}
	return fresult;
 80081b0:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <close_file+0x38>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000240 	.word	0x20000240
 80081bc:	200004e8 	.word	0x200004e8
 80081c0:	200004e0 	.word	0x200004e0

080081c4 <Read_config_File>:

FRESULT Read_config_File (char *name, char* buffer, uint8_t buffer_size, uint32_t offset)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	4613      	mov	r3, r2
 80081d2:	71fb      	strb	r3, [r7, #7]
	if(open){
 80081d4:	4b12      	ldr	r3, [pc, #72]	; (8008220 <Read_config_File+0x5c>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00e      	beq.n	80081fa <Read_config_File+0x36>
		f_lseek(&fil, offset);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	4811      	ldr	r0, [pc, #68]	; (8008224 <Read_config_File+0x60>)
 80081e0:	f7ff fc70 	bl	8007ac4 <f_lseek>
		fresult = f_read (&fil, buffer, buffer_size, &br);
 80081e4:	79fa      	ldrb	r2, [r7, #7]
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <Read_config_File+0x64>)
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	480e      	ldr	r0, [pc, #56]	; (8008224 <Read_config_File+0x60>)
 80081ec:	f7ff fa1d 	bl	800762a <f_read>
 80081f0:	4603      	mov	r3, r0
 80081f2:	461a      	mov	r2, r3
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <Read_config_File+0x68>)
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	e00c      	b.n	8008214 <Read_config_File+0x50>
	}else{
		open_file(name);
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f7ff ff96 	bl	800812c <open_file>
		fresult = f_read (&fil, buffer, buffer_size, &br);
 8008200:	79fa      	ldrb	r2, [r7, #7]
 8008202:	4b09      	ldr	r3, [pc, #36]	; (8008228 <Read_config_File+0x64>)
 8008204:	68b9      	ldr	r1, [r7, #8]
 8008206:	4807      	ldr	r0, [pc, #28]	; (8008224 <Read_config_File+0x60>)
 8008208:	f7ff fa0f 	bl	800762a <f_read>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	4b06      	ldr	r3, [pc, #24]	; (800822c <Read_config_File+0x68>)
 8008212:	701a      	strb	r2, [r3, #0]
	}
	return fresult;
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <Read_config_File+0x68>)
 8008216:	781b      	ldrb	r3, [r3, #0]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	20000240 	.word	0x20000240
 8008224:	200004e8 	.word	0x200004e8
 8008228:	200004d0 	.word	0x200004d0
 800822c:	200004e0 	.word	0x200004e0

08008230 <DHT_Delay>:


/********************* NO CHANGES AFTER THIS *************************************/

void DHT_Delay (uint16_t time)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(DHT_TIMER, 0);
 800823a:	4b08      	ldr	r3, [pc, #32]	; (800825c <DHT_Delay+0x2c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2200      	movs	r2, #0
 8008240:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(DHT_TIMER))<time);
 8008242:	bf00      	nop
 8008244:	4b05      	ldr	r3, [pc, #20]	; (800825c <DHT_Delay+0x2c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	429a      	cmp	r2, r3
 800824e:	d3f9      	bcc.n	8008244 <DHT_Delay+0x14>
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000d70 	.word	0x20000d70

08008260 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800826c:	f107 030c 	add.w	r3, r7, #12
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	609a      	str	r2, [r3, #8]
 8008278:	60da      	str	r2, [r3, #12]
 800827a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800827c:	887b      	ldrh	r3, [r7, #2]
 800827e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008280:	2301      	movs	r3, #1
 8008282:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008284:	2303      	movs	r3, #3
 8008286:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800828c:	f107 030c 	add.w	r3, r7, #12
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7f8 fff0 	bl	8001278 <HAL_GPIO_Init>
}
 8008298:	bf00      	nop
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	605a      	str	r2, [r3, #4]
 80082b6:	609a      	str	r2, [r3, #8]
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80082bc:	887b      	ldrh	r3, [r7, #2]
 80082be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082c0:	2300      	movs	r3, #0
 80082c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082c4:	2301      	movs	r3, #1
 80082c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80082c8:	f107 030c 	add.w	r3, r7, #12
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7f8 ffd2 	bl	8001278 <HAL_GPIO_Init>
}
 80082d4:	bf00      	nop
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <DHT_Start>:

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM;

void DHT_Start (uint8_t DHT)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80082e6:	2120      	movs	r1, #32
 80082e8:	4811      	ldr	r0, [pc, #68]	; (8008330 <DHT_Start+0x54>)
 80082ea:	f7ff ffb9 	bl	8008260 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80082ee:	2200      	movs	r2, #0
 80082f0:	2120      	movs	r1, #32
 80082f2:	480f      	ldr	r0, [pc, #60]	; (8008330 <DHT_Start+0x54>)
 80082f4:	f7f9 f94a 	bl	800158c <HAL_GPIO_WritePin>
	if(DHT == 22){
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	2b16      	cmp	r3, #22
 80082fc:	d104      	bne.n	8008308 <DHT_Start+0x2c>
		DHT_Delay (1300);   // wait for >1ms
 80082fe:	f240 5014 	movw	r0, #1300	; 0x514
 8008302:	f7ff ff95 	bl	8008230 <DHT_Delay>
 8008306:	e003      	b.n	8008310 <DHT_Start+0x34>
	}else{
		DHT_Delay (18000);   // wait for 18ms
 8008308:	f244 6050 	movw	r0, #18000	; 0x4650
 800830c:	f7ff ff90 	bl	8008230 <DHT_Delay>
	}

    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8008310:	2201      	movs	r2, #1
 8008312:	2120      	movs	r1, #32
 8008314:	4806      	ldr	r0, [pc, #24]	; (8008330 <DHT_Start+0x54>)
 8008316:	f7f9 f939 	bl	800158c <HAL_GPIO_WritePin>
    DHT_Delay (20);   // wait for 30us
 800831a:	2014      	movs	r0, #20
 800831c:	f7ff ff88 	bl	8008230 <DHT_Delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8008320:	2120      	movs	r1, #32
 8008322:	4803      	ldr	r0, [pc, #12]	; (8008330 <DHT_Start+0x54>)
 8008324:	f7ff ffbc 	bl	80082a0 <Set_Pin_Input>
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	48000400 	.word	0x48000400

08008334 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	71fb      	strb	r3, [r7, #7]
	DHT_Delay (40);
 800833e:	2028      	movs	r0, #40	; 0x28
 8008340:	f7ff ff76 	bl	8008230 <DHT_Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8008344:	2120      	movs	r1, #32
 8008346:	4812      	ldr	r0, [pc, #72]	; (8008390 <DHT_Check_Response+0x5c>)
 8008348:	f7f9 f908 	bl	800155c <HAL_GPIO_ReadPin>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10f      	bne.n	8008372 <DHT_Check_Response+0x3e>
	{
		DHT_Delay (80);
 8008352:	2050      	movs	r0, #80	; 0x50
 8008354:	f7ff ff6c 	bl	8008230 <DHT_Delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8008358:	2120      	movs	r1, #32
 800835a:	480d      	ldr	r0, [pc, #52]	; (8008390 <DHT_Check_Response+0x5c>)
 800835c:	f7f9 f8fe 	bl	800155c <HAL_GPIO_ReadPin>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <DHT_Check_Response+0x38>
 8008366:	2301      	movs	r3, #1
 8008368:	71fb      	strb	r3, [r7, #7]
 800836a:	e004      	b.n	8008376 <DHT_Check_Response+0x42>
		else Response = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	71fb      	strb	r3, [r7, #7]
 8008370:	e001      	b.n	8008376 <DHT_Check_Response+0x42>
	}else{
		return 0;
 8008372:	2300      	movs	r3, #0
 8008374:	e008      	b.n	8008388 <DHT_Check_Response+0x54>
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8008376:	bf00      	nop
 8008378:	2120      	movs	r1, #32
 800837a:	4805      	ldr	r0, [pc, #20]	; (8008390 <DHT_Check_Response+0x5c>)
 800837c:	f7f9 f8ee 	bl	800155c <HAL_GPIO_ReadPin>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1f8      	bne.n	8008378 <DHT_Check_Response+0x44>

	return Response;
 8008386:	79fb      	ldrb	r3, [r7, #7]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	48000400 	.word	0x48000400

08008394 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008398:	4904      	ldr	r1, [pc, #16]	; (80083ac <MX_FATFS_Init+0x18>)
 800839a:	4805      	ldr	r0, [pc, #20]	; (80083b0 <MX_FATFS_Init+0x1c>)
 800839c:	f7ff fe86 	bl	80080ac <FATFS_LinkDriver>
 80083a0:	4603      	mov	r3, r0
 80083a2:	461a      	mov	r2, r3
 80083a4:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <MX_FATFS_Init+0x20>)
 80083a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80083a8:	bf00      	nop
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000714 	.word	0x20000714
 80083b0:	20000014 	.word	0x20000014
 80083b4:	20000718 	.word	0x20000718

080083b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80083bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80083be:	4618      	mov	r0, r3
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80083cc:	2200      	movs	r2, #0
 80083ce:	2102      	movs	r1, #2
 80083d0:	4802      	ldr	r0, [pc, #8]	; (80083dc <SELECT+0x14>)
 80083d2:	f7f9 f8db 	bl	800158c <HAL_GPIO_WritePin>
}
 80083d6:	bf00      	nop
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	48001400 	.word	0x48001400

080083e0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80083e4:	2201      	movs	r2, #1
 80083e6:	2102      	movs	r1, #2
 80083e8:	4802      	ldr	r0, [pc, #8]	; (80083f4 <DESELECT+0x14>)
 80083ea:	f7f9 f8cf 	bl	800158c <HAL_GPIO_WritePin>
}
 80083ee:	bf00      	nop
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	48001400 	.word	0x48001400

080083f8 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8008402:	bf00      	nop
 8008404:	4808      	ldr	r0, [pc, #32]	; (8008428 <SPI_TxByte+0x30>)
 8008406:	f7fb fc2c 	bl	8003c62 <HAL_SPI_GetState>
 800840a:	4603      	mov	r3, r0
 800840c:	2b01      	cmp	r3, #1
 800840e:	d1f9      	bne.n	8008404 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8008410:	1df9      	adds	r1, r7, #7
 8008412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008416:	2201      	movs	r2, #1
 8008418:	4803      	ldr	r0, [pc, #12]	; (8008428 <SPI_TxByte+0x30>)
 800841a:	f7fb f8a9 	bl	8003570 <HAL_SPI_Transmit>
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000d08 	.word	0x20000d08

0800842c <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8008432:	23ff      	movs	r3, #255	; 0xff
 8008434:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800843a:	bf00      	nop
 800843c:	4809      	ldr	r0, [pc, #36]	; (8008464 <SPI_RxByte+0x38>)
 800843e:	f7fb fc10 	bl	8003c62 <HAL_SPI_GetState>
 8008442:	4603      	mov	r3, r0
 8008444:	2b01      	cmp	r3, #1
 8008446:	d1f9      	bne.n	800843c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8008448:	1dba      	adds	r2, r7, #6
 800844a:	1df9      	adds	r1, r7, #7
 800844c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	2301      	movs	r3, #1
 8008454:	4803      	ldr	r0, [pc, #12]	; (8008464 <SPI_RxByte+0x38>)
 8008456:	f7fb f9f1 	bl	800383c <HAL_SPI_TransmitReceive>
  
  return data;
 800845a:	79bb      	ldrb	r3, [r7, #6]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000d08 	.word	0x20000d08

08008468 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8008470:	f7ff ffdc 	bl	800842c <SPI_RxByte>
 8008474:	4603      	mov	r3, r0
 8008476:	461a      	mov	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	701a      	strb	r2, [r3, #0]
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <SD_ReadyWait+0x34>)
 800848c:	2232      	movs	r2, #50	; 0x32
 800848e:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8008490:	f7ff ffcc 	bl	800842c <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8008494:	f7ff ffca 	bl	800842c <SPI_RxByte>
 8008498:	4603      	mov	r3, r0
 800849a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	2bff      	cmp	r3, #255	; 0xff
 80084a0:	d004      	beq.n	80084ac <SD_ReadyWait+0x28>
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <SD_ReadyWait+0x34>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f3      	bne.n	8008494 <SD_ReadyWait+0x10>
  
  return res;
 80084ac:	79fb      	ldrb	r3, [r7, #7]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20001624 	.word	0x20001624

080084bc <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80084c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80084c6:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80084c8:	f7ff ff8a 	bl	80083e0 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80084cc:	2300      	movs	r3, #0
 80084ce:	613b      	str	r3, [r7, #16]
 80084d0:	e005      	b.n	80084de <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80084d2:	20ff      	movs	r0, #255	; 0xff
 80084d4:	f7ff ff90 	bl	80083f8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	3301      	adds	r3, #1
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b09      	cmp	r3, #9
 80084e2:	ddf6      	ble.n	80084d2 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80084e4:	f7ff ff70 	bl	80083c8 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80084e8:	2340      	movs	r3, #64	; 0x40
 80084ea:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80084f0:	2300      	movs	r3, #0
 80084f2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80084fc:	2395      	movs	r3, #149	; 0x95
 80084fe:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	e009      	b.n	800851a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8008506:	1d3a      	adds	r2, r7, #4
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff ff72 	bl	80083f8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b05      	cmp	r3, #5
 800851e:	ddf2      	ble.n	8008506 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8008520:	e002      	b.n	8008528 <SD_PowerOn+0x6c>
  {
    Count--;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	3b01      	subs	r3, #1
 8008526:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8008528:	f7ff ff80 	bl	800842c <SPI_RxByte>
 800852c:	4603      	mov	r3, r0
 800852e:	2b01      	cmp	r3, #1
 8008530:	d002      	beq.n	8008538 <SD_PowerOn+0x7c>
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f4      	bne.n	8008522 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8008538:	f7ff ff52 	bl	80083e0 <DESELECT>
  SPI_TxByte(0XFF);
 800853c:	20ff      	movs	r0, #255	; 0xff
 800853e:	f7ff ff5b 	bl	80083f8 <SPI_TxByte>
  
  PowerFlag = 1;
 8008542:	4b03      	ldr	r3, [pc, #12]	; (8008550 <SD_PowerOn+0x94>)
 8008544:	2201      	movs	r2, #1
 8008546:	701a      	strb	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20000242 	.word	0x20000242

08008554 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8008558:	4b03      	ldr	r3, [pc, #12]	; (8008568 <SD_PowerOff+0x14>)
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
}
 800855e:	bf00      	nop
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	20000242 	.word	0x20000242

0800856c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8008570:	4b03      	ldr	r3, [pc, #12]	; (8008580 <SD_CheckPower+0x14>)
 8008572:	781b      	ldrb	r3, [r3, #0]
}
 8008574:	4618      	mov	r0, r3
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000242 	.word	0x20000242

08008584 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800858e:	4b17      	ldr	r3, [pc, #92]	; (80085ec <SD_RxDataBlock+0x68>)
 8008590:	220a      	movs	r2, #10
 8008592:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8008594:	f7ff ff4a 	bl	800842c <SPI_RxByte>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2bff      	cmp	r3, #255	; 0xff
 80085a0:	d104      	bne.n	80085ac <SD_RxDataBlock+0x28>
 80085a2:	4b12      	ldr	r3, [pc, #72]	; (80085ec <SD_RxDataBlock+0x68>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1f3      	bne.n	8008594 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2bfe      	cmp	r3, #254	; 0xfe
 80085b0:	d001      	beq.n	80085b6 <SD_RxDataBlock+0x32>
    return FALSE;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e016      	b.n	80085e4 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff ff53 	bl	8008468 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff ff4d 	bl	8008468 <SPI_RxBytePtr>
  } while(btr -= 2);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	3b02      	subs	r3, #2
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1ed      	bne.n	80085b6 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80085da:	f7ff ff27 	bl	800842c <SPI_RxByte>
  SPI_RxByte();
 80085de:	f7ff ff25 	bl	800842c <SPI_RxByte>
  
  return TRUE;
 80085e2:	2301      	movs	r3, #1
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20001625 	.word	0x20001625

080085f0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8008600:	f7ff ff40 	bl	8008484 <SD_ReadyWait>
 8008604:	4603      	mov	r3, r0
 8008606:	2bff      	cmp	r3, #255	; 0xff
 8008608:	d001      	beq.n	800860e <SD_TxDataBlock+0x1e>
    return FALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	e040      	b.n	8008690 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff fef1 	bl	80083f8 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	2bfd      	cmp	r3, #253	; 0xfd
 800861a:	d031      	beq.n	8008680 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fee5 	bl	80083f8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff fede 	bl	80083f8 <SPI_TxByte>
    } while (--wc);
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	3b01      	subs	r3, #1
 8008640:	73bb      	strb	r3, [r7, #14]
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1eb      	bne.n	8008620 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8008648:	f7ff fef0 	bl	800842c <SPI_RxByte>
    SPI_RxByte();
 800864c:	f7ff feee 	bl	800842c <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8008650:	e00b      	b.n	800866a <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8008652:	f7ff feeb 	bl	800842c <SPI_RxByte>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	2b05      	cmp	r3, #5
 8008662:	d006      	beq.n	8008672 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8008664:	7b7b      	ldrb	r3, [r7, #13]
 8008666:	3301      	adds	r3, #1
 8008668:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800866a:	7b7b      	ldrb	r3, [r7, #13]
 800866c:	2b40      	cmp	r3, #64	; 0x40
 800866e:	d9f0      	bls.n	8008652 <SD_TxDataBlock+0x62>
 8008670:	e000      	b.n	8008674 <SD_TxDataBlock+0x84>
        break;
 8008672:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8008674:	bf00      	nop
 8008676:	f7ff fed9 	bl	800842c <SPI_RxByte>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0fa      	beq.n	8008676 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	f003 031f 	and.w	r3, r3, #31
 8008686:	2b05      	cmp	r3, #5
 8008688:	d101      	bne.n	800868e <SD_TxDataBlock+0x9e>
    return TRUE;
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80086a4:	f7ff feee 	bl	8008484 <SD_ReadyWait>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2bff      	cmp	r3, #255	; 0xff
 80086ac:	d001      	beq.n	80086b2 <SD_SendCmd+0x1a>
    return 0xFF;
 80086ae:	23ff      	movs	r3, #255	; 0xff
 80086b0:	e040      	b.n	8008734 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80086b2:	79fb      	ldrb	r3, [r7, #7]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fe9f 	bl	80083f8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	0e1b      	lsrs	r3, r3, #24
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7ff fe99 	bl	80083f8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	0c1b      	lsrs	r3, r3, #16
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff fe93 	bl	80083f8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	0a1b      	lsrs	r3, r3, #8
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fe8d 	bl	80083f8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7ff fe88 	bl	80083f8 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	2b40      	cmp	r3, #64	; 0x40
 80086f0:	d101      	bne.n	80086f6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80086f2:	2395      	movs	r3, #149	; 0x95
 80086f4:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	2b48      	cmp	r3, #72	; 0x48
 80086fa:	d101      	bne.n	8008700 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80086fc:	2387      	movs	r3, #135	; 0x87
 80086fe:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fe78 	bl	80083f8 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	2b4c      	cmp	r3, #76	; 0x4c
 800870c:	d101      	bne.n	8008712 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800870e:	f7ff fe8d 	bl	800842c <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8008712:	230a      	movs	r3, #10
 8008714:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8008716:	f7ff fe89 	bl	800842c <SPI_RxByte>
 800871a:	4603      	mov	r3, r0
 800871c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800871e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008722:	2b00      	cmp	r3, #0
 8008724:	da05      	bge.n	8008732 <SD_SendCmd+0x9a>
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	3b01      	subs	r3, #1
 800872a:	73bb      	strb	r3, [r7, #14]
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f1      	bne.n	8008716 <SD_SendCmd+0x7e>
  
  return res;
 8008732:	7b7b      	ldrb	r3, [r7, #13]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800873c:	b590      	push	{r4, r7, lr}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 800874c:	2301      	movs	r3, #1
 800874e:	e0d5      	b.n	80088fc <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8008750:	4b6c      	ldr	r3, [pc, #432]	; (8008904 <SD_disk_initialize+0x1c8>)
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <SD_disk_initialize+0x2a>
    return Stat;        
 800875e:	4b69      	ldr	r3, [pc, #420]	; (8008904 <SD_disk_initialize+0x1c8>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	e0ca      	b.n	80088fc <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8008766:	f7ff fea9 	bl	80084bc <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800876a:	f7ff fe2d 	bl	80083c8 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8008772:	2100      	movs	r1, #0
 8008774:	2040      	movs	r0, #64	; 0x40
 8008776:	f7ff ff8f 	bl	8008698 <SD_SendCmd>
 800877a:	4603      	mov	r3, r0
 800877c:	2b01      	cmp	r3, #1
 800877e:	f040 80a5 	bne.w	80088cc <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8008782:	4b61      	ldr	r3, [pc, #388]	; (8008908 <SD_disk_initialize+0x1cc>)
 8008784:	2264      	movs	r2, #100	; 0x64
 8008786:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8008788:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800878c:	2048      	movs	r0, #72	; 0x48
 800878e:	f7ff ff83 	bl	8008698 <SD_SendCmd>
 8008792:	4603      	mov	r3, r0
 8008794:	2b01      	cmp	r3, #1
 8008796:	d158      	bne.n	800884a <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8008798:	2300      	movs	r3, #0
 800879a:	73fb      	strb	r3, [r7, #15]
 800879c:	e00c      	b.n	80087b8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800879e:	7bfc      	ldrb	r4, [r7, #15]
 80087a0:	f7ff fe44 	bl	800842c <SPI_RxByte>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	f107 0310 	add.w	r3, r7, #16
 80087ac:	4423      	add	r3, r4
 80087ae:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	3301      	adds	r3, #1
 80087b6:	73fb      	strb	r3, [r7, #15]
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d9ef      	bls.n	800879e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80087be:	7abb      	ldrb	r3, [r7, #10]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	f040 8083 	bne.w	80088cc <SD_disk_initialize+0x190>
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	2baa      	cmp	r3, #170	; 0xaa
 80087ca:	d17f      	bne.n	80088cc <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80087cc:	2100      	movs	r1, #0
 80087ce:	2077      	movs	r0, #119	; 0x77
 80087d0:	f7ff ff62 	bl	8008698 <SD_SendCmd>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d807      	bhi.n	80087ea <SD_disk_initialize+0xae>
 80087da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80087de:	2069      	movs	r0, #105	; 0x69
 80087e0:	f7ff ff5a 	bl	8008698 <SD_SendCmd>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80087ea:	4b47      	ldr	r3, [pc, #284]	; (8008908 <SD_disk_initialize+0x1cc>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1eb      	bne.n	80087cc <SD_disk_initialize+0x90>
 80087f4:	e000      	b.n	80087f8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80087f6:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80087f8:	4b43      	ldr	r3, [pc, #268]	; (8008908 <SD_disk_initialize+0x1cc>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d064      	beq.n	80088cc <SD_disk_initialize+0x190>
 8008802:	2100      	movs	r1, #0
 8008804:	207a      	movs	r0, #122	; 0x7a
 8008806:	f7ff ff47 	bl	8008698 <SD_SendCmd>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d15d      	bne.n	80088cc <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
 8008814:	e00c      	b.n	8008830 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8008816:	7bfc      	ldrb	r4, [r7, #15]
 8008818:	f7ff fe08 	bl	800842c <SPI_RxByte>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	f107 0310 	add.w	r3, r7, #16
 8008824:	4423      	add	r3, r4
 8008826:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	3301      	adds	r3, #1
 800882e:	73fb      	strb	r3, [r7, #15]
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b03      	cmp	r3, #3
 8008834:	d9ef      	bls.n	8008816 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8008836:	7a3b      	ldrb	r3, [r7, #8]
 8008838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <SD_disk_initialize+0x108>
 8008840:	2306      	movs	r3, #6
 8008842:	e000      	b.n	8008846 <SD_disk_initialize+0x10a>
 8008844:	2302      	movs	r3, #2
 8008846:	73bb      	strb	r3, [r7, #14]
 8008848:	e040      	b.n	80088cc <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800884a:	2100      	movs	r1, #0
 800884c:	2077      	movs	r0, #119	; 0x77
 800884e:	f7ff ff23 	bl	8008698 <SD_SendCmd>
 8008852:	4603      	mov	r3, r0
 8008854:	2b01      	cmp	r3, #1
 8008856:	d808      	bhi.n	800886a <SD_disk_initialize+0x12e>
 8008858:	2100      	movs	r1, #0
 800885a:	2069      	movs	r0, #105	; 0x69
 800885c:	f7ff ff1c 	bl	8008698 <SD_SendCmd>
 8008860:	4603      	mov	r3, r0
 8008862:	2b01      	cmp	r3, #1
 8008864:	d801      	bhi.n	800886a <SD_disk_initialize+0x12e>
 8008866:	2302      	movs	r3, #2
 8008868:	e000      	b.n	800886c <SD_disk_initialize+0x130>
 800886a:	2301      	movs	r3, #1
 800886c:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d10e      	bne.n	8008892 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8008874:	2100      	movs	r1, #0
 8008876:	2077      	movs	r0, #119	; 0x77
 8008878:	f7ff ff0e 	bl	8008698 <SD_SendCmd>
 800887c:	4603      	mov	r3, r0
 800887e:	2b01      	cmp	r3, #1
 8008880:	d80e      	bhi.n	80088a0 <SD_disk_initialize+0x164>
 8008882:	2100      	movs	r1, #0
 8008884:	2069      	movs	r0, #105	; 0x69
 8008886:	f7ff ff07 	bl	8008698 <SD_SendCmd>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d107      	bne.n	80088a0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8008890:	e00d      	b.n	80088ae <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8008892:	2100      	movs	r1, #0
 8008894:	2041      	movs	r0, #65	; 0x41
 8008896:	f7ff feff 	bl	8008698 <SD_SendCmd>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d005      	beq.n	80088ac <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80088a0:	4b19      	ldr	r3, [pc, #100]	; (8008908 <SD_disk_initialize+0x1cc>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e1      	bne.n	800886e <SD_disk_initialize+0x132>
 80088aa:	e000      	b.n	80088ae <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80088ac:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80088ae:	4b16      	ldr	r3, [pc, #88]	; (8008908 <SD_disk_initialize+0x1cc>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <SD_disk_initialize+0x18c>
 80088b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80088bc:	2050      	movs	r0, #80	; 0x50
 80088be:	f7ff feeb 	bl	8008698 <SD_SendCmd>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80088cc:	4a0f      	ldr	r2, [pc, #60]	; (800890c <SD_disk_initialize+0x1d0>)
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80088d2:	f7ff fd85 	bl	80083e0 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80088d6:	f7ff fda9 	bl	800842c <SPI_RxByte>
  
  if (type) 
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d008      	beq.n	80088f2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80088e0:	4b08      	ldr	r3, [pc, #32]	; (8008904 <SD_disk_initialize+0x1c8>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	f023 0301 	bic.w	r3, r3, #1
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	4b05      	ldr	r3, [pc, #20]	; (8008904 <SD_disk_initialize+0x1c8>)
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	e001      	b.n	80088f6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80088f2:	f7ff fe2f 	bl	8008554 <SD_PowerOff>
  }
  
  return Stat;
 80088f6:	4b03      	ldr	r3, [pc, #12]	; (8008904 <SD_disk_initialize+0x1c8>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	b2db      	uxtb	r3, r3
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	bd90      	pop	{r4, r7, pc}
 8008904:	20000005 	.word	0x20000005
 8008908:	20001625 	.word	0x20001625
 800890c:	20000241 	.word	0x20000241

08008910 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8008920:	2301      	movs	r3, #1
 8008922:	e002      	b.n	800892a <SD_disk_status+0x1a>
  
  return Stat;
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <SD_disk_status+0x28>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	b2db      	uxtb	r3, r3
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000005 	.word	0x20000005

0800893c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	4603      	mov	r3, r0
 800894a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <SD_disk_read+0x1c>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <SD_disk_read+0x20>
    return RES_PARERR;
 8008958:	2304      	movs	r3, #4
 800895a:	e051      	b.n	8008a00 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 800895c:	4b2a      	ldr	r3, [pc, #168]	; (8008a08 <SD_disk_read+0xcc>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800896a:	2303      	movs	r3, #3
 800896c:	e048      	b.n	8008a00 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800896e:	4b27      	ldr	r3, [pc, #156]	; (8008a0c <SD_disk_read+0xd0>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	025b      	lsls	r3, r3, #9
 800897e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8008980:	f7ff fd22 	bl	80083c8 <SELECT>
  
  if (count == 1) 
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d111      	bne.n	80089ae <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	2051      	movs	r0, #81	; 0x51
 800898e:	f7ff fe83 	bl	8008698 <SD_SendCmd>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d129      	bne.n	80089ec <SD_disk_read+0xb0>
 8008998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800899c:	68b8      	ldr	r0, [r7, #8]
 800899e:	f7ff fdf1 	bl	8008584 <SD_RxDataBlock>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d021      	beq.n	80089ec <SD_disk_read+0xb0>
      count = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	e01e      	b.n	80089ec <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	2052      	movs	r0, #82	; 0x52
 80089b2:	f7ff fe71 	bl	8008698 <SD_SendCmd>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d117      	bne.n	80089ec <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80089bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089c0:	68b8      	ldr	r0, [r7, #8]
 80089c2:	f7ff fddf 	bl	8008584 <SD_RxDataBlock>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80089d2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	603b      	str	r3, [r7, #0]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1ed      	bne.n	80089bc <SD_disk_read+0x80>
 80089e0:	e000      	b.n	80089e4 <SD_disk_read+0xa8>
          break;
 80089e2:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80089e4:	2100      	movs	r1, #0
 80089e6:	204c      	movs	r0, #76	; 0x4c
 80089e8:	f7ff fe56 	bl	8008698 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80089ec:	f7ff fcf8 	bl	80083e0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80089f0:	f7ff fd1c 	bl	800842c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	bf14      	ite	ne
 80089fa:	2301      	movne	r3, #1
 80089fc:	2300      	moveq	r3, #0
 80089fe:	b2db      	uxtb	r3, r3
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000005 	.word	0x20000005
 8008a0c:	20000241 	.word	0x20000241

08008a10 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
 8008a1a:	603b      	str	r3, [r7, #0]
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <SD_disk_write+0x1c>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <SD_disk_write+0x20>
    return RES_PARERR;
 8008a2c:	2304      	movs	r3, #4
 8008a2e:	e06b      	b.n	8008b08 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8008a30:	4b37      	ldr	r3, [pc, #220]	; (8008b10 <SD_disk_write+0x100>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e062      	b.n	8008b08 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8008a42:	4b33      	ldr	r3, [pc, #204]	; (8008b10 <SD_disk_write+0x100>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <SD_disk_write+0x44>
    return RES_WRPRT;
 8008a50:	2302      	movs	r3, #2
 8008a52:	e059      	b.n	8008b08 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8008a54:	4b2f      	ldr	r3, [pc, #188]	; (8008b14 <SD_disk_write+0x104>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	025b      	lsls	r3, r3, #9
 8008a64:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8008a66:	f7ff fcaf 	bl	80083c8 <SELECT>
  
  if (count == 1) 
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d110      	bne.n	8008a92 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	2058      	movs	r0, #88	; 0x58
 8008a74:	f7ff fe10 	bl	8008698 <SD_SendCmd>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d13a      	bne.n	8008af4 <SD_disk_write+0xe4>
 8008a7e:	21fe      	movs	r1, #254	; 0xfe
 8008a80:	68b8      	ldr	r0, [r7, #8]
 8008a82:	f7ff fdb5 	bl	80085f0 <SD_TxDataBlock>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d033      	beq.n	8008af4 <SD_disk_write+0xe4>
      count = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	e030      	b.n	8008af4 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8008a92:	4b20      	ldr	r3, [pc, #128]	; (8008b14 <SD_disk_write+0x104>)
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	2077      	movs	r0, #119	; 0x77
 8008aa2:	f7ff fdf9 	bl	8008698 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	2057      	movs	r0, #87	; 0x57
 8008aaa:	f7ff fdf5 	bl	8008698 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	2059      	movs	r0, #89	; 0x59
 8008ab2:	f7ff fdf1 	bl	8008698 <SD_SendCmd>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d11b      	bne.n	8008af4 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8008abc:	21fc      	movs	r1, #252	; 0xfc
 8008abe:	68b8      	ldr	r0, [r7, #8]
 8008ac0:	f7ff fd96 	bl	80085f0 <SD_TxDataBlock>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008ad0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1ee      	bne.n	8008abc <SD_disk_write+0xac>
 8008ade:	e000      	b.n	8008ae2 <SD_disk_write+0xd2>
          break;
 8008ae0:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8008ae2:	21fd      	movs	r1, #253	; 0xfd
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f7ff fd83 	bl	80085f0 <SD_TxDataBlock>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <SD_disk_write+0xe4>
      {        
        count = 1;
 8008af0:	2301      	movs	r3, #1
 8008af2:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8008af4:	f7ff fc74 	bl	80083e0 <DESELECT>
  SPI_RxByte();
 8008af8:	f7ff fc98 	bl	800842c <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bf14      	ite	ne
 8008b02:	2301      	movne	r3, #1
 8008b04:	2300      	moveq	r3, #0
 8008b06:	b2db      	uxtb	r3, r3
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000005 	.word	0x20000005
 8008b14:	20000241 	.word	0x20000241

08008b18 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8008b18:	b590      	push	{r4, r7, lr}
 8008b1a:	b08b      	sub	sp, #44	; 0x2c
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	603a      	str	r2, [r7, #0]
 8008b22:	71fb      	strb	r3, [r7, #7]
 8008b24:	460b      	mov	r3, r1
 8008b26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8008b32:	2304      	movs	r3, #4
 8008b34:	e117      	b.n	8008d66 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8008b3c:	79bb      	ldrb	r3, [r7, #6]
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	d126      	bne.n	8008b90 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d00e      	beq.n	8008b68 <SD_disk_ioctl+0x50>
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d012      	beq.n	8008b74 <SD_disk_ioctl+0x5c>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d11a      	bne.n	8008b88 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8008b52:	f7ff fd0b 	bl	800856c <SD_CheckPower>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8008b5c:	f7ff fcfa 	bl	8008554 <SD_PowerOff>
      res = RES_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008b66:	e0fc      	b.n	8008d62 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8008b68:	f7ff fca8 	bl	80084bc <SD_PowerOn>
      res = RES_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008b72:	e0f6      	b.n	8008d62 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	1c5c      	adds	r4, r3, #1
 8008b78:	f7ff fcf8 	bl	800856c <SD_CheckPower>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8008b80:	2300      	movs	r3, #0
 8008b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008b86:	e0ec      	b.n	8008d62 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b8e:	e0e8      	b.n	8008d62 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8008b90:	4b77      	ldr	r3, [pc, #476]	; (8008d70 <SD_disk_ioctl+0x258>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e0e1      	b.n	8008d66 <SD_disk_ioctl+0x24e>
    
    SELECT();
 8008ba2:	f7ff fc11 	bl	80083c8 <SELECT>
    
    switch (ctrl) 
 8008ba6:	79bb      	ldrb	r3, [r7, #6]
 8008ba8:	2b0d      	cmp	r3, #13
 8008baa:	f200 80cb 	bhi.w	8008d44 <SD_disk_ioctl+0x22c>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <SD_disk_ioctl+0x9c>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008caf 	.word	0x08008caf
 8008bb8:	08008bed 	.word	0x08008bed
 8008bbc:	08008c9f 	.word	0x08008c9f
 8008bc0:	08008d45 	.word	0x08008d45
 8008bc4:	08008d45 	.word	0x08008d45
 8008bc8:	08008d45 	.word	0x08008d45
 8008bcc:	08008d45 	.word	0x08008d45
 8008bd0:	08008d45 	.word	0x08008d45
 8008bd4:	08008d45 	.word	0x08008d45
 8008bd8:	08008d45 	.word	0x08008d45
 8008bdc:	08008d45 	.word	0x08008d45
 8008be0:	08008cc1 	.word	0x08008cc1
 8008be4:	08008ce5 	.word	0x08008ce5
 8008be8:	08008d09 	.word	0x08008d09
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8008bec:	2100      	movs	r1, #0
 8008bee:	2049      	movs	r0, #73	; 0x49
 8008bf0:	f7ff fd52 	bl	8008698 <SD_SendCmd>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 80a8 	bne.w	8008d4c <SD_disk_ioctl+0x234>
 8008bfc:	f107 030c 	add.w	r3, r7, #12
 8008c00:	2110      	movs	r1, #16
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff fcbe 	bl	8008584 <SD_RxDataBlock>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 809e 	beq.w	8008d4c <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8008c10:	7b3b      	ldrb	r3, [r7, #12]
 8008c12:	099b      	lsrs	r3, r3, #6
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d10e      	bne.n	8008c38 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8008c1a:	7d7b      	ldrb	r3, [r7, #21]
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	7d3b      	ldrb	r3, [r7, #20]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8008c2e:	8bfb      	ldrh	r3, [r7, #30]
 8008c30:	029a      	lsls	r2, r3, #10
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	e02e      	b.n	8008c96 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008c38:	7c7b      	ldrb	r3, [r7, #17]
 8008c3a:	f003 030f 	and.w	r3, r3, #15
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	7dbb      	ldrb	r3, [r7, #22]
 8008c42:	09db      	lsrs	r3, r3, #7
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	4413      	add	r3, r2
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	7d7b      	ldrb	r3, [r7, #21]
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	f003 0306 	and.w	r3, r3, #6
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	4413      	add	r3, r2
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	3302      	adds	r3, #2
 8008c5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8008c60:	7d3b      	ldrb	r3, [r7, #20]
 8008c62:	099b      	lsrs	r3, r3, #6
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	7cfb      	ldrb	r3, [r7, #19]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	4413      	add	r3, r2
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	7cbb      	ldrb	r3, [r7, #18]
 8008c76:	029b      	lsls	r3, r3, #10
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	4413      	add	r3, r2
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3301      	adds	r3, #1
 8008c86:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8008c88:	8bfa      	ldrh	r2, [r7, #30]
 8008c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c8e:	3b09      	subs	r3, #9
 8008c90:	409a      	lsls	r2, r3
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8008c9c:	e056      	b.n	8008d4c <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ca4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008cac:	e055      	b.n	8008d5a <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8008cae:	f7ff fbe9 	bl	8008484 <SD_ReadyWait>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2bff      	cmp	r3, #255	; 0xff
 8008cb6:	d14b      	bne.n	8008d50 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008cbe:	e047      	b.n	8008d50 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	2049      	movs	r0, #73	; 0x49
 8008cc4:	f7ff fce8 	bl	8008698 <SD_SendCmd>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d142      	bne.n	8008d54 <SD_disk_ioctl+0x23c>
 8008cce:	2110      	movs	r1, #16
 8008cd0:	6a38      	ldr	r0, [r7, #32]
 8008cd2:	f7ff fc57 	bl	8008584 <SD_RxDataBlock>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d03b      	beq.n	8008d54 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008ce2:	e037      	b.n	8008d54 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	204a      	movs	r0, #74	; 0x4a
 8008ce8:	f7ff fcd6 	bl	8008698 <SD_SendCmd>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d132      	bne.n	8008d58 <SD_disk_ioctl+0x240>
 8008cf2:	2110      	movs	r1, #16
 8008cf4:	6a38      	ldr	r0, [r7, #32]
 8008cf6:	f7ff fc45 	bl	8008584 <SD_RxDataBlock>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d02b      	beq.n	8008d58 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008d06:	e027      	b.n	8008d58 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8008d08:	2100      	movs	r1, #0
 8008d0a:	207a      	movs	r0, #122	; 0x7a
 8008d0c:	f7ff fcc4 	bl	8008698 <SD_SendCmd>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d116      	bne.n	8008d44 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8008d16:	2300      	movs	r3, #0
 8008d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d1c:	e00b      	b.n	8008d36 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8008d1e:	6a3c      	ldr	r4, [r7, #32]
 8008d20:	1c63      	adds	r3, r4, #1
 8008d22:	623b      	str	r3, [r7, #32]
 8008d24:	f7ff fb82 	bl	800842c <SPI_RxByte>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8008d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d30:	3301      	adds	r3, #1
 8008d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d9ef      	bls.n	8008d1e <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8008d44:	2304      	movs	r3, #4
 8008d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d4a:	e006      	b.n	8008d5a <SD_disk_ioctl+0x242>
      break;
 8008d4c:	bf00      	nop
 8008d4e:	e004      	b.n	8008d5a <SD_disk_ioctl+0x242>
      break;
 8008d50:	bf00      	nop
 8008d52:	e002      	b.n	8008d5a <SD_disk_ioctl+0x242>
      break;
 8008d54:	bf00      	nop
 8008d56:	e000      	b.n	8008d5a <SD_disk_ioctl+0x242>
      break;
 8008d58:	bf00      	nop
    }
    
    DESELECT();
 8008d5a:	f7ff fb41 	bl	80083e0 <DESELECT>
    SPI_RxByte();
 8008d5e:	f7ff fb65 	bl	800842c <SPI_RxByte>
  }
  
  return res;
 8008d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	372c      	adds	r7, #44	; 0x2c
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd90      	pop	{r4, r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000005 	.word	0x20000005

08008d74 <cardInit>:

struct Sensors{
	uint8_t value;
} sensor;

void cardInit(){
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
	char buff[1];
	if(Mount_SD("/") == 1){
 8008d7a:	4833      	ldr	r0, [pc, #204]	; (8008e48 <cardInit+0xd4>)
 8008d7c:	f7ff f9a6 	bl	80080cc <Mount_SD>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d15a      	bne.n	8008e3c <cardInit+0xc8>

		uint8_t num = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	71fb      	strb	r3, [r7, #7]
		uint8_t i = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	71bb      	strb	r3, [r7, #6]
		uint8_t zamik = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	717b      	strb	r3, [r7, #5]

		if(open_file("config") == 0){
 8008d92:	482e      	ldr	r0, [pc, #184]	; (8008e4c <cardInit+0xd8>)
 8008d94:	f7ff f9ca 	bl	800812c <open_file>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d14a      	bne.n	8008e34 <cardInit+0xc0>
			while(Read_config_File("config", buff, 1, zamik) == 0){
 8008d9e:	e03c      	b.n	8008e1a <cardInit+0xa6>
				zamik++;
 8008da0:	797b      	ldrb	r3, [r7, #5]
 8008da2:	3301      	adds	r3, #1
 8008da4:	717b      	strb	r3, [r7, #5]
				if(buff[0] != ';'){
 8008da6:	793b      	ldrb	r3, [r7, #4]
 8008da8:	2b3b      	cmp	r3, #59	; 0x3b
 8008daa:	d02e      	beq.n	8008e0a <cardInit+0x96>
					switch(num){
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d833      	bhi.n	8008e1a <cardInit+0xa6>
 8008db2:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <cardInit+0x44>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008dc9 	.word	0x08008dc9
 8008dbc:	08008dd9 	.word	0x08008dd9
 8008dc0:	08008de9 	.word	0x08008de9
 8008dc4:	08008df9 	.word	0x08008df9
						case 0:
							SSID[i++] = buff[0];
 8008dc8:	79bb      	ldrb	r3, [r7, #6]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	71ba      	strb	r2, [r7, #6]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	7939      	ldrb	r1, [r7, #4]
 8008dd2:	4b1f      	ldr	r3, [pc, #124]	; (8008e50 <cardInit+0xdc>)
 8008dd4:	5499      	strb	r1, [r3, r2]
							break;
 8008dd6:	e020      	b.n	8008e1a <cardInit+0xa6>
						case 1:
							passwd[i++] = buff[0];
 8008dd8:	79bb      	ldrb	r3, [r7, #6]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	71ba      	strb	r2, [r7, #6]
 8008dde:	461a      	mov	r2, r3
 8008de0:	7939      	ldrb	r1, [r7, #4]
 8008de2:	4b1c      	ldr	r3, [pc, #112]	; (8008e54 <cardInit+0xe0>)
 8008de4:	5499      	strb	r1, [r3, r2]
							break;
 8008de6:	e018      	b.n	8008e1a <cardInit+0xa6>
						case 2:
							Server[i++] = buff[0];
 8008de8:	79bb      	ldrb	r3, [r7, #6]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	71ba      	strb	r2, [r7, #6]
 8008dee:	461a      	mov	r2, r3
 8008df0:	7939      	ldrb	r1, [r7, #4]
 8008df2:	4b19      	ldr	r3, [pc, #100]	; (8008e58 <cardInit+0xe4>)
 8008df4:	5499      	strb	r1, [r3, r2]
							break;
 8008df6:	e010      	b.n	8008e1a <cardInit+0xa6>
						case 3:
							Time[i++] = buff[0];
 8008df8:	79bb      	ldrb	r3, [r7, #6]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	71ba      	strb	r2, [r7, #6]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	7939      	ldrb	r1, [r7, #4]
 8008e02:	4b16      	ldr	r3, [pc, #88]	; (8008e5c <cardInit+0xe8>)
 8008e04:	5499      	strb	r1, [r3, r2]
							break;
 8008e06:	bf00      	nop
 8008e08:	e007      	b.n	8008e1a <cardInit+0xa6>
					}
				}else{
					num++;
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	71fb      	strb	r3, [r7, #7]
					i = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	71bb      	strb	r3, [r7, #6]
					if(num >= 4){
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d809      	bhi.n	8008e2e <cardInit+0xba>
			while(Read_config_File("config", buff, 1, zamik) == 0){
 8008e1a:	797b      	ldrb	r3, [r7, #5]
 8008e1c:	1d39      	adds	r1, r7, #4
 8008e1e:	2201      	movs	r2, #1
 8008e20:	480a      	ldr	r0, [pc, #40]	; (8008e4c <cardInit+0xd8>)
 8008e22:	f7ff f9cf 	bl	80081c4 <Read_config_File>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0b9      	beq.n	8008da0 <cardInit+0x2c>
 8008e2c:	e000      	b.n	8008e30 <cardInit+0xbc>
						break;
 8008e2e:	bf00      	nop
					}
				}
			}
			close_file();
 8008e30:	f7ff f9aa 	bl	8008188 <close_file>
		}
		//Format_SD();
		Unmount_SD("/");
 8008e34:	4804      	ldr	r0, [pc, #16]	; (8008e48 <cardInit+0xd4>)
 8008e36:	f7ff f965 	bl	8008104 <Unmount_SD>
	}else{
		for(;;){
			__NOP();
		}
	}
}
 8008e3a:	e001      	b.n	8008e40 <cardInit+0xcc>
			__NOP();
 8008e3c:	bf00      	nop
 8008e3e:	e7fd      	b.n	8008e3c <cardInit+0xc8>
}
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	0800a990 	.word	0x0800a990
 8008e4c:	0800a994 	.word	0x0800a994
 8008e50:	200015d0 	.word	0x200015d0
 8008e54:	20000db0 	.word	0x20000db0
 8008e58:	20000cf8 	.word	0x20000cf8
 8008e5c:	20000dc4 	.word	0x20000dc4

08008e60 <alarmInit>:

void alarmInit(){
 8008e60:	b5b0      	push	{r4, r5, r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
	char hours[2];
	char minutes[2];
	int seconds;
	uint8_t j = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]

	resetTime.Hours = 0;
 8008e6a:	4b64      	ldr	r3, [pc, #400]	; (8008ffc <alarmInit+0x19c>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	701a      	strb	r2, [r3, #0]
	resetTime.Minutes = 0;
 8008e70:	4b62      	ldr	r3, [pc, #392]	; (8008ffc <alarmInit+0x19c>)
 8008e72:	2200      	movs	r2, #0
 8008e74:	705a      	strb	r2, [r3, #1]
	resetTime.Seconds = 0;
 8008e76:	4b61      	ldr	r3, [pc, #388]	; (8008ffc <alarmInit+0x19c>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	709a      	strb	r2, [r3, #2]
	resetTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008e7c:	4b5f      	ldr	r3, [pc, #380]	; (8008ffc <alarmInit+0x19c>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	60da      	str	r2, [r3, #12]
	resetTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008e82:	4b5e      	ldr	r3, [pc, #376]	; (8008ffc <alarmInit+0x19c>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	611a      	str	r2, [r3, #16]

	resetDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8008e88:	4b5d      	ldr	r3, [pc, #372]	; (8009000 <alarmInit+0x1a0>)
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	701a      	strb	r2, [r3, #0]
	resetDate.Month = RTC_MONTH_JANUARY;
 8008e8e:	4b5c      	ldr	r3, [pc, #368]	; (8009000 <alarmInit+0x1a0>)
 8008e90:	2201      	movs	r2, #1
 8008e92:	705a      	strb	r2, [r3, #1]
	resetDate.Date = 1;
 8008e94:	4b5a      	ldr	r3, [pc, #360]	; (8009000 <alarmInit+0x1a0>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	709a      	strb	r2, [r3, #2]
	resetDate.Year = 0;
 8008e9a:	4b59      	ldr	r3, [pc, #356]	; (8009000 <alarmInit+0x1a0>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	70da      	strb	r2, [r3, #3]


	for(int i = 0; i<5; i++){
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	e026      	b.n	8008ef4 <alarmInit+0x94>
	  if(i < 2){
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	dc0d      	bgt.n	8008ec8 <alarmInit+0x68>
		  hours[j++] = Time[i];
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	75fa      	strb	r2, [r7, #23]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4a53      	ldr	r2, [pc, #332]	; (8009004 <alarmInit+0x1a4>)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	4413      	add	r3, r2
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	f107 0318 	add.w	r3, r7, #24
 8008ec0:	440b      	add	r3, r1
 8008ec2:	f803 2c10 	strb.w	r2, [r3, #-16]
 8008ec6:	e012      	b.n	8008eee <alarmInit+0x8e>
	  }else if(i > 2){
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	dd0d      	ble.n	8008eea <alarmInit+0x8a>
		  minutes[j++] = Time[i];
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	1c5a      	adds	r2, r3, #1
 8008ed2:	75fa      	strb	r2, [r7, #23]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4a4b      	ldr	r2, [pc, #300]	; (8009004 <alarmInit+0x1a4>)
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	4413      	add	r3, r2
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	f107 0318 	add.w	r3, r7, #24
 8008ee2:	440b      	add	r3, r1
 8008ee4:	f803 2c14 	strb.w	r2, [r3, #-20]
 8008ee8:	e001      	b.n	8008eee <alarmInit+0x8e>
	  }else{
		  j = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i<5; i++){
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	613b      	str	r3, [r7, #16]
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	ddd5      	ble.n	8008ea6 <alarmInit+0x46>
	  }
	}

	seconds = (atoi(hours) * 60 * 60 + atoi(minutes) * 60) + (atoi(hours) * 60 * 60 + atoi(minutes) * 60)/5;
 8008efa:	f107 0308 	add.w	r3, r7, #8
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 f825 	bl	8009f4e <atoi>
 8008f04:	4602      	mov	r2, r0
 8008f06:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008f0a:	fb03 f402 	mul.w	r4, r3, r2
 8008f0e:	1d3b      	adds	r3, r7, #4
 8008f10:	4618      	mov	r0, r3
 8008f12:	f001 f81c 	bl	8009f4e <atoi>
 8008f16:	4602      	mov	r2, r0
 8008f18:	4613      	mov	r3, r2
 8008f1a:	011b      	lsls	r3, r3, #4
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	441c      	add	r4, r3
 8008f22:	f107 0308 	add.w	r3, r7, #8
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 f811 	bl	8009f4e <atoi>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008f32:	fb03 f502 	mul.w	r5, r3, r2
 8008f36:	1d3b      	adds	r3, r7, #4
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 f808 	bl	8009f4e <atoi>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	4613      	mov	r3, r2
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	1a9b      	subs	r3, r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	442b      	add	r3, r5
 8008f4a:	4a2f      	ldr	r2, [pc, #188]	; (8009008 <alarmInit+0x1a8>)
 8008f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8008f50:	1052      	asrs	r2, r2, #1
 8008f52:	17db      	asrs	r3, r3, #31
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	4423      	add	r3, r4
 8008f58:	60fb      	str	r3, [r7, #12]

	sAlarm1.AlarmTime.Hours = seconds/3600;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4a2b      	ldr	r2, [pc, #172]	; (800900c <alarmInit+0x1ac>)
 8008f5e:	fb82 1203 	smull	r1, r2, r2, r3
 8008f62:	441a      	add	r2, r3
 8008f64:	12d2      	asrs	r2, r2, #11
 8008f66:	17db      	asrs	r3, r3, #31
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	4b28      	ldr	r3, [pc, #160]	; (8009010 <alarmInit+0x1b0>)
 8008f6e:	701a      	strb	r2, [r3, #0]
	sAlarm1.AlarmTime.Minutes = (seconds - sAlarm1.AlarmTime.Hours*60*60)/60;
 8008f70:	4b27      	ldr	r3, [pc, #156]	; (8009010 <alarmInit+0x1b0>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	4b27      	ldr	r3, [pc, #156]	; (8009014 <alarmInit+0x1b4>)
 8008f78:	fb03 f202 	mul.w	r2, r3, r2
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	4a25      	ldr	r2, [pc, #148]	; (8009018 <alarmInit+0x1b8>)
 8008f82:	fb82 1203 	smull	r1, r2, r2, r3
 8008f86:	441a      	add	r2, r3
 8008f88:	1152      	asrs	r2, r2, #5
 8008f8a:	17db      	asrs	r3, r3, #31
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	4b1f      	ldr	r3, [pc, #124]	; (8009010 <alarmInit+0x1b0>)
 8008f92:	705a      	strb	r2, [r3, #1]
	sAlarm1.AlarmTime.Seconds = seconds - sAlarm1.AlarmTime.Hours*60*60 - sAlarm1.AlarmTime.Minutes*60;
 8008f94:	4b1e      	ldr	r3, [pc, #120]	; (8009010 <alarmInit+0x1b0>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	0112      	lsls	r2, r2, #4
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	011b      	lsls	r3, r3, #4
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	4b1b      	ldr	r3, [pc, #108]	; (8009010 <alarmInit+0x1b0>)
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	1acb      	subs	r3, r1, r3
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	4413      	add	r3, r2
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	4b14      	ldr	r3, [pc, #80]	; (8009010 <alarmInit+0x1b0>)
 8008fbe:	709a      	strb	r2, [r3, #2]
	sAlarm1.AlarmTime.SubSeconds = 0;
 8008fc0:	4b13      	ldr	r3, [pc, #76]	; (8009010 <alarmInit+0x1b0>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	605a      	str	r2, [r3, #4]
	sAlarm1.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008fc6:	4b12      	ldr	r3, [pc, #72]	; (8009010 <alarmInit+0x1b0>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	60da      	str	r2, [r3, #12]
	sAlarm1.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008fcc:	4b10      	ldr	r3, [pc, #64]	; (8009010 <alarmInit+0x1b0>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	611a      	str	r2, [r3, #16]
	sAlarm1.AlarmMask = RTC_ALARMMASK_NONE;
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <alarmInit+0x1b0>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	615a      	str	r2, [r3, #20]
	sAlarm1.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <alarmInit+0x1b0>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	619a      	str	r2, [r3, #24]
	sAlarm1.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <alarmInit+0x1b0>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	61da      	str	r2, [r3, #28]
	sAlarm1.AlarmDateWeekDay = 1;
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <alarmInit+0x1b0>)
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm1.Alarm = RTC_ALARM_A;
 8008fec:	4b08      	ldr	r3, [pc, #32]	; (8009010 <alarmInit+0x1b0>)
 8008fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ff2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8008ffc:	20000b78 	.word	0x20000b78
 8009000:	20000cf4 	.word	0x20000cf4
 8009004:	20000dc4 	.word	0x20000dc4
 8009008:	66666667 	.word	0x66666667
 800900c:	91a2b3c5 	.word	0x91a2b3c5
 8009010:	20000244 	.word	0x20000244
 8009014:	fffff1f0 	.word	0xfffff1f0
 8009018:	88888889 	.word	0x88888889

0800901c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	  //Branje senzorjev, ko bo možno.
	  branje=1;
 8009024:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <HAL_RTC_AlarmAEventCallback+0x34>)
 8009026:	2201      	movs	r2, #1
 8009028:	601a      	str	r2, [r3, #0]
	  HAL_RTC_SetTime(hrtc,&resetTime,RTC_FORMAT_BIN);
 800902a:	2200      	movs	r2, #0
 800902c:	4909      	ldr	r1, [pc, #36]	; (8009054 <HAL_RTC_AlarmAEventCallback+0x38>)
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7f9 fdeb 	bl	8002c0a <HAL_RTC_SetTime>
	  HAL_RTC_SetDate(hrtc, &resetDate, RTC_FORMAT_BIN);
 8009034:	2200      	movs	r2, #0
 8009036:	4908      	ldr	r1, [pc, #32]	; (8009058 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7f9 ff01 	bl	8002e40 <HAL_RTC_SetDate>
	  HAL_RTC_SetAlarm_IT(hrtc, &sAlarm1, RTC_FORMAT_BIN);
 800903e:	2200      	movs	r2, #0
 8009040:	4906      	ldr	r1, [pc, #24]	; (800905c <HAL_RTC_AlarmAEventCallback+0x40>)
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7f9 fff2 	bl	800302c <HAL_RTC_SetAlarm_IT>
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	2000026c 	.word	0x2000026c
 8009054:	20000b78 	.word	0x20000b78
 8009058:	20000cf4 	.word	0x20000cf4
 800905c:	20000244 	.word	0x20000244

08009060 <sendUART>:

void sendUART(char *text, uint16_t length, char *received, uint16_t rec_length, uint16_t delay){
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	607a      	str	r2, [r7, #4]
 800906a:	461a      	mov	r2, r3
 800906c:	460b      	mov	r3, r1
 800906e:	817b      	strh	r3, [r7, #10]
 8009070:	4613      	mov	r3, r2
 8009072:	813b      	strh	r3, [r7, #8]
	  HAL_UART_Transmit(&huart1, text, length, delay);
 8009074:	8b3b      	ldrh	r3, [r7, #24]
 8009076:	897a      	ldrh	r2, [r7, #10]
 8009078:	68f9      	ldr	r1, [r7, #12]
 800907a:	4806      	ldr	r0, [pc, #24]	; (8009094 <sendUART+0x34>)
 800907c:	f7fb fb88 	bl	8004790 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, prejeto, rec_length, delay);
 8009080:	8b3b      	ldrh	r3, [r7, #24]
 8009082:	893a      	ldrh	r2, [r7, #8]
 8009084:	4904      	ldr	r1, [pc, #16]	; (8009098 <sendUART+0x38>)
 8009086:	4803      	ldr	r0, [pc, #12]	; (8009094 <sendUART+0x34>)
 8009088:	f7fb fc15 	bl	80048b6 <HAL_UART_Receive>
}
 800908c:	bf00      	nop
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000bdc 	.word	0x20000bdc
 8009098:	20000dd0 	.word	0x20000dd0

0800909c <sendHTTP>:

void sendHTTP(char *addr, char *payload){
 800909c:	b580      	push	{r7, lr}
 800909e:	b0bc      	sub	sp, #240	; 0xf0
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	  char buff[200];
	  char buff2[20];

	  sprintf(buff,"POST %s HTTP/1.1\r\nHost: %s\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length:%d\r\n\r\n%s\r\n",addr,Server,strlen(payload),payload);
 80090a6:	6838      	ldr	r0, [r7, #0]
 80090a8:	f7f7 f892 	bl	80001d0 <strlen>
 80090ac:	4602      	mov	r2, r0
 80090ae:	f107 0020 	add.w	r0, r7, #32
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	9200      	str	r2, [sp, #0]
 80090b8:	4b2a      	ldr	r3, [pc, #168]	; (8009164 <sendHTTP+0xc8>)
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	492a      	ldr	r1, [pc, #168]	; (8009168 <sendHTTP+0xcc>)
 80090be:	f000 ff7d 	bl	8009fbc <siprintf>
	  sprintf(buff2,"AT+CIPSEND=%d\r\n",strlen(buff));
 80090c2:	f107 0320 	add.w	r3, r7, #32
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f7 f882 	bl	80001d0 <strlen>
 80090cc:	4602      	mov	r2, r0
 80090ce:	f107 030c 	add.w	r3, r7, #12
 80090d2:	4926      	ldr	r1, [pc, #152]	; (800916c <sendHTTP+0xd0>)
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 ff71 	bl	8009fbc <siprintf>
	  sprintf(payload,"AT+CIPSTART=\"TCP\",\"%s\",80\r\n",Server);
 80090da:	4a22      	ldr	r2, [pc, #136]	; (8009164 <sendHTTP+0xc8>)
 80090dc:	4924      	ldr	r1, [pc, #144]	; (8009170 <sendHTTP+0xd4>)
 80090de:	6838      	ldr	r0, [r7, #0]
 80090e0:	f000 ff6c 	bl	8009fbc <siprintf>
	  sendUART(payload, strlen(payload), prejeto, sizeof(prejeto), 1000);
 80090e4:	6838      	ldr	r0, [r7, #0]
 80090e6:	f7f7 f873 	bl	80001d0 <strlen>
 80090ea:	4603      	mov	r3, r0
 80090ec:	b299      	uxth	r1, r3
 80090ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090f8:	4a1e      	ldr	r2, [pc, #120]	; (8009174 <sendHTTP+0xd8>)
 80090fa:	6838      	ldr	r0, [r7, #0]
 80090fc:	f7ff ffb0 	bl	8009060 <sendUART>
	  HAL_Delay(1000);
 8009100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009104:	f7f7 f8f2 	bl	80002ec <HAL_Delay>
	  sendUART(buff2, strlen(buff2), prejeto, sizeof(prejeto), 1000);
 8009108:	f107 030c 	add.w	r3, r7, #12
 800910c:	4618      	mov	r0, r3
 800910e:	f7f7 f85f 	bl	80001d0 <strlen>
 8009112:	4603      	mov	r3, r0
 8009114:	b299      	uxth	r1, r3
 8009116:	f107 000c 	add.w	r0, r7, #12
 800911a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009124:	4a13      	ldr	r2, [pc, #76]	; (8009174 <sendHTTP+0xd8>)
 8009126:	f7ff ff9b 	bl	8009060 <sendUART>
	  HAL_Delay(1000);
 800912a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800912e:	f7f7 f8dd 	bl	80002ec <HAL_Delay>
	  sendUART(buff, strlen(buff), prejeto, sizeof(prejeto), 2000);
 8009132:	f107 0320 	add.w	r3, r7, #32
 8009136:	4618      	mov	r0, r3
 8009138:	f7f7 f84a 	bl	80001d0 <strlen>
 800913c:	4603      	mov	r3, r0
 800913e:	b299      	uxth	r1, r3
 8009140:	f107 0020 	add.w	r0, r7, #32
 8009144:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800914e:	4a09      	ldr	r2, [pc, #36]	; (8009174 <sendHTTP+0xd8>)
 8009150:	f7ff ff86 	bl	8009060 <sendUART>
	  HAL_Delay(1000);
 8009154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009158:	f7f7 f8c8 	bl	80002ec <HAL_Delay>
}
 800915c:	bf00      	nop
 800915e:	37e8      	adds	r7, #232	; 0xe8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000cf8 	.word	0x20000cf8
 8009168:	0800a99c 	.word	0x0800a99c
 800916c:	0800aa04 	.word	0x0800aa04
 8009170:	0800aa14 	.word	0x0800aa14
 8009174:	20000dd0 	.word	0x20000dd0

08009178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b090      	sub	sp, #64	; 0x40
 800917c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800917e:	f7f7 f87f 	bl	8000280 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009182:	f000 f8c5 	bl	8009310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009186:	f000 fb09 	bl	800979c <MX_GPIO_Init>
  MX_DMA_Init();
 800918a:	f000 fae9 	bl	8009760 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800918e:	f000 fab7 	bl	8009700 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8009192:	f000 fa67 	bl	8009664 <MX_TIM2_Init>
  MX_SPI1_Init();
 8009196:	f000 fa27 	bl	80095e8 <MX_SPI1_Init>
  MX_FATFS_Init();
 800919a:	f7ff f8fb 	bl	8008394 <MX_FATFS_Init>
  MX_RTC_Init();
 800919e:	f000 f997 	bl	80094d0 <MX_RTC_Init>
  MX_ADC1_Init();
 80091a2:	f000 f917 	bl	80093d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80091a6:	484a      	ldr	r0, [pc, #296]	; (80092d0 <main+0x158>)
 80091a8:	f7fa feb2 	bl	8003f10 <HAL_TIM_Base_Start>

  DHT_Start (22);
 80091ac:	2016      	movs	r0, #22
 80091ae:	f7ff f895 	bl	80082dc <DHT_Start>
  if(DHT_Check_Response() != 1){
 80091b2:	f7ff f8bf 	bl	8008334 <DHT_Check_Response>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d014      	beq.n	80091e6 <main+0x6e>
	  DHT_Start (11);
 80091bc:	200b      	movs	r0, #11
 80091be:	f7ff f88d 	bl	80082dc <DHT_Start>
	  if(DHT_Check_Response() == 1){
 80091c2:	f7ff f8b7 	bl	8008334 <DHT_Check_Response>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d118      	bne.n	80091fe <main+0x86>
		  sensor.value = (sensor.value | 2);
 80091cc:	4b41      	ldr	r3, [pc, #260]	; (80092d4 <main+0x15c>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	f043 0302 	orr.w	r3, r3, #2
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	4b3f      	ldr	r3, [pc, #252]	; (80092d4 <main+0x15c>)
 80091d8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80091da:	2201      	movs	r2, #1
 80091dc:	2180      	movs	r1, #128	; 0x80
 80091de:	483e      	ldr	r0, [pc, #248]	; (80092d8 <main+0x160>)
 80091e0:	f7f8 f9d4 	bl	800158c <HAL_GPIO_WritePin>
 80091e4:	e00b      	b.n	80091fe <main+0x86>
	  }
  }else{
	  sensor.value = (sensor.value | 4);
 80091e6:	4b3b      	ldr	r3, [pc, #236]	; (80092d4 <main+0x15c>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	f043 0304 	orr.w	r3, r3, #4
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	4b38      	ldr	r3, [pc, #224]	; (80092d4 <main+0x15c>)
 80091f2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80091f4:	2201      	movs	r2, #1
 80091f6:	2180      	movs	r1, #128	; 0x80
 80091f8:	4837      	ldr	r0, [pc, #220]	; (80092d8 <main+0x160>)
 80091fa:	f7f8 f9c7 	bl	800158c <HAL_GPIO_WritePin>
  }

  cardInit();
 80091fe:	f7ff fdb9 	bl	8008d74 <cardInit>

  alarmInit();
 8009202:	f7ff fe2d 	bl	8008e60 <alarmInit>

  //Odziv senzorja
  sendUART("AT\r\n", 4, prejeto, sizeof(prejeto), 400);
 8009206:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009210:	4a32      	ldr	r2, [pc, #200]	; (80092dc <main+0x164>)
 8009212:	2104      	movs	r1, #4
 8009214:	4832      	ldr	r0, [pc, #200]	; (80092e0 <main+0x168>)
 8009216:	f7ff ff23 	bl	8009060 <sendUART>

  if(prejeto[6] == 'O' && prejeto[7] == 'K'){
 800921a:	4b30      	ldr	r3, [pc, #192]	; (80092dc <main+0x164>)
 800921c:	799b      	ldrb	r3, [r3, #6]
 800921e:	2b4f      	cmp	r3, #79	; 0x4f
 8009220:	d141      	bne.n	80092a6 <main+0x12e>
 8009222:	4b2e      	ldr	r3, [pc, #184]	; (80092dc <main+0x164>)
 8009224:	79db      	ldrb	r3, [r3, #7]
 8009226:	2b4b      	cmp	r3, #75	; 0x4b
 8009228:	d13d      	bne.n	80092a6 <main+0x12e>
	  //Dobimo odziv.
	  sensor.value = (sensor.value | 1);
 800922a:	4b2a      	ldr	r3, [pc, #168]	; (80092d4 <main+0x15c>)
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	f043 0301 	orr.w	r3, r3, #1
 8009232:	b2da      	uxtb	r2, r3
 8009234:	4b27      	ldr	r3, [pc, #156]	; (80092d4 <main+0x15c>)
 8009236:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(500);
 8009238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800923c:	f7f7 f856 	bl	80002ec <HAL_Delay>

	  char payload[50];

	  sendUART("AT+CWMODE=1\r\n", 13, prejeto, sizeof(prejeto), 500);
 8009240:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800924a:	4a24      	ldr	r2, [pc, #144]	; (80092dc <main+0x164>)
 800924c:	210d      	movs	r1, #13
 800924e:	4825      	ldr	r0, [pc, #148]	; (80092e4 <main+0x16c>)
 8009250:	f7ff ff06 	bl	8009060 <sendUART>
	  HAL_Delay(500);
 8009254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009258:	f7f7 f848 	bl	80002ec <HAL_Delay>

	  sprintf(payload,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,passwd);
 800925c:	1d38      	adds	r0, r7, #4
 800925e:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <main+0x170>)
 8009260:	4a22      	ldr	r2, [pc, #136]	; (80092ec <main+0x174>)
 8009262:	4923      	ldr	r1, [pc, #140]	; (80092f0 <main+0x178>)
 8009264:	f000 feaa 	bl	8009fbc <siprintf>
	  sendUART(payload, strlen(payload), prejeto, sizeof(prejeto), 12000);
 8009268:	1d3b      	adds	r3, r7, #4
 800926a:	4618      	mov	r0, r3
 800926c:	f7f6 ffb0 	bl	80001d0 <strlen>
 8009270:	4603      	mov	r3, r0
 8009272:	b299      	uxth	r1, r3
 8009274:	1d38      	adds	r0, r7, #4
 8009276:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009280:	4a16      	ldr	r2, [pc, #88]	; (80092dc <main+0x164>)
 8009282:	f7ff feed 	bl	8009060 <sendUART>

	  HAL_Delay(1000);
 8009286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800928a:	f7f7 f82f 	bl	80002ec <HAL_Delay>

	  sprintf(payload,"SerialNo=%s&sensors=%03d",SerialNo,sensor.value);
 800928e:	4b11      	ldr	r3, [pc, #68]	; (80092d4 <main+0x15c>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	1d38      	adds	r0, r7, #4
 8009294:	4a17      	ldr	r2, [pc, #92]	; (80092f4 <main+0x17c>)
 8009296:	4918      	ldr	r1, [pc, #96]	; (80092f8 <main+0x180>)
 8009298:	f000 fe90 	bl	8009fbc <siprintf>
	  sendHTTP("/register", payload);
 800929c:	1d3b      	adds	r3, r7, #4
 800929e:	4619      	mov	r1, r3
 80092a0:	4816      	ldr	r0, [pc, #88]	; (80092fc <main+0x184>)
 80092a2:	f7ff fefb 	bl	800909c <sendHTTP>
  }

  HAL_Delay(200);
 80092a6:	20c8      	movs	r0, #200	; 0xc8
 80092a8:	f7f7 f820 	bl	80002ec <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(branje){
 80092ac:	4b14      	ldr	r3, [pc, #80]	; (8009300 <main+0x188>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <main+0x142>
		//Če je branje potem beri...

		//Resetiramo stanje.
		branje = 0;
 80092b4:	4b12      	ldr	r3, [pc, #72]	; (8009300 <main+0x188>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
	}
	//Karkoli drugega.
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80092ba:	2200      	movs	r2, #0
 80092bc:	4911      	ldr	r1, [pc, #68]	; (8009304 <main+0x18c>)
 80092be:	4812      	ldr	r0, [pc, #72]	; (8009308 <main+0x190>)
 80092c0:	f7f9 fd60 	bl	8002d84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80092c4:	2200      	movs	r2, #0
 80092c6:	4911      	ldr	r1, [pc, #68]	; (800930c <main+0x194>)
 80092c8:	480f      	ldr	r0, [pc, #60]	; (8009308 <main+0x190>)
 80092ca:	f7f9 fe60 	bl	8002f8e <HAL_RTC_GetDate>
	if(branje){
 80092ce:	e7ed      	b.n	80092ac <main+0x134>
 80092d0:	20000d70 	.word	0x20000d70
 80092d4:	20000d6c 	.word	0x20000d6c
 80092d8:	48000400 	.word	0x48000400
 80092dc:	20000dd0 	.word	0x20000dd0
 80092e0:	0800aa30 	.word	0x0800aa30
 80092e4:	0800aa38 	.word	0x0800aa38
 80092e8:	20000db0 	.word	0x20000db0
 80092ec:	200015d0 	.word	0x200015d0
 80092f0:	0800aa48 	.word	0x0800aa48
 80092f4:	20000008 	.word	0x20000008
 80092f8:	0800aa60 	.word	0x0800aa60
 80092fc:	0800aa7c 	.word	0x0800aa7c
 8009300:	2000026c 	.word	0x2000026c
 8009304:	20000ce0 	.word	0x20000ce0
 8009308:	20000ca0 	.word	0x20000ca0
 800930c:	20000dcc 	.word	0x20000dcc

08009310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b096      	sub	sp, #88	; 0x58
 8009314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800931a:	2228      	movs	r2, #40	; 0x28
 800931c:	2100      	movs	r1, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f000 fe44 	bl	8009fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009324:	f107 031c 	add.w	r3, r7, #28
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	605a      	str	r2, [r3, #4]
 800932e:	609a      	str	r2, [r3, #8]
 8009330:	60da      	str	r2, [r3, #12]
 8009332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009334:	1d3b      	adds	r3, r7, #4
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	605a      	str	r2, [r3, #4]
 800933c:	609a      	str	r2, [r3, #8]
 800933e:	60da      	str	r2, [r3, #12]
 8009340:	611a      	str	r2, [r3, #16]
 8009342:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8009344:	230a      	movs	r3, #10
 8009346:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009348:	2301      	movs	r3, #1
 800934a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800934c:	2310      	movs	r3, #16
 800934e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009350:	2301      	movs	r3, #1
 8009352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009354:	2302      	movs	r3, #2
 8009356:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009358:	2300      	movs	r3, #0
 800935a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800935c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8009360:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009366:	4618      	mov	r0, r3
 8009368:	f7f8 f928 	bl	80015bc <HAL_RCC_OscConfig>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8009372:	f000 fa85 	bl	8009880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009376:	230f      	movs	r3, #15
 8009378:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800937a:	2302      	movs	r3, #2
 800937c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800937e:	2300      	movs	r3, #0
 8009380:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009388:	2300      	movs	r3, #0
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800938c:	f107 031c 	add.w	r3, r7, #28
 8009390:	2102      	movs	r1, #2
 8009392:	4618      	mov	r0, r3
 8009394:	f7f9 f81a 	bl	80023cc <HAL_RCC_ClockConfig>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800939e:	f000 fa6f 	bl	8009880 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 80093a2:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <SystemClock_Config+0xc0>)
 80093a4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80093aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ae:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80093b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093b4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80093b6:	1d3b      	adds	r3, r7, #4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7f9 fa6f 	bl	800289c <HAL_RCCEx_PeriphCLKConfig>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80093c4:	f000 fa5c 	bl	8009880 <Error_Handler>
  }
}
 80093c8:	bf00      	nop
 80093ca:	3758      	adds	r7, #88	; 0x58
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	00010081 	.word	0x00010081

080093d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b08a      	sub	sp, #40	; 0x28
 80093d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80093da:	f107 031c 	add.w	r3, r7, #28
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	605a      	str	r2, [r3, #4]
 80093e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80093e6:	1d3b      	adds	r3, r7, #4
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	605a      	str	r2, [r3, #4]
 80093ee:	609a      	str	r2, [r3, #8]
 80093f0:	60da      	str	r2, [r3, #12]
 80093f2:	611a      	str	r2, [r3, #16]
 80093f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80093f6:	4b35      	ldr	r3, [pc, #212]	; (80094cc <MX_ADC1_Init+0xf8>)
 80093f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80093fe:	4b33      	ldr	r3, [pc, #204]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009400:	2200      	movs	r2, #0
 8009402:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009404:	4b31      	ldr	r3, [pc, #196]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009406:	2200      	movs	r2, #0
 8009408:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800940a:	4b30      	ldr	r3, [pc, #192]	; (80094cc <MX_ADC1_Init+0xf8>)
 800940c:	2201      	movs	r2, #1
 800940e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009410:	4b2e      	ldr	r3, [pc, #184]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009412:	2200      	movs	r2, #0
 8009414:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009416:	4b2d      	ldr	r3, [pc, #180]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009418:	2200      	movs	r2, #0
 800941a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800941e:	4b2b      	ldr	r3, [pc, #172]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009420:	2200      	movs	r2, #0
 8009422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009424:	4b29      	ldr	r3, [pc, #164]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009426:	2201      	movs	r2, #1
 8009428:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800942a:	4b28      	ldr	r3, [pc, #160]	; (80094cc <MX_ADC1_Init+0xf8>)
 800942c:	2200      	movs	r2, #0
 800942e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8009430:	4b26      	ldr	r3, [pc, #152]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009432:	2203      	movs	r2, #3
 8009434:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009436:	4b25      	ldr	r3, [pc, #148]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009438:	2201      	movs	r2, #1
 800943a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800943e:	4b23      	ldr	r3, [pc, #140]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009440:	2204      	movs	r2, #4
 8009442:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009444:	4b21      	ldr	r3, [pc, #132]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009446:	2200      	movs	r2, #0
 8009448:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800944a:	4b20      	ldr	r3, [pc, #128]	; (80094cc <MX_ADC1_Init+0xf8>)
 800944c:	2200      	movs	r2, #0
 800944e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009450:	481e      	ldr	r0, [pc, #120]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009452:	f7f6 ff6d 	bl	8000330 <HAL_ADC_Init>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800945c:	f000 fa10 	bl	8009880 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009460:	2300      	movs	r3, #0
 8009462:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009464:	f107 031c 	add.w	r3, r7, #28
 8009468:	4619      	mov	r1, r3
 800946a:	4818      	ldr	r0, [pc, #96]	; (80094cc <MX_ADC1_Init+0xf8>)
 800946c:	f7f7 fbb4 	bl	8000bd8 <HAL_ADCEx_MultiModeConfigChannel>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8009476:	f000 fa03 	bl	8009880 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800947a:	2302      	movs	r3, #2
 800947c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800947e:	2302      	movs	r3, #2
 8009480:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009482:	2300      	movs	r3, #0
 8009484:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009492:	1d3b      	adds	r3, r7, #4
 8009494:	4619      	mov	r1, r3
 8009496:	480d      	ldr	r0, [pc, #52]	; (80094cc <MX_ADC1_Init+0xf8>)
 8009498:	f7f7 f8dc 	bl	8000654 <HAL_ADC_ConfigChannel>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80094a2:	f000 f9ed 	bl	8009880 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80094a6:	2303      	movs	r3, #3
 80094a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80094aa:	2303      	movs	r3, #3
 80094ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80094ae:	1d3b      	adds	r3, r7, #4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4806      	ldr	r0, [pc, #24]	; (80094cc <MX_ADC1_Init+0xf8>)
 80094b4:	f7f7 f8ce 	bl	8000654 <HAL_ADC_ConfigChannel>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80094be:	f000 f9df 	bl	8009880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80094c2:	bf00      	nop
 80094c4:	3728      	adds	r7, #40	; 0x28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000b8c 	.word	0x20000b8c

080094d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b090      	sub	sp, #64	; 0x40
 80094d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80094d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	605a      	str	r2, [r3, #4]
 80094e0:	609a      	str	r2, [r3, #8]
 80094e2:	60da      	str	r2, [r3, #12]
 80094e4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80094e6:	2300      	movs	r3, #0
 80094e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80094ea:	463b      	mov	r3, r7
 80094ec:	2228      	movs	r2, #40	; 0x28
 80094ee:	2100      	movs	r1, #0
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fd5b 	bl	8009fac <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80094f6:	4b3a      	ldr	r3, [pc, #232]	; (80095e0 <MX_RTC_Init+0x110>)
 80094f8:	4a3a      	ldr	r2, [pc, #232]	; (80095e4 <MX_RTC_Init+0x114>)
 80094fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80094fc:	4b38      	ldr	r3, [pc, #224]	; (80095e0 <MX_RTC_Init+0x110>)
 80094fe:	2200      	movs	r2, #0
 8009500:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009502:	4b37      	ldr	r3, [pc, #220]	; (80095e0 <MX_RTC_Init+0x110>)
 8009504:	227f      	movs	r2, #127	; 0x7f
 8009506:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009508:	4b35      	ldr	r3, [pc, #212]	; (80095e0 <MX_RTC_Init+0x110>)
 800950a:	22ff      	movs	r2, #255	; 0xff
 800950c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800950e:	4b34      	ldr	r3, [pc, #208]	; (80095e0 <MX_RTC_Init+0x110>)
 8009510:	2200      	movs	r2, #0
 8009512:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009514:	4b32      	ldr	r3, [pc, #200]	; (80095e0 <MX_RTC_Init+0x110>)
 8009516:	2200      	movs	r2, #0
 8009518:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800951a:	4b31      	ldr	r3, [pc, #196]	; (80095e0 <MX_RTC_Init+0x110>)
 800951c:	2200      	movs	r2, #0
 800951e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009520:	482f      	ldr	r0, [pc, #188]	; (80095e0 <MX_RTC_Init+0x110>)
 8009522:	f7f9 fae1 	bl	8002ae8 <HAL_RTC_Init>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800952c:	f000 f9a8 	bl	8009880 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009542:	2300      	movs	r3, #0
 8009544:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009546:	2300      	movs	r3, #0
 8009548:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800954a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800954e:	2200      	movs	r2, #0
 8009550:	4619      	mov	r1, r3
 8009552:	4823      	ldr	r0, [pc, #140]	; (80095e0 <MX_RTC_Init+0x110>)
 8009554:	f7f9 fb59 	bl	8002c0a <HAL_RTC_SetTime>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800955e:	f000 f98f 	bl	8009880 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009562:	2301      	movs	r3, #1
 8009564:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8009568:	2301      	movs	r3, #1
 800956a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800956e:	2301      	movs	r3, #1
 8009570:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800957a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800957e:	2200      	movs	r2, #0
 8009580:	4619      	mov	r1, r3
 8009582:	4817      	ldr	r0, [pc, #92]	; (80095e0 <MX_RTC_Init+0x110>)
 8009584:	f7f9 fc5c 	bl	8002e40 <HAL_RTC_SetDate>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800958e:	f000 f977 	bl	8009880 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80095a6:	2300      	movs	r3, #0
 80095a8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80095aa:	2300      	movs	r3, #0
 80095ac:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80095b2:	2300      	movs	r3, #0
 80095b4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80095b6:	2301      	movs	r3, #1
 80095b8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80095bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80095c2:	463b      	mov	r3, r7
 80095c4:	2200      	movs	r2, #0
 80095c6:	4619      	mov	r1, r3
 80095c8:	4805      	ldr	r0, [pc, #20]	; (80095e0 <MX_RTC_Init+0x110>)
 80095ca:	f7f9 fd2f 	bl	800302c <HAL_RTC_SetAlarm_IT>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80095d4:	f000 f954 	bl	8009880 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80095d8:	bf00      	nop
 80095da:	3740      	adds	r7, #64	; 0x40
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20000ca0 	.word	0x20000ca0
 80095e4:	40002800 	.word	0x40002800

080095e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80095ec:	4b1b      	ldr	r3, [pc, #108]	; (800965c <MX_SPI1_Init+0x74>)
 80095ee:	4a1c      	ldr	r2, [pc, #112]	; (8009660 <MX_SPI1_Init+0x78>)
 80095f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80095f2:	4b1a      	ldr	r3, [pc, #104]	; (800965c <MX_SPI1_Init+0x74>)
 80095f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80095f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80095fa:	4b18      	ldr	r3, [pc, #96]	; (800965c <MX_SPI1_Init+0x74>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009600:	4b16      	ldr	r3, [pc, #88]	; (800965c <MX_SPI1_Init+0x74>)
 8009602:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009606:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009608:	4b14      	ldr	r3, [pc, #80]	; (800965c <MX_SPI1_Init+0x74>)
 800960a:	2200      	movs	r2, #0
 800960c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800960e:	4b13      	ldr	r3, [pc, #76]	; (800965c <MX_SPI1_Init+0x74>)
 8009610:	2200      	movs	r2, #0
 8009612:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009614:	4b11      	ldr	r3, [pc, #68]	; (800965c <MX_SPI1_Init+0x74>)
 8009616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800961a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <MX_SPI1_Init+0x74>)
 800961e:	2220      	movs	r2, #32
 8009620:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009622:	4b0e      	ldr	r3, [pc, #56]	; (800965c <MX_SPI1_Init+0x74>)
 8009624:	2200      	movs	r2, #0
 8009626:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <MX_SPI1_Init+0x74>)
 800962a:	2200      	movs	r2, #0
 800962c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800962e:	4b0b      	ldr	r3, [pc, #44]	; (800965c <MX_SPI1_Init+0x74>)
 8009630:	2200      	movs	r2, #0
 8009632:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <MX_SPI1_Init+0x74>)
 8009636:	2207      	movs	r2, #7
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800963a:	4b08      	ldr	r3, [pc, #32]	; (800965c <MX_SPI1_Init+0x74>)
 800963c:	2200      	movs	r2, #0
 800963e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009640:	4b06      	ldr	r3, [pc, #24]	; (800965c <MX_SPI1_Init+0x74>)
 8009642:	2200      	movs	r2, #0
 8009644:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009646:	4805      	ldr	r0, [pc, #20]	; (800965c <MX_SPI1_Init+0x74>)
 8009648:	f7f9 ff08 	bl	800345c <HAL_SPI_Init>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009652:	f000 f915 	bl	8009880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009656:	bf00      	nop
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000d08 	.word	0x20000d08
 8009660:	40013000 	.word	0x40013000

08009664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800966a:	f107 0310 	add.w	r3, r7, #16
 800966e:	2200      	movs	r2, #0
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	605a      	str	r2, [r3, #4]
 8009674:	609a      	str	r2, [r3, #8]
 8009676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009678:	1d3b      	adds	r3, r7, #4
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	605a      	str	r2, [r3, #4]
 8009680:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009682:	4b1e      	ldr	r3, [pc, #120]	; (80096fc <MX_TIM2_Init+0x98>)
 8009684:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009688:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800968a:	4b1c      	ldr	r3, [pc, #112]	; (80096fc <MX_TIM2_Init+0x98>)
 800968c:	223f      	movs	r2, #63	; 0x3f
 800968e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009690:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <MX_TIM2_Init+0x98>)
 8009692:	2200      	movs	r2, #0
 8009694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8009696:	4b19      	ldr	r3, [pc, #100]	; (80096fc <MX_TIM2_Init+0x98>)
 8009698:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800969c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800969e:	4b17      	ldr	r3, [pc, #92]	; (80096fc <MX_TIM2_Init+0x98>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80096a4:	4b15      	ldr	r3, [pc, #84]	; (80096fc <MX_TIM2_Init+0x98>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80096aa:	4814      	ldr	r0, [pc, #80]	; (80096fc <MX_TIM2_Init+0x98>)
 80096ac:	f7fa fc04 	bl	8003eb8 <HAL_TIM_Base_Init>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80096b6:	f000 f8e3 	bl	8009880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80096ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80096c0:	f107 0310 	add.w	r3, r7, #16
 80096c4:	4619      	mov	r1, r3
 80096c6:	480d      	ldr	r0, [pc, #52]	; (80096fc <MX_TIM2_Init+0x98>)
 80096c8:	f7fa fd95 	bl	80041f6 <HAL_TIM_ConfigClockSource>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80096d2:	f000 f8d5 	bl	8009880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80096d6:	2300      	movs	r3, #0
 80096d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096da:	2300      	movs	r3, #0
 80096dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80096de:	1d3b      	adds	r3, r7, #4
 80096e0:	4619      	mov	r1, r3
 80096e2:	4806      	ldr	r0, [pc, #24]	; (80096fc <MX_TIM2_Init+0x98>)
 80096e4:	f7fa ff7a 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80096ee:	f000 f8c7 	bl	8009880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80096f2:	bf00      	nop
 80096f4:	3720      	adds	r7, #32
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	20000d70 	.word	0x20000d70

08009700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009704:	4b14      	ldr	r3, [pc, #80]	; (8009758 <MX_USART1_UART_Init+0x58>)
 8009706:	4a15      	ldr	r2, [pc, #84]	; (800975c <MX_USART1_UART_Init+0x5c>)
 8009708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800970a:	4b13      	ldr	r3, [pc, #76]	; (8009758 <MX_USART1_UART_Init+0x58>)
 800970c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009712:	4b11      	ldr	r3, [pc, #68]	; (8009758 <MX_USART1_UART_Init+0x58>)
 8009714:	2200      	movs	r2, #0
 8009716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <MX_USART1_UART_Init+0x58>)
 800971a:	2200      	movs	r2, #0
 800971c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800971e:	4b0e      	ldr	r3, [pc, #56]	; (8009758 <MX_USART1_UART_Init+0x58>)
 8009720:	2200      	movs	r2, #0
 8009722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009724:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <MX_USART1_UART_Init+0x58>)
 8009726:	220c      	movs	r2, #12
 8009728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800972a:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <MX_USART1_UART_Init+0x58>)
 800972c:	2200      	movs	r2, #0
 800972e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009730:	4b09      	ldr	r3, [pc, #36]	; (8009758 <MX_USART1_UART_Init+0x58>)
 8009732:	2200      	movs	r2, #0
 8009734:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009736:	4b08      	ldr	r3, [pc, #32]	; (8009758 <MX_USART1_UART_Init+0x58>)
 8009738:	2200      	movs	r2, #0
 800973a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <MX_USART1_UART_Init+0x58>)
 800973e:	2200      	movs	r2, #0
 8009740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009742:	4805      	ldr	r0, [pc, #20]	; (8009758 <MX_USART1_UART_Init+0x58>)
 8009744:	f7fa ffd6 	bl	80046f4 <HAL_UART_Init>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800974e:	f000 f897 	bl	8009880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009752:	bf00      	nop
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20000bdc 	.word	0x20000bdc
 800975c:	40013800 	.word	0x40013800

08009760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009766:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <MX_DMA_Init+0x38>)
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	4a0b      	ldr	r2, [pc, #44]	; (8009798 <MX_DMA_Init+0x38>)
 800976c:	f043 0301 	orr.w	r3, r3, #1
 8009770:	6153      	str	r3, [r2, #20]
 8009772:	4b09      	ldr	r3, [pc, #36]	; (8009798 <MX_DMA_Init+0x38>)
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	607b      	str	r3, [r7, #4]
 800977c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800977e:	2200      	movs	r2, #0
 8009780:	2100      	movs	r1, #0
 8009782:	200b      	movs	r0, #11
 8009784:	f7f7 fc06 	bl	8000f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009788:	200b      	movs	r0, #11
 800978a:	f7f7 fc1f 	bl	8000fcc <HAL_NVIC_EnableIRQ>

}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	40021000 	.word	0x40021000

0800979c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	2200      	movs	r2, #0
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	605a      	str	r2, [r3, #4]
 80097ac:	609a      	str	r2, [r3, #8]
 80097ae:	60da      	str	r2, [r3, #12]
 80097b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80097b2:	4b27      	ldr	r3, [pc, #156]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	4a26      	ldr	r2, [pc, #152]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80097bc:	6153      	str	r3, [r2, #20]
 80097be:	4b24      	ldr	r3, [pc, #144]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097c6:	60bb      	str	r3, [r7, #8]
 80097c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097ca:	4b21      	ldr	r3, [pc, #132]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097cc:	695b      	ldr	r3, [r3, #20]
 80097ce:	4a20      	ldr	r2, [pc, #128]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097d4:	6153      	str	r3, [r2, #20]
 80097d6:	4b1e      	ldr	r3, [pc, #120]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097de:	607b      	str	r3, [r7, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097e2:	4b1b      	ldr	r3, [pc, #108]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	4a1a      	ldr	r2, [pc, #104]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097ec:	6153      	str	r3, [r2, #20]
 80097ee:	4b18      	ldr	r3, [pc, #96]	; (8009850 <MX_GPIO_Init+0xb4>)
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097f6:	603b      	str	r3, [r7, #0]
 80097f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80097fa:	2200      	movs	r2, #0
 80097fc:	2102      	movs	r1, #2
 80097fe:	4815      	ldr	r0, [pc, #84]	; (8009854 <MX_GPIO_Init+0xb8>)
 8009800:	f7f7 fec4 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8009804:	2200      	movs	r2, #0
 8009806:	21a0      	movs	r1, #160	; 0xa0
 8009808:	4813      	ldr	r0, [pc, #76]	; (8009858 <MX_GPIO_Init+0xbc>)
 800980a:	f7f7 febf 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800980e:	2302      	movs	r3, #2
 8009810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009812:	2301      	movs	r3, #1
 8009814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009816:	2300      	movs	r3, #0
 8009818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800981a:	2300      	movs	r3, #0
 800981c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800981e:	f107 030c 	add.w	r3, r7, #12
 8009822:	4619      	mov	r1, r3
 8009824:	480b      	ldr	r0, [pc, #44]	; (8009854 <MX_GPIO_Init+0xb8>)
 8009826:	f7f7 fd27 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800982a:	23a0      	movs	r3, #160	; 0xa0
 800982c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800982e:	2301      	movs	r3, #1
 8009830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009836:	2300      	movs	r3, #0
 8009838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800983a:	f107 030c 	add.w	r3, r7, #12
 800983e:	4619      	mov	r1, r3
 8009840:	4805      	ldr	r0, [pc, #20]	; (8009858 <MX_GPIO_Init+0xbc>)
 8009842:	f7f7 fd19 	bl	8001278 <HAL_GPIO_Init>

}
 8009846:	bf00      	nop
 8009848:	3720      	adds	r7, #32
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	40021000 	.word	0x40021000
 8009854:	48001400 	.word	0x48001400
 8009858:	48000400 	.word	0x48000400

0800985c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a04      	ldr	r2, [pc, #16]	; (800987c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d101      	bne.n	8009872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800986e:	f7f6 fd1d 	bl	80002ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009872:	bf00      	nop
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	40012c00 	.word	0x40012c00

08009880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009884:	bf00      	nop
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
	...

08009890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009896:	4b11      	ldr	r3, [pc, #68]	; (80098dc <HAL_MspInit+0x4c>)
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	4a10      	ldr	r2, [pc, #64]	; (80098dc <HAL_MspInit+0x4c>)
 800989c:	f043 0301 	orr.w	r3, r3, #1
 80098a0:	6193      	str	r3, [r2, #24]
 80098a2:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <HAL_MspInit+0x4c>)
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80098ae:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <HAL_MspInit+0x4c>)
 80098b0:	69db      	ldr	r3, [r3, #28]
 80098b2:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <HAL_MspInit+0x4c>)
 80098b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098b8:	61d3      	str	r3, [r2, #28]
 80098ba:	4b08      	ldr	r3, [pc, #32]	; (80098dc <HAL_MspInit+0x4c>)
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098c2:	603b      	str	r3, [r7, #0]
 80098c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80098c6:	2200      	movs	r2, #0
 80098c8:	210f      	movs	r1, #15
 80098ca:	f06f 0001 	mvn.w	r0, #1
 80098ce:	f7f7 fb61 	bl	8000f94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	40021000 	.word	0x40021000

080098e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08a      	sub	sp, #40	; 0x28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098e8:	f107 0314 	add.w	r3, r7, #20
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	605a      	str	r2, [r3, #4]
 80098f2:	609a      	str	r2, [r3, #8]
 80098f4:	60da      	str	r2, [r3, #12]
 80098f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009900:	d14c      	bne.n	800999c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8009902:	4b28      	ldr	r3, [pc, #160]	; (80099a4 <HAL_ADC_MspInit+0xc4>)
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	4a27      	ldr	r2, [pc, #156]	; (80099a4 <HAL_ADC_MspInit+0xc4>)
 8009908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800990c:	6153      	str	r3, [r2, #20]
 800990e:	4b25      	ldr	r3, [pc, #148]	; (80099a4 <HAL_ADC_MspInit+0xc4>)
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009916:	613b      	str	r3, [r7, #16]
 8009918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800991a:	4b22      	ldr	r3, [pc, #136]	; (80099a4 <HAL_ADC_MspInit+0xc4>)
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	4a21      	ldr	r2, [pc, #132]	; (80099a4 <HAL_ADC_MspInit+0xc4>)
 8009920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009924:	6153      	str	r3, [r2, #20]
 8009926:	4b1f      	ldr	r3, [pc, #124]	; (80099a4 <HAL_ADC_MspInit+0xc4>)
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992e:	60fb      	str	r3, [r7, #12]
 8009930:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8009932:	2307      	movs	r3, #7
 8009934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009936:	2303      	movs	r3, #3
 8009938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800993a:	2300      	movs	r3, #0
 800993c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800993e:	f107 0314 	add.w	r3, r7, #20
 8009942:	4619      	mov	r1, r3
 8009944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009948:	f7f7 fc96 	bl	8001278 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800994c:	4b16      	ldr	r3, [pc, #88]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 800994e:	4a17      	ldr	r2, [pc, #92]	; (80099ac <HAL_ADC_MspInit+0xcc>)
 8009950:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 8009954:	2200      	movs	r2, #0
 8009956:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009958:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 800995a:	2200      	movs	r2, #0
 800995c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800995e:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 8009960:	2280      	movs	r2, #128	; 0x80
 8009962:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009964:	4b10      	ldr	r3, [pc, #64]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 8009966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800996a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800996c:	4b0e      	ldr	r3, [pc, #56]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 800996e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009972:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8009974:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 8009976:	2200      	movs	r2, #0
 8009978:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 800997c:	2200      	movs	r2, #0
 800997e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009980:	4809      	ldr	r0, [pc, #36]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 8009982:	f7f7 fb31 	bl	8000fe8 <HAL_DMA_Init>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d001      	beq.n	8009990 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800998c:	f7ff ff78 	bl	8009880 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a05      	ldr	r2, [pc, #20]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 8009994:	639a      	str	r2, [r3, #56]	; 0x38
 8009996:	4a04      	ldr	r2, [pc, #16]	; (80099a8 <HAL_ADC_MspInit+0xc8>)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800999c:	bf00      	nop
 800999e:	3728      	adds	r7, #40	; 0x28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	40021000 	.word	0x40021000
 80099a8:	20000c5c 	.word	0x20000c5c
 80099ac:	40020008 	.word	0x40020008

080099b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a10      	ldr	r2, [pc, #64]	; (8009a00 <HAL_RTC_MspInit+0x50>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d119      	bne.n	80099f6 <HAL_RTC_MspInit+0x46>
 80099c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	fa93 f3a3 	rbit	r3, r3
 80099ce:	60bb      	str	r3, [r7, #8]
  return result;
 80099d0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80099d2:	fab3 f383 	clz	r3, r3
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	461a      	mov	r2, r3
 80099da:	4b0a      	ldr	r3, [pc, #40]	; (8009a04 <HAL_RTC_MspInit+0x54>)
 80099dc:	4413      	add	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	461a      	mov	r2, r3
 80099e2:	2301      	movs	r3, #1
 80099e4:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80099e6:	2200      	movs	r2, #0
 80099e8:	2100      	movs	r1, #0
 80099ea:	2029      	movs	r0, #41	; 0x29
 80099ec:	f7f7 fad2 	bl	8000f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80099f0:	2029      	movs	r0, #41	; 0x29
 80099f2:	f7f7 faeb 	bl	8000fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	40002800 	.word	0x40002800
 8009a04:	10908100 	.word	0x10908100

08009a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08a      	sub	sp, #40	; 0x28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a10:	f107 0314 	add.w	r3, r7, #20
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	605a      	str	r2, [r3, #4]
 8009a1a:	609a      	str	r2, [r3, #8]
 8009a1c:	60da      	str	r2, [r3, #12]
 8009a1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a25      	ldr	r2, [pc, #148]	; (8009abc <HAL_SPI_MspInit+0xb4>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d144      	bne.n	8009ab4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009a2a:	4b25      	ldr	r3, [pc, #148]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	4a24      	ldr	r2, [pc, #144]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a34:	6193      	str	r3, [r2, #24]
 8009a36:	4b22      	ldr	r3, [pc, #136]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a3e:	613b      	str	r3, [r7, #16]
 8009a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a42:	4b1f      	ldr	r3, [pc, #124]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a4c:	6153      	str	r3, [r2, #20]
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a5a:	4b19      	ldr	r3, [pc, #100]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	4a18      	ldr	r2, [pc, #96]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a64:	6153      	str	r3, [r2, #20]
 8009a66:	4b16      	ldr	r3, [pc, #88]	; (8009ac0 <HAL_SPI_MspInit+0xb8>)
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a6e:	60bb      	str	r3, [r7, #8]
 8009a70:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009a72:	2380      	movs	r3, #128	; 0x80
 8009a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a76:	2302      	movs	r3, #2
 8009a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009a82:	2305      	movs	r3, #5
 8009a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a86:	f107 0314 	add.w	r3, r7, #20
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a90:	f7f7 fbf2 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8009a94:	2318      	movs	r3, #24
 8009a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a98:	2302      	movs	r3, #2
 8009a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009aa4:	2305      	movs	r3, #5
 8009aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009aa8:	f107 0314 	add.w	r3, r7, #20
 8009aac:	4619      	mov	r1, r3
 8009aae:	4805      	ldr	r0, [pc, #20]	; (8009ac4 <HAL_SPI_MspInit+0xbc>)
 8009ab0:	f7f7 fbe2 	bl	8001278 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8009ab4:	bf00      	nop
 8009ab6:	3728      	adds	r7, #40	; 0x28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	40013000 	.word	0x40013000
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	48000400 	.word	0x48000400

08009ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad8:	d10b      	bne.n	8009af2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009ada:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <HAL_TIM_Base_MspInit+0x38>)
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	4a08      	ldr	r2, [pc, #32]	; (8009b00 <HAL_TIM_Base_MspInit+0x38>)
 8009ae0:	f043 0301 	orr.w	r3, r3, #1
 8009ae4:	61d3      	str	r3, [r2, #28]
 8009ae6:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <HAL_TIM_Base_MspInit+0x38>)
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8009af2:	bf00      	nop
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	40021000 	.word	0x40021000

08009b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b08a      	sub	sp, #40	; 0x28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b0c:	f107 0314 	add.w	r3, r7, #20
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	605a      	str	r2, [r3, #4]
 8009b16:	609a      	str	r2, [r3, #8]
 8009b18:	60da      	str	r2, [r3, #12]
 8009b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a1c      	ldr	r2, [pc, #112]	; (8009b94 <HAL_UART_MspInit+0x90>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d131      	bne.n	8009b8a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009b26:	4b1c      	ldr	r3, [pc, #112]	; (8009b98 <HAL_UART_MspInit+0x94>)
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	4a1b      	ldr	r2, [pc, #108]	; (8009b98 <HAL_UART_MspInit+0x94>)
 8009b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b30:	6193      	str	r3, [r2, #24]
 8009b32:	4b19      	ldr	r3, [pc, #100]	; (8009b98 <HAL_UART_MspInit+0x94>)
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b3e:	4b16      	ldr	r3, [pc, #88]	; (8009b98 <HAL_UART_MspInit+0x94>)
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	4a15      	ldr	r2, [pc, #84]	; (8009b98 <HAL_UART_MspInit+0x94>)
 8009b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b48:	6153      	str	r3, [r2, #20]
 8009b4a:	4b13      	ldr	r3, [pc, #76]	; (8009b98 <HAL_UART_MspInit+0x94>)
 8009b4c:	695b      	ldr	r3, [r3, #20]
 8009b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009b56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009b64:	2303      	movs	r3, #3
 8009b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009b68:	2307      	movs	r3, #7
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b6c:	f107 0314 	add.w	r3, r7, #20
 8009b70:	4619      	mov	r1, r3
 8009b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b76:	f7f7 fb7f 	bl	8001278 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	2025      	movs	r0, #37	; 0x25
 8009b80:	f7f7 fa08 	bl	8000f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009b84:	2025      	movs	r0, #37	; 0x25
 8009b86:	f7f7 fa21 	bl	8000fcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009b8a:	bf00      	nop
 8009b8c:	3728      	adds	r7, #40	; 0x28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	40013800 	.word	0x40013800
 8009b98:	40021000 	.word	0x40021000

08009b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	; 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8009bac:	2200      	movs	r2, #0
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	2019      	movs	r0, #25
 8009bb2:	f7f7 f9ef 	bl	8000f94 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009bb6:	2019      	movs	r0, #25
 8009bb8:	f7f7 fa08 	bl	8000fcc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009bbc:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <HAL_InitTick+0x9c>)
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	4a1d      	ldr	r2, [pc, #116]	; (8009c38 <HAL_InitTick+0x9c>)
 8009bc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009bc6:	6193      	str	r3, [r2, #24]
 8009bc8:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <HAL_InitTick+0x9c>)
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009bd4:	f107 0210 	add.w	r2, r7, #16
 8009bd8:	f107 0314 	add.w	r3, r7, #20
 8009bdc:	4611      	mov	r1, r2
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f8 fe2a 	bl	8002838 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8009be4:	f7f8 fe06 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8009be8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bec:	4a13      	ldr	r2, [pc, #76]	; (8009c3c <HAL_InitTick+0xa0>)
 8009bee:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf2:	0c9b      	lsrs	r3, r3, #18
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009bf8:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <HAL_InitTick+0xa4>)
 8009bfa:	4a12      	ldr	r2, [pc, #72]	; (8009c44 <HAL_InitTick+0xa8>)
 8009bfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8009bfe:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <HAL_InitTick+0xa4>)
 8009c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009c04:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8009c06:	4a0e      	ldr	r2, [pc, #56]	; (8009c40 <HAL_InitTick+0xa4>)
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <HAL_InitTick+0xa4>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c12:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <HAL_InitTick+0xa4>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8009c18:	4809      	ldr	r0, [pc, #36]	; (8009c40 <HAL_InitTick+0xa4>)
 8009c1a:	f7fa f94d 	bl	8003eb8 <HAL_TIM_Base_Init>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8009c24:	4806      	ldr	r0, [pc, #24]	; (8009c40 <HAL_InitTick+0xa4>)
 8009c26:	f7fa f99d 	bl	8003f64 <HAL_TIM_Base_Start_IT>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	e000      	b.n	8009c30 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3730      	adds	r7, #48	; 0x30
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	40021000 	.word	0x40021000
 8009c3c:	431bde83 	.word	0x431bde83
 8009c40:	200015e4 	.word	0x200015e4
 8009c44:	40012c00 	.word	0x40012c00

08009c48 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <SDTimer_Handler+0x40>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d006      	beq.n	8009c64 <SDTimer_Handler+0x1c>
    Timer1--;
 8009c56:	4b0c      	ldr	r3, [pc, #48]	; (8009c88 <SDTimer_Handler+0x40>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <SDTimer_Handler+0x40>)
 8009c62:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8009c64:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <SDTimer_Handler+0x44>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d006      	beq.n	8009c7c <SDTimer_Handler+0x34>
    Timer2--;
 8009c6e:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <SDTimer_Handler+0x44>)
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	3b01      	subs	r3, #1
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <SDTimer_Handler+0x44>)
 8009c7a:	701a      	strb	r2, [r3, #0]
}
 8009c7c:	bf00      	nop
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	20001625 	.word	0x20001625
 8009c8c:	20001624 	.word	0x20001624

08009c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009ca2:	e7fe      	b.n	8009ca2 <HardFault_Handler+0x4>

08009ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009ca8:	e7fe      	b.n	8009ca8 <MemManage_Handler+0x4>

08009caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009caa:	b480      	push	{r7}
 8009cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009cae:	e7fe      	b.n	8009cae <BusFault_Handler+0x4>

08009cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009cb4:	e7fe      	b.n	8009cb4 <UsageFault_Handler+0x4>

08009cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009cba:	bf00      	nop
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009cc8:	bf00      	nop
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009cd6:	bf00      	nop
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009ce4:	bf00      	nop
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
	...

08009cf0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009cf4:	4802      	ldr	r0, [pc, #8]	; (8009d00 <DMA1_Channel1_IRQHandler+0x10>)
 8009cf6:	f7f7 f9fc 	bl	80010f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009cfa:	bf00      	nop
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000c5c 	.word	0x20000c5c

08009d04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	FatFsCnt++;
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	3301      	adds	r3, #1
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	4b08      	ldr	r3, [pc, #32]	; (8009d34 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8009d14:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8009d16:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b09      	cmp	r3, #9
 8009d1e:	d904      	bls.n	8009d2a <TIM1_UP_TIM16_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <TIM1_UP_TIM16_IRQHandler+0x30>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8009d26:	f7ff ff8f 	bl	8009c48 <SDTimer_Handler>
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009d2a:	4803      	ldr	r0, [pc, #12]	; (8009d38 <TIM1_UP_TIM16_IRQHandler+0x34>)
 8009d2c:	f7fa f944 	bl	8003fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009d30:	bf00      	nop
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	20000270 	.word	0x20000270
 8009d38:	200015e4 	.word	0x200015e4

08009d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009d40:	4802      	ldr	r0, [pc, #8]	; (8009d4c <USART1_IRQHandler+0x10>)
 8009d42:	f7fa fe85 	bl	8004a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009d46:	bf00      	nop
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000bdc 	.word	0x20000bdc

08009d50 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8009d54:	4802      	ldr	r0, [pc, #8]	; (8009d60 <RTC_Alarm_IRQHandler+0x10>)
 8009d56:	f7f9 faa1 	bl	800329c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8009d5a:	bf00      	nop
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000ca0 	.word	0x20000ca0

08009d64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009d6c:	4b11      	ldr	r3, [pc, #68]	; (8009db4 <_sbrk+0x50>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <_sbrk+0x16>
		heap_end = &end;
 8009d74:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <_sbrk+0x50>)
 8009d76:	4a10      	ldr	r2, [pc, #64]	; (8009db8 <_sbrk+0x54>)
 8009d78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009d7a:	4b0e      	ldr	r3, [pc, #56]	; (8009db4 <_sbrk+0x50>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009d80:	4b0c      	ldr	r3, [pc, #48]	; (8009db4 <_sbrk+0x50>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4413      	add	r3, r2
 8009d88:	466a      	mov	r2, sp
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d907      	bls.n	8009d9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009d8e:	f000 f8e3 	bl	8009f58 <__errno>
 8009d92:	4602      	mov	r2, r0
 8009d94:	230c      	movs	r3, #12
 8009d96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d9c:	e006      	b.n	8009dac <_sbrk+0x48>
	}

	heap_end += incr;
 8009d9e:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <_sbrk+0x50>)
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4413      	add	r3, r2
 8009da6:	4a03      	ldr	r2, [pc, #12]	; (8009db4 <_sbrk+0x50>)
 8009da8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009daa:	68fb      	ldr	r3, [r7, #12]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20000274 	.word	0x20000274
 8009db8:	20001630 	.word	0x20001630

08009dbc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009dc0:	4b1f      	ldr	r3, [pc, #124]	; (8009e40 <SystemInit+0x84>)
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc6:	4a1e      	ldr	r2, [pc, #120]	; (8009e40 <SystemInit+0x84>)
 8009dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8009dd0:	4b1c      	ldr	r3, [pc, #112]	; (8009e44 <SystemInit+0x88>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1b      	ldr	r2, [pc, #108]	; (8009e44 <SystemInit+0x88>)
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8009ddc:	4b19      	ldr	r3, [pc, #100]	; (8009e44 <SystemInit+0x88>)
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	4918      	ldr	r1, [pc, #96]	; (8009e44 <SystemInit+0x88>)
 8009de2:	4b19      	ldr	r3, [pc, #100]	; (8009e48 <SystemInit+0x8c>)
 8009de4:	4013      	ands	r3, r2
 8009de6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8009de8:	4b16      	ldr	r3, [pc, #88]	; (8009e44 <SystemInit+0x88>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a15      	ldr	r2, [pc, #84]	; (8009e44 <SystemInit+0x88>)
 8009dee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009df6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009df8:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <SystemInit+0x88>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a11      	ldr	r2, [pc, #68]	; (8009e44 <SystemInit+0x88>)
 8009dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <SystemInit+0x88>)
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4a0e      	ldr	r2, [pc, #56]	; (8009e44 <SystemInit+0x88>)
 8009e0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8009e0e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8009e10:	4b0c      	ldr	r3, [pc, #48]	; (8009e44 <SystemInit+0x88>)
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	4a0b      	ldr	r2, [pc, #44]	; (8009e44 <SystemInit+0x88>)
 8009e16:	f023 030f 	bic.w	r3, r3, #15
 8009e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8009e1c:	4b09      	ldr	r3, [pc, #36]	; (8009e44 <SystemInit+0x88>)
 8009e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e20:	4908      	ldr	r1, [pc, #32]	; (8009e44 <SystemInit+0x88>)
 8009e22:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <SystemInit+0x90>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8009e28:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <SystemInit+0x88>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009e2e:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <SystemInit+0x84>)
 8009e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e34:	609a      	str	r2, [r3, #8]
#endif
}
 8009e36:	bf00      	nop
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	e000ed00 	.word	0xe000ed00
 8009e44:	40021000 	.word	0x40021000
 8009e48:	f87fc00c 	.word	0xf87fc00c
 8009e4c:	ff00fccc 	.word	0xff00fccc

08009e50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	4603      	mov	r3, r0
 8009e58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7fe fc6d 	bl	800873c <SD_disk_initialize>
 8009e62:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return SD_disk_status(pdrv);
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fe fd49 	bl	8008910 <SD_disk_status>
 8009e7e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60b9      	str	r1, [r7, #8]
 8009e90:	607a      	str	r2, [r7, #4]
 8009e92:	603b      	str	r3, [r7, #0]
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8009e98:	7bf8      	ldrb	r0, [r7, #15]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	f7fe fd4c 	bl	800893c <SD_disk_read>
 8009ea4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
 8009eba:	4603      	mov	r3, r0
 8009ebc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009ebe:	7bf8      	ldrb	r0, [r7, #15]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	68b9      	ldr	r1, [r7, #8]
 8009ec6:	f7fe fda3 	bl	8008a10 <SD_disk_write>
 8009eca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	603a      	str	r2, [r7, #0]
 8009ede:	71fb      	strb	r3, [r7, #7]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8009ee4:	79b9      	ldrb	r1, [r7, #6]
 8009ee6:	79fb      	ldrb	r3, [r7, #7]
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fe fe14 	bl	8008b18 <SD_disk_ioctl>
 8009ef0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009f34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8009f00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8009f02:	e003      	b.n	8009f0c <LoopCopyDataInit>

08009f04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8009f04:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8009f06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009f08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009f0a:	3104      	adds	r1, #4

08009f0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009f0c:	480b      	ldr	r0, [pc, #44]	; (8009f3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8009f0e:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009f10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009f12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009f14:	d3f6      	bcc.n	8009f04 <CopyDataInit>
	ldr	r2, =_sbss
 8009f16:	4a0b      	ldr	r2, [pc, #44]	; (8009f44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009f18:	e002      	b.n	8009f20 <LoopFillZerobss>

08009f1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009f1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009f1c:	f842 3b04 	str.w	r3, [r2], #4

08009f20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009f20:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <LoopForever+0x16>)
	cmp	r2, r3
 8009f22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009f24:	d3f9      	bcc.n	8009f1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009f26:	f7ff ff49 	bl	8009dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009f2a:	f000 f81b 	bl	8009f64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009f2e:	f7ff f923 	bl	8009178 <main>

08009f32 <LoopForever>:

LoopForever:
    b LoopForever
 8009f32:	e7fe      	b.n	8009f32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009f34:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8009f38:	0800ac88 	.word	0x0800ac88
	ldr	r0, =_sdata
 8009f3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009f40:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8009f44:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8009f48:	2000162c 	.word	0x2000162c

08009f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009f4c:	e7fe      	b.n	8009f4c <ADC1_2_IRQHandler>

08009f4e <atoi>:
 8009f4e:	220a      	movs	r2, #10
 8009f50:	2100      	movs	r1, #0
 8009f52:	f000 b8cf 	b.w	800a0f4 <strtol>
	...

08009f58 <__errno>:
 8009f58:	4b01      	ldr	r3, [pc, #4]	; (8009f60 <__errno+0x8>)
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000028 	.word	0x20000028

08009f64 <__libc_init_array>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4e0d      	ldr	r6, [pc, #52]	; (8009f9c <__libc_init_array+0x38>)
 8009f68:	4c0d      	ldr	r4, [pc, #52]	; (8009fa0 <__libc_init_array+0x3c>)
 8009f6a:	1ba4      	subs	r4, r4, r6
 8009f6c:	10a4      	asrs	r4, r4, #2
 8009f6e:	2500      	movs	r5, #0
 8009f70:	42a5      	cmp	r5, r4
 8009f72:	d109      	bne.n	8009f88 <__libc_init_array+0x24>
 8009f74:	4e0b      	ldr	r6, [pc, #44]	; (8009fa4 <__libc_init_array+0x40>)
 8009f76:	4c0c      	ldr	r4, [pc, #48]	; (8009fa8 <__libc_init_array+0x44>)
 8009f78:	f000 fcdc 	bl	800a934 <_init>
 8009f7c:	1ba4      	subs	r4, r4, r6
 8009f7e:	10a4      	asrs	r4, r4, #2
 8009f80:	2500      	movs	r5, #0
 8009f82:	42a5      	cmp	r5, r4
 8009f84:	d105      	bne.n	8009f92 <__libc_init_array+0x2e>
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f8c:	4798      	blx	r3
 8009f8e:	3501      	adds	r5, #1
 8009f90:	e7ee      	b.n	8009f70 <__libc_init_array+0xc>
 8009f92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f96:	4798      	blx	r3
 8009f98:	3501      	adds	r5, #1
 8009f9a:	e7f2      	b.n	8009f82 <__libc_init_array+0x1e>
 8009f9c:	0800ac80 	.word	0x0800ac80
 8009fa0:	0800ac80 	.word	0x0800ac80
 8009fa4:	0800ac80 	.word	0x0800ac80
 8009fa8:	0800ac84 	.word	0x0800ac84

08009fac <memset>:
 8009fac:	4402      	add	r2, r0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d100      	bne.n	8009fb6 <memset+0xa>
 8009fb4:	4770      	bx	lr
 8009fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fba:	e7f9      	b.n	8009fb0 <memset+0x4>

08009fbc <siprintf>:
 8009fbc:	b40e      	push	{r1, r2, r3}
 8009fbe:	b500      	push	{lr}
 8009fc0:	b09c      	sub	sp, #112	; 0x70
 8009fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8009fc4:	9002      	str	r0, [sp, #8]
 8009fc6:	9006      	str	r0, [sp, #24]
 8009fc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fcc:	4809      	ldr	r0, [pc, #36]	; (8009ff4 <siprintf+0x38>)
 8009fce:	9107      	str	r1, [sp, #28]
 8009fd0:	9104      	str	r1, [sp, #16]
 8009fd2:	4909      	ldr	r1, [pc, #36]	; (8009ff8 <siprintf+0x3c>)
 8009fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd8:	9105      	str	r1, [sp, #20]
 8009fda:	6800      	ldr	r0, [r0, #0]
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	a902      	add	r1, sp, #8
 8009fe0:	f000 f90e 	bl	800a200 <_svfiprintf_r>
 8009fe4:	9b02      	ldr	r3, [sp, #8]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	701a      	strb	r2, [r3, #0]
 8009fea:	b01c      	add	sp, #112	; 0x70
 8009fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ff0:	b003      	add	sp, #12
 8009ff2:	4770      	bx	lr
 8009ff4:	20000028 	.word	0x20000028
 8009ff8:	ffff0208 	.word	0xffff0208

08009ffc <_strtol_l.isra.0>:
 8009ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a000:	4680      	mov	r8, r0
 800a002:	4689      	mov	r9, r1
 800a004:	4692      	mov	sl, r2
 800a006:	461e      	mov	r6, r3
 800a008:	460f      	mov	r7, r1
 800a00a:	463d      	mov	r5, r7
 800a00c:	9808      	ldr	r0, [sp, #32]
 800a00e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a012:	f000 f885 	bl	800a120 <__locale_ctype_ptr_l>
 800a016:	4420      	add	r0, r4
 800a018:	7843      	ldrb	r3, [r0, #1]
 800a01a:	f013 0308 	ands.w	r3, r3, #8
 800a01e:	d132      	bne.n	800a086 <_strtol_l.isra.0+0x8a>
 800a020:	2c2d      	cmp	r4, #45	; 0x2d
 800a022:	d132      	bne.n	800a08a <_strtol_l.isra.0+0x8e>
 800a024:	787c      	ldrb	r4, [r7, #1]
 800a026:	1cbd      	adds	r5, r7, #2
 800a028:	2201      	movs	r2, #1
 800a02a:	2e00      	cmp	r6, #0
 800a02c:	d05d      	beq.n	800a0ea <_strtol_l.isra.0+0xee>
 800a02e:	2e10      	cmp	r6, #16
 800a030:	d109      	bne.n	800a046 <_strtol_l.isra.0+0x4a>
 800a032:	2c30      	cmp	r4, #48	; 0x30
 800a034:	d107      	bne.n	800a046 <_strtol_l.isra.0+0x4a>
 800a036:	782b      	ldrb	r3, [r5, #0]
 800a038:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a03c:	2b58      	cmp	r3, #88	; 0x58
 800a03e:	d14f      	bne.n	800a0e0 <_strtol_l.isra.0+0xe4>
 800a040:	786c      	ldrb	r4, [r5, #1]
 800a042:	2610      	movs	r6, #16
 800a044:	3502      	adds	r5, #2
 800a046:	2a00      	cmp	r2, #0
 800a048:	bf14      	ite	ne
 800a04a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a04e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a052:	2700      	movs	r7, #0
 800a054:	fbb1 fcf6 	udiv	ip, r1, r6
 800a058:	4638      	mov	r0, r7
 800a05a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a05e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a062:	2b09      	cmp	r3, #9
 800a064:	d817      	bhi.n	800a096 <_strtol_l.isra.0+0x9a>
 800a066:	461c      	mov	r4, r3
 800a068:	42a6      	cmp	r6, r4
 800a06a:	dd23      	ble.n	800a0b4 <_strtol_l.isra.0+0xb8>
 800a06c:	1c7b      	adds	r3, r7, #1
 800a06e:	d007      	beq.n	800a080 <_strtol_l.isra.0+0x84>
 800a070:	4584      	cmp	ip, r0
 800a072:	d31c      	bcc.n	800a0ae <_strtol_l.isra.0+0xb2>
 800a074:	d101      	bne.n	800a07a <_strtol_l.isra.0+0x7e>
 800a076:	45a6      	cmp	lr, r4
 800a078:	db19      	blt.n	800a0ae <_strtol_l.isra.0+0xb2>
 800a07a:	fb00 4006 	mla	r0, r0, r6, r4
 800a07e:	2701      	movs	r7, #1
 800a080:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a084:	e7eb      	b.n	800a05e <_strtol_l.isra.0+0x62>
 800a086:	462f      	mov	r7, r5
 800a088:	e7bf      	b.n	800a00a <_strtol_l.isra.0+0xe>
 800a08a:	2c2b      	cmp	r4, #43	; 0x2b
 800a08c:	bf04      	itt	eq
 800a08e:	1cbd      	addeq	r5, r7, #2
 800a090:	787c      	ldrbeq	r4, [r7, #1]
 800a092:	461a      	mov	r2, r3
 800a094:	e7c9      	b.n	800a02a <_strtol_l.isra.0+0x2e>
 800a096:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a09a:	2b19      	cmp	r3, #25
 800a09c:	d801      	bhi.n	800a0a2 <_strtol_l.isra.0+0xa6>
 800a09e:	3c37      	subs	r4, #55	; 0x37
 800a0a0:	e7e2      	b.n	800a068 <_strtol_l.isra.0+0x6c>
 800a0a2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a0a6:	2b19      	cmp	r3, #25
 800a0a8:	d804      	bhi.n	800a0b4 <_strtol_l.isra.0+0xb8>
 800a0aa:	3c57      	subs	r4, #87	; 0x57
 800a0ac:	e7dc      	b.n	800a068 <_strtol_l.isra.0+0x6c>
 800a0ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a0b2:	e7e5      	b.n	800a080 <_strtol_l.isra.0+0x84>
 800a0b4:	1c7b      	adds	r3, r7, #1
 800a0b6:	d108      	bne.n	800a0ca <_strtol_l.isra.0+0xce>
 800a0b8:	2322      	movs	r3, #34	; 0x22
 800a0ba:	f8c8 3000 	str.w	r3, [r8]
 800a0be:	4608      	mov	r0, r1
 800a0c0:	f1ba 0f00 	cmp.w	sl, #0
 800a0c4:	d107      	bne.n	800a0d6 <_strtol_l.isra.0+0xda>
 800a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ca:	b102      	cbz	r2, 800a0ce <_strtol_l.isra.0+0xd2>
 800a0cc:	4240      	negs	r0, r0
 800a0ce:	f1ba 0f00 	cmp.w	sl, #0
 800a0d2:	d0f8      	beq.n	800a0c6 <_strtol_l.isra.0+0xca>
 800a0d4:	b10f      	cbz	r7, 800a0da <_strtol_l.isra.0+0xde>
 800a0d6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a0da:	f8ca 9000 	str.w	r9, [sl]
 800a0de:	e7f2      	b.n	800a0c6 <_strtol_l.isra.0+0xca>
 800a0e0:	2430      	movs	r4, #48	; 0x30
 800a0e2:	2e00      	cmp	r6, #0
 800a0e4:	d1af      	bne.n	800a046 <_strtol_l.isra.0+0x4a>
 800a0e6:	2608      	movs	r6, #8
 800a0e8:	e7ad      	b.n	800a046 <_strtol_l.isra.0+0x4a>
 800a0ea:	2c30      	cmp	r4, #48	; 0x30
 800a0ec:	d0a3      	beq.n	800a036 <_strtol_l.isra.0+0x3a>
 800a0ee:	260a      	movs	r6, #10
 800a0f0:	e7a9      	b.n	800a046 <_strtol_l.isra.0+0x4a>
	...

0800a0f4 <strtol>:
 800a0f4:	4b08      	ldr	r3, [pc, #32]	; (800a118 <strtol+0x24>)
 800a0f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f8:	681c      	ldr	r4, [r3, #0]
 800a0fa:	4d08      	ldr	r5, [pc, #32]	; (800a11c <strtol+0x28>)
 800a0fc:	6a23      	ldr	r3, [r4, #32]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bf08      	it	eq
 800a102:	462b      	moveq	r3, r5
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	4613      	mov	r3, r2
 800a108:	460a      	mov	r2, r1
 800a10a:	4601      	mov	r1, r0
 800a10c:	4620      	mov	r0, r4
 800a10e:	f7ff ff75 	bl	8009ffc <_strtol_l.isra.0>
 800a112:	b003      	add	sp, #12
 800a114:	bd30      	pop	{r4, r5, pc}
 800a116:	bf00      	nop
 800a118:	20000028 	.word	0x20000028
 800a11c:	2000008c 	.word	0x2000008c

0800a120 <__locale_ctype_ptr_l>:
 800a120:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a124:	4770      	bx	lr

0800a126 <__ascii_mbtowc>:
 800a126:	b082      	sub	sp, #8
 800a128:	b901      	cbnz	r1, 800a12c <__ascii_mbtowc+0x6>
 800a12a:	a901      	add	r1, sp, #4
 800a12c:	b142      	cbz	r2, 800a140 <__ascii_mbtowc+0x1a>
 800a12e:	b14b      	cbz	r3, 800a144 <__ascii_mbtowc+0x1e>
 800a130:	7813      	ldrb	r3, [r2, #0]
 800a132:	600b      	str	r3, [r1, #0]
 800a134:	7812      	ldrb	r2, [r2, #0]
 800a136:	1c10      	adds	r0, r2, #0
 800a138:	bf18      	it	ne
 800a13a:	2001      	movne	r0, #1
 800a13c:	b002      	add	sp, #8
 800a13e:	4770      	bx	lr
 800a140:	4610      	mov	r0, r2
 800a142:	e7fb      	b.n	800a13c <__ascii_mbtowc+0x16>
 800a144:	f06f 0001 	mvn.w	r0, #1
 800a148:	e7f8      	b.n	800a13c <__ascii_mbtowc+0x16>

0800a14a <__ssputs_r>:
 800a14a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14e:	688e      	ldr	r6, [r1, #8]
 800a150:	429e      	cmp	r6, r3
 800a152:	4682      	mov	sl, r0
 800a154:	460c      	mov	r4, r1
 800a156:	4690      	mov	r8, r2
 800a158:	4699      	mov	r9, r3
 800a15a:	d837      	bhi.n	800a1cc <__ssputs_r+0x82>
 800a15c:	898a      	ldrh	r2, [r1, #12]
 800a15e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a162:	d031      	beq.n	800a1c8 <__ssputs_r+0x7e>
 800a164:	6825      	ldr	r5, [r4, #0]
 800a166:	6909      	ldr	r1, [r1, #16]
 800a168:	1a6f      	subs	r7, r5, r1
 800a16a:	6965      	ldr	r5, [r4, #20]
 800a16c:	2302      	movs	r3, #2
 800a16e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a172:	fb95 f5f3 	sdiv	r5, r5, r3
 800a176:	f109 0301 	add.w	r3, r9, #1
 800a17a:	443b      	add	r3, r7
 800a17c:	429d      	cmp	r5, r3
 800a17e:	bf38      	it	cc
 800a180:	461d      	movcc	r5, r3
 800a182:	0553      	lsls	r3, r2, #21
 800a184:	d530      	bpl.n	800a1e8 <__ssputs_r+0x9e>
 800a186:	4629      	mov	r1, r5
 800a188:	f000 fb3a 	bl	800a800 <_malloc_r>
 800a18c:	4606      	mov	r6, r0
 800a18e:	b950      	cbnz	r0, 800a1a6 <__ssputs_r+0x5c>
 800a190:	230c      	movs	r3, #12
 800a192:	f8ca 3000 	str.w	r3, [sl]
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a6:	463a      	mov	r2, r7
 800a1a8:	6921      	ldr	r1, [r4, #16]
 800a1aa:	f000 fab6 	bl	800a71a <memcpy>
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	6126      	str	r6, [r4, #16]
 800a1bc:	6165      	str	r5, [r4, #20]
 800a1be:	443e      	add	r6, r7
 800a1c0:	1bed      	subs	r5, r5, r7
 800a1c2:	6026      	str	r6, [r4, #0]
 800a1c4:	60a5      	str	r5, [r4, #8]
 800a1c6:	464e      	mov	r6, r9
 800a1c8:	454e      	cmp	r6, r9
 800a1ca:	d900      	bls.n	800a1ce <__ssputs_r+0x84>
 800a1cc:	464e      	mov	r6, r9
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	4641      	mov	r1, r8
 800a1d2:	6820      	ldr	r0, [r4, #0]
 800a1d4:	f000 faac 	bl	800a730 <memmove>
 800a1d8:	68a3      	ldr	r3, [r4, #8]
 800a1da:	1b9b      	subs	r3, r3, r6
 800a1dc:	60a3      	str	r3, [r4, #8]
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	441e      	add	r6, r3
 800a1e2:	6026      	str	r6, [r4, #0]
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	e7dc      	b.n	800a1a2 <__ssputs_r+0x58>
 800a1e8:	462a      	mov	r2, r5
 800a1ea:	f000 fb63 	bl	800a8b4 <_realloc_r>
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d1e2      	bne.n	800a1ba <__ssputs_r+0x70>
 800a1f4:	6921      	ldr	r1, [r4, #16]
 800a1f6:	4650      	mov	r0, sl
 800a1f8:	f000 fab4 	bl	800a764 <_free_r>
 800a1fc:	e7c8      	b.n	800a190 <__ssputs_r+0x46>
	...

0800a200 <_svfiprintf_r>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	461d      	mov	r5, r3
 800a206:	898b      	ldrh	r3, [r1, #12]
 800a208:	061f      	lsls	r7, r3, #24
 800a20a:	b09d      	sub	sp, #116	; 0x74
 800a20c:	4680      	mov	r8, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	4616      	mov	r6, r2
 800a212:	d50f      	bpl.n	800a234 <_svfiprintf_r+0x34>
 800a214:	690b      	ldr	r3, [r1, #16]
 800a216:	b96b      	cbnz	r3, 800a234 <_svfiprintf_r+0x34>
 800a218:	2140      	movs	r1, #64	; 0x40
 800a21a:	f000 faf1 	bl	800a800 <_malloc_r>
 800a21e:	6020      	str	r0, [r4, #0]
 800a220:	6120      	str	r0, [r4, #16]
 800a222:	b928      	cbnz	r0, 800a230 <_svfiprintf_r+0x30>
 800a224:	230c      	movs	r3, #12
 800a226:	f8c8 3000 	str.w	r3, [r8]
 800a22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a22e:	e0c8      	b.n	800a3c2 <_svfiprintf_r+0x1c2>
 800a230:	2340      	movs	r3, #64	; 0x40
 800a232:	6163      	str	r3, [r4, #20]
 800a234:	2300      	movs	r3, #0
 800a236:	9309      	str	r3, [sp, #36]	; 0x24
 800a238:	2320      	movs	r3, #32
 800a23a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a23e:	2330      	movs	r3, #48	; 0x30
 800a240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a244:	9503      	str	r5, [sp, #12]
 800a246:	f04f 0b01 	mov.w	fp, #1
 800a24a:	4637      	mov	r7, r6
 800a24c:	463d      	mov	r5, r7
 800a24e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a252:	b10b      	cbz	r3, 800a258 <_svfiprintf_r+0x58>
 800a254:	2b25      	cmp	r3, #37	; 0x25
 800a256:	d13e      	bne.n	800a2d6 <_svfiprintf_r+0xd6>
 800a258:	ebb7 0a06 	subs.w	sl, r7, r6
 800a25c:	d00b      	beq.n	800a276 <_svfiprintf_r+0x76>
 800a25e:	4653      	mov	r3, sl
 800a260:	4632      	mov	r2, r6
 800a262:	4621      	mov	r1, r4
 800a264:	4640      	mov	r0, r8
 800a266:	f7ff ff70 	bl	800a14a <__ssputs_r>
 800a26a:	3001      	adds	r0, #1
 800a26c:	f000 80a4 	beq.w	800a3b8 <_svfiprintf_r+0x1b8>
 800a270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a272:	4453      	add	r3, sl
 800a274:	9309      	str	r3, [sp, #36]	; 0x24
 800a276:	783b      	ldrb	r3, [r7, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 809d 	beq.w	800a3b8 <_svfiprintf_r+0x1b8>
 800a27e:	2300      	movs	r3, #0
 800a280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a288:	9304      	str	r3, [sp, #16]
 800a28a:	9307      	str	r3, [sp, #28]
 800a28c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a290:	931a      	str	r3, [sp, #104]	; 0x68
 800a292:	462f      	mov	r7, r5
 800a294:	2205      	movs	r2, #5
 800a296:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a29a:	4850      	ldr	r0, [pc, #320]	; (800a3dc <_svfiprintf_r+0x1dc>)
 800a29c:	f7f5 ffa0 	bl	80001e0 <memchr>
 800a2a0:	9b04      	ldr	r3, [sp, #16]
 800a2a2:	b9d0      	cbnz	r0, 800a2da <_svfiprintf_r+0xda>
 800a2a4:	06d9      	lsls	r1, r3, #27
 800a2a6:	bf44      	itt	mi
 800a2a8:	2220      	movmi	r2, #32
 800a2aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2ae:	071a      	lsls	r2, r3, #28
 800a2b0:	bf44      	itt	mi
 800a2b2:	222b      	movmi	r2, #43	; 0x2b
 800a2b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2b8:	782a      	ldrb	r2, [r5, #0]
 800a2ba:	2a2a      	cmp	r2, #42	; 0x2a
 800a2bc:	d015      	beq.n	800a2ea <_svfiprintf_r+0xea>
 800a2be:	9a07      	ldr	r2, [sp, #28]
 800a2c0:	462f      	mov	r7, r5
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	250a      	movs	r5, #10
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2cc:	3b30      	subs	r3, #48	; 0x30
 800a2ce:	2b09      	cmp	r3, #9
 800a2d0:	d94d      	bls.n	800a36e <_svfiprintf_r+0x16e>
 800a2d2:	b1b8      	cbz	r0, 800a304 <_svfiprintf_r+0x104>
 800a2d4:	e00f      	b.n	800a2f6 <_svfiprintf_r+0xf6>
 800a2d6:	462f      	mov	r7, r5
 800a2d8:	e7b8      	b.n	800a24c <_svfiprintf_r+0x4c>
 800a2da:	4a40      	ldr	r2, [pc, #256]	; (800a3dc <_svfiprintf_r+0x1dc>)
 800a2dc:	1a80      	subs	r0, r0, r2
 800a2de:	fa0b f000 	lsl.w	r0, fp, r0
 800a2e2:	4318      	orrs	r0, r3
 800a2e4:	9004      	str	r0, [sp, #16]
 800a2e6:	463d      	mov	r5, r7
 800a2e8:	e7d3      	b.n	800a292 <_svfiprintf_r+0x92>
 800a2ea:	9a03      	ldr	r2, [sp, #12]
 800a2ec:	1d11      	adds	r1, r2, #4
 800a2ee:	6812      	ldr	r2, [r2, #0]
 800a2f0:	9103      	str	r1, [sp, #12]
 800a2f2:	2a00      	cmp	r2, #0
 800a2f4:	db01      	blt.n	800a2fa <_svfiprintf_r+0xfa>
 800a2f6:	9207      	str	r2, [sp, #28]
 800a2f8:	e004      	b.n	800a304 <_svfiprintf_r+0x104>
 800a2fa:	4252      	negs	r2, r2
 800a2fc:	f043 0302 	orr.w	r3, r3, #2
 800a300:	9207      	str	r2, [sp, #28]
 800a302:	9304      	str	r3, [sp, #16]
 800a304:	783b      	ldrb	r3, [r7, #0]
 800a306:	2b2e      	cmp	r3, #46	; 0x2e
 800a308:	d10c      	bne.n	800a324 <_svfiprintf_r+0x124>
 800a30a:	787b      	ldrb	r3, [r7, #1]
 800a30c:	2b2a      	cmp	r3, #42	; 0x2a
 800a30e:	d133      	bne.n	800a378 <_svfiprintf_r+0x178>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	1d1a      	adds	r2, r3, #4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	9203      	str	r2, [sp, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	bfb8      	it	lt
 800a31c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a320:	3702      	adds	r7, #2
 800a322:	9305      	str	r3, [sp, #20]
 800a324:	4d2e      	ldr	r5, [pc, #184]	; (800a3e0 <_svfiprintf_r+0x1e0>)
 800a326:	7839      	ldrb	r1, [r7, #0]
 800a328:	2203      	movs	r2, #3
 800a32a:	4628      	mov	r0, r5
 800a32c:	f7f5 ff58 	bl	80001e0 <memchr>
 800a330:	b138      	cbz	r0, 800a342 <_svfiprintf_r+0x142>
 800a332:	2340      	movs	r3, #64	; 0x40
 800a334:	1b40      	subs	r0, r0, r5
 800a336:	fa03 f000 	lsl.w	r0, r3, r0
 800a33a:	9b04      	ldr	r3, [sp, #16]
 800a33c:	4303      	orrs	r3, r0
 800a33e:	3701      	adds	r7, #1
 800a340:	9304      	str	r3, [sp, #16]
 800a342:	7839      	ldrb	r1, [r7, #0]
 800a344:	4827      	ldr	r0, [pc, #156]	; (800a3e4 <_svfiprintf_r+0x1e4>)
 800a346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a34a:	2206      	movs	r2, #6
 800a34c:	1c7e      	adds	r6, r7, #1
 800a34e:	f7f5 ff47 	bl	80001e0 <memchr>
 800a352:	2800      	cmp	r0, #0
 800a354:	d038      	beq.n	800a3c8 <_svfiprintf_r+0x1c8>
 800a356:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <_svfiprintf_r+0x1e8>)
 800a358:	bb13      	cbnz	r3, 800a3a0 <_svfiprintf_r+0x1a0>
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	3307      	adds	r3, #7
 800a35e:	f023 0307 	bic.w	r3, r3, #7
 800a362:	3308      	adds	r3, #8
 800a364:	9303      	str	r3, [sp, #12]
 800a366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a368:	444b      	add	r3, r9
 800a36a:	9309      	str	r3, [sp, #36]	; 0x24
 800a36c:	e76d      	b.n	800a24a <_svfiprintf_r+0x4a>
 800a36e:	fb05 3202 	mla	r2, r5, r2, r3
 800a372:	2001      	movs	r0, #1
 800a374:	460f      	mov	r7, r1
 800a376:	e7a6      	b.n	800a2c6 <_svfiprintf_r+0xc6>
 800a378:	2300      	movs	r3, #0
 800a37a:	3701      	adds	r7, #1
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	4619      	mov	r1, r3
 800a380:	250a      	movs	r5, #10
 800a382:	4638      	mov	r0, r7
 800a384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a388:	3a30      	subs	r2, #48	; 0x30
 800a38a:	2a09      	cmp	r2, #9
 800a38c:	d903      	bls.n	800a396 <_svfiprintf_r+0x196>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d0c8      	beq.n	800a324 <_svfiprintf_r+0x124>
 800a392:	9105      	str	r1, [sp, #20]
 800a394:	e7c6      	b.n	800a324 <_svfiprintf_r+0x124>
 800a396:	fb05 2101 	mla	r1, r5, r1, r2
 800a39a:	2301      	movs	r3, #1
 800a39c:	4607      	mov	r7, r0
 800a39e:	e7f0      	b.n	800a382 <_svfiprintf_r+0x182>
 800a3a0:	ab03      	add	r3, sp, #12
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <_svfiprintf_r+0x1ec>)
 800a3a8:	a904      	add	r1, sp, #16
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f3af 8000 	nop.w
 800a3b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a3b4:	4681      	mov	r9, r0
 800a3b6:	d1d6      	bne.n	800a366 <_svfiprintf_r+0x166>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	065b      	lsls	r3, r3, #25
 800a3bc:	f53f af35 	bmi.w	800a22a <_svfiprintf_r+0x2a>
 800a3c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3c2:	b01d      	add	sp, #116	; 0x74
 800a3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c8:	ab03      	add	r3, sp, #12
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	4622      	mov	r2, r4
 800a3ce:	4b07      	ldr	r3, [pc, #28]	; (800a3ec <_svfiprintf_r+0x1ec>)
 800a3d0:	a904      	add	r1, sp, #16
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	f000 f882 	bl	800a4dc <_printf_i>
 800a3d8:	e7ea      	b.n	800a3b0 <_svfiprintf_r+0x1b0>
 800a3da:	bf00      	nop
 800a3dc:	0800ab4a 	.word	0x0800ab4a
 800a3e0:	0800ab50 	.word	0x0800ab50
 800a3e4:	0800ab54 	.word	0x0800ab54
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	0800a14b 	.word	0x0800a14b

0800a3f0 <_printf_common>:
 800a3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f4:	4691      	mov	r9, r2
 800a3f6:	461f      	mov	r7, r3
 800a3f8:	688a      	ldr	r2, [r1, #8]
 800a3fa:	690b      	ldr	r3, [r1, #16]
 800a3fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a400:	4293      	cmp	r3, r2
 800a402:	bfb8      	it	lt
 800a404:	4613      	movlt	r3, r2
 800a406:	f8c9 3000 	str.w	r3, [r9]
 800a40a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a40e:	4606      	mov	r6, r0
 800a410:	460c      	mov	r4, r1
 800a412:	b112      	cbz	r2, 800a41a <_printf_common+0x2a>
 800a414:	3301      	adds	r3, #1
 800a416:	f8c9 3000 	str.w	r3, [r9]
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	0699      	lsls	r1, r3, #26
 800a41e:	bf42      	ittt	mi
 800a420:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a424:	3302      	addmi	r3, #2
 800a426:	f8c9 3000 	strmi.w	r3, [r9]
 800a42a:	6825      	ldr	r5, [r4, #0]
 800a42c:	f015 0506 	ands.w	r5, r5, #6
 800a430:	d107      	bne.n	800a442 <_printf_common+0x52>
 800a432:	f104 0a19 	add.w	sl, r4, #25
 800a436:	68e3      	ldr	r3, [r4, #12]
 800a438:	f8d9 2000 	ldr.w	r2, [r9]
 800a43c:	1a9b      	subs	r3, r3, r2
 800a43e:	42ab      	cmp	r3, r5
 800a440:	dc28      	bgt.n	800a494 <_printf_common+0xa4>
 800a442:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a446:	6822      	ldr	r2, [r4, #0]
 800a448:	3300      	adds	r3, #0
 800a44a:	bf18      	it	ne
 800a44c:	2301      	movne	r3, #1
 800a44e:	0692      	lsls	r2, r2, #26
 800a450:	d42d      	bmi.n	800a4ae <_printf_common+0xbe>
 800a452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a456:	4639      	mov	r1, r7
 800a458:	4630      	mov	r0, r6
 800a45a:	47c0      	blx	r8
 800a45c:	3001      	adds	r0, #1
 800a45e:	d020      	beq.n	800a4a2 <_printf_common+0xb2>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	68e5      	ldr	r5, [r4, #12]
 800a464:	f8d9 2000 	ldr.w	r2, [r9]
 800a468:	f003 0306 	and.w	r3, r3, #6
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	bf08      	it	eq
 800a470:	1aad      	subeq	r5, r5, r2
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	6922      	ldr	r2, [r4, #16]
 800a476:	bf0c      	ite	eq
 800a478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a47c:	2500      	movne	r5, #0
 800a47e:	4293      	cmp	r3, r2
 800a480:	bfc4      	itt	gt
 800a482:	1a9b      	subgt	r3, r3, r2
 800a484:	18ed      	addgt	r5, r5, r3
 800a486:	f04f 0900 	mov.w	r9, #0
 800a48a:	341a      	adds	r4, #26
 800a48c:	454d      	cmp	r5, r9
 800a48e:	d11a      	bne.n	800a4c6 <_printf_common+0xd6>
 800a490:	2000      	movs	r0, #0
 800a492:	e008      	b.n	800a4a6 <_printf_common+0xb6>
 800a494:	2301      	movs	r3, #1
 800a496:	4652      	mov	r2, sl
 800a498:	4639      	mov	r1, r7
 800a49a:	4630      	mov	r0, r6
 800a49c:	47c0      	blx	r8
 800a49e:	3001      	adds	r0, #1
 800a4a0:	d103      	bne.n	800a4aa <_printf_common+0xba>
 800a4a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4aa:	3501      	adds	r5, #1
 800a4ac:	e7c3      	b.n	800a436 <_printf_common+0x46>
 800a4ae:	18e1      	adds	r1, r4, r3
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	2030      	movs	r0, #48	; 0x30
 800a4b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4b8:	4422      	add	r2, r4
 800a4ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4c2:	3302      	adds	r3, #2
 800a4c4:	e7c5      	b.n	800a452 <_printf_common+0x62>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	47c0      	blx	r8
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d0e6      	beq.n	800a4a2 <_printf_common+0xb2>
 800a4d4:	f109 0901 	add.w	r9, r9, #1
 800a4d8:	e7d8      	b.n	800a48c <_printf_common+0x9c>
	...

0800a4dc <_printf_i>:
 800a4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	7e09      	ldrb	r1, [r1, #24]
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	296e      	cmp	r1, #110	; 0x6e
 800a4ec:	4617      	mov	r7, r2
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	4698      	mov	r8, r3
 800a4f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4f4:	f000 80b3 	beq.w	800a65e <_printf_i+0x182>
 800a4f8:	d822      	bhi.n	800a540 <_printf_i+0x64>
 800a4fa:	2963      	cmp	r1, #99	; 0x63
 800a4fc:	d036      	beq.n	800a56c <_printf_i+0x90>
 800a4fe:	d80a      	bhi.n	800a516 <_printf_i+0x3a>
 800a500:	2900      	cmp	r1, #0
 800a502:	f000 80b9 	beq.w	800a678 <_printf_i+0x19c>
 800a506:	2958      	cmp	r1, #88	; 0x58
 800a508:	f000 8083 	beq.w	800a612 <_printf_i+0x136>
 800a50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a510:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a514:	e032      	b.n	800a57c <_printf_i+0xa0>
 800a516:	2964      	cmp	r1, #100	; 0x64
 800a518:	d001      	beq.n	800a51e <_printf_i+0x42>
 800a51a:	2969      	cmp	r1, #105	; 0x69
 800a51c:	d1f6      	bne.n	800a50c <_printf_i+0x30>
 800a51e:	6820      	ldr	r0, [r4, #0]
 800a520:	6813      	ldr	r3, [r2, #0]
 800a522:	0605      	lsls	r5, r0, #24
 800a524:	f103 0104 	add.w	r1, r3, #4
 800a528:	d52a      	bpl.n	800a580 <_printf_i+0xa4>
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6011      	str	r1, [r2, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	da03      	bge.n	800a53a <_printf_i+0x5e>
 800a532:	222d      	movs	r2, #45	; 0x2d
 800a534:	425b      	negs	r3, r3
 800a536:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a53a:	486f      	ldr	r0, [pc, #444]	; (800a6f8 <_printf_i+0x21c>)
 800a53c:	220a      	movs	r2, #10
 800a53e:	e039      	b.n	800a5b4 <_printf_i+0xd8>
 800a540:	2973      	cmp	r1, #115	; 0x73
 800a542:	f000 809d 	beq.w	800a680 <_printf_i+0x1a4>
 800a546:	d808      	bhi.n	800a55a <_printf_i+0x7e>
 800a548:	296f      	cmp	r1, #111	; 0x6f
 800a54a:	d020      	beq.n	800a58e <_printf_i+0xb2>
 800a54c:	2970      	cmp	r1, #112	; 0x70
 800a54e:	d1dd      	bne.n	800a50c <_printf_i+0x30>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	f043 0320 	orr.w	r3, r3, #32
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	e003      	b.n	800a562 <_printf_i+0x86>
 800a55a:	2975      	cmp	r1, #117	; 0x75
 800a55c:	d017      	beq.n	800a58e <_printf_i+0xb2>
 800a55e:	2978      	cmp	r1, #120	; 0x78
 800a560:	d1d4      	bne.n	800a50c <_printf_i+0x30>
 800a562:	2378      	movs	r3, #120	; 0x78
 800a564:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a568:	4864      	ldr	r0, [pc, #400]	; (800a6fc <_printf_i+0x220>)
 800a56a:	e055      	b.n	800a618 <_printf_i+0x13c>
 800a56c:	6813      	ldr	r3, [r2, #0]
 800a56e:	1d19      	adds	r1, r3, #4
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6011      	str	r1, [r2, #0]
 800a574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a57c:	2301      	movs	r3, #1
 800a57e:	e08c      	b.n	800a69a <_printf_i+0x1be>
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6011      	str	r1, [r2, #0]
 800a584:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a588:	bf18      	it	ne
 800a58a:	b21b      	sxthne	r3, r3
 800a58c:	e7cf      	b.n	800a52e <_printf_i+0x52>
 800a58e:	6813      	ldr	r3, [r2, #0]
 800a590:	6825      	ldr	r5, [r4, #0]
 800a592:	1d18      	adds	r0, r3, #4
 800a594:	6010      	str	r0, [r2, #0]
 800a596:	0628      	lsls	r0, r5, #24
 800a598:	d501      	bpl.n	800a59e <_printf_i+0xc2>
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	e002      	b.n	800a5a4 <_printf_i+0xc8>
 800a59e:	0668      	lsls	r0, r5, #25
 800a5a0:	d5fb      	bpl.n	800a59a <_printf_i+0xbe>
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	4854      	ldr	r0, [pc, #336]	; (800a6f8 <_printf_i+0x21c>)
 800a5a6:	296f      	cmp	r1, #111	; 0x6f
 800a5a8:	bf14      	ite	ne
 800a5aa:	220a      	movne	r2, #10
 800a5ac:	2208      	moveq	r2, #8
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5b4:	6865      	ldr	r5, [r4, #4]
 800a5b6:	60a5      	str	r5, [r4, #8]
 800a5b8:	2d00      	cmp	r5, #0
 800a5ba:	f2c0 8095 	blt.w	800a6e8 <_printf_i+0x20c>
 800a5be:	6821      	ldr	r1, [r4, #0]
 800a5c0:	f021 0104 	bic.w	r1, r1, #4
 800a5c4:	6021      	str	r1, [r4, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d13d      	bne.n	800a646 <_printf_i+0x16a>
 800a5ca:	2d00      	cmp	r5, #0
 800a5cc:	f040 808e 	bne.w	800a6ec <_printf_i+0x210>
 800a5d0:	4665      	mov	r5, ip
 800a5d2:	2a08      	cmp	r2, #8
 800a5d4:	d10b      	bne.n	800a5ee <_printf_i+0x112>
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	07db      	lsls	r3, r3, #31
 800a5da:	d508      	bpl.n	800a5ee <_printf_i+0x112>
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	6862      	ldr	r2, [r4, #4]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	bfde      	ittt	le
 800a5e4:	2330      	movle	r3, #48	; 0x30
 800a5e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a5ee:	ebac 0305 	sub.w	r3, ip, r5
 800a5f2:	6123      	str	r3, [r4, #16]
 800a5f4:	f8cd 8000 	str.w	r8, [sp]
 800a5f8:	463b      	mov	r3, r7
 800a5fa:	aa03      	add	r2, sp, #12
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	4630      	mov	r0, r6
 800a600:	f7ff fef6 	bl	800a3f0 <_printf_common>
 800a604:	3001      	adds	r0, #1
 800a606:	d14d      	bne.n	800a6a4 <_printf_i+0x1c8>
 800a608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a60c:	b005      	add	sp, #20
 800a60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a612:	4839      	ldr	r0, [pc, #228]	; (800a6f8 <_printf_i+0x21c>)
 800a614:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a618:	6813      	ldr	r3, [r2, #0]
 800a61a:	6821      	ldr	r1, [r4, #0]
 800a61c:	1d1d      	adds	r5, r3, #4
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6015      	str	r5, [r2, #0]
 800a622:	060a      	lsls	r2, r1, #24
 800a624:	d50b      	bpl.n	800a63e <_printf_i+0x162>
 800a626:	07ca      	lsls	r2, r1, #31
 800a628:	bf44      	itt	mi
 800a62a:	f041 0120 	orrmi.w	r1, r1, #32
 800a62e:	6021      	strmi	r1, [r4, #0]
 800a630:	b91b      	cbnz	r3, 800a63a <_printf_i+0x15e>
 800a632:	6822      	ldr	r2, [r4, #0]
 800a634:	f022 0220 	bic.w	r2, r2, #32
 800a638:	6022      	str	r2, [r4, #0]
 800a63a:	2210      	movs	r2, #16
 800a63c:	e7b7      	b.n	800a5ae <_printf_i+0xd2>
 800a63e:	064d      	lsls	r5, r1, #25
 800a640:	bf48      	it	mi
 800a642:	b29b      	uxthmi	r3, r3
 800a644:	e7ef      	b.n	800a626 <_printf_i+0x14a>
 800a646:	4665      	mov	r5, ip
 800a648:	fbb3 f1f2 	udiv	r1, r3, r2
 800a64c:	fb02 3311 	mls	r3, r2, r1, r3
 800a650:	5cc3      	ldrb	r3, [r0, r3]
 800a652:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a656:	460b      	mov	r3, r1
 800a658:	2900      	cmp	r1, #0
 800a65a:	d1f5      	bne.n	800a648 <_printf_i+0x16c>
 800a65c:	e7b9      	b.n	800a5d2 <_printf_i+0xf6>
 800a65e:	6813      	ldr	r3, [r2, #0]
 800a660:	6825      	ldr	r5, [r4, #0]
 800a662:	6961      	ldr	r1, [r4, #20]
 800a664:	1d18      	adds	r0, r3, #4
 800a666:	6010      	str	r0, [r2, #0]
 800a668:	0628      	lsls	r0, r5, #24
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	d501      	bpl.n	800a672 <_printf_i+0x196>
 800a66e:	6019      	str	r1, [r3, #0]
 800a670:	e002      	b.n	800a678 <_printf_i+0x19c>
 800a672:	066a      	lsls	r2, r5, #25
 800a674:	d5fb      	bpl.n	800a66e <_printf_i+0x192>
 800a676:	8019      	strh	r1, [r3, #0]
 800a678:	2300      	movs	r3, #0
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	4665      	mov	r5, ip
 800a67e:	e7b9      	b.n	800a5f4 <_printf_i+0x118>
 800a680:	6813      	ldr	r3, [r2, #0]
 800a682:	1d19      	adds	r1, r3, #4
 800a684:	6011      	str	r1, [r2, #0]
 800a686:	681d      	ldr	r5, [r3, #0]
 800a688:	6862      	ldr	r2, [r4, #4]
 800a68a:	2100      	movs	r1, #0
 800a68c:	4628      	mov	r0, r5
 800a68e:	f7f5 fda7 	bl	80001e0 <memchr>
 800a692:	b108      	cbz	r0, 800a698 <_printf_i+0x1bc>
 800a694:	1b40      	subs	r0, r0, r5
 800a696:	6060      	str	r0, [r4, #4]
 800a698:	6863      	ldr	r3, [r4, #4]
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	2300      	movs	r3, #0
 800a69e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6a2:	e7a7      	b.n	800a5f4 <_printf_i+0x118>
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	47c0      	blx	r8
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d0aa      	beq.n	800a608 <_printf_i+0x12c>
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	079b      	lsls	r3, r3, #30
 800a6b6:	d413      	bmi.n	800a6e0 <_printf_i+0x204>
 800a6b8:	68e0      	ldr	r0, [r4, #12]
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	4298      	cmp	r0, r3
 800a6be:	bfb8      	it	lt
 800a6c0:	4618      	movlt	r0, r3
 800a6c2:	e7a3      	b.n	800a60c <_printf_i+0x130>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	464a      	mov	r2, r9
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	47c0      	blx	r8
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d09a      	beq.n	800a608 <_printf_i+0x12c>
 800a6d2:	3501      	adds	r5, #1
 800a6d4:	68e3      	ldr	r3, [r4, #12]
 800a6d6:	9a03      	ldr	r2, [sp, #12]
 800a6d8:	1a9b      	subs	r3, r3, r2
 800a6da:	42ab      	cmp	r3, r5
 800a6dc:	dcf2      	bgt.n	800a6c4 <_printf_i+0x1e8>
 800a6de:	e7eb      	b.n	800a6b8 <_printf_i+0x1dc>
 800a6e0:	2500      	movs	r5, #0
 800a6e2:	f104 0919 	add.w	r9, r4, #25
 800a6e6:	e7f5      	b.n	800a6d4 <_printf_i+0x1f8>
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1ac      	bne.n	800a646 <_printf_i+0x16a>
 800a6ec:	7803      	ldrb	r3, [r0, #0]
 800a6ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6f6:	e76c      	b.n	800a5d2 <_printf_i+0xf6>
 800a6f8:	0800ab5b 	.word	0x0800ab5b
 800a6fc:	0800ab6c 	.word	0x0800ab6c

0800a700 <__ascii_wctomb>:
 800a700:	b149      	cbz	r1, 800a716 <__ascii_wctomb+0x16>
 800a702:	2aff      	cmp	r2, #255	; 0xff
 800a704:	bf85      	ittet	hi
 800a706:	238a      	movhi	r3, #138	; 0x8a
 800a708:	6003      	strhi	r3, [r0, #0]
 800a70a:	700a      	strbls	r2, [r1, #0]
 800a70c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a710:	bf98      	it	ls
 800a712:	2001      	movls	r0, #1
 800a714:	4770      	bx	lr
 800a716:	4608      	mov	r0, r1
 800a718:	4770      	bx	lr

0800a71a <memcpy>:
 800a71a:	b510      	push	{r4, lr}
 800a71c:	1e43      	subs	r3, r0, #1
 800a71e:	440a      	add	r2, r1
 800a720:	4291      	cmp	r1, r2
 800a722:	d100      	bne.n	800a726 <memcpy+0xc>
 800a724:	bd10      	pop	{r4, pc}
 800a726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a72a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a72e:	e7f7      	b.n	800a720 <memcpy+0x6>

0800a730 <memmove>:
 800a730:	4288      	cmp	r0, r1
 800a732:	b510      	push	{r4, lr}
 800a734:	eb01 0302 	add.w	r3, r1, r2
 800a738:	d807      	bhi.n	800a74a <memmove+0x1a>
 800a73a:	1e42      	subs	r2, r0, #1
 800a73c:	4299      	cmp	r1, r3
 800a73e:	d00a      	beq.n	800a756 <memmove+0x26>
 800a740:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a744:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a748:	e7f8      	b.n	800a73c <memmove+0xc>
 800a74a:	4283      	cmp	r3, r0
 800a74c:	d9f5      	bls.n	800a73a <memmove+0xa>
 800a74e:	1881      	adds	r1, r0, r2
 800a750:	1ad2      	subs	r2, r2, r3
 800a752:	42d3      	cmn	r3, r2
 800a754:	d100      	bne.n	800a758 <memmove+0x28>
 800a756:	bd10      	pop	{r4, pc}
 800a758:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a75c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a760:	e7f7      	b.n	800a752 <memmove+0x22>
	...

0800a764 <_free_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4605      	mov	r5, r0
 800a768:	2900      	cmp	r1, #0
 800a76a:	d045      	beq.n	800a7f8 <_free_r+0x94>
 800a76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a770:	1f0c      	subs	r4, r1, #4
 800a772:	2b00      	cmp	r3, #0
 800a774:	bfb8      	it	lt
 800a776:	18e4      	addlt	r4, r4, r3
 800a778:	f000 f8d2 	bl	800a920 <__malloc_lock>
 800a77c:	4a1f      	ldr	r2, [pc, #124]	; (800a7fc <_free_r+0x98>)
 800a77e:	6813      	ldr	r3, [r2, #0]
 800a780:	4610      	mov	r0, r2
 800a782:	b933      	cbnz	r3, 800a792 <_free_r+0x2e>
 800a784:	6063      	str	r3, [r4, #4]
 800a786:	6014      	str	r4, [r2, #0]
 800a788:	4628      	mov	r0, r5
 800a78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a78e:	f000 b8c8 	b.w	800a922 <__malloc_unlock>
 800a792:	42a3      	cmp	r3, r4
 800a794:	d90c      	bls.n	800a7b0 <_free_r+0x4c>
 800a796:	6821      	ldr	r1, [r4, #0]
 800a798:	1862      	adds	r2, r4, r1
 800a79a:	4293      	cmp	r3, r2
 800a79c:	bf04      	itt	eq
 800a79e:	681a      	ldreq	r2, [r3, #0]
 800a7a0:	685b      	ldreq	r3, [r3, #4]
 800a7a2:	6063      	str	r3, [r4, #4]
 800a7a4:	bf04      	itt	eq
 800a7a6:	1852      	addeq	r2, r2, r1
 800a7a8:	6022      	streq	r2, [r4, #0]
 800a7aa:	6004      	str	r4, [r0, #0]
 800a7ac:	e7ec      	b.n	800a788 <_free_r+0x24>
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	b10a      	cbz	r2, 800a7b8 <_free_r+0x54>
 800a7b4:	42a2      	cmp	r2, r4
 800a7b6:	d9fa      	bls.n	800a7ae <_free_r+0x4a>
 800a7b8:	6819      	ldr	r1, [r3, #0]
 800a7ba:	1858      	adds	r0, r3, r1
 800a7bc:	42a0      	cmp	r0, r4
 800a7be:	d10b      	bne.n	800a7d8 <_free_r+0x74>
 800a7c0:	6820      	ldr	r0, [r4, #0]
 800a7c2:	4401      	add	r1, r0
 800a7c4:	1858      	adds	r0, r3, r1
 800a7c6:	4282      	cmp	r2, r0
 800a7c8:	6019      	str	r1, [r3, #0]
 800a7ca:	d1dd      	bne.n	800a788 <_free_r+0x24>
 800a7cc:	6810      	ldr	r0, [r2, #0]
 800a7ce:	6852      	ldr	r2, [r2, #4]
 800a7d0:	605a      	str	r2, [r3, #4]
 800a7d2:	4401      	add	r1, r0
 800a7d4:	6019      	str	r1, [r3, #0]
 800a7d6:	e7d7      	b.n	800a788 <_free_r+0x24>
 800a7d8:	d902      	bls.n	800a7e0 <_free_r+0x7c>
 800a7da:	230c      	movs	r3, #12
 800a7dc:	602b      	str	r3, [r5, #0]
 800a7de:	e7d3      	b.n	800a788 <_free_r+0x24>
 800a7e0:	6820      	ldr	r0, [r4, #0]
 800a7e2:	1821      	adds	r1, r4, r0
 800a7e4:	428a      	cmp	r2, r1
 800a7e6:	bf04      	itt	eq
 800a7e8:	6811      	ldreq	r1, [r2, #0]
 800a7ea:	6852      	ldreq	r2, [r2, #4]
 800a7ec:	6062      	str	r2, [r4, #4]
 800a7ee:	bf04      	itt	eq
 800a7f0:	1809      	addeq	r1, r1, r0
 800a7f2:	6021      	streq	r1, [r4, #0]
 800a7f4:	605c      	str	r4, [r3, #4]
 800a7f6:	e7c7      	b.n	800a788 <_free_r+0x24>
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20000278 	.word	0x20000278

0800a800 <_malloc_r>:
 800a800:	b570      	push	{r4, r5, r6, lr}
 800a802:	1ccd      	adds	r5, r1, #3
 800a804:	f025 0503 	bic.w	r5, r5, #3
 800a808:	3508      	adds	r5, #8
 800a80a:	2d0c      	cmp	r5, #12
 800a80c:	bf38      	it	cc
 800a80e:	250c      	movcc	r5, #12
 800a810:	2d00      	cmp	r5, #0
 800a812:	4606      	mov	r6, r0
 800a814:	db01      	blt.n	800a81a <_malloc_r+0x1a>
 800a816:	42a9      	cmp	r1, r5
 800a818:	d903      	bls.n	800a822 <_malloc_r+0x22>
 800a81a:	230c      	movs	r3, #12
 800a81c:	6033      	str	r3, [r6, #0]
 800a81e:	2000      	movs	r0, #0
 800a820:	bd70      	pop	{r4, r5, r6, pc}
 800a822:	f000 f87d 	bl	800a920 <__malloc_lock>
 800a826:	4a21      	ldr	r2, [pc, #132]	; (800a8ac <_malloc_r+0xac>)
 800a828:	6814      	ldr	r4, [r2, #0]
 800a82a:	4621      	mov	r1, r4
 800a82c:	b991      	cbnz	r1, 800a854 <_malloc_r+0x54>
 800a82e:	4c20      	ldr	r4, [pc, #128]	; (800a8b0 <_malloc_r+0xb0>)
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	b91b      	cbnz	r3, 800a83c <_malloc_r+0x3c>
 800a834:	4630      	mov	r0, r6
 800a836:	f000 f863 	bl	800a900 <_sbrk_r>
 800a83a:	6020      	str	r0, [r4, #0]
 800a83c:	4629      	mov	r1, r5
 800a83e:	4630      	mov	r0, r6
 800a840:	f000 f85e 	bl	800a900 <_sbrk_r>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d124      	bne.n	800a892 <_malloc_r+0x92>
 800a848:	230c      	movs	r3, #12
 800a84a:	6033      	str	r3, [r6, #0]
 800a84c:	4630      	mov	r0, r6
 800a84e:	f000 f868 	bl	800a922 <__malloc_unlock>
 800a852:	e7e4      	b.n	800a81e <_malloc_r+0x1e>
 800a854:	680b      	ldr	r3, [r1, #0]
 800a856:	1b5b      	subs	r3, r3, r5
 800a858:	d418      	bmi.n	800a88c <_malloc_r+0x8c>
 800a85a:	2b0b      	cmp	r3, #11
 800a85c:	d90f      	bls.n	800a87e <_malloc_r+0x7e>
 800a85e:	600b      	str	r3, [r1, #0]
 800a860:	50cd      	str	r5, [r1, r3]
 800a862:	18cc      	adds	r4, r1, r3
 800a864:	4630      	mov	r0, r6
 800a866:	f000 f85c 	bl	800a922 <__malloc_unlock>
 800a86a:	f104 000b 	add.w	r0, r4, #11
 800a86e:	1d23      	adds	r3, r4, #4
 800a870:	f020 0007 	bic.w	r0, r0, #7
 800a874:	1ac3      	subs	r3, r0, r3
 800a876:	d0d3      	beq.n	800a820 <_malloc_r+0x20>
 800a878:	425a      	negs	r2, r3
 800a87a:	50e2      	str	r2, [r4, r3]
 800a87c:	e7d0      	b.n	800a820 <_malloc_r+0x20>
 800a87e:	428c      	cmp	r4, r1
 800a880:	684b      	ldr	r3, [r1, #4]
 800a882:	bf16      	itet	ne
 800a884:	6063      	strne	r3, [r4, #4]
 800a886:	6013      	streq	r3, [r2, #0]
 800a888:	460c      	movne	r4, r1
 800a88a:	e7eb      	b.n	800a864 <_malloc_r+0x64>
 800a88c:	460c      	mov	r4, r1
 800a88e:	6849      	ldr	r1, [r1, #4]
 800a890:	e7cc      	b.n	800a82c <_malloc_r+0x2c>
 800a892:	1cc4      	adds	r4, r0, #3
 800a894:	f024 0403 	bic.w	r4, r4, #3
 800a898:	42a0      	cmp	r0, r4
 800a89a:	d005      	beq.n	800a8a8 <_malloc_r+0xa8>
 800a89c:	1a21      	subs	r1, r4, r0
 800a89e:	4630      	mov	r0, r6
 800a8a0:	f000 f82e 	bl	800a900 <_sbrk_r>
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d0cf      	beq.n	800a848 <_malloc_r+0x48>
 800a8a8:	6025      	str	r5, [r4, #0]
 800a8aa:	e7db      	b.n	800a864 <_malloc_r+0x64>
 800a8ac:	20000278 	.word	0x20000278
 800a8b0:	2000027c 	.word	0x2000027c

0800a8b4 <_realloc_r>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	4614      	mov	r4, r2
 800a8ba:	460e      	mov	r6, r1
 800a8bc:	b921      	cbnz	r1, 800a8c8 <_realloc_r+0x14>
 800a8be:	4611      	mov	r1, r2
 800a8c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8c4:	f7ff bf9c 	b.w	800a800 <_malloc_r>
 800a8c8:	b922      	cbnz	r2, 800a8d4 <_realloc_r+0x20>
 800a8ca:	f7ff ff4b 	bl	800a764 <_free_r>
 800a8ce:	4625      	mov	r5, r4
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d4:	f000 f826 	bl	800a924 <_malloc_usable_size_r>
 800a8d8:	42a0      	cmp	r0, r4
 800a8da:	d20f      	bcs.n	800a8fc <_realloc_r+0x48>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4638      	mov	r0, r7
 800a8e0:	f7ff ff8e 	bl	800a800 <_malloc_r>
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d0f2      	beq.n	800a8d0 <_realloc_r+0x1c>
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	f7ff ff14 	bl	800a71a <memcpy>
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f7ff ff35 	bl	800a764 <_free_r>
 800a8fa:	e7e9      	b.n	800a8d0 <_realloc_r+0x1c>
 800a8fc:	4635      	mov	r5, r6
 800a8fe:	e7e7      	b.n	800a8d0 <_realloc_r+0x1c>

0800a900 <_sbrk_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4c06      	ldr	r4, [pc, #24]	; (800a91c <_sbrk_r+0x1c>)
 800a904:	2300      	movs	r3, #0
 800a906:	4605      	mov	r5, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	f7ff fa2a 	bl	8009d64 <_sbrk>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_sbrk_r+0x1a>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	b103      	cbz	r3, 800a91a <_sbrk_r+0x1a>
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	20001628 	.word	0x20001628

0800a920 <__malloc_lock>:
 800a920:	4770      	bx	lr

0800a922 <__malloc_unlock>:
 800a922:	4770      	bx	lr

0800a924 <_malloc_usable_size_r>:
 800a924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a928:	1f18      	subs	r0, r3, #4
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	bfbc      	itt	lt
 800a92e:	580b      	ldrlt	r3, [r1, r0]
 800a930:	18c0      	addlt	r0, r0, r3
 800a932:	4770      	bx	lr

0800a934 <_init>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	bf00      	nop
 800a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a93a:	bc08      	pop	{r3}
 800a93c:	469e      	mov	lr, r3
 800a93e:	4770      	bx	lr

0800a940 <_fini>:
 800a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a942:	bf00      	nop
 800a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a946:	bc08      	pop	{r3}
 800a948:	469e      	mov	lr, r3
 800a94a:	4770      	bx	lr
