
Diplomska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000addc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800af6c  0800af6c  0001af6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2c4  0800b2c4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2c4  0800b2c4  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2c4  0800b2c4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c4  0800b2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b2cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  200001f8  0800b4c4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  0800b4c4  00021638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aeb5  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039af  00000000  00000000  0003b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  0003ea90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001568  00000000  00000000  000401d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf67  00000000  00000000  00041738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014a28  00000000  00000000  0005d69f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c44d  00000000  00000000  000720c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e514  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e4  00000000  00000000  0010e590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af54 	.word	0x0800af54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800af54 	.word	0x0800af54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f001 f830 	bl	80012f6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f009 ff90 	bl	800a1bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f009 fe08 	bl	8009eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <HAL_IncTick+0x20>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_IncTick+0x24>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4413      	add	r3, r2
 80002bc:	4a04      	ldr	r2, [pc, #16]	; (80002d0 <HAL_IncTick+0x24>)
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000288 	.word	0x20000288

080002d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <HAL_GetTick+0x14>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000288 	.word	0x20000288

080002ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f4:	f7ff ffee 	bl	80002d4 <HAL_GetTick>
 80002f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000304:	d005      	beq.n	8000312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <HAL_Delay+0x40>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4413      	add	r3, r2
 8000310:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000312:	bf00      	nop
 8000314:	f7ff ffde 	bl	80002d4 <HAL_GetTick>
 8000318:	4602      	mov	r2, r0
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	429a      	cmp	r2, r3
 8000322:	d8f7      	bhi.n	8000314 <HAL_Delay+0x28>
  {
  }
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000004 	.word	0x20000004

08000330 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b09a      	sub	sp, #104	; 0x68
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000374:	2300      	movs	r3, #0
 8000376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800037a:	2300      	movs	r3, #0
 800037c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d101      	bne.n	800038c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000388:	2301      	movs	r3, #1
 800038a:	e172      	b.n	8000672 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000396:	f003 0310 	and.w	r3, r3, #16
 800039a:	2b00      	cmp	r3, #0
 800039c:	d176      	bne.n	800048c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d152      	bne.n	800044c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2200      	movs	r2, #0
 80003b6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2200      	movs	r2, #0
 80003bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f009 fd9d 	bl	8009f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d13b      	bne.n	800044c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 fe81 	bl	80010dc <ADC_Disable>
 80003da:	4603      	mov	r3, r0
 80003dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d12f      	bne.n	800044c <HAL_ADC_Init+0xe0>
 80003ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d12b      	bne.n	800044c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003fc:	f023 0302 	bic.w	r3, r3, #2
 8000400:	f043 0202 	orr.w	r2, r3, #2
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000416:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	689a      	ldr	r2, [r3, #8]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000426:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000428:	4b94      	ldr	r3, [pc, #592]	; (800067c <HAL_ADC_Init+0x310>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a94      	ldr	r2, [pc, #592]	; (8000680 <HAL_ADC_Init+0x314>)
 800042e:	fba2 2303 	umull	r2, r3, r2, r3
 8000432:	0c9a      	lsrs	r2, r3, #18
 8000434:	4613      	mov	r3, r2
 8000436:	009b      	lsls	r3, r3, #2
 8000438:	4413      	add	r3, r2
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800043e:	e002      	b.n	8000446 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	3b01      	subs	r3, #1
 8000444:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d1f9      	bne.n	8000440 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	2b00      	cmp	r3, #0
 8000458:	d007      	beq.n	800046a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000468:	d110      	bne.n	800048c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800046e:	f023 0312 	bic.w	r3, r3, #18
 8000472:	f043 0210 	orr.w	r2, r3, #16
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800047e:	f043 0201 	orr.w	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000486:	2301      	movs	r3, #1
 8000488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	2b00      	cmp	r3, #0
 8000496:	f040 80df 	bne.w	8000658 <HAL_ADC_Init+0x2ec>
 800049a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800049e:	2b00      	cmp	r3, #0
 80004a0:	f040 80da 	bne.w	8000658 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	f040 80d2 	bne.w	8000658 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80004bc:	f043 0202 	orr.w	r2, r3, #2
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80004c4:	4b6f      	ldr	r3, [pc, #444]	; (8000684 <HAL_ADC_Init+0x318>)
 80004c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004d0:	d102      	bne.n	80004d8 <HAL_ADC_Init+0x16c>
 80004d2:	4b6d      	ldr	r3, [pc, #436]	; (8000688 <HAL_ADC_Init+0x31c>)
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	e002      	b.n	80004de <HAL_ADC_Init+0x172>
 80004d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80004dc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	f003 0303 	and.w	r3, r3, #3
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d108      	bne.n	80004fe <HAL_ADC_Init+0x192>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d101      	bne.n	80004fe <HAL_ADC_Init+0x192>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <HAL_ADC_Init+0x194>
 80004fe:	2300      	movs	r3, #0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d11c      	bne.n	800053e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000504:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000506:	2b00      	cmp	r3, #0
 8000508:	d010      	beq.n	800052c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f003 0303 	and.w	r3, r3, #3
 8000512:	2b01      	cmp	r3, #1
 8000514:	d107      	bne.n	8000526 <HAL_ADC_Init+0x1ba>
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	2b01      	cmp	r3, #1
 8000520:	d101      	bne.n	8000526 <HAL_ADC_Init+0x1ba>
 8000522:	2301      	movs	r3, #1
 8000524:	e000      	b.n	8000528 <HAL_ADC_Init+0x1bc>
 8000526:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000528:	2b00      	cmp	r3, #0
 800052a:	d108      	bne.n	800053e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800052c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	431a      	orrs	r2, r3
 800053a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800053c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	7e5b      	ldrb	r3, [r3, #25]
 8000542:	035b      	lsls	r3, r3, #13
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000548:	2a01      	cmp	r2, #1
 800054a:	d002      	beq.n	8000552 <HAL_ADC_Init+0x1e6>
 800054c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000550:	e000      	b.n	8000554 <HAL_ADC_Init+0x1e8>
 8000552:	2200      	movs	r2, #0
 8000554:	431a      	orrs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68db      	ldr	r3, [r3, #12]
 800055a:	431a      	orrs	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4313      	orrs	r3, r2
 8000562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000564:	4313      	orrs	r3, r2
 8000566:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d11b      	bne.n	80005aa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7e5b      	ldrb	r3, [r3, #25]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d109      	bne.n	800058e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057e:	3b01      	subs	r3, #1
 8000580:	045a      	lsls	r2, r3, #17
 8000582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000584:	4313      	orrs	r3, r2
 8000586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800058a:	663b      	str	r3, [r7, #96]	; 0x60
 800058c:	e00d      	b.n	80005aa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000596:	f043 0220 	orr.w	r2, r3, #32
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	f043 0201 	orr.w	r2, r3, #1
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d007      	beq.n	80005c2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ba:	4313      	orrs	r3, r2
 80005bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80005be:	4313      	orrs	r3, r2
 80005c0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	f003 030c 	and.w	r3, r3, #12
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d114      	bne.n	80005fa <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	6812      	ldr	r2, [r2, #0]
 80005da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005de:	f023 0302 	bic.w	r3, r3, #2
 80005e2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7e1b      	ldrb	r3, [r3, #24]
 80005e8:	039a      	lsls	r2, r3, #14
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4313      	orrs	r3, r2
 80005f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80005f6:	4313      	orrs	r3, r2
 80005f8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68da      	ldr	r2, [r3, #12]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <HAL_ADC_Init+0x320>)
 8000602:	4013      	ands	r3, r2
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	6812      	ldr	r2, [r2, #0]
 8000608:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800060a:	430b      	orrs	r3, r1
 800060c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	691b      	ldr	r3, [r3, #16]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d10c      	bne.n	8000630 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	f023 010f 	bic.w	r1, r3, #15
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	1e5a      	subs	r2, r3, #1
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	430a      	orrs	r2, r1
 800062c:	631a      	str	r2, [r3, #48]	; 0x30
 800062e:	e007      	b.n	8000640 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f022 020f 	bic.w	r2, r2, #15
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	f023 0303 	bic.w	r3, r3, #3
 800064e:	f043 0201 	orr.w	r2, r3, #1
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	641a      	str	r2, [r3, #64]	; 0x40
 8000656:	e00a      	b.n	800066e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f023 0312 	bic.w	r3, r3, #18
 8000660:	f043 0210 	orr.w	r2, r3, #16
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000668:	2301      	movs	r3, #1
 800066a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800066e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000672:	4618      	mov	r0, r3
 8000674:	3768      	adds	r7, #104	; 0x68
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000010 	.word	0x20000010
 8000680:	431bde83 	.word	0x431bde83
 8000684:	50000300 	.word	0x50000300
 8000688:	50000100 	.word	0x50000100
 800068c:	fff0c007 	.word	0xfff0c007

08000690 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800069c:	2300      	movs	r3, #0
 800069e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f040 80b9 	bne.w	8000822 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Start_DMA+0x2e>
 80006ba:	2302      	movs	r3, #2
 80006bc:	e0b4      	b.n	8000828 <HAL_ADC_Start_DMA+0x198>
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2201      	movs	r2, #1
 80006c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80006c6:	4b5a      	ldr	r3, [pc, #360]	; (8000830 <HAL_ADC_Start_DMA+0x1a0>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	f003 031f 	and.w	r3, r3, #31
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f040 80a0 	bne.w	8000814 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f000 fca3 	bl	8001020 <ADC_Enable>
 80006da:	4603      	mov	r3, r0
 80006dc:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80006de:	7dfb      	ldrb	r3, [r7, #23]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f040 8092 	bne.w	800080a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006fa:	4b4d      	ldr	r3, [pc, #308]	; (8000830 <HAL_ADC_Start_DMA+0x1a0>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f003 031f 	and.w	r3, r3, #31
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <HAL_ADC_Start_DMA+0x80>
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800070e:	d115      	bne.n	800073c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d027      	beq.n	800077a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000732:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800073a:	e01e      	b.n	800077a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000750:	d004      	beq.n	800075c <HAL_ADC_Start_DMA+0xcc>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a37      	ldr	r2, [pc, #220]	; (8000834 <HAL_ADC_Start_DMA+0x1a4>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d10e      	bne.n	800077a <HAL_ADC_Start_DMA+0xea>
 800075c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d007      	beq.n	800077a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000772:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000786:	d106      	bne.n	8000796 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078c:	f023 0206 	bic.w	r2, r3, #6
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	645a      	str	r2, [r3, #68]	; 0x44
 8000794:	e002      	b.n	800079c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2200      	movs	r2, #0
 800079a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a8:	4a23      	ldr	r2, [pc, #140]	; (8000838 <HAL_ADC_Start_DMA+0x1a8>)
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b0:	4a22      	ldr	r2, [pc, #136]	; (800083c <HAL_ADC_Start_DMA+0x1ac>)
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <HAL_ADC_Start_DMA+0x1b0>)
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	221c      	movs	r2, #28
 80007c2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f042 0210 	orr.w	r2, r2, #16
 80007d2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f042 0201 	orr.w	r2, r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3340      	adds	r3, #64	; 0x40
 80007ee:	4619      	mov	r1, r3
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f000 fdfb 	bl	80013ee <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	689a      	ldr	r2, [r3, #8]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f042 0204 	orr.w	r2, r2, #4
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	e00d      	b.n	8000826 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2200      	movs	r2, #0
 800080e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000812:	e008      	b.n	8000826 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2200      	movs	r2, #0
 800081c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000820:	e001      	b.n	8000826 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000822:	2302      	movs	r3, #2
 8000824:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000826:	7dfb      	ldrb	r3, [r7, #23]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	50000300 	.word	0x50000300
 8000834:	50000100 	.word	0x50000100
 8000838:	08000f55 	.word	0x08000f55
 800083c:	08000fcf 	.word	0x08000fcf
 8000840:	08000feb 	.word	0x08000feb

08000844 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000844:	b480      	push	{r7}
 8000846:	b09b      	sub	sp, #108	; 0x6c
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800085e:	2b01      	cmp	r3, #1
 8000860:	d101      	bne.n	8000866 <HAL_ADC_ConfigChannel+0x22>
 8000862:	2302      	movs	r3, #2
 8000864:	e2a5      	b.n	8000db2 <HAL_ADC_ConfigChannel+0x56e>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	2b00      	cmp	r3, #0
 800087a:	f040 8289 	bne.w	8000d90 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d81c      	bhi.n	80008c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	461a      	mov	r2, r3
 800089a:	231f      	movs	r3, #31
 800089c:	4093      	lsls	r3, r2
 800089e:	43db      	mvns	r3, r3
 80008a0:	4019      	ands	r1, r3
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	fa00 f203 	lsl.w	r2, r0, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	430a      	orrs	r2, r1
 80008bc:	631a      	str	r2, [r3, #48]	; 0x30
 80008be:	e063      	b.n	8000988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b09      	cmp	r3, #9
 80008c6:	d81e      	bhi.n	8000906 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	4613      	mov	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	4413      	add	r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	3b1e      	subs	r3, #30
 80008dc:	221f      	movs	r2, #31
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	4019      	ands	r1, r3
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	3b1e      	subs	r3, #30
 80008f8:	fa00 f203 	lsl.w	r2, r0, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	430a      	orrs	r2, r1
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
 8000904:	e040      	b.n	8000988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b0e      	cmp	r3, #14
 800090c:	d81e      	bhi.n	800094c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	4613      	mov	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	4413      	add	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	3b3c      	subs	r3, #60	; 0x3c
 8000922:	221f      	movs	r2, #31
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	4019      	ands	r1, r3
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	3b3c      	subs	r3, #60	; 0x3c
 800093e:	fa00 f203 	lsl.w	r2, r0, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	430a      	orrs	r2, r1
 8000948:	639a      	str	r2, [r3, #56]	; 0x38
 800094a:	e01d      	b.n	8000988 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685a      	ldr	r2, [r3, #4]
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	3b5a      	subs	r3, #90	; 0x5a
 8000960:	221f      	movs	r2, #31
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	4019      	ands	r1, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	3b5a      	subs	r3, #90	; 0x5a
 800097c:	fa00 f203 	lsl.w	r2, r0, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	430a      	orrs	r2, r1
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 030c 	and.w	r3, r3, #12
 8000992:	2b00      	cmp	r3, #0
 8000994:	f040 80e5 	bne.w	8000b62 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b09      	cmp	r3, #9
 800099e:	d91c      	bls.n	80009da <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6999      	ldr	r1, [r3, #24]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4613      	mov	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4413      	add	r3, r2
 80009b0:	3b1e      	subs	r3, #30
 80009b2:	2207      	movs	r2, #7
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	4019      	ands	r1, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	6898      	ldr	r0, [r3, #8]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	3b1e      	subs	r3, #30
 80009cc:	fa00 f203 	lsl.w	r2, r0, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	e019      	b.n	8000a0e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6959      	ldr	r1, [r3, #20]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	2207      	movs	r2, #7
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4019      	ands	r1, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	6898      	ldr	r0, [r3, #8]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	fa00 f203 	lsl.w	r2, r0, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d84f      	bhi.n	8000ad0 <HAL_ADC_ConfigChannel+0x28c>
 8000a30:	a201      	add	r2, pc, #4	; (adr r2, 8000a38 <HAL_ADC_ConfigChannel+0x1f4>)
 8000a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a36:	bf00      	nop
 8000a38:	08000a49 	.word	0x08000a49
 8000a3c:	08000a6b 	.word	0x08000a6b
 8000a40:	08000a8d 	.word	0x08000a8d
 8000a44:	08000aaf 	.word	0x08000aaf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a4e:	4b9e      	ldr	r3, [pc, #632]	; (8000cc8 <HAL_ADC_ConfigChannel+0x484>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	0691      	lsls	r1, r2, #26
 8000a58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a66:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000a68:	e07e      	b.n	8000b68 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000a70:	4b95      	ldr	r3, [pc, #596]	; (8000cc8 <HAL_ADC_ConfigChannel+0x484>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	6812      	ldr	r2, [r2, #0]
 8000a78:	0691      	lsls	r1, r2, #26
 8000a7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a88:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000a8a:	e06d      	b.n	8000b68 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000a92:	4b8d      	ldr	r3, [pc, #564]	; (8000cc8 <HAL_ADC_ConfigChannel+0x484>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	683a      	ldr	r2, [r7, #0]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	0691      	lsls	r1, r2, #26
 8000a9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000aaa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000aac:	e05c      	b.n	8000b68 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000ab4:	4b84      	ldr	r3, [pc, #528]	; (8000cc8 <HAL_ADC_ConfigChannel+0x484>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	0691      	lsls	r1, r2, #26
 8000abe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000acc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ace:	e04b      	b.n	8000b68 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	069b      	lsls	r3, r3, #26
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d107      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000af2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000afa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	069b      	lsls	r3, r3, #26
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d107      	bne.n	8000b18 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b16:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000b1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	069b      	lsls	r3, r3, #26
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d107      	bne.n	8000b3c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b3a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	069b      	lsls	r3, r3, #26
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d10a      	bne.n	8000b66 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000b5e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000b60:	e001      	b.n	8000b66 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000b62:	bf00      	nop
 8000b64:	e000      	b.n	8000b68 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000b66:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d108      	bne.n	8000b88 <HAL_ADC_ConfigChannel+0x344>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <HAL_ADC_ConfigChannel+0x344>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <HAL_ADC_ConfigChannel+0x346>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 810b 	bne.w	8000da6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d00f      	beq.n	8000bb8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000bb6:	e049      	b.n	8000c4c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b09      	cmp	r3, #9
 8000bd8:	d91c      	bls.n	8000c14 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6999      	ldr	r1, [r3, #24]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	3b1b      	subs	r3, #27
 8000bec:	2207      	movs	r2, #7
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4019      	ands	r1, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6898      	ldr	r0, [r3, #8]
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	3b1b      	subs	r3, #27
 8000c06:	fa00 f203 	lsl.w	r2, r0, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	e01b      	b.n	8000c4c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6959      	ldr	r1, [r3, #20]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	2207      	movs	r2, #7
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4019      	ands	r1, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6898      	ldr	r0, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	fa00 f203 	lsl.w	r2, r0, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <HAL_ADC_ConfigChannel+0x488>)
 8000c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b10      	cmp	r3, #16
 8000c56:	d105      	bne.n	8000c64 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d015      	beq.n	8000c90 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c68:	2b11      	cmp	r3, #17
 8000c6a:	d105      	bne.n	8000c78 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00b      	beq.n	8000c90 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c7c:	2b12      	cmp	r3, #18
 8000c7e:	f040 8092 	bne.w	8000da6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f040 808b 	bne.w	8000da6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c98:	d102      	bne.n	8000ca0 <HAL_ADC_ConfigChannel+0x45c>
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_ADC_ConfigChannel+0x48c>)
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	e002      	b.n	8000ca6 <HAL_ADC_ConfigChannel+0x462>
 8000ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ca4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d10f      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x490>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x490>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e007      	b.n	8000cd6 <HAL_ADC_ConfigChannel+0x492>
 8000cc6:	bf00      	nop
 8000cc8:	83fff000 	.word	0x83fff000
 8000ccc:	50000300 	.word	0x50000300
 8000cd0:	50000100 	.word	0x50000100
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d150      	bne.n	8000d7c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cda:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d010      	beq.n	8000d02 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d107      	bne.n	8000cfc <HAL_ADC_ConfigChannel+0x4b8>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d101      	bne.n	8000cfc <HAL_ADC_ConfigChannel+0x4b8>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <HAL_ADC_ConfigChannel+0x4ba>
 8000cfc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d13c      	bne.n	8000d7c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b10      	cmp	r3, #16
 8000d08:	d11d      	bne.n	8000d46 <HAL_ADC_ConfigChannel+0x502>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d12:	d118      	bne.n	8000d46 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d1e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <HAL_ADC_ConfigChannel+0x57c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <HAL_ADC_ConfigChannel+0x580>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	0c9a      	lsrs	r2, r3, #18
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d36:	e002      	b.n	8000d3e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1f9      	bne.n	8000d38 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d44:	e02e      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b11      	cmp	r3, #17
 8000d4c:	d10b      	bne.n	8000d66 <HAL_ADC_ConfigChannel+0x522>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d56:	d106      	bne.n	8000d66 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d62:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d64:	e01e      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b12      	cmp	r3, #18
 8000d6c:	d11a      	bne.n	8000da4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d78:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000d7a:	e013      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f043 0220 	orr.w	r2, r3, #32
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000d8e:	e00a      	b.n	8000da6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f043 0220 	orr.w	r2, r3, #32
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000da2:	e000      	b.n	8000da6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000da4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000dae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	376c      	adds	r7, #108	; 0x6c
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	431bde83 	.word	0x431bde83

08000dc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b099      	sub	sp, #100	; 0x64
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de0:	d102      	bne.n	8000de8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8000de2:	4b5a      	ldr	r3, [pc, #360]	; (8000f4c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e002      	b.n	8000dee <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000de8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e0a2      	b.n	8000f3e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d101      	bne.n	8000e06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e09b      	b.n	8000f3e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d17f      	bne.n	8000f1c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d179      	bne.n	8000f1c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e28:	4b49      	ldr	r3, [pc, #292]	; (8000f50 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8000e2a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d040      	beq.n	8000eb6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6859      	ldr	r1, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e46:	035b      	lsls	r3, r3, #13
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e4e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d108      	bne.n	8000e70 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d101      	bne.n	8000e70 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000e70:	2300      	movs	r3, #0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d15c      	bne.n	8000f30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d107      	bne.n	8000e92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d101      	bne.n	8000e92 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8000e92:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d14b      	bne.n	8000f30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	6811      	ldr	r1, [r2, #0]
 8000ea8:	683a      	ldr	r2, [r7, #0]
 8000eaa:	6892      	ldr	r2, [r2, #8]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eb2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000eb4:	e03c      	b.n	8000f30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ec0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d108      	bne.n	8000ee2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d101      	bne.n	8000ee2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d123      	bne.n	8000f30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d107      	bne.n	8000f04 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8000f04:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d112      	bne.n	8000f30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8000f12:	f023 030f 	bic.w	r3, r3, #15
 8000f16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f18:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f1a:	e009      	b.n	8000f30 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f043 0220 	orr.w	r2, r3, #32
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000f2e:	e000      	b.n	8000f32 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000f30:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3764      	adds	r7, #100	; 0x64
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	50000100 	.word	0x50000100
 8000f50:	50000300 	.word	0x50000300

08000f54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d126      	bne.n	8000fbc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d115      	bne.n	8000fb4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d111      	bne.n	8000fb4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f043 0201 	orr.w	r2, r3, #1
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff f9bb 	bl	8000330 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000fba:	e004      	b.n	8000fc6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	4798      	blx	r3
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff f9b1 	bl	8000344 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	f043 0204 	orr.w	r2, r3, #4
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f7ff f9a1 	bl	8000358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <ADC_Enable+0x2c>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <ADC_Enable+0x2c>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <ADC_Enable+0x2e>
 800104c:	2300      	movs	r3, #0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d13c      	bne.n	80010cc <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <ADC_Enable+0xb8>)
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00d      	beq.n	800107c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f043 0210 	orr.w	r2, r3, #16
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e028      	b.n	80010ce <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800108c:	f7ff f922 	bl	80002d4 <HAL_GetTick>
 8001090:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001092:	e014      	b.n	80010be <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001094:	f7ff f91e 	bl	80002d4 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d90d      	bls.n	80010be <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f043 0210 	orr.w	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e007      	b.n	80010ce <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d1e3      	bne.n	8001094 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	8000003f 	.word	0x8000003f

080010dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d108      	bne.n	8001108 <ADC_Disable+0x2c>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <ADC_Disable+0x2c>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <ADC_Disable+0x2e>
 8001108:	2300      	movs	r3, #0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d040      	beq.n	8001190 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 030d 	and.w	r3, r3, #13
 8001118:	2b01      	cmp	r3, #1
 800111a:	d10f      	bne.n	800113c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0202 	orr.w	r2, r2, #2
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2203      	movs	r2, #3
 8001132:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001134:	f7ff f8ce 	bl	80002d4 <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800113a:	e022      	b.n	8001182 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f043 0210 	orr.w	r2, r3, #16
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f043 0201 	orr.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e01c      	b.n	8001192 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001158:	f7ff f8bc 	bl	80002d4 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d90d      	bls.n	8001182 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f043 0210 	orr.w	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f043 0201 	orr.w	r2, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e007      	b.n	8001192 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b01      	cmp	r3, #1
 800118e:	d0e3      	beq.n	8001158 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff4c 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131e:	f7ff ff61 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001322:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	6978      	ldr	r0, [r7, #20]
 800132a:	f7ff ffb1 	bl	8001290 <NVIC_EncodePriority>
 800132e:	4602      	mov	r2, r0
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff80 	bl	800123c <__NVIC_SetPriority>
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff54 	bl	8001200 <__NVIC_EnableIRQ>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e037      	b.n	80013e6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2202      	movs	r2, #2
 800137a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800138c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001390:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800139a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f97f 	bl	80016cc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}  
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_DMA_Start_IT+0x20>
 800140a:	2302      	movs	r3, #2
 800140c:	e04a      	b.n	80014a4 <HAL_DMA_Start_IT+0xb6>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800141c:	2b01      	cmp	r3, #1
 800141e:	d13a      	bne.n	8001496 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0201 	bic.w	r2, r2, #1
 800143c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f912 	bl	800166e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 020e 	orr.w	r2, r2, #14
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e00f      	b.n	8001484 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 020a 	orr.w	r2, r2, #10
 8001472:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0204 	bic.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e005      	b.n	80014a2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
} 
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d005      	beq.n	80014ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2204      	movs	r2, #4
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e027      	b.n	800151e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 020e 	bic.w	r2, r2, #14
 80014dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	4798      	blx	r3
    } 
  }
  return status;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	2204      	movs	r2, #4
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d024      	beq.n	800159a <HAL_DMA_IRQHandler+0x72>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d01f      	beq.n	800159a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d107      	bne.n	8001578 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0204 	bic.w	r2, r2, #4
 8001576:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001580:	2104      	movs	r1, #4
 8001582:	fa01 f202 	lsl.w	r2, r1, r2
 8001586:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	2b00      	cmp	r3, #0
 800158e:	d06a      	beq.n	8001666 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001598:	e065      	b.n	8001666 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2202      	movs	r2, #2
 80015a0:	409a      	lsls	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d02c      	beq.n	8001604 <HAL_DMA_IRQHandler+0xdc>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d027      	beq.n	8001604 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10b      	bne.n	80015da <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 020a 	bic.w	r2, r2, #10
 80015d0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	2102      	movs	r1, #2
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
 80015e8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d035      	beq.n	8001666 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001602:	e030      	b.n	8001666 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	2208      	movs	r2, #8
 800160a:	409a      	lsls	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d028      	beq.n	8001666 <HAL_DMA_IRQHandler+0x13e>
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d023      	beq.n	8001666 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 020e 	bic.w	r2, r2, #14
 800162c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f202 	lsl.w	r2, r1, r2
 800163c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
    }
  }
}  
 8001664:	e7ff      	b.n	8001666 <HAL_DMA_IRQHandler+0x13e>
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b10      	cmp	r3, #16
 800169a:	d108      	bne.n	80016ae <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ac:	e007      	b.n	80016be <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	60da      	str	r2, [r3, #12]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <DMA_CalcBaseAndBitshift+0x34>)
 80016dc:	4413      	add	r3, r2
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <DMA_CalcBaseAndBitshift+0x38>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	009a      	lsls	r2, r3, #2
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <DMA_CalcBaseAndBitshift+0x3c>)
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	bffdfff8 	.word	0xbffdfff8
 8001704:	cccccccd 	.word	0xcccccccd
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e14e      	b.n	80019ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8140 	beq.w	80019b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x38>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	6939      	ldr	r1, [r7, #16]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d00b      	beq.n	80017e0 <HAL_GPIO_Init+0xd4>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d4:	2b11      	cmp	r3, #17
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b12      	cmp	r3, #18
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 809a 	beq.w	80019b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001898:	4a50      	ldr	r2, [pc, #320]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018c2:	d013      	beq.n	80018ec <HAL_GPIO_Init+0x1e0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a46      	ldr	r2, [pc, #280]	; (80019e0 <HAL_GPIO_Init+0x2d4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d00d      	beq.n	80018e8 <HAL_GPIO_Init+0x1dc>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a45      	ldr	r2, [pc, #276]	; (80019e4 <HAL_GPIO_Init+0x2d8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d007      	beq.n	80018e4 <HAL_GPIO_Init+0x1d8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a44      	ldr	r2, [pc, #272]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_GPIO_Init+0x1d4>
 80018dc:	2303      	movs	r3, #3
 80018de:	e006      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e0:	2305      	movs	r3, #5
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018ec:	2300      	movs	r3, #0
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018fe:	4937      	ldr	r1, [pc, #220]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800190c:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001930:	4a2e      	ldr	r2, [pc, #184]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800195a:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001984:	4a19      	ldr	r2, [pc, #100]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f47f aea9 	bne.w	800171c <HAL_GPIO_Init+0x10>
  }
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000
 80019e0:	48000400 	.word	0x48000400
 80019e4:	48000800 	.word	0x48000800
 80019e8:	48000c00 	.word	0x48000c00
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f000 bef4 	b.w	8002852 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 816a 	beq.w	8001d4e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a7a:	4bb3      	ldr	r3, [pc, #716]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d00c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a86:	4bb0      	ldr	r3, [pc, #704]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d159      	bne.n	8001b46 <HAL_RCC_OscConfig+0xf6>
 8001a92:	4bad      	ldr	r3, [pc, #692]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d152      	bne.n	8001b46 <HAL_RCC_OscConfig+0xf6>
 8001aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ab4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x82>
 8001acc:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e015      	b.n	8001afe <HAL_RCC_OscConfig+0xae>
 8001ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001aee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001afa:	4b93      	ldr	r3, [pc, #588]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b0a:	fa92 f2a2 	rbit	r2, r2
 8001b0e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b12:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b16:	fab2 f282 	clz	r2, r2
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f042 0220 	orr.w	r2, r2, #32
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f002 021f 	and.w	r2, r2, #31
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 810c 	beq.w	8001d4c <HAL_RCC_OscConfig+0x2fc>
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 8106 	bne.w	8001d4c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f000 be86 	b.w	8002852 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x110>
 8001b52:	4b7d      	ldr	r3, [pc, #500]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a7c      	ldr	r2, [pc, #496]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e030      	b.n	8001bc2 <HAL_RCC_OscConfig+0x172>
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x134>
 8001b6a:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a76      	ldr	r2, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b74      	ldr	r3, [pc, #464]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a73      	ldr	r2, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e01e      	b.n	8001bc2 <HAL_RCC_OscConfig+0x172>
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x15a>
 8001b90:	4b6d      	ldr	r3, [pc, #436]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a6c      	ldr	r2, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x172>
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a66      	ldr	r2, [pc, #408]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b64      	ldr	r3, [pc, #400]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a63      	ldr	r2, [pc, #396]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc2:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f023 020f 	bic.w	r2, r3, #15
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	495d      	ldr	r1, [pc, #372]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d059      	beq.n	8001c94 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7fe fb78 	bl	80002d4 <HAL_GetTick>
 8001be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bea:	f7fe fb73 	bl	80002d4 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d902      	bls.n	8001c00 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f000 be29 	b.w	8002852 <HAL_RCC_OscConfig+0xe02>
 8001c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c04:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d102      	bne.n	8001c32 <HAL_RCC_OscConfig+0x1e2>
 8001c2c:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x20e>
 8001c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c3e:	fa93 f3a3 	rbit	r3, r3
 8001c42:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c4e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c62:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c6a:	fa92 f2a2 	rbit	r2, r2
 8001c6e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c72:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c76:	fab2 f282 	clz	r2, r2
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f002 021f 	and.w	r2, r2, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ab      	beq.n	8001bea <HAL_RCC_OscConfig+0x19a>
 8001c92:	e05c      	b.n	8001d4e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe fb1e 	bl	80002d4 <HAL_GetTick>
 8001c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9e:	f7fe fb19 	bl	80002d4 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d902      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f000 bdcf 	b.w	8002852 <HAL_RCC_OscConfig+0xe02>
 8001cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001cc8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x296>
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	e015      	b.n	8001d12 <HAL_RCC_OscConfig+0x2c2>
 8001ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d02:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d06:	fa93 f3a3 	rbit	r3, r3
 8001d0a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_RCC_OscConfig+0x2f8>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d16:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d1e:	fa92 f2a2 	rbit	r2, r2
 8001d22:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d26:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d2a:	fab2 f282 	clz	r2, r2
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	f042 0220 	orr.w	r2, r2, #32
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f002 021f 	and.w	r2, r2, #31
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ab      	bne.n	8001c9e <HAL_RCC_OscConfig+0x24e>
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_OscConfig+0x2fe>
 8001d48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 816f 	beq.w	800203c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d5e:	4bd0      	ldr	r3, [pc, #832]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d6a:	4bcd      	ldr	r3, [pc, #820]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d16c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x400>
 8001d76:	4bca      	ldr	r3, [pc, #808]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d166      	bne.n	8001e50 <HAL_RCC_OscConfig+0x400>
 8001d82:	2302      	movs	r3, #2
 8001d84:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d94:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_OscConfig+0x362>
 8001dac:	4bbc      	ldr	r3, [pc, #752]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	e013      	b.n	8001dda <HAL_RCC_OscConfig+0x38a>
 8001db2:	2302      	movs	r3, #2
 8001db4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001dd6:	4bb2      	ldr	r3, [pc, #712]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001de0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001de4:	fa92 f2a2 	rbit	r2, r2
 8001de8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001dec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001df0:	fab2 f282 	clz	r2, r2
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f042 0220 	orr.w	r2, r2, #32
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	f002 021f 	and.w	r2, r2, #31
 8001e00:	2101      	movs	r1, #1
 8001e02:	fa01 f202 	lsl.w	r2, r1, r2
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <HAL_RCC_OscConfig+0x3cc>
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f000 bd1b 	b.w	8002852 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4ba0      	ldr	r3, [pc, #640]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	21f8      	movs	r1, #248	; 0xf8
 8001e2c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e34:	fa91 f1a1 	rbit	r1, r1
 8001e38:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e3c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e40:	fab1 f181 	clz	r1, r1
 8001e44:	b2c9      	uxtb	r1, r1
 8001e46:	408b      	lsls	r3, r1
 8001e48:	4995      	ldr	r1, [pc, #596]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4e:	e0f5      	b.n	800203c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8085 	beq.w	8001f66 <HAL_RCC_OscConfig+0x516>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	461a      	mov	r2, r3
 8001e84:	2301      	movs	r3, #1
 8001e86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7fe fa24 	bl	80002d4 <HAL_GetTick>
 8001e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e92:	f7fe fa1f 	bl	80002d4 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d902      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	f000 bcd5 	b.w	8002852 <HAL_RCC_OscConfig+0xe02>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001eba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x488>
 8001ed2:	4b73      	ldr	r3, [pc, #460]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	e013      	b.n	8001f00 <HAL_RCC_OscConfig+0x4b0>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ef0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2202      	movs	r2, #2
 8001f02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0af      	beq.n	8001e92 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	21f8      	movs	r1, #248	; 0xf8
 8001f42:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f4a:	fa91 f1a1 	rbit	r1, r1
 8001f4e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f52:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f56:	fab1 f181 	clz	r1, r1
 8001f5a:	b2c9      	uxtb	r1, r1
 8001f5c:	408b      	lsls	r3, r1
 8001f5e:	4950      	ldr	r1, [pc, #320]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	600b      	str	r3, [r1, #0]
 8001f64:	e06a      	b.n	800203c <HAL_RCC_OscConfig+0x5ec>
 8001f66:	2301      	movs	r3, #1
 8001f68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f70:	fa93 f3a3 	rbit	r3, r3
 8001f74:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2300      	movs	r3, #0
 8001f90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe f99f 	bl	80002d4 <HAL_GetTick>
 8001f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7fe f99a 	bl	80002d4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d902      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	f000 bc50 	b.w	8002852 <HAL_RCC_OscConfig+0xe02>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d102      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x592>
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	e013      	b.n	800200a <HAL_RCC_OscConfig+0x5ba>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ffa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002006:	4b26      	ldr	r3, [pc, #152]	; (80020a0 <HAL_RCC_OscConfig+0x650>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	2202      	movs	r2, #2
 800200c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002010:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002014:	fa92 f2a2 	rbit	r2, r2
 8002018:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800201c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f042 0220 	orr.w	r2, r2, #32
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f002 021f 	and.w	r2, r2, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f202 	lsl.w	r2, r1, r2
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1af      	bne.n	8001f9c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80da 	beq.w	8002200 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d069      	beq.n	800212a <HAL_RCC_OscConfig+0x6da>
 8002056:	2301      	movs	r3, #1
 8002058:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_OscConfig+0x654>)
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	461a      	mov	r2, r3
 800207c:	2301      	movs	r3, #1
 800207e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7fe f928 	bl	80002d4 <HAL_GetTick>
 8002084:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002088:	e00e      	b.n	80020a8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208a:	f7fe f923 	bl	80002d4 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d906      	bls.n	80020a8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e3d9      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	10908120 	.word	0x10908120
 80020a8:	2302      	movs	r3, #2
 80020aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020be:	2202      	movs	r2, #2
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f2a3 	rbit	r2, r3
 80020cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020d6:	2202      	movs	r2, #2
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80020e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	4ba5      	ldr	r3, [pc, #660]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80020ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020f2:	2102      	movs	r1, #2
 80020f4:	6019      	str	r1, [r3, #0]
 80020f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	fa93 f1a3 	rbit	r1, r3
 8002100:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002104:	6019      	str	r1, [r3, #0]
  return result;
 8002106:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	2101      	movs	r1, #1
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0b0      	beq.n	800208a <HAL_RCC_OscConfig+0x63a>
 8002128:	e06a      	b.n	8002200 <HAL_RCC_OscConfig+0x7b0>
 800212a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002140:	601a      	str	r2, [r3, #0]
  return result;
 8002142:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002146:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002148:	fab3 f383 	clz	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	4b8c      	ldr	r3, [pc, #560]	; (8002384 <HAL_RCC_OscConfig+0x934>)
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	461a      	mov	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7fe f8ba 	bl	80002d4 <HAL_GetTick>
 8002160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	e009      	b.n	800217a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002166:	f7fe f8b5 	bl	80002d4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e36b      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
 800217a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002196:	2202      	movs	r2, #2
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021ae:	2202      	movs	r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f2a3 	rbit	r2, r3
 80021bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c2:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80021c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021ca:	2102      	movs	r1, #2
 80021cc:	6019      	str	r1, [r3, #0]
 80021ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	fa93 f1a3 	rbit	r1, r3
 80021d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021dc:	6019      	str	r1, [r3, #0]
  return result;
 80021de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1b2      	bne.n	8002166 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8158 	beq.w	80024c0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002216:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d112      	bne.n	8002248 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b57      	ldr	r3, [pc, #348]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a56      	ldr	r2, [pc, #344]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <HAL_RCC_OscConfig+0x938>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d11a      	bne.n	800228a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002254:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x938>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a4b      	ldr	r2, [pc, #300]	; (8002388 <HAL_RCC_OscConfig+0x938>)
 800225a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002260:	f7fe f838 	bl	80002d4 <HAL_GetTick>
 8002264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	e009      	b.n	800227e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226a:	f7fe f833 	bl	80002d4 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e2e9      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4b42      	ldr	r3, [pc, #264]	; (8002388 <HAL_RCC_OscConfig+0x938>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0ef      	beq.n	800226a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x852>
 8002294:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4a39      	ldr	r2, [pc, #228]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	e02f      	b.n	8002302 <HAL_RCC_OscConfig+0x8b2>
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10c      	bne.n	80022c6 <HAL_RCC_OscConfig+0x876>
 80022ac:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a33      	ldr	r2, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022be:	f023 0304 	bic.w	r3, r3, #4
 80022c2:	6213      	str	r3, [r2, #32]
 80022c4:	e01d      	b.n	8002302 <HAL_RCC_OscConfig+0x8b2>
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x89a>
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a27      	ldr	r2, [pc, #156]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	e00b      	b.n	8002302 <HAL_RCC_OscConfig+0x8b2>
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a24      	ldr	r2, [pc, #144]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a21      	ldr	r2, [pc, #132]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d06b      	beq.n	80023e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230c:	f7fd ffe2 	bl	80002d4 <HAL_GetTick>
 8002310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002314:	e00b      	b.n	800232e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7fd ffdd 	bl	80002d4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e291      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
 800232e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002332:	2202      	movs	r2, #2
 8002334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f2a3 	rbit	r2, r3
 8002340:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800234a:	2202      	movs	r2, #2
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	fa93 f2a3 	rbit	r2, r3
 8002358:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800235c:	601a      	str	r2, [r3, #0]
  return result;
 800235e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002362:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d109      	bne.n	800238c <HAL_RCC_OscConfig+0x93c>
 8002378:	4b01      	ldr	r3, [pc, #4]	; (8002380 <HAL_RCC_OscConfig+0x930>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	e014      	b.n	80023a8 <HAL_RCC_OscConfig+0x958>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	10908120 	.word	0x10908120
 8002388:	40007000 	.word	0x40007000
 800238c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	4bbb      	ldr	r3, [pc, #748]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023ac:	2102      	movs	r1, #2
 80023ae:	6011      	str	r1, [r2, #0]
 80023b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	fa92 f1a2 	rbit	r1, r2
 80023ba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80023be:	6011      	str	r1, [r2, #0]
  return result;
 80023c0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	fab2 f282 	clz	r2, r2
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f002 021f 	and.w	r2, r2, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f202 	lsl.w	r2, r1, r2
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d099      	beq.n	8002316 <HAL_RCC_OscConfig+0x8c6>
 80023e2:	e063      	b.n	80024ac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fd ff76 	bl	80002d4 <HAL_GetTick>
 80023e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	e00b      	b.n	8002406 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fd ff71 	bl	80002d4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e225      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
 8002406:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800240a:	2202      	movs	r2, #2
 800240c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	fa93 f2a3 	rbit	r2, r3
 8002418:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002422:	2202      	movs	r2, #2
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fa93 f2a3 	rbit	r2, r3
 8002430:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002434:	601a      	str	r2, [r3, #0]
  return result;
 8002436:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800243a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d102      	bne.n	8002456 <HAL_RCC_OscConfig+0xa06>
 8002450:	4b90      	ldr	r3, [pc, #576]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	e00d      	b.n	8002472 <HAL_RCC_OscConfig+0xa22>
 8002456:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800245a:	2202      	movs	r2, #2
 800245c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	4b89      	ldr	r3, [pc, #548]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002476:	2102      	movs	r1, #2
 8002478:	6011      	str	r1, [r2, #0]
 800247a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	fa92 f1a2 	rbit	r1, r2
 8002484:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002488:	6011      	str	r1, [r2, #0]
  return result;
 800248a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1a0      	bne.n	80023ee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b77      	ldr	r3, [pc, #476]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a76      	ldr	r2, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 80024ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 81c2 	beq.w	8002850 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024cc:	4b71      	ldr	r3, [pc, #452]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	f000 819c 	beq.w	8002812 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	f040 8114 	bne.w	800270e <HAL_RCC_OscConfig+0xcbe>
 80024e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fa93 f2a3 	rbit	r2, r3
 80024fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024fe:	601a      	str	r2, [r3, #0]
  return result;
 8002500:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002504:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fd feda 	bl	80002d4 <HAL_GetTick>
 8002520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e009      	b.n	800253a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7fd fed5 	bl	80002d4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e18b      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
 800253a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800253e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f2a3 	rbit	r2, r3
 800254e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002552:	601a      	str	r2, [r3, #0]
  return result;
 8002554:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002558:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_RCC_OscConfig+0xb24>
 800256e:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	e01b      	b.n	80025ac <HAL_RCC_OscConfig+0xb5c>
 8002574:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800257c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025b4:	6011      	str	r1, [r2, #0]
 80025b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fa92 f1a2 	rbit	r1, r2
 80025c0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025c4:	6011      	str	r1, [r2, #0]
  return result;
 80025c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	f042 0220 	orr.w	r2, r2, #32
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f002 021f 	and.w	r2, r2, #31
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d19e      	bne.n	8002526 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	4925      	ldr	r1, [pc, #148]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800261c:	601a      	str	r2, [r3, #0]
  return result;
 800261e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002622:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800262e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	461a      	mov	r2, r3
 8002636:	2301      	movs	r3, #1
 8002638:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fd fe4b 	bl	80002d4 <HAL_GetTick>
 800263e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002642:	e009      	b.n	8002658 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002644:	f7fd fe46 	bl	80002d4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0fc      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
 8002658:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800265c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f2a3 	rbit	r2, r3
 800266c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002670:	601a      	str	r2, [r3, #0]
  return result;
 8002672:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002676:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_RCC_OscConfig+0xc48>
 800268c:	4b01      	ldr	r3, [pc, #4]	; (8002694 <HAL_RCC_OscConfig+0xc44>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	e01e      	b.n	80026d0 <HAL_RCC_OscConfig+0xc80>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800269c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_OscConfig+0xe0c>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026d8:	6011      	str	r1, [r2, #0]
 80026da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	fa92 f1a2 	rbit	r1, r2
 80026e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80026e8:	6011      	str	r1, [r2, #0]
  return result;
 80026ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d09b      	beq.n	8002644 <HAL_RCC_OscConfig+0xbf4>
 800270c:	e0a0      	b.n	8002850 <HAL_RCC_OscConfig+0xe00>
 800270e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002712:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002726:	601a      	str	r2, [r3, #0]
  return result;
 8002728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002738:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	461a      	mov	r2, r3
 8002740:	2300      	movs	r3, #0
 8002742:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fd fdc6 	bl	80002d4 <HAL_GetTick>
 8002748:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	e009      	b.n	8002762 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274e:	f7fd fdc1 	bl	80002d4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e077      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
 8002762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002766:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800276a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277a:	601a      	str	r2, [r3, #0]
  return result;
 800277c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002780:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d102      	bne.n	800279c <HAL_RCC_OscConfig+0xd4c>
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_RCC_OscConfig+0xe0c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	e01b      	b.n	80027d4 <HAL_RCC_OscConfig+0xd84>
 800279c:	f107 0320 	add.w	r3, r7, #32
 80027a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f107 0318 	add.w	r3, r7, #24
 80027ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f107 0318 	add.w	r3, r7, #24
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_OscConfig+0xe0c>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f107 0210 	add.w	r2, r7, #16
 80027d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027dc:	6011      	str	r1, [r2, #0]
 80027de:	f107 0210 	add.w	r2, r7, #16
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fa92 f1a2 	rbit	r1, r2
 80027e8:	f107 020c 	add.w	r2, r7, #12
 80027ec:	6011      	str	r1, [r2, #0]
  return result;
 80027ee:	f107 020c 	add.w	r2, r7, #12
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d19e      	bne.n	800274e <HAL_RCC_OscConfig+0xcfe>
 8002810:	e01e      	b.n	8002850 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e018      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_RCC_OscConfig+0xe0c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002828:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800282c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	429a      	cmp	r2, r3
 8002838:	d108      	bne.n	800284c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800283a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800283e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b09e      	sub	sp, #120	; 0x78
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e162      	b.n	8002b3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b90      	ldr	r3, [pc, #576]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d910      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b8d      	ldr	r3, [pc, #564]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0207 	bic.w	r2, r3, #7
 800288e:	498b      	ldr	r1, [pc, #556]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b89      	ldr	r3, [pc, #548]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e14a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b82      	ldr	r3, [pc, #520]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	497f      	ldr	r1, [pc, #508]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80dc 	beq.w	8002a8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d13c      	bne.n	8002956 <HAL_RCC_ClockConfig+0xf6>
 80028dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d102      	bne.n	8002906 <HAL_RCC_ClockConfig+0xa6>
 8002900:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	e00f      	b.n	8002926 <HAL_RCC_ClockConfig+0xc6>
 8002906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800290a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	667b      	str	r3, [r7, #100]	; 0x64
 8002914:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002918:	663b      	str	r3, [r7, #96]	; 0x60
 800291a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800292a:	65ba      	str	r2, [r7, #88]	; 0x58
 800292c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800292e:	fa92 f2a2 	rbit	r2, r2
 8002932:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002936:	fab2 f282 	clz	r2, r2
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	f042 0220 	orr.w	r2, r2, #32
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	f002 021f 	and.w	r2, r2, #31
 8002946:	2101      	movs	r1, #1
 8002948:	fa01 f202 	lsl.w	r2, r1, r2
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d17b      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0f3      	b.n	8002b3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d13c      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x178>
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800296c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d102      	bne.n	8002988 <HAL_RCC_ClockConfig+0x128>
 8002982:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e00f      	b.n	80029a8 <HAL_RCC_ClockConfig+0x148>
 8002988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	647b      	str	r3, [r7, #68]	; 0x44
 8002996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
 800299c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a4:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80029ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029b0:	fa92 f2a2 	rbit	r2, r2
 80029b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b8:	fab2 f282 	clz	r2, r2
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f002 021f 	and.w	r2, r2, #31
 80029c8:	2101      	movs	r1, #1
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d13a      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0b2      	b.n	8002b3e <HAL_RCC_ClockConfig+0x2de>
 80029d8:	2302      	movs	r3, #2
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x1a0>
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	e00d      	b.n	8002a1c <HAL_RCC_ClockConfig+0x1bc>
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	61ba      	str	r2, [r7, #24]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	fa92 f2a2 	rbit	r2, r2
 8002a26:	617a      	str	r2, [r7, #20]
  return result;
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	fab2 f282 	clz	r2, r2
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f042 0220 	orr.w	r2, r2, #32
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	f002 021f 	and.w	r2, r2, #31
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e079      	b.n	8002b3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	491a      	ldr	r1, [pc, #104]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a5c:	f7fd fc3a 	bl	80002d4 <HAL_GetTick>
 8002a60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fd fc36 	bl	80002d4 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e061      	b.n	8002b3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1eb      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d214      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 0207 	bic.w	r2, r3, #7
 8002aa2:	4906      	ldr	r1, [pc, #24]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <HAL_RCC_ClockConfig+0x25c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e040      	b.n	8002b3e <HAL_RCC_ClockConfig+0x2de>
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCC_ClockConfig+0x2e8>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	491a      	ldr	r1, [pc, #104]	; (8002b48 <HAL_RCC_ClockConfig+0x2e8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_RCC_ClockConfig+0x2e8>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4912      	ldr	r1, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x2e8>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b02:	f000 f829 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b06:	4601      	mov	r1, r0
 8002b08:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <HAL_RCC_ClockConfig+0x2e8>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b10:	22f0      	movs	r2, #240	; 0xf0
 8002b12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	fa92 f2a2 	rbit	r2, r2
 8002b1a:	60fa      	str	r2, [r7, #12]
  return result;
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	fab2 f282 	clz	r2, r2
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	40d3      	lsrs	r3, r2
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x2ec>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RCC_ClockConfig+0x2f0>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_RCC_ClockConfig+0x2f4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f007 fb40 	bl	800a1bc <HAL_InitTick>
  
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3778      	adds	r7, #120	; 0x78
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	0800b16c 	.word	0x0800b16c
 8002b50:	20000010 	.word	0x20000010
 8002b54:	20000000 	.word	0x20000000

08002b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b08b      	sub	sp, #44	; 0x2c
 8002b5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b72:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x30>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x36>
 8002b86:	e03c      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b8a:	623b      	str	r3, [r7, #32]
      break;
 8002b8c:	e03c      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	fa92 f2a2 	rbit	r2, r2
 8002ba0:	607a      	str	r2, [r7, #4]
  return result;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	fab2 f282 	clz	r2, r2
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	40d3      	lsrs	r3, r2
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	220f      	movs	r2, #15
 8002bbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	fa92 f2a2 	rbit	r2, r2
 8002bc4:	60fa      	str	r2, [r7, #12]
  return result;
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	40d3      	lsrs	r3, r2
 8002bd0:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002be0:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	e004      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	623b      	str	r3, [r7, #32]
      break;
 8002c00:	e002      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c04:	623b      	str	r3, [r7, #32]
      break;
 8002c06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c08:	6a3b      	ldr	r3, [r7, #32]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	372c      	adds	r7, #44	; 0x2c
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	007a1200 	.word	0x007a1200
 8002c20:	0800b0cc 	.word	0x0800b0cc
 8002c24:	0800b0dc 	.word	0x0800b0dc
 8002c28:	003d0900 	.word	0x003d0900

08002c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000010 	.word	0x20000010

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c4a:	f7ff ffef 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c4e:	4601      	mov	r1, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	fa92 f2a2 	rbit	r2, r2
 8002c64:	603a      	str	r2, [r7, #0]
  return result;
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	40d3      	lsrs	r3, r2
 8002c70:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000
 8002c84:	0800b17c 	.word	0x0800b17c

08002c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c8e:	f7ff ffcd 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c92:	4601      	mov	r1, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ca0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	fa92 f2a2 	rbit	r2, r2
 8002ca8:	603a      	str	r2, [r7, #0]
  return result;
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	fab2 f282 	clz	r2, r2
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	40d3      	lsrs	r3, r2
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	0800b17c 	.word	0x0800b17c

08002ccc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	220f      	movs	r2, #15
 8002cda:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_GetClockConfig+0x5c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	08db      	lsrs	r3, r3, #3
 8002d06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002d0e:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_RCC_GetClockConfig+0x60>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0207 	and.w	r2, r3, #7
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40022000 	.word	0x40022000

08002d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b092      	sub	sp, #72	; 0x48
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80d0 	beq.w	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d54:	4b86      	ldr	r3, [pc, #536]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10e      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	4b83      	ldr	r3, [pc, #524]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4a82      	ldr	r2, [pc, #520]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	61d3      	str	r3, [r2, #28]
 8002d6c:	4b80      	ldr	r3, [pc, #512]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b7d      	ldr	r3, [pc, #500]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8a:	4b7a      	ldr	r3, [pc, #488]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a79      	ldr	r2, [pc, #484]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7fd fa9d 	bl	80002d4 <HAL_GetTick>
 8002d9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7fd fa99 	bl	80002d4 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	; 0x64
 8002daa:	d901      	bls.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0db      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dbc:	4b6c      	ldr	r3, [pc, #432]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d07d      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d076      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dda:	4b65      	ldr	r3, [pc, #404]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002de8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	461a      	mov	r2, r3
 8002e04:	2301      	movs	r3, #1
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b55      	ldr	r3, [pc, #340]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e2c:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e30:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d045      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd fa4a 	bl	80002d4 <HAL_GetTick>
 8002e40:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fd fa46 	bl	80002d4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e086      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	2302      	movs	r3, #2
 8002e68:	623b      	str	r3, [r7, #32]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	61fb      	str	r3, [r7, #28]
  return result;
 8002e72:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d102      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e88:	4b39      	ldr	r3, [pc, #228]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	e007      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	613a      	str	r2, [r7, #16]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	60fa      	str	r2, [r7, #12]
  return result;
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	fab2 f282 	clz	r2, r2
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f002 021f 	and.w	r2, r2, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0bd      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4926      	ldr	r1, [pc, #152]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d105      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f023 0203 	bic.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	491a      	ldr	r1, [pc, #104]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f023 0210 	bic.w	r2, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4912      	ldr	r1, [pc, #72]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	490b      	ldr	r1, [pc, #44]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	4903      	ldr	r1, [pc, #12]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3748      	adds	r7, #72	; 0x48
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40007000 	.word	0x40007000
 8002f78:	10908100 	.word	0x10908100

08002f7c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e083      	b.n	8003096 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7f5b      	ldrb	r3, [r3, #29]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f007 f816 	bl	8009fd0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	22ca      	movs	r2, #202	; 0xca
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2253      	movs	r2, #83	; 0x53
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fb7a 	bl	80036b4 <RTC_EnterInitMode>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	22ff      	movs	r2, #255	; 0xff
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e05e      	b.n	8003096 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6899      	ldr	r1, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6919      	ldr	r1, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	041a      	lsls	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003036:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10e      	bne.n	8003064 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fb0c 	bl	8003664 <HAL_RTC_WaitForSynchro>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	22ff      	movs	r2, #255	; 0xff
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2204      	movs	r2, #4
 800305e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e018      	b.n	8003096 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003072:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	22ff      	movs	r2, #255	; 0xff
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800309e:	b590      	push	{r4, r7, lr}
 80030a0:	b087      	sub	sp, #28
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	7f1b      	ldrb	r3, [r3, #28]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_RTC_SetTime+0x1c>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e0aa      	b.n	8003210 <HAL_RTC_SetTime+0x172>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2202      	movs	r2, #2
 80030c4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d126      	bne.n	800311a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2200      	movs	r2, #0
 80030de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fb11 	bl	800370c <RTC_ByteToBcd2>
 80030ea:	4603      	mov	r3, r0
 80030ec:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	785b      	ldrb	r3, [r3, #1]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fb0a 	bl	800370c <RTC_ByteToBcd2>
 80030f8:	4603      	mov	r3, r0
 80030fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030fc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	789b      	ldrb	r3, [r3, #2]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fb02 	bl	800370c <RTC_ByteToBcd2>
 8003108:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800310a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	78db      	ldrb	r3, [r3, #3]
 8003112:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e018      	b.n	800314c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2200      	movs	r2, #0
 800312c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	785b      	ldrb	r3, [r3, #1]
 8003138:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800313a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003140:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	78db      	ldrb	r3, [r3, #3]
 8003146:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	22ca      	movs	r2, #202	; 0xca
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2253      	movs	r2, #83	; 0x53
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 faa9 	bl	80036b4 <RTC_EnterInitMode>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00b      	beq.n	8003180 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	22ff      	movs	r2, #255	; 0xff
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2204      	movs	r2, #4
 8003174:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e047      	b.n	8003210 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800318a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800318e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800319e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d111      	bne.n	80031fa <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fa44 	bl	8003664 <HAL_RTC_WaitForSynchro>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	22ff      	movs	r2, #255	; 0xff
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2204      	movs	r2, #4
 80031ee:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00a      	b.n	8003210 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	22ff      	movs	r2, #255	; 0xff
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800320e:	2300      	movs	r3, #0
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}

08003218 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	7f1b      	ldrb	r3, [r3, #28]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_RTC_SetDate+0x1c>
 8003230:	2302      	movs	r3, #2
 8003232:	e094      	b.n	800335e <HAL_RTC_SetDate+0x146>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2202      	movs	r2, #2
 800323e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10e      	bne.n	8003264 <HAL_RTC_SetDate+0x4c>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	f023 0310 	bic.w	r3, r3, #16
 800325a:	b2db      	uxtb	r3, r3
 800325c:	330a      	adds	r3, #10
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11c      	bne.n	80032a4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	78db      	ldrb	r3, [r3, #3]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fa4c 	bl	800370c <RTC_ByteToBcd2>
 8003274:	4603      	mov	r3, r0
 8003276:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	785b      	ldrb	r3, [r3, #1]
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fa45 	bl	800370c <RTC_ByteToBcd2>
 8003282:	4603      	mov	r3, r0
 8003284:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003286:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	789b      	ldrb	r3, [r3, #2]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fa3d 	bl	800370c <RTC_ByteToBcd2>
 8003292:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003294:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e00e      	b.n	80032c2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	78db      	ldrb	r3, [r3, #3]
 80032a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032b0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80032b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	22ca      	movs	r2, #202	; 0xca
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2253      	movs	r2, #83	; 0x53
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f9ee 	bl	80036b4 <RTC_EnterInitMode>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2204      	movs	r2, #4
 80032ea:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e033      	b.n	800335e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003300:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003304:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003314:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d111      	bne.n	8003348 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f99d 	bl	8003664 <HAL_RTC_WaitForSynchro>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	22ff      	movs	r2, #255	; 0xff
 8003336:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2204      	movs	r2, #4
 800333c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e00a      	b.n	800335e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
	...

08003368 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	7f1b      	ldrb	r3, [r3, #28]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_RTC_SetAlarm_IT+0x24>
 8003388:	2302      	movs	r3, #2
 800338a:	e11f      	b.n	80035cc <HAL_RTC_SetAlarm_IT+0x264>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2202      	movs	r2, #2
 8003396:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d137      	bne.n	800340e <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f9a8 	bl	800370c <RTC_ByteToBcd2>
 80033bc:	4603      	mov	r3, r0
 80033be:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f9a1 	bl	800370c <RTC_ByteToBcd2>
 80033ca:	4603      	mov	r3, r0
 80033cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80033ce:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	789b      	ldrb	r3, [r3, #2]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f999 	bl	800370c <RTC_ByteToBcd2>
 80033da:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80033dc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	78db      	ldrb	r3, [r3, #3]
 80033e4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80033e6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 f98b 	bl	800370c <RTC_ByteToBcd2>
 80033f6:	4603      	mov	r3, r0
 80033f8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80033fa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003402:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003408:	4313      	orrs	r3, r2
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	e023      	b.n	8003456 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2200      	movs	r2, #0
 8003420:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800342e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003434:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800343c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003444:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003446:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800344c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003452:	4313      	orrs	r3, r2
 8003454:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	22ca      	movs	r2, #202	; 0xca
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2253      	movs	r2, #83	; 0x53
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800347a:	d148      	bne.n	800350e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800349c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800349e:	f7fc ff19 	bl	80002d4 <HAL_GetTick>
 80034a2:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80034a4:	e013      	b.n	80034ce <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034a6:	f7fc ff15 	bl	80002d4 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034b4:	d90b      	bls.n	80034ce <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	22ff      	movs	r2, #255	; 0xff
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2203      	movs	r2, #3
 80034c2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e07e      	b.n	80035cc <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0e4      	beq.n	80034a6 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fa:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	e047      	b.n	800359e <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800351c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800352e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003530:	f7fc fed0 	bl	80002d4 <HAL_GetTick>
 8003534:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003536:	e013      	b.n	8003560 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003538:	f7fc fecc 	bl	80002d4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003546:	d90b      	bls.n	8003560 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	22ff      	movs	r2, #255	; 0xff
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2203      	movs	r2, #3
 8003554:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e035      	b.n	80035cc <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0e4      	beq.n	8003538 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800359c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_RTC_SetAlarm_IT+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <HAL_RTC_SetAlarm_IT+0x26c>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <HAL_RTC_SetAlarm_IT+0x26c>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <HAL_RTC_SetAlarm_IT+0x26c>)
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3724      	adds	r7, #36	; 0x24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}
 80035d4:	40010400 	.word	0x40010400

080035d8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f005 ff71 	bl	80094e4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003612:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f889 	bl	8003748 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003646:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RTC_AlarmIRQHandler+0x88>)
 800364a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800364e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	775a      	strb	r2, [r3, #29]
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40010400 	.word	0x40010400

08003664 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800367e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003680:	f7fc fe28 	bl	80002d4 <HAL_GetTick>
 8003684:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003686:	e009      	b.n	800369c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003688:	f7fc fe24 	bl	80002d4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003696:	d901      	bls.n	800369c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e007      	b.n	80036ac <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0ee      	beq.n	8003688 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d119      	bne.n	8003702 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80036d8:	f7fc fdfc 	bl	80002d4 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036de:	e009      	b.n	80036f4 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036e0:	f7fc fdf8 	bl	80002d4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ee:	d901      	bls.n	80036f4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e007      	b.n	8003704 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ee      	beq.n	80036e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800371a:	e005      	b.n	8003728 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	3b0a      	subs	r3, #10
 8003726:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	2b09      	cmp	r3, #9
 800372c:	d8f6      	bhi.n	800371c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	b2da      	uxtb	r2, r3
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	4313      	orrs	r3, r2
 800373a:	b2db      	uxtb	r3, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07c      	b.n	8003868 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d106      	bne.n	800378e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f006 fc4d 	bl	800a028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ae:	d902      	bls.n	80037b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e002      	b.n	80037bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037c4:	d007      	beq.n	80037d6 <HAL_SPI_Init+0x7a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ce:	d002      	beq.n	80037d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e6:	d903      	bls.n	80037f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
 80037ee:	e002      	b.n	80037f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	ea42 0103 	orr.w	r1, r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	f003 0204 	and.w	r2, r3, #4
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	ea42 0103 	orr.w	r1, r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	430a      	orrs	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_SPI_Transmit+0x22>
 800388e:	2302      	movs	r3, #2
 8003890:	e150      	b.n	8003b34 <HAL_SPI_Transmit+0x2c4>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800389a:	f7fc fd1b 	bl	80002d4 <HAL_GetTick>
 800389e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d002      	beq.n	80038b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038b4:	e135      	b.n	8003b22 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Transmit+0x52>
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038c6:	e12c      	b.n	8003b22 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2203      	movs	r2, #3
 80038cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003912:	d107      	bne.n	8003924 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003922:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d007      	beq.n	8003942 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003940:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800394a:	d94b      	bls.n	80039e4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_SPI_Transmit+0xea>
 8003954:	8afb      	ldrh	r3, [r7, #22]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d13e      	bne.n	80039d8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	881a      	ldrh	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	1c9a      	adds	r2, r3, #2
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800397e:	e02b      	b.n	80039d8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d112      	bne.n	80039b4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039b2:	e011      	b.n	80039d8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039b4:	f7fc fc8e 	bl	80002d4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d803      	bhi.n	80039cc <HAL_SPI_Transmit+0x15c>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ca:	d102      	bne.n	80039d2 <HAL_SPI_Transmit+0x162>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d102      	bne.n	80039d8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039d6:	e0a4      	b.n	8003b22 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1ce      	bne.n	8003980 <HAL_SPI_Transmit+0x110>
 80039e2:	e07c      	b.n	8003ade <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <HAL_SPI_Transmit+0x182>
 80039ec:	8afb      	ldrh	r3, [r7, #22]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d170      	bne.n	8003ad4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d912      	bls.n	8003a22 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	881a      	ldrh	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	1c9a      	adds	r2, r3, #2
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b02      	subs	r3, #2
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a20:	e058      	b.n	8003ad4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	7812      	ldrb	r2, [r2, #0]
 8003a2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a48:	e044      	b.n	8003ad4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d12b      	bne.n	8003ab0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d912      	bls.n	8003a88 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	881a      	ldrh	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	1c9a      	adds	r2, r3, #2
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b02      	subs	r3, #2
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a86:	e025      	b.n	8003ad4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aae:	e011      	b.n	8003ad4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab0:	f7fc fc10 	bl	80002d4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d803      	bhi.n	8003ac8 <HAL_SPI_Transmit+0x258>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Transmit+0x25e>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d102      	bne.n	8003ad4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ad2:	e026      	b.n	8003b22 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1b5      	bne.n	8003a4a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fb22 	bl	800412c <SPI_EndRxTxTransaction>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e000      	b.n	8003b22 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003b20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_SPI_TransmitReceive+0x26>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e1fb      	b.n	8003f5a <HAL_SPI_TransmitReceive+0x41e>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6a:	f7fc fbb3 	bl	80002d4 <HAL_GetTick>
 8003b6e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b76:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b86:	7efb      	ldrb	r3, [r7, #27]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d00e      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x6e>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b92:	d106      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x66>
 8003b9c:	7efb      	ldrb	r3, [r7, #27]
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d003      	beq.n	8003baa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ba8:	e1cd      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x80>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x80>
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bc2:	e1c0      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d003      	beq.n	8003bd8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2205      	movs	r2, #5
 8003bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	887a      	ldrh	r2, [r7, #2]
 8003bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c1a:	d802      	bhi.n	8003c22 <HAL_SPI_TransmitReceive+0xe6>
 8003c1c:	8a3b      	ldrh	r3, [r7, #16]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d908      	bls.n	8003c34 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	e007      	b.n	8003c44 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d007      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c6a:	d97c      	bls.n	8003d66 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x13e>
 8003c74:	8a7b      	ldrh	r3, [r7, #18]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d169      	bne.n	8003d4e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	881a      	ldrh	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	1c9a      	adds	r2, r3, #2
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c9e:	e056      	b.n	8003d4e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d11b      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x1aa>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d016      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x1aa>
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d113      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	1c9a      	adds	r2, r3, #2
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d11c      	bne.n	8003d2e <HAL_SPI_TransmitReceive+0x1f2>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d016      	beq.n	8003d2e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	b292      	uxth	r2, r2
 8003d0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	1c9a      	adds	r2, r3, #2
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d2e:	f7fc fad1 	bl	80002d4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d807      	bhi.n	8003d4e <HAL_SPI_TransmitReceive+0x212>
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d44:	d003      	beq.n	8003d4e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d4c:	e0fb      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1a3      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x164>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d19d      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x164>
 8003d64:	e0df      	b.n	8003f26 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0x23a>
 8003d6e:	8a7b      	ldrh	r3, [r7, #18]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 80cb 	bne.w	8003f0c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d912      	bls.n	8003da6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	881a      	ldrh	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	1c9a      	adds	r2, r3, #2
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b02      	subs	r3, #2
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da4:	e0b2      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dcc:	e09e      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d134      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x30a>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02f      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x30a>
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d12c      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d912      	bls.n	8003e1c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	881a      	ldrh	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	1c9a      	adds	r2, r3, #2
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b02      	subs	r3, #2
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e1a:	e012      	b.n	8003e42 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d148      	bne.n	8003ee6 <HAL_SPI_TransmitReceive+0x3aa>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d042      	beq.n	8003ee6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d923      	bls.n	8003eb4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	b292      	uxth	r2, r2
 8003e78:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b02      	subs	r3, #2
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d81f      	bhi.n	8003ee2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	e016      	b.n	8003ee2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f103 020c 	add.w	r2, r3, #12
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ee6:	f7fc f9f5 	bl	80002d4 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d803      	bhi.n	8003efe <HAL_SPI_TransmitReceive+0x3c2>
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efc:	d102      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x3c8>
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f0a:	e01c      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f47f af5b 	bne.w	8003dce <HAL_SPI_TransmitReceive+0x292>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f47f af54 	bne.w	8003dce <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f8fe 	bl	800412c <SPI_EndRxTxTransaction>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	661a      	str	r2, [r3, #96]	; 0x60
 8003f42:	e000      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f70:	b2db      	uxtb	r3, r3
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8e:	e04c      	b.n	800402a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f96:	d048      	beq.n	800402a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f98:	f7fc f99c 	bl	80002d4 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d902      	bls.n	8003fae <SPI_WaitFlagStateUntilTimeout+0x30>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d13d      	bne.n	800402a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc6:	d111      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd0:	d004      	beq.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fda:	d107      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d10f      	bne.n	8004016 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e00f      	b.n	800404a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	429a      	cmp	r2, r3
 8004046:	d1a3      	bne.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004060:	e057      	b.n	8004112 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004068:	d106      	bne.n	8004078 <SPI_WaitFifoStateUntilTimeout+0x26>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800407e:	d048      	beq.n	8004112 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004080:	f7fc f928 	bl	80002d4 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d902      	bls.n	8004096 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d13d      	bne.n	8004112 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ae:	d111      	bne.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x82>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b8:	d004      	beq.n	80040c4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c2:	d107      	bne.n	80040d4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040dc:	d10f      	bne.n	80040fe <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e008      	b.n	8004124 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4013      	ands	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d19f      	bne.n	8004062 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2200      	movs	r2, #0
 8004140:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff ff84 	bl	8004052 <SPI_WaitFifoStateUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e027      	b.n	80041b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2200      	movs	r2, #0
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff ff07 	bl	8003f7e <SPI_WaitFlagStateUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e014      	b.n	80041b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7ff ff5d 	bl	8004052 <SPI_WaitFifoStateUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a2:	f043 0220 	orr.w	r2, r3, #32
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e000      	b.n	80041b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e01d      	b.n	8004206 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f005 ff82 	bl	800a0e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f000 fa5e 	bl	80046b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	4b0e      	ldr	r3, [pc, #56]	; (8004260 <HAL_TIM_Base_Start+0x50>)
 8004228:	4013      	ands	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b06      	cmp	r3, #6
 8004230:	d00b      	beq.n	800424a <HAL_TIM_Base_Start+0x3a>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d007      	beq.n	800424a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	00010007 	.word	0x00010007

08004264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_TIM_Base_Start_IT+0x50>)
 8004284:	4013      	ands	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b06      	cmp	r3, #6
 800428c:	d00b      	beq.n	80042a6 <HAL_TIM_Base_Start_IT+0x42>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d007      	beq.n	80042a6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0201 	orr.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	00010007 	.word	0x00010007

080042b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0202 	mvn.w	r2, #2
 80042e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9be 	bl	800467c <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9b0 	bl	8004668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f9c1 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0204 	mvn.w	r2, #4
 8004338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f994 	bl	800467c <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f986 	bl	8004668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f997 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0208 	mvn.w	r2, #8
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2204      	movs	r2, #4
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f96a 	bl	800467c <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f95c 	bl	8004668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f96d 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2208      	movs	r2, #8
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f940 	bl	800467c <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f932 	bl	8004668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f943 	bl	8004690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10e      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0201 	mvn.w	r2, #1
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f005 fd20 	bl	8009e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fab2 	bl	80049cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004476:	d10e      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d107      	bne.n	8004496 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800448e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 faa5 	bl	80049e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d10e      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8f1 	bl	80046a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d10e      	bne.n	80044ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d107      	bne.n	80044ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f06f 0220 	mvn.w	r2, #32
 80044e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fa65 	bl	80049b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ee:	bf00      	nop
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_TIM_ConfigClockSource+0x18>
 800450a:	2302      	movs	r3, #2
 800450c:	e0a8      	b.n	8004660 <HAL_TIM_ConfigClockSource+0x16a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004530:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004538:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	d067      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x124>
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d80b      	bhi.n	8004566 <HAL_TIM_ConfigClockSource+0x70>
 800454e:	2b10      	cmp	r3, #16
 8004550:	d073      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x144>
 8004552:	2b10      	cmp	r3, #16
 8004554:	d802      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x66>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d06f      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800455a:	e078      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800455c:	2b20      	cmp	r3, #32
 800455e:	d06c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x144>
 8004560:	2b30      	cmp	r3, #48	; 0x30
 8004562:	d06a      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004564:	e073      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004566:	2b70      	cmp	r3, #112	; 0x70
 8004568:	d00d      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x90>
 800456a:	2b70      	cmp	r3, #112	; 0x70
 800456c:	d804      	bhi.n	8004578 <HAL_TIM_ConfigClockSource+0x82>
 800456e:	2b50      	cmp	r3, #80	; 0x50
 8004570:	d033      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xe4>
 8004572:	2b60      	cmp	r3, #96	; 0x60
 8004574:	d041      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004576:	e06a      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d066      	beq.n	800464c <HAL_TIM_ConfigClockSource+0x156>
 800457e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004582:	d017      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004584:	e063      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6899      	ldr	r1, [r3, #8]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f000 f981 	bl	800489c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
      break;
 80045b2:	e04c      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6899      	ldr	r1, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f000 f96a 	bl	800489c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d6:	609a      	str	r2, [r3, #8]
      break;
 80045d8:	e039      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6859      	ldr	r1, [r3, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	461a      	mov	r2, r3
 80045e8:	f000 f8de 	bl	80047a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2150      	movs	r1, #80	; 0x50
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f937 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 80045f8:	e029      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 f8fd 	bl	8004806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2160      	movs	r1, #96	; 0x60
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f927 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 8004618:	e019      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	461a      	mov	r2, r3
 8004628:	f000 f8be 	bl	80047a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2140      	movs	r1, #64	; 0x40
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f917 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 8004638:	e009      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f000 f90e 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 800464a:	e000      	b.n	800464e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800464c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a32      	ldr	r2, [pc, #200]	; (8004794 <TIM_Base_SetConfig+0xdc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x28>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x28>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <TIM_Base_SetConfig+0xe0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d108      	bne.n	80046f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a27      	ldr	r2, [pc, #156]	; (8004794 <TIM_Base_SetConfig+0xdc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <TIM_Base_SetConfig+0x6a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004700:	d00f      	beq.n	8004722 <TIM_Base_SetConfig+0x6a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a24      	ldr	r2, [pc, #144]	; (8004798 <TIM_Base_SetConfig+0xe0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_Base_SetConfig+0x6a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a23      	ldr	r2, [pc, #140]	; (800479c <TIM_Base_SetConfig+0xe4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <TIM_Base_SetConfig+0x6a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <TIM_Base_SetConfig+0xe8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_Base_SetConfig+0x6a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <TIM_Base_SetConfig+0xec>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d108      	bne.n	8004734 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <TIM_Base_SetConfig+0xdc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0xc0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a0e      	ldr	r2, [pc, #56]	; (800479c <TIM_Base_SetConfig+0xe4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0xc0>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0d      	ldr	r2, [pc, #52]	; (80047a0 <TIM_Base_SetConfig+0xe8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0xc0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <TIM_Base_SetConfig+0xec>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	615a      	str	r2, [r3, #20]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40000400 	.word	0x40000400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800

080047a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f023 030a 	bic.w	r3, r3, #10
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004806:	b480      	push	{r7}
 8004808:	b087      	sub	sp, #28
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0210 	bic.w	r2, r3, #16
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	031b      	lsls	r3, r3, #12
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004842:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	f043 0307 	orr.w	r3, r3, #7
 8004888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	021a      	lsls	r2, r3, #8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	431a      	orrs	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	609a      	str	r2, [r3, #8]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e054      	b.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004924:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a17      	ldr	r2, [pc, #92]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495c:	d009      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10c      	bne.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40014000 	.word	0x40014000

080049b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e040      	b.n	8004a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f005 fb84 	bl	800a124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	; 0x24
 8004a20:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fae6 	bl	8005004 <UART_SetConfig>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e022      	b.n	8004a88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fc5c 	bl	8005308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fce3 	bl	800544c <UART_CheckIdleState>
 8004a86:	4603      	mov	r3, r0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	f040 8081 	bne.w	8004bac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_UART_Transmit+0x26>
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e079      	b.n	8004bae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UART_Transmit+0x38>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e072      	b.n	8004bae <HAL_UART_Transmit+0x11e>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2221      	movs	r2, #33	; 0x21
 8004ada:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004adc:	f7fb fbfa 	bl	80002d4 <HAL_GetTick>
 8004ae0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	d108      	bne.n	8004b0e <HAL_UART_Transmit+0x7e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e003      	b.n	8004b16 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b16:	e02d      	b.n	8004b74 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fcd7 	bl	80054d6 <UART_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e03d      	b.n	8004bae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	881a      	ldrh	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b44:	b292      	uxth	r2, r2
 8004b46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e008      	b.n	8004b62 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	781a      	ldrb	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	b292      	uxth	r2, r2
 8004b5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1cb      	bne.n	8004b18 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2200      	movs	r2, #0
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fca3 	bl	80054d6 <UART_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e009      	b.n	8004bae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b08a      	sub	sp, #40	; 0x28
 8004bba:	af02      	add	r7, sp, #8
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	f040 80bb 	bne.w	8004d46 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_UART_Receive+0x26>
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0b3      	b.n	8004d48 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Receive+0x38>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e0ac      	b.n	8004d48 <HAL_UART_Receive+0x192>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2222      	movs	r2, #34	; 0x22
 8004c00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c02:	f7fb fb67 	bl	80002d4 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c20:	d10e      	bne.n	8004c40 <HAL_UART_Receive+0x8a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <HAL_UART_Receive+0x80>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c34:	e02d      	b.n	8004c92 <HAL_UART_Receive+0xdc>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	22ff      	movs	r2, #255	; 0xff
 8004c3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c3e:	e028      	b.n	8004c92 <HAL_UART_Receive+0xdc>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10d      	bne.n	8004c64 <HAL_UART_Receive+0xae>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <HAL_UART_Receive+0xa4>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	22ff      	movs	r2, #255	; 0xff
 8004c54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c58:	e01b      	b.n	8004c92 <HAL_UART_Receive+0xdc>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	227f      	movs	r2, #127	; 0x7f
 8004c5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c62:	e016      	b.n	8004c92 <HAL_UART_Receive+0xdc>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6c:	d10d      	bne.n	8004c8a <HAL_UART_Receive+0xd4>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <HAL_UART_Receive+0xca>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	227f      	movs	r2, #127	; 0x7f
 8004c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c7e:	e008      	b.n	8004c92 <HAL_UART_Receive+0xdc>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	223f      	movs	r2, #63	; 0x3f
 8004c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c88:	e003      	b.n	8004c92 <HAL_UART_Receive+0xdc>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c98:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca2:	d108      	bne.n	8004cb6 <HAL_UART_Receive+0x100>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e003      	b.n	8004cbe <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004cbe:	e033      	b.n	8004d28 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2120      	movs	r1, #32
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 fc03 	bl	80054d6 <UART_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e036      	b.n	8004d48 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10c      	bne.n	8004cfa <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	8a7b      	ldrh	r3, [r7, #18]
 8004cea:	4013      	ands	r3, r2
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	e00d      	b.n	8004d16 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	8a7b      	ldrh	r3, [r7, #18]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	4013      	ands	r3, r2
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	3301      	adds	r3, #1
 8004d14:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1c5      	bne.n	8004cc0 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e000      	b.n	8004d48 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8004d46:	2302      	movs	r3, #2
  }
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d76:	4013      	ands	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d113      	bne.n	8004da8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00e      	beq.n	8004da8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d009      	beq.n	8004da8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8114 	beq.w	8004fc6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
      }
      return;
 8004da6:	e10e      	b.n	8004fc6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80d6 	beq.w	8004f5c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d105      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80cb 	beq.w	8004f5c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <HAL_UART_IRQHandler+0x9e>
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2201      	movs	r2, #1
 8004de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de6:	f043 0201 	orr.w	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00e      	beq.n	8004e16 <HAL_UART_IRQHandler+0xc6>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2202      	movs	r2, #2
 8004e08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00e      	beq.n	8004e3e <HAL_UART_IRQHandler+0xee>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e36:	f043 0202 	orr.w	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d013      	beq.n	8004e70 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2208      	movs	r2, #8
 8004e62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e68:	f043 0208 	orr.w	r2, r3, #8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00f      	beq.n	8004e9a <HAL_UART_IRQHandler+0x14a>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e92:	f043 0220 	orr.w	r2, r3, #32
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 8093 	beq.w	8004fca <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ecc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d004      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d031      	beq.n	8004f4a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fb70 	bl	80055cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b40      	cmp	r3, #64	; 0x40
 8004ef8:	d123      	bne.n	8004f42 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f08:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d013      	beq.n	8004f3a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f16:	4a30      	ldr	r2, [pc, #192]	; (8004fd8 <HAL_UART_IRQHandler+0x288>)
 8004f18:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fc fac4 	bl	80014ac <HAL_DMA_Abort_IT>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d016      	beq.n	8004f58 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004f34:	4610      	mov	r0, r2
 8004f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	e00e      	b.n	8004f58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f858 	bl	8004ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f40:	e00a      	b.n	8004f58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f854 	bl	8004ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	e006      	b.n	8004f58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f850 	bl	8004ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004f56:	e038      	b.n	8004fca <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	bf00      	nop
    return;
 8004f5a:	e036      	b.n	8004fca <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <HAL_UART_IRQHandler+0x232>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fb75 	bl	800566a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f80:	e026      	b.n	8004fd0 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d017      	beq.n	8004fce <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
    }
    return;
 8004fa6:	e012      	b.n	8004fce <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x280>
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fb3b 	bl	8005638 <UART_EndTransmit_IT>
    return;
 8004fc2:	bf00      	nop
 8004fc4:	e004      	b.n	8004fd0 <HAL_UART_IRQHandler+0x280>
      return;
 8004fc6:	bf00      	nop
 8004fc8:	e002      	b.n	8004fd0 <HAL_UART_IRQHandler+0x280>
    return;
 8004fca:	bf00      	nop
 8004fcc:	e000      	b.n	8004fd0 <HAL_UART_IRQHandler+0x280>
    return;
 8004fce:	bf00      	nop
  }

}
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	0800560d 	.word	0x0800560d

08004fdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800500c:	2300      	movs	r3, #0
 800500e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4ba2      	ldr	r3, [pc, #648]	; (80052bc <UART_SetConfig+0x2b8>)
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	6939      	ldr	r1, [r7, #16]
 800503c:	430b      	orrs	r3, r1
 800503e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a90      	ldr	r2, [pc, #576]	; (80052c0 <UART_SetConfig+0x2bc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d121      	bne.n	80050c8 <UART_SetConfig+0xc4>
 8005084:	4b8f      	ldr	r3, [pc, #572]	; (80052c4 <UART_SetConfig+0x2c0>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	2b03      	cmp	r3, #3
 800508e:	d817      	bhi.n	80050c0 <UART_SetConfig+0xbc>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0x94>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050b5 	.word	0x080050b5
 80050a0:	080050bb 	.word	0x080050bb
 80050a4:	080050af 	.word	0x080050af
 80050a8:	2300      	movs	r3, #0
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e01e      	b.n	80050ec <UART_SetConfig+0xe8>
 80050ae:	2302      	movs	r3, #2
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e01b      	b.n	80050ec <UART_SetConfig+0xe8>
 80050b4:	2304      	movs	r3, #4
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e018      	b.n	80050ec <UART_SetConfig+0xe8>
 80050ba:	2308      	movs	r3, #8
 80050bc:	77fb      	strb	r3, [r7, #31]
 80050be:	e015      	b.n	80050ec <UART_SetConfig+0xe8>
 80050c0:	2310      	movs	r3, #16
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	bf00      	nop
 80050c6:	e011      	b.n	80050ec <UART_SetConfig+0xe8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a7e      	ldr	r2, [pc, #504]	; (80052c8 <UART_SetConfig+0x2c4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d102      	bne.n	80050d8 <UART_SetConfig+0xd4>
 80050d2:	2300      	movs	r3, #0
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e009      	b.n	80050ec <UART_SetConfig+0xe8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a7b      	ldr	r2, [pc, #492]	; (80052cc <UART_SetConfig+0x2c8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d102      	bne.n	80050e8 <UART_SetConfig+0xe4>
 80050e2:	2300      	movs	r3, #0
 80050e4:	77fb      	strb	r3, [r7, #31]
 80050e6:	e001      	b.n	80050ec <UART_SetConfig+0xe8>
 80050e8:	2310      	movs	r3, #16
 80050ea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f4:	f040 8082 	bne.w	80051fc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80050f8:	7ffb      	ldrb	r3, [r7, #31]
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d85e      	bhi.n	80051bc <UART_SetConfig+0x1b8>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x100>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005129 	.word	0x08005129
 8005108:	08005149 	.word	0x08005149
 800510c:	08005169 	.word	0x08005169
 8005110:	080051bd 	.word	0x080051bd
 8005114:	08005185 	.word	0x08005185
 8005118:	080051bd 	.word	0x080051bd
 800511c:	080051bd 	.word	0x080051bd
 8005120:	080051bd 	.word	0x080051bd
 8005124:	080051a5 	.word	0x080051a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005128:	f7fd fd8c 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 800512c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	005a      	lsls	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	441a      	add	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	61bb      	str	r3, [r7, #24]
        break;
 8005146:	e03c      	b.n	80051c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7fd fd9e 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 800514c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	005a      	lsls	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	b29b      	uxth	r3, r3
 8005164:	61bb      	str	r3, [r7, #24]
        break;
 8005166:	e02c      	b.n	80051c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005172:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6852      	ldr	r2, [r2, #4]
 800517a:	fbb3 f3f2 	udiv	r3, r3, r2
 800517e:	b29b      	uxth	r3, r3
 8005180:	61bb      	str	r3, [r7, #24]
        break;
 8005182:	e01e      	b.n	80051c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005184:	f7fd fce8 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8005188:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	005a      	lsls	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	b29b      	uxth	r3, r3
 80051a0:	61bb      	str	r3, [r7, #24]
        break;
 80051a2:	e00e      	b.n	80051c2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	61bb      	str	r3, [r7, #24]
        break;
 80051ba:	e002      	b.n	80051c2 <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	75fb      	strb	r3, [r7, #23]
        break;
 80051c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b0f      	cmp	r3, #15
 80051c6:	d916      	bls.n	80051f6 <UART_SetConfig+0x1f2>
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ce:	d212      	bcs.n	80051f6 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f023 030f 	bic.w	r3, r3, #15
 80051d8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	897b      	ldrh	r3, [r7, #10]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	897a      	ldrh	r2, [r7, #10]
 80051f2:	60da      	str	r2, [r3, #12]
 80051f4:	e07d      	b.n	80052f2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
 80051fa:	e07a      	b.n	80052f2 <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 80051fc:	7ffb      	ldrb	r3, [r7, #31]
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d866      	bhi.n	80052d0 <UART_SetConfig+0x2cc>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <UART_SetConfig+0x204>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	0800522d 	.word	0x0800522d
 800520c:	0800524b 	.word	0x0800524b
 8005210:	08005269 	.word	0x08005269
 8005214:	080052d1 	.word	0x080052d1
 8005218:	08005285 	.word	0x08005285
 800521c:	080052d1 	.word	0x080052d1
 8005220:	080052d1 	.word	0x080052d1
 8005224:	080052d1 	.word	0x080052d1
 8005228:	080052a3 	.word	0x080052a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522c:	f7fd fd0a 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8005230:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	085a      	lsrs	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	441a      	add	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	b29b      	uxth	r3, r3
 8005246:	61bb      	str	r3, [r7, #24]
        break;
 8005248:	e045      	b.n	80052d6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800524a:	f7fd fd1d 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 800524e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	085a      	lsrs	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	441a      	add	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	61bb      	str	r3, [r7, #24]
        break;
 8005266:	e036      	b.n	80052d6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005272:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6852      	ldr	r2, [r2, #4]
 800527a:	fbb3 f3f2 	udiv	r3, r3, r2
 800527e:	b29b      	uxth	r3, r3
 8005280:	61bb      	str	r3, [r7, #24]
        break;
 8005282:	e028      	b.n	80052d6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005284:	f7fd fc68 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8005288:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	085a      	lsrs	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	441a      	add	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	b29b      	uxth	r3, r3
 800529e:	61bb      	str	r3, [r7, #24]
        break;
 80052a0:	e019      	b.n	80052d6 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	085b      	lsrs	r3, r3, #1
 80052a8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	61bb      	str	r3, [r7, #24]
        break;
 80052b8:	e00d      	b.n	80052d6 <UART_SetConfig+0x2d2>
 80052ba:	bf00      	nop
 80052bc:	efff69f3 	.word	0xefff69f3
 80052c0:	40013800 	.word	0x40013800
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40004400 	.word	0x40004400
 80052cc:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	75fb      	strb	r3, [r7, #23]
        break;
 80052d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2b0f      	cmp	r3, #15
 80052da:	d908      	bls.n	80052ee <UART_SetConfig+0x2ea>
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e2:	d204      	bcs.n	80052ee <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	60da      	str	r2, [r3, #12]
 80052ec:	e001      	b.n	80052f2 <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01a      	beq.n	800541e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005406:	d10a      	bne.n	800541e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af02      	add	r7, sp, #8
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800545a:	f7fa ff3b 	bl	80002d4 <HAL_GetTick>
 800545e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b08      	cmp	r3, #8
 800546c:	d10e      	bne.n	800548c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f82a 	bl	80054d6 <UART_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e020      	b.n	80054ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b04      	cmp	r3, #4
 8005498:	d10e      	bne.n	80054b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f814 	bl	80054d6 <UART_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e00a      	b.n	80054ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	4613      	mov	r3, r2
 80054e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e6:	e05d      	b.n	80055a4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ee:	d059      	beq.n	80055a4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f0:	f7fa fef0 	bl	80002d4 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <UART_WaitOnFlagUntilTimeout+0x30>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d11b      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005514:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e042      	b.n	80055c4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d02b      	beq.n	80055a4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800555a:	d123      	bne.n	80055a4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005564:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005574:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e00f      	b.n	80055c4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69da      	ldr	r2, [r3, #28]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d092      	beq.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff fce0 	bl	8004ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fcbd 	bl	8004fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <disk_status+0x30>)
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	79fa      	ldrb	r2, [r7, #7]
 8005698:	4905      	ldr	r1, [pc, #20]	; (80056b0 <disk_status+0x30>)
 800569a:	440a      	add	r2, r1
 800569c:	7a12      	ldrb	r2, [r2, #8]
 800569e:	4610      	mov	r0, r2
 80056a0:	4798      	blx	r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000234 	.word	0x20000234

080056b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	4a0d      	ldr	r2, [pc, #52]	; (80056fc <disk_initialize+0x48>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d111      	bne.n	80056f0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	4a0b      	ldr	r2, [pc, #44]	; (80056fc <disk_initialize+0x48>)
 80056d0:	2101      	movs	r1, #1
 80056d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	4a09      	ldr	r2, [pc, #36]	; (80056fc <disk_initialize+0x48>)
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	79fa      	ldrb	r2, [r7, #7]
 80056e2:	4906      	ldr	r1, [pc, #24]	; (80056fc <disk_initialize+0x48>)
 80056e4:	440a      	add	r2, r1
 80056e6:	7a12      	ldrb	r2, [r2, #8]
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000234 	.word	0x20000234

08005700 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	4a0a      	ldr	r2, [pc, #40]	; (800573c <disk_read+0x3c>)
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	689c      	ldr	r4, [r3, #8]
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	4a07      	ldr	r2, [pc, #28]	; (800573c <disk_read+0x3c>)
 8005720:	4413      	add	r3, r2
 8005722:	7a18      	ldrb	r0, [r3, #8]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	47a0      	blx	r4
 800572c:	4603      	mov	r3, r0
 800572e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005730:	7dfb      	ldrb	r3, [r7, #23]
}
 8005732:	4618      	mov	r0, r3
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	bd90      	pop	{r4, r7, pc}
 800573a:	bf00      	nop
 800573c:	20000234 	.word	0x20000234

08005740 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4603      	mov	r3, r0
 800574e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	4a0a      	ldr	r2, [pc, #40]	; (800577c <disk_write+0x3c>)
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68dc      	ldr	r4, [r3, #12]
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	4a07      	ldr	r2, [pc, #28]	; (800577c <disk_write+0x3c>)
 8005760:	4413      	add	r3, r2
 8005762:	7a18      	ldrb	r0, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	47a0      	blx	r4
 800576c:	4603      	mov	r3, r0
 800576e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd90      	pop	{r4, r7, pc}
 800577a:	bf00      	nop
 800577c:	20000234 	.word	0x20000234

08005780 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	603a      	str	r2, [r7, #0]
 800578a:	71fb      	strb	r3, [r7, #7]
 800578c:	460b      	mov	r3, r1
 800578e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <disk_ioctl+0x38>)
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	4906      	ldr	r1, [pc, #24]	; (80057b8 <disk_ioctl+0x38>)
 80057a0:	440a      	add	r2, r1
 80057a2:	7a10      	ldrb	r0, [r2, #8]
 80057a4:	79b9      	ldrb	r1, [r7, #6]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	4798      	blx	r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20000234 	.word	0x20000234

080057bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80057d0:	e007      	b.n	80057e2 <mem_cpy+0x26>
		*d++ = *s++;
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	1c53      	adds	r3, r2, #1
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	6179      	str	r1, [r7, #20]
 80057de:	7812      	ldrb	r2, [r2, #0]
 80057e0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	1e5a      	subs	r2, r3, #1
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f2      	bne.n	80057d2 <mem_cpy+0x16>
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005808:	e005      	b.n	8005816 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	617a      	str	r2, [r7, #20]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	1e5a      	subs	r2, r3, #1
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f4      	bne.n	800580a <mem_set+0x12>
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800582c:	b480      	push	{r7}
 800582e:	b089      	sub	sp, #36	; 0x24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005844:	bf00      	nop
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	1e5a      	subs	r2, r3, #1
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <mem_cmp+0x40>
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	61fa      	str	r2, [r7, #28]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	61ba      	str	r2, [r7, #24]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	1acb      	subs	r3, r1, r3
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ec      	beq.n	8005846 <mem_cmp+0x1a>
	return r;
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3724      	adds	r7, #36	; 0x24
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005884:	e002      	b.n	800588c <chk_chr+0x12>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3301      	adds	r3, #1
 800588a:	607b      	str	r3, [r7, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <chk_chr+0x26>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	4293      	cmp	r3, r2
 800589e:	d1f2      	bne.n	8005886 <chk_chr+0xc>
	return *str;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	781b      	ldrb	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80058ba:	2300      	movs	r3, #0
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	e038      	b.n	8005936 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80058c4:	4930      	ldr	r1, [pc, #192]	; (8005988 <chk_lock+0xd8>)
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d029      	beq.n	800592c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80058d8:	492b      	ldr	r1, [pc, #172]	; (8005988 <chk_lock+0xd8>)
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4613      	mov	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d11e      	bne.n	8005930 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80058f2:	4925      	ldr	r1, [pc, #148]	; (8005988 <chk_lock+0xd8>)
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	3304      	adds	r3, #4
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800590a:	429a      	cmp	r2, r3
 800590c:	d110      	bne.n	8005930 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800590e:	491e      	ldr	r1, [pc, #120]	; (8005988 <chk_lock+0xd8>)
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	3308      	adds	r3, #8
 800591e:	881a      	ldrh	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005926:	429a      	cmp	r2, r3
 8005928:	d102      	bne.n	8005930 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800592a:	e007      	b.n	800593c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800592c:	2301      	movs	r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d9c3      	bls.n	80058c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d109      	bne.n	8005956 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <chk_lock+0x9e>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d101      	bne.n	8005952 <chk_lock+0xa2>
 800594e:	2300      	movs	r3, #0
 8005950:	e013      	b.n	800597a <chk_lock+0xca>
 8005952:	2312      	movs	r3, #18
 8005954:	e011      	b.n	800597a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <chk_lock+0xc4>
 800595c:	490a      	ldr	r1, [pc, #40]	; (8005988 <chk_lock+0xd8>)
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4613      	mov	r3, r2
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	330a      	adds	r3, #10
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005972:	d101      	bne.n	8005978 <chk_lock+0xc8>
 8005974:	2310      	movs	r3, #16
 8005976:	e000      	b.n	800597a <chk_lock+0xca>
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	2000021c 	.word	0x2000021c

0800598c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005992:	2300      	movs	r3, #0
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	e002      	b.n	800599e <enq_lock+0x12>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3301      	adds	r3, #1
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d809      	bhi.n	80059b8 <enq_lock+0x2c>
 80059a4:	490a      	ldr	r1, [pc, #40]	; (80059d0 <enq_lock+0x44>)
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1ef      	bne.n	8005998 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	2000021c 	.word	0x2000021c

080059d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e02b      	b.n	8005a3c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80059e4:	4956      	ldr	r1, [pc, #344]	; (8005b40 <inc_lock+0x16c>)
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4613      	mov	r3, r2
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d11b      	bne.n	8005a36 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80059fe:	4950      	ldr	r1, [pc, #320]	; (8005b40 <inc_lock+0x16c>)
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d10d      	bne.n	8005a36 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8005a1a:	4949      	ldr	r1, [pc, #292]	; (8005b40 <inc_lock+0x16c>)
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3308      	adds	r3, #8
 8005a2a:	881a      	ldrh	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d006      	beq.n	8005a44 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d9d0      	bls.n	80059e4 <inc_lock+0x10>
 8005a42:	e000      	b.n	8005a46 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8005a44:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d145      	bne.n	8005ad8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	e002      	b.n	8005a58 <inc_lock+0x84>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d809      	bhi.n	8005a72 <inc_lock+0x9e>
 8005a5e:	4938      	ldr	r1, [pc, #224]	; (8005b40 <inc_lock+0x16c>)
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4613      	mov	r3, r2
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1ef      	bne.n	8005a52 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d101      	bne.n	8005a7c <inc_lock+0xa8>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e05a      	b.n	8005b32 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005a82:	482f      	ldr	r0, [pc, #188]	; (8005b40 <inc_lock+0x16c>)
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4403      	add	r3, r0
 8005a90:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005a98:	4829      	ldr	r0, [pc, #164]	; (8005b40 <inc_lock+0x16c>)
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4403      	add	r3, r0
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005ab0:	4923      	ldr	r1, [pc, #140]	; (8005b40 <inc_lock+0x16c>)
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	3308      	adds	r3, #8
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005ac4:	491e      	ldr	r1, [pc, #120]	; (8005b40 <inc_lock+0x16c>)
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	330a      	adds	r3, #10
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00c      	beq.n	8005af8 <inc_lock+0x124>
 8005ade:	4918      	ldr	r1, [pc, #96]	; (8005b40 <inc_lock+0x16c>)
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	330a      	adds	r3, #10
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <inc_lock+0x124>
 8005af4:	2300      	movs	r3, #0
 8005af6:	e01c      	b.n	8005b32 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <inc_lock+0x142>
 8005afe:	4910      	ldr	r1, [pc, #64]	; (8005b40 <inc_lock+0x16c>)
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	330a      	adds	r3, #10
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	b299      	uxth	r1, r3
 8005b14:	e001      	b.n	8005b1a <inc_lock+0x146>
 8005b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b1a:	4809      	ldr	r0, [pc, #36]	; (8005b40 <inc_lock+0x16c>)
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4403      	add	r3, r0
 8005b28:	330a      	adds	r3, #10
 8005b2a:	460a      	mov	r2, r1
 8005b2c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3301      	adds	r3, #1
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	2000021c 	.word	0x2000021c

08005b44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d82e      	bhi.n	8005bb6 <dec_lock+0x72>
		n = Files[i].ctr;
 8005b58:	491b      	ldr	r1, [pc, #108]	; (8005bc8 <dec_lock+0x84>)
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	330a      	adds	r3, #10
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005b6c:	89fb      	ldrh	r3, [r7, #14]
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d101      	bne.n	8005b78 <dec_lock+0x34>
 8005b74:	2300      	movs	r3, #0
 8005b76:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005b78:	89fb      	ldrh	r3, [r7, #14]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <dec_lock+0x40>
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005b84:	4910      	ldr	r1, [pc, #64]	; (8005bc8 <dec_lock+0x84>)
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	330a      	adds	r3, #10
 8005b94:	89fa      	ldrh	r2, [r7, #14]
 8005b96:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005b98:	89fb      	ldrh	r3, [r7, #14]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <dec_lock+0x6c>
 8005b9e:	490a      	ldr	r1, [pc, #40]	; (8005bc8 <dec_lock+0x84>)
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	737b      	strb	r3, [r7, #13]
 8005bb4:	e001      	b.n	8005bba <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005bba:	7b7b      	ldrb	r3, [r7, #13]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	2000021c 	.word	0x2000021c

08005bcc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	e016      	b.n	8005c08 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005bda:	4910      	ldr	r1, [pc, #64]	; (8005c1c <clear_lock+0x50>)
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4613      	mov	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4413      	add	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d108      	bne.n	8005c02 <clear_lock+0x36>
 8005bf0:	490a      	ldr	r1, [pc, #40]	; (8005c1c <clear_lock+0x50>)
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3301      	adds	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d9e5      	bls.n	8005bda <clear_lock+0xe>
	}
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	2000021c 	.word	0x2000021c

08005c20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d038      	beq.n	8005ca8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005c3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	2301      	movs	r3, #1
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	f7ff fd79 	bl	8005740 <disk_write>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e026      	b.n	8005ca8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	1ad2      	subs	r2, r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d218      	bcs.n	8005ca8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e010      	b.n	8005ca2 <sync_window+0x82>
					wsect += fs->fsize;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4413      	add	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	2301      	movs	r3, #1
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	f7ff fd52 	bl	8005740 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d8eb      	bhi.n	8005c80 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d01b      	beq.n	8005d04 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff ffa7 	bl	8005c20 <sync_window>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005cd6:	7bfb      	ldrb	r3, [r7, #15]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d113      	bne.n	8005d04 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	f7ff fd0a 	bl	8005700 <disk_read>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff ff82 	bl	8005c20 <sync_window>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 809b 	bne.w	8005e5e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	f040 8088 	bne.w	8005e44 <sync_fs+0x136>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	f040 8082 	bne.w	8005e44 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d46:	2100      	movs	r1, #0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff fd55 	bl	80057f8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2255      	movs	r2, #85	; 0x55
 8005d52:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	22aa      	movs	r2, #170	; 0xaa
 8005d5a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2252      	movs	r2, #82	; 0x52
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2252      	movs	r2, #82	; 0x52
 8005d68:	705a      	strb	r2, [r3, #1]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2261      	movs	r2, #97	; 0x61
 8005d6e:	709a      	strb	r2, [r3, #2]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2241      	movs	r2, #65	; 0x41
 8005d74:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2272      	movs	r2, #114	; 0x72
 8005d7a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2272      	movs	r2, #114	; 0x72
 8005d82:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2241      	movs	r2, #65	; 0x41
 8005d8a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2261      	movs	r2, #97	; 0x61
 8005d92:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005dce:	0e1b      	lsrs	r3, r3, #24
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005e10:	0e1b      	lsrs	r3, r3, #24
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005e36:	2301      	movs	r3, #1
 8005e38:	f7ff fc82 	bl	8005740 <disk_write>
			fs->fsi_flag = 0;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fc96 	bl	8005780 <disk_ioctl>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	3b02      	subs	r3, #2
 8005e76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e7e:	3b02      	subs	r3, #2
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d301      	bcc.n	8005e8a <clust2sect+0x22>
 8005e86:	2300      	movs	r3, #0
 8005e88:	e00a      	b.n	8005ea0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005e90:	461a      	mov	r2, r3
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	fb03 f202 	mul.w	r2, r3, r2
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005e9e:	4413      	add	r3, r2
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d905      	bls.n	8005ec8 <get_fat+0x1c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <get_fat+0x22>
		val = 1;	/* Internal error */
 8005ec8:	2301      	movs	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e0a0      	b.n	8006010 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ed2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d044      	beq.n	8005f68 <get_fat+0xbc>
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d063      	beq.n	8005faa <get_fat+0xfe>
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	f040 808a 	bne.w	8005ffc <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	0a5b      	lsrs	r3, r3, #9
 8005f00:	4413      	add	r3, r2
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff fed4 	bl	8005cb2 <move_window>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d178      	bne.n	8006002 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	60fa      	str	r2, [r7, #12]
 8005f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	5cd3      	ldrb	r3, [r2, r3]
 8005f1e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	0a5b      	lsrs	r3, r3, #9
 8005f2a:	4413      	add	r3, r2
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff febf 	bl	8005cb2 <move_window>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d165      	bne.n	8006006 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	5cd3      	ldrb	r3, [r2, r3]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	461a      	mov	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <get_fat+0xb2>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	e002      	b.n	8005f64 <get_fat+0xb8>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f64:	617b      	str	r3, [r7, #20]
			break;
 8005f66:	e053      	b.n	8006010 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	4413      	add	r3, r2
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fe9b 	bl	8005cb2 <move_window>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d143      	bne.n	800600a <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	3301      	adds	r3, #1
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	b21a      	sxth	r2, r3
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	b21b      	sxth	r3, r3
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	b21b      	sxth	r3, r3
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	617b      	str	r3, [r7, #20]
			break;
 8005fa8:	e032      	b.n	8006010 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	09db      	lsrs	r3, r3, #7
 8005fb4:	4413      	add	r3, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fe7a 	bl	8005cb2 <move_window>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d124      	bne.n	800600e <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	4413      	add	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3303      	adds	r3, #3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	061a      	lsls	r2, r3, #24
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3302      	adds	r3, #2
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	3201      	adds	r2, #1
 8005fe8:	7812      	ldrb	r2, [r2, #0]
 8005fea:	0212      	lsls	r2, r2, #8
 8005fec:	4313      	orrs	r3, r2
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ff8:	617b      	str	r3, [r7, #20]
			break;
 8005ffa:	e009      	b.n	8006010 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e006      	b.n	8006010 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006002:	bf00      	nop
 8006004:	e004      	b.n	8006010 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800600e:	bf00      	nop
		}
	}

	return val;
 8006010:	697b      	ldr	r3, [r7, #20]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b088      	sub	sp, #32
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d905      	bls.n	8006038 <put_fat+0x1e>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <put_fat+0x24>
		res = FR_INT_ERR;
 8006038:	2302      	movs	r3, #2
 800603a:	77fb      	strb	r3, [r7, #31]
 800603c:	e0f3      	b.n	8006226 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006044:	2b02      	cmp	r3, #2
 8006046:	d074      	beq.n	8006132 <put_fat+0x118>
 8006048:	2b03      	cmp	r3, #3
 800604a:	f000 8099 	beq.w	8006180 <put_fat+0x166>
 800604e:	2b01      	cmp	r3, #1
 8006050:	f040 80df 	bne.w	8006212 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	0a5b      	lsrs	r3, r3, #9
 800606c:	4413      	add	r3, r2
 800606e:	4619      	mov	r1, r3
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff fe1e 	bl	8005cb2 <move_window>
 8006076:	4603      	mov	r3, r0
 8006078:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800607a:	7ffb      	ldrb	r3, [r7, #31]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 80cb 	bne.w	8006218 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	617a      	str	r2, [r7, #20]
 8006088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00d      	beq.n	80060b8 <put_fat+0x9e>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	b25a      	sxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	4313      	orrs	r3, r2
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e001      	b.n	80060bc <put_fat+0xa2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	0a5b      	lsrs	r3, r3, #9
 80060d2:	4413      	add	r3, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fdeb 	bl	8005cb2 <move_window>
 80060dc:	4603      	mov	r3, r0
 80060de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060e0:	7ffb      	ldrb	r3, [r7, #31]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 809a 	bne.w	800621c <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <put_fat+0xec>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	b2db      	uxtb	r3, r3
 8006104:	e00e      	b.n	8006124 <put_fat+0x10a>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	b25b      	sxtb	r3, r3
 800610c:	f023 030f 	bic.w	r3, r3, #15
 8006110:	b25a      	sxtb	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	0a1b      	lsrs	r3, r3, #8
 8006116:	b25b      	sxtb	r3, r3
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	b25b      	sxtb	r3, r3
 800611e:	4313      	orrs	r3, r2
 8006120:	b25b      	sxtb	r3, r3
 8006122:	b2db      	uxtb	r3, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006130:	e079      	b.n	8006226 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	0a1b      	lsrs	r3, r3, #8
 800613c:	4413      	add	r3, r2
 800613e:	4619      	mov	r1, r3
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff fdb6 	bl	8005cb2 <move_window>
 8006146:	4603      	mov	r3, r0
 8006148:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800614a:	7ffb      	ldrb	r3, [r7, #31]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d167      	bne.n	8006220 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	b29b      	uxth	r3, r3
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	b29a      	uxth	r2, r3
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	3301      	adds	r3, #1
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800617e:	e052      	b.n	8006226 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	09db      	lsrs	r3, r3, #7
 800618a:	4413      	add	r3, r2
 800618c:	4619      	mov	r1, r3
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fd8f 	bl	8005cb2 <move_window>
 8006194:	4603      	mov	r3, r0
 8006196:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006198:	7ffb      	ldrb	r3, [r7, #31]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d142      	bne.n	8006224 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	3303      	adds	r3, #3
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	061a      	lsls	r2, r3, #24
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	3302      	adds	r3, #2
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	4313      	orrs	r3, r2
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	3201      	adds	r2, #1
 80061c2:	7812      	ldrb	r2, [r2, #0]
 80061c4:	0212      	lsls	r2, r2, #8
 80061c6:	4313      	orrs	r3, r2
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	0a1b      	lsrs	r3, r3, #8
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	3301      	adds	r3, #1
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0c1a      	lsrs	r2, r3, #16
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	3302      	adds	r3, #2
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	0e1a      	lsrs	r2, r3, #24
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	3303      	adds	r3, #3
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006210:	e009      	b.n	8006226 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8006212:	2302      	movs	r3, #2
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e006      	b.n	8006226 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006218:	bf00      	nop
 800621a:	e004      	b.n	8006226 <put_fat+0x20c>
			if (res != FR_OK) break;
 800621c:	bf00      	nop
 800621e:	e002      	b.n	8006226 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006220:	bf00      	nop
 8006222:	e000      	b.n	8006226 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006224:	bf00      	nop
		}
	}

	return res;
 8006226:	7ffb      	ldrb	r3, [r7, #31]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3720      	adds	r7, #32
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d905      	bls.n	800624c <remove_chain+0x1c>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d302      	bcc.n	8006252 <remove_chain+0x22>
		res = FR_INT_ERR;
 800624c:	2302      	movs	r3, #2
 800624e:	73fb      	strb	r3, [r7, #15]
 8006250:	e043      	b.n	80062da <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006256:	e036      	b.n	80062c6 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fe26 	bl	8005eac <get_fat>
 8006260:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d035      	beq.n	80062d4 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d102      	bne.n	8006274 <remove_chain+0x44>
 800626e:	2302      	movs	r3, #2
 8006270:	73fb      	strb	r3, [r7, #15]
 8006272:	e032      	b.n	80062da <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800627a:	d102      	bne.n	8006282 <remove_chain+0x52>
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
 8006280:	e02b      	b.n	80062da <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006282:	2200      	movs	r2, #0
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fec7 	bl	800601a <put_fat>
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d120      	bne.n	80062d8 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a0:	d00f      	beq.n	80062c2 <remove_chain+0x92>
				fs->free_clust++;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d3c2      	bcc.n	8006258 <remove_chain+0x28>
 80062d2:	e002      	b.n	80062da <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80062d4:	bf00      	nop
 80062d6:	e000      	b.n	80062da <remove_chain+0xaa>
			if (res != FR_OK) break;
 80062d8:	bf00      	nop
		}
	}

	return res;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10f      	bne.n	8006314 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80062fa:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <create_chain+0x2a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	429a      	cmp	r2, r3
 800630c:	d31c      	bcc.n	8006348 <create_chain+0x64>
 800630e:	2301      	movs	r3, #1
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	e019      	b.n	8006348 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fdc8 	bl	8005eac <get_fat>
 800631c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d801      	bhi.n	8006328 <create_chain+0x44>
 8006324:	2301      	movs	r3, #1
 8006326:	e076      	b.n	8006416 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632e:	d101      	bne.n	8006334 <create_chain+0x50>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	e070      	b.n	8006416 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	429a      	cmp	r2, r3
 800633e:	d201      	bcs.n	8006344 <create_chain+0x60>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	e068      	b.n	8006416 <create_chain+0x132>
		scl = clst;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	3301      	adds	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	429a      	cmp	r2, r3
 800635c:	d307      	bcc.n	800636e <create_chain+0x8a>
			ncl = 2;
 800635e:	2302      	movs	r3, #2
 8006360:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	429a      	cmp	r2, r3
 8006368:	d901      	bls.n	800636e <create_chain+0x8a>
 800636a:	2300      	movs	r3, #0
 800636c:	e053      	b.n	8006416 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff fd9b 	bl	8005eac <get_fat>
 8006376:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00e      	beq.n	800639c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006384:	d002      	beq.n	800638c <create_chain+0xa8>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <create_chain+0xac>
			return cs;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	e042      	b.n	8006416 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	429a      	cmp	r2, r3
 8006396:	d1d9      	bne.n	800634c <create_chain+0x68>
 8006398:	2300      	movs	r3, #0
 800639a:	e03c      	b.n	8006416 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800639c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800639e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff fe38 	bl	800601a <put_fat>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <create_chain+0xe4>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fe2b 	bl	800601a <put_fat>
 80063c4:	4603      	mov	r3, r0
 80063c6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d11a      	bne.n	8006404 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e0:	d018      	beq.n	8006414 <create_chain+0x130>
			fs->free_clust--;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80063e8:	1e5a      	subs	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8006402:	e007      	b.n	8006414 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d102      	bne.n	8006410 <create_chain+0x12c>
 800640a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800640e:	e000      	b.n	8006412 <create_chain+0x12e>
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006414:	697b      	ldr	r3, [r7, #20]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800642e:	3304      	adds	r3, #4
 8006430:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	0a5b      	lsrs	r3, r3, #9
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800643c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006440:	fbb3 f3f2 	udiv	r3, r3, r2
 8006444:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1d1a      	adds	r2, r3, #4
 800644a:	613a      	str	r2, [r7, #16]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <clmt_clust+0x3c>
 8006456:	2300      	movs	r3, #0
 8006458:	e010      	b.n	800647c <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	429a      	cmp	r2, r3
 8006460:	d307      	bcc.n	8006472 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	3304      	adds	r3, #4
 800646e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006470:	e7e9      	b.n	8006446 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006472:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	4413      	add	r3, r2
}
 800647c:	4618      	mov	r0, r3
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80064a2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d007      	beq.n	80064ba <dir_sdi+0x32>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d301      	bcc.n	80064be <dir_sdi+0x36>
		return FR_INT_ERR;
 80064ba:	2302      	movs	r3, #2
 80064bc:	e074      	b.n	80065a8 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10c      	bne.n	80064de <dir_sdi+0x56>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d105      	bne.n	80064de <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064d8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80064dc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d111      	bne.n	8006508 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064ea:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80064ee:	461a      	mov	r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d301      	bcc.n	80064fa <dir_sdi+0x72>
			return FR_INT_ERR;
 80064f6:	2302      	movs	r3, #2
 80064f8:	e056      	b.n	80065a8 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006500:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	e032      	b.n	800656e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800650e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006516:	e01e      	b.n	8006556 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800651e:	6979      	ldr	r1, [r7, #20]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fcc3 	bl	8005eac <get_fat>
 8006526:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652e:	d101      	bne.n	8006534 <dir_sdi+0xac>
 8006530:	2301      	movs	r3, #1
 8006532:	e039      	b.n	80065a8 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d907      	bls.n	800654a <dir_sdi+0xc2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006540:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	429a      	cmp	r2, r3
 8006548:	d301      	bcc.n	800654e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800654a:	2302      	movs	r3, #2
 800654c:	e02c      	b.n	80065a8 <dir_sdi+0x120>
			idx -= ic;
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	429a      	cmp	r2, r3
 800655c:	d2dc      	bcs.n	8006518 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006564:	6979      	ldr	r1, [r7, #20]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fc7e 	bl	8005e68 <clust2sect>
 800656c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <dir_sdi+0xf8>
 800657c:	2302      	movs	r3, #2
 800657e:	e013      	b.n	80065a8 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	091a      	lsrs	r2, r3, #4
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	441a      	add	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006594:	461a      	mov	r2, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f003 030f 	and.w	r3, r3, #15
 800659c:	015b      	lsls	r3, r3, #5
 800659e:	441a      	add	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80065c0:	3301      	adds	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <dir_next+0x26>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <dir_next+0x2a>
		return FR_NO_FILE;
 80065d6:	2304      	movs	r3, #4
 80065d8:	e0dd      	b.n	8006796 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 80c6 	bne.w	8006772 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10b      	bne.n	8006616 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006604:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006608:	461a      	mov	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4293      	cmp	r3, r2
 800660e:	f0c0 80b0 	bcc.w	8006772 <dir_next+0x1c2>
				return FR_NO_FILE;
 8006612:	2304      	movs	r3, #4
 8006614:	e0bf      	b.n	8006796 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006620:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006624:	3a01      	subs	r2, #1
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 80a2 	bne.w	8006772 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7ff fc35 	bl	8005eac <get_fat>
 8006642:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d801      	bhi.n	800664e <dir_next+0x9e>
 800664a:	2302      	movs	r3, #2
 800664c:	e0a3      	b.n	8006796 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006654:	d101      	bne.n	800665a <dir_next+0xaa>
 8006656:	2301      	movs	r3, #1
 8006658:	e09d      	b.n	8006796 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006660:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	429a      	cmp	r2, r3
 8006668:	d374      	bcc.n	8006754 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <dir_next+0xc4>
 8006670:	2304      	movs	r3, #4
 8006672:	e090      	b.n	8006796 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f7ff fe2e 	bl	80062e4 <create_chain>
 8006688:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <dir_next+0xe4>
 8006690:	2307      	movs	r3, #7
 8006692:	e080      	b.n	8006796 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <dir_next+0xee>
 800669a:	2302      	movs	r3, #2
 800669c:	e07b      	b.n	8006796 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a4:	d101      	bne.n	80066aa <dir_next+0xfa>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e075      	b.n	8006796 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fab5 	bl	8005c20 <sync_window>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <dir_next+0x110>
 80066bc:	2301      	movs	r3, #1
 80066be:	e06a      	b.n	8006796 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff f893 	bl	80057f8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80066de:	6979      	ldr	r1, [r7, #20]
 80066e0:	4610      	mov	r0, r2
 80066e2:	f7ff fbc1 	bl	8005e68 <clust2sect>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80066ec:	2300      	movs	r3, #0
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	e01b      	b.n	800672a <dir_next+0x17a>
						dp->fs->wflag = 1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fa8b 	bl	8005c20 <sync_window>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <dir_next+0x164>
 8006710:	2301      	movs	r3, #1
 8006712:	e040      	b.n	8006796 <dir_next+0x1e6>
						dp->fs->winsect++;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800671a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800671e:	3201      	adds	r2, #1
 8006720:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	3301      	adds	r3, #1
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006730:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006734:	461a      	mov	r2, r3
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4293      	cmp	r3, r2
 800673a:	d3da      	bcc.n	80066f2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006742:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	1a8a      	subs	r2, r1, r2
 8006750:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006762:	6979      	ldr	r1, [r7, #20]
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fb7f 	bl	8005e68 <clust2sect>
 800676a:	4602      	mov	r2, r0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	b29a      	uxth	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006782:	461a      	mov	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	015b      	lsls	r3, r3, #5
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd90      	pop	{r4, r7, pc}

0800679e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80067a8:	2100      	movs	r1, #0
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff fe6c 	bl	8006488 <dir_sdi>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d131      	bne.n	800681e <dir_alloc+0x80>
		n = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7ff fa70 	bl	8005cb2 <move_window>
 80067d2:	4603      	mov	r3, r0
 80067d4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11f      	bne.n	800681c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2be5      	cmp	r3, #229	; 0xe5
 80067e6:	d005      	beq.n	80067f4 <dir_alloc+0x56>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d107      	bne.n	8006804 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	3301      	adds	r3, #1
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d102      	bne.n	8006808 <dir_alloc+0x6a>
 8006802:	e00c      	b.n	800681e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006804:	2300      	movs	r3, #0
 8006806:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006808:	2101      	movs	r1, #1
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff fed0 	bl	80065b0 <dir_next>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0d1      	beq.n	80067be <dir_alloc+0x20>
 800681a:	e000      	b.n	800681e <dir_alloc+0x80>
			if (res != FR_OK) break;
 800681c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800681e:	7bfb      	ldrb	r3, [r7, #15]
 8006820:	2b04      	cmp	r3, #4
 8006822:	d101      	bne.n	8006828 <dir_alloc+0x8a>
 8006824:	2307      	movs	r3, #7
 8006826:	73fb      	strb	r3, [r7, #15]
	return res;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	331b      	adds	r3, #27
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	b21a      	sxth	r2, r3
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	331a      	adds	r3, #26
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	b21b      	sxth	r3, r3
 800684e:	4313      	orrs	r3, r2
 8006850:	b21b      	sxth	r3, r3
 8006852:	b29b      	uxth	r3, r3
 8006854:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800685c:	2b03      	cmp	r3, #3
 800685e:	d10f      	bne.n	8006880 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	3315      	adds	r3, #21
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	b21a      	sxth	r2, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	3314      	adds	r3, #20
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	b21b      	sxth	r3, r3
 8006872:	4313      	orrs	r3, r2
 8006874:	b21b      	sxth	r3, r3
 8006876:	b29b      	uxth	r3, r3
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]

	return cl;
 8006880:	68fb      	ldr	r3, [r7, #12]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	331a      	adds	r3, #26
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	0a1b      	lsrs	r3, r3, #8
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	331b      	adds	r3, #27
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	0c1a      	lsrs	r2, r3, #16
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	3314      	adds	r3, #20
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	0c1b      	lsrs	r3, r3, #16
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	0a1b      	lsrs	r3, r3, #8
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3315      	adds	r3, #21
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068e4:	2100      	movs	r1, #0
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fdce 	bl	8006488 <dir_sdi>
 80068ec:	4603      	mov	r3, r0
 80068ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <dir_find+0x1e>
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	e03b      	b.n	8006972 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f7ff f9d2 	bl	8005cb2 <move_window>
 800690e:	4603      	mov	r3, r0
 8006910:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d128      	bne.n	800696a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800691e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d102      	bne.n	8006932 <dir_find+0x56>
 800692c:	2304      	movs	r3, #4
 800692e:	75fb      	strb	r3, [r7, #23]
 8006930:	e01e      	b.n	8006970 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	330b      	adds	r3, #11
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <dir_find+0x7a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006946:	220b      	movs	r2, #11
 8006948:	4619      	mov	r1, r3
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f7fe ff6e 	bl	800582c <mem_cmp>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006956:	2100      	movs	r1, #0
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fe29 	bl	80065b0 <dir_next>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0c8      	beq.n	80068fa <dir_find+0x1e>
 8006968:	e002      	b.n	8006970 <dir_find+0x94>
		if (res != FR_OK) break;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <dir_find+0x94>
			break;
 800696e:	bf00      	nop

	return res;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006982:	2101      	movs	r1, #1
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff0a 	bl	800679e <dir_alloc>
 800698a:	4603      	mov	r3, r0
 800698c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800698e:	7bfb      	ldrb	r3, [r7, #15]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d126      	bne.n	80069e2 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7ff f985 	bl	8005cb2 <move_window>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d117      	bne.n	80069e2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069b8:	2220      	movs	r2, #32
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe ff1b 	bl	80057f8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069ce:	220b      	movs	r2, #11
 80069d0:	4619      	mov	r1, r3
 80069d2:	f7fe fef3 	bl	80057bc <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	3309      	adds	r3, #9
 80069fa:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d05a      	beq.n	8006abc <get_fileinfo+0xd0>
		dir = dp->dir;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a0c:	60bb      	str	r3, [r7, #8]
		i = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8006a12:	e01c      	b.n	8006a4e <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	617a      	str	r2, [r7, #20]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d100      	bne.n	8006a2a <get_fileinfo+0x3e>
 8006a28:	e011      	b.n	8006a4e <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d101      	bne.n	8006a34 <get_fileinfo+0x48>
 8006a30:	23e5      	movs	r3, #229	; 0xe5
 8006a32:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d104      	bne.n	8006a44 <get_fileinfo+0x58>
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	613a      	str	r2, [r7, #16]
 8006a40:	222e      	movs	r2, #46	; 0x2e
 8006a42:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	613a      	str	r2, [r7, #16]
 8006a4a:	7bfa      	ldrb	r2, [r7, #15]
 8006a4c:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b0a      	cmp	r3, #10
 8006a52:	d9df      	bls.n	8006a14 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	7ada      	ldrb	r2, [r3, #11]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	331f      	adds	r3, #31
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	061a      	lsls	r2, r3, #24
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	331e      	adds	r3, #30
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	321d      	adds	r2, #29
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	0212      	lsls	r2, r2, #8
 8006a76:	4313      	orrs	r3, r2
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	321c      	adds	r2, #28
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	3319      	adds	r3, #25
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	b21a      	sxth	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	3318      	adds	r3, #24
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b21b      	sxth	r3, r3
 8006a96:	4313      	orrs	r3, r2
 8006a98:	b21b      	sxth	r3, r3
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	3317      	adds	r3, #23
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	b21a      	sxth	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	3316      	adds	r3, #22
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b21b      	sxth	r3, r3
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e002      	b.n	8006ae8 <create_name+0x18>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b2f      	cmp	r3, #47	; 0x2f
 8006aee:	d0f8      	beq.n	8006ae2 <create_name+0x12>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b5c      	cmp	r3, #92	; 0x5c
 8006af6:	d0f4      	beq.n	8006ae2 <create_name+0x12>
	sfn = dp->fn;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006afe:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006b00:	220b      	movs	r2, #11
 8006b02:	2120      	movs	r1, #32
 8006b04:	68b8      	ldr	r0, [r7, #8]
 8006b06:	f7fe fe77 	bl	80057f8 <mem_set>
	si = i = b = 0; ni = 8;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	2308      	movs	r3, #8
 8006b18:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	617a      	str	r2, [r7, #20]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006b28:	7fbb      	ldrb	r3, [r7, #30]
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d953      	bls.n	8006bd6 <create_name+0x106>
 8006b2e:	7fbb      	ldrb	r3, [r7, #30]
 8006b30:	2b2f      	cmp	r3, #47	; 0x2f
 8006b32:	d050      	beq.n	8006bd6 <create_name+0x106>
 8006b34:	7fbb      	ldrb	r3, [r7, #30]
 8006b36:	2b5c      	cmp	r3, #92	; 0x5c
 8006b38:	d04d      	beq.n	8006bd6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8006b3a:	7fbb      	ldrb	r3, [r7, #30]
 8006b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3e:	d003      	beq.n	8006b48 <create_name+0x78>
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d30f      	bcc.n	8006b68 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d102      	bne.n	8006b54 <create_name+0x84>
 8006b4e:	7fbb      	ldrb	r3, [r7, #30]
 8006b50:	2b2e      	cmp	r3, #46	; 0x2e
 8006b52:	d001      	beq.n	8006b58 <create_name+0x88>
 8006b54:	2306      	movs	r3, #6
 8006b56:	e073      	b.n	8006c40 <create_name+0x170>
			i = 8; ni = 11;
 8006b58:	2308      	movs	r3, #8
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	230b      	movs	r3, #11
 8006b5e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006b60:	7ffb      	ldrb	r3, [r7, #31]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	77fb      	strb	r3, [r7, #31]
 8006b66:	e035      	b.n	8006bd4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006b68:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	da08      	bge.n	8006b82 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006b70:	7ffb      	ldrb	r3, [r7, #31]
 8006b72:	f043 0303 	orr.w	r3, r3, #3
 8006b76:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006b78:	7fbb      	ldrb	r3, [r7, #30]
 8006b7a:	3b80      	subs	r3, #128	; 0x80
 8006b7c:	4a32      	ldr	r2, [pc, #200]	; (8006c48 <create_name+0x178>)
 8006b7e:	5cd3      	ldrb	r3, [r2, r3]
 8006b80:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8006b82:	7fbb      	ldrb	r3, [r7, #30]
 8006b84:	4619      	mov	r1, r3
 8006b86:	4831      	ldr	r0, [pc, #196]	; (8006c4c <create_name+0x17c>)
 8006b88:	f7fe fe77 	bl	800587a <chk_chr>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <create_name+0xc6>
				return FR_INVALID_NAME;
 8006b92:	2306      	movs	r3, #6
 8006b94:	e054      	b.n	8006c40 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006b96:	7fbb      	ldrb	r3, [r7, #30]
 8006b98:	2b40      	cmp	r3, #64	; 0x40
 8006b9a:	d907      	bls.n	8006bac <create_name+0xdc>
 8006b9c:	7fbb      	ldrb	r3, [r7, #30]
 8006b9e:	2b5a      	cmp	r3, #90	; 0x5a
 8006ba0:	d804      	bhi.n	8006bac <create_name+0xdc>
				b |= 2;
 8006ba2:	7ffb      	ldrb	r3, [r7, #31]
 8006ba4:	f043 0302 	orr.w	r3, r3, #2
 8006ba8:	77fb      	strb	r3, [r7, #31]
 8006baa:	e00c      	b.n	8006bc6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006bac:	7fbb      	ldrb	r3, [r7, #30]
 8006bae:	2b60      	cmp	r3, #96	; 0x60
 8006bb0:	d909      	bls.n	8006bc6 <create_name+0xf6>
 8006bb2:	7fbb      	ldrb	r3, [r7, #30]
 8006bb4:	2b7a      	cmp	r3, #122	; 0x7a
 8006bb6:	d806      	bhi.n	8006bc6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8006bb8:	7ffb      	ldrb	r3, [r7, #31]
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	7fbb      	ldrb	r3, [r7, #30]
 8006bc2:	3b20      	subs	r3, #32
 8006bc4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	613a      	str	r2, [r7, #16]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	4413      	add	r3, r2
 8006bd0:	7fba      	ldrb	r2, [r7, #30]
 8006bd2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006bd4:	e7a1      	b.n	8006b1a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	441a      	add	r2, r3
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006be0:	7fbb      	ldrb	r3, [r7, #30]
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d801      	bhi.n	8006bea <create_name+0x11a>
 8006be6:	2304      	movs	r3, #4
 8006be8:	e000      	b.n	8006bec <create_name+0x11c>
 8006bea:	2300      	movs	r3, #0
 8006bec:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <create_name+0x128>
 8006bf4:	2306      	movs	r3, #6
 8006bf6:	e023      	b.n	8006c40 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2be5      	cmp	r3, #229	; 0xe5
 8006bfe:	d102      	bne.n	8006c06 <create_name+0x136>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2205      	movs	r2, #5
 8006c04:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d102      	bne.n	8006c12 <create_name+0x142>
 8006c0c:	7ffb      	ldrb	r3, [r7, #31]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006c12:	7ffb      	ldrb	r3, [r7, #31]
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d103      	bne.n	8006c24 <create_name+0x154>
 8006c1c:	7fbb      	ldrb	r3, [r7, #30]
 8006c1e:	f043 0310 	orr.w	r3, r3, #16
 8006c22:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006c24:	7ffb      	ldrb	r3, [r7, #31]
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d103      	bne.n	8006c36 <create_name+0x166>
 8006c2e:	7fbb      	ldrb	r3, [r7, #30]
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	330b      	adds	r3, #11
 8006c3a:	7fba      	ldrb	r2, [r7, #30]
 8006c3c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006c3e:	2300      	movs	r3, #0
#endif
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	0800b0ec 	.word	0x0800b0ec
 8006c4c:	0800af6c 	.word	0x0800af6c

08006c50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8006c60:	d003      	beq.n	8006c6a <follow_path+0x1a>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b5c      	cmp	r3, #92	; 0x5c
 8006c68:	d102      	bne.n	8006c70 <follow_path+0x20>
		path++;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b1f      	cmp	r3, #31
 8006c7e:	d80a      	bhi.n	8006c96 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fc00 	bl	8006488 <dir_sdi>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006c94:	e045      	b.n	8006d22 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c96:	463b      	mov	r3, r7
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff ff18 	bl	8006ad0 <create_name>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d136      	bne.n	8006d18 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff fe16 	bl	80068dc <dir_find>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006cba:	7adb      	ldrb	r3, [r3, #11]
 8006cbc:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d128      	bne.n	8006d1c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d123      	bne.n	8006d1c <follow_path+0xcc>
 8006cd4:	2305      	movs	r3, #5
 8006cd6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006cd8:	e020      	b.n	8006d1c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006cda:	7bbb      	ldrb	r3, [r7, #14]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11d      	bne.n	8006d20 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cea:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	330b      	adds	r3, #11
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006cfa:	2305      	movs	r3, #5
 8006cfc:	73fb      	strb	r3, [r7, #15]
 8006cfe:	e010      	b.n	8006d22 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fd92 	bl	8006832 <ld_clust>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d16:	e7be      	b.n	8006c96 <follow_path+0x46>
			if (res != FR_OK) break;
 8006d18:	bf00      	nop
 8006d1a:	e002      	b.n	8006d22 <follow_path+0xd2>
				break;
 8006d1c:	bf00      	nop
 8006d1e:	e000      	b.n	8006d22 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d20:	bf00      	nop
		}
	}

	return res;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d38:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d031      	beq.n	8006da6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e002      	b.n	8006d50 <get_ldnumber+0x24>
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d903      	bls.n	8006d60 <get_ldnumber+0x34>
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b3a      	cmp	r3, #58	; 0x3a
 8006d5e:	d1f4      	bne.n	8006d4a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b3a      	cmp	r3, #58	; 0x3a
 8006d66:	d11c      	bne.n	8006da2 <get_ldnumber+0x76>
			tp = *path;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	60fa      	str	r2, [r7, #12]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	3b30      	subs	r3, #48	; 0x30
 8006d78:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b09      	cmp	r3, #9
 8006d7e:	d80e      	bhi.n	8006d9e <get_ldnumber+0x72>
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d10a      	bne.n	8006d9e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d107      	bne.n	8006d9e <get_ldnumber+0x72>
					vol = (int)i;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	3301      	adds	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	e002      	b.n	8006da8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006da6:	693b      	ldr	r3, [r7, #16]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dcc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fe ff6d 	bl	8005cb2 <move_window>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <check_fs+0x2e>
		return 3;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e04a      	b.n	8006e78 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006de8:	3301      	adds	r3, #1
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	b21a      	sxth	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	b21b      	sxth	r3, r3
 8006dfc:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <check_fs+0xcc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d001      	beq.n	8006e06 <check_fs+0x52>
		return 2;
 8006e02:	2302      	movs	r3, #2
 8006e04:	e038      	b.n	8006e78 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3336      	adds	r3, #54	; 0x36
 8006e0a:	3303      	adds	r3, #3
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	061a      	lsls	r2, r3, #24
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3336      	adds	r3, #54	; 0x36
 8006e14:	3302      	adds	r3, #2
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	041b      	lsls	r3, r3, #16
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	3236      	adds	r2, #54	; 0x36
 8006e20:	3201      	adds	r2, #1
 8006e22:	7812      	ldrb	r2, [r2, #0]
 8006e24:	0212      	lsls	r2, r2, #8
 8006e26:	4313      	orrs	r3, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e34:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <check_fs+0xd0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d101      	bne.n	8006e3e <check_fs+0x8a>
		return 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e01c      	b.n	8006e78 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3352      	adds	r3, #82	; 0x52
 8006e42:	3303      	adds	r3, #3
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	061a      	lsls	r2, r3, #24
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3352      	adds	r3, #82	; 0x52
 8006e4c:	3302      	adds	r3, #2
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	4313      	orrs	r3, r2
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	3252      	adds	r2, #82	; 0x52
 8006e58:	3201      	adds	r2, #1
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	0212      	lsls	r2, r2, #8
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e6c:	4a05      	ldr	r2, [pc, #20]	; (8006e84 <check_fs+0xd0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d101      	bne.n	8006e76 <check_fs+0xc2>
		return 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e000      	b.n	8006e78 <check_fs+0xc4>

	return 1;
 8006e76:	2301      	movs	r3, #1
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	ffffaa55 	.word	0xffffaa55
 8006e84:	00544146 	.word	0x00544146

08006e88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b096      	sub	sp, #88	; 0x58
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	4613      	mov	r3, r2
 8006e94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006e9c:	68b8      	ldr	r0, [r7, #8]
 8006e9e:	f7ff ff45 	bl	8006d2c <get_ldnumber>
 8006ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	da01      	bge.n	8006eae <find_volume+0x26>
 8006eaa:	230b      	movs	r3, #11
 8006eac:	e2aa      	b.n	8007404 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006eae:	4a9e      	ldr	r2, [pc, #632]	; (8007128 <find_volume+0x2a0>)
 8006eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <find_volume+0x3a>
 8006ebe:	230c      	movs	r3, #12
 8006ec0:	e2a0      	b.n	8007404 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01b      	beq.n	8006f0a <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fbd1 	bl	8005680 <disk_status>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10c      	bne.n	8006f0a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <find_volume+0x7e>
 8006ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006efa:	f003 0304 	and.w	r3, r3, #4
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006f02:	230a      	movs	r3, #10
 8006f04:	e27e      	b.n	8007404 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8006f06:	2300      	movs	r3, #0
 8006f08:	e27c      	b.n	8007404 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fbc6 	bl	80056b4 <disk_initialize>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e262      	b.n	8007404 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <find_volume+0xcc>
 8006f44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006f50:	230a      	movs	r3, #10
 8006f52:	e257      	b.n	8007404 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006f58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f5a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f5c:	f7ff ff2a 	bl	8006db4 <check_fs>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d155      	bne.n	800701a <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006f6e:	2300      	movs	r3, #0
 8006f70:	643b      	str	r3, [r7, #64]	; 0x40
 8006f72:	e029      	b.n	8006fc8 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006f7e:	4413      	add	r3, r2
 8006f80:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	3304      	adds	r3, #4
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d012      	beq.n	8006fb2 <find_volume+0x12a>
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	330b      	adds	r3, #11
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	061a      	lsls	r2, r3, #24
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	330a      	adds	r3, #10
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa0:	3209      	adds	r2, #9
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	0212      	lsls	r2, r2, #8
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006faa:	3208      	adds	r2, #8
 8006fac:	7812      	ldrb	r2, [r2, #0]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	e000      	b.n	8006fb4 <find_volume+0x12c>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006fbc:	440b      	add	r3, r1
 8006fbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d9d2      	bls.n	8006f74 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006fce:	2300      	movs	r3, #0
 8006fd0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <find_volume+0x156>
 8006fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006fec:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <find_volume+0x178>
 8006ff4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ff6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ff8:	f7ff fedc 	bl	8006db4 <check_fs>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	e000      	b.n	8007002 <find_volume+0x17a>
 8007000:	2302      	movs	r3, #2
 8007002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007006:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <find_volume+0x192>
 800700e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007010:	3301      	adds	r3, #1
 8007012:	643b      	str	r3, [r7, #64]	; 0x40
 8007014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007016:	2b03      	cmp	r3, #3
 8007018:	d9e1      	bls.n	8006fde <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800701a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800701e:	2b03      	cmp	r3, #3
 8007020:	d101      	bne.n	8007026 <find_volume+0x19e>
 8007022:	2301      	movs	r3, #1
 8007024:	e1ee      	b.n	8007404 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007026:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <find_volume+0x1aa>
 800702e:	230d      	movs	r3, #13
 8007030:	e1e8      	b.n	8007404 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	7b1b      	ldrb	r3, [r3, #12]
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	b21a      	sxth	r2, r3
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	7adb      	ldrb	r3, [r3, #11]
 800703e:	b21b      	sxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b21b      	sxth	r3, r3
 8007044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007048:	d001      	beq.n	800704e <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800704a:	230d      	movs	r3, #13
 800704c:	e1da      	b.n	8007404 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	7ddb      	ldrb	r3, [r3, #23]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	b21a      	sxth	r2, r3
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	7d9b      	ldrb	r3, [r3, #22]
 800705a:	b21b      	sxth	r3, r3
 800705c:	4313      	orrs	r3, r2
 800705e:	b21b      	sxth	r3, r3
 8007060:	b29b      	uxth	r3, r3
 8007062:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d112      	bne.n	8007090 <find_volume+0x208>
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007070:	061a      	lsls	r2, r3, #24
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	4313      	orrs	r3, r2
 800707c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800707e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007082:	0212      	lsls	r2, r2, #8
 8007084:	4313      	orrs	r3, r2
 8007086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007088:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800708c:	4313      	orrs	r3, r2
 800708e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007094:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709a:	7c1a      	ldrb	r2, [r3, #16]
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d006      	beq.n	80070ba <find_volume+0x232>
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d001      	beq.n	80070ba <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 80070b6:	230d      	movs	r3, #13
 80070b8:	e1a4      	b.n	8007404 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80070c0:	461a      	mov	r2, r3
 80070c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	7b5a      	ldrb	r2, [r3, #13]
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00a      	beq.n	80070f4 <find_volume+0x26c>
 80070de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80070e4:	461a      	mov	r2, r3
 80070e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80070ec:	3b01      	subs	r3, #1
 80070ee:	4013      	ands	r3, r2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 80070f4:	230d      	movs	r3, #13
 80070f6:	e185      	b.n	8007404 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	7c9b      	ldrb	r3, [r3, #18]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	b21a      	sxth	r2, r3
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	7c5b      	ldrb	r3, [r3, #17]
 8007104:	b21b      	sxth	r3, r3
 8007106:	4313      	orrs	r3, r2
 8007108:	b21b      	sxth	r3, r3
 800710a:	b29a      	uxth	r2, r3
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	b29b      	uxth	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8007122:	230d      	movs	r3, #13
 8007124:	e16e      	b.n	8007404 <find_volume+0x57c>
 8007126:	bf00      	nop
 8007128:	20000214 	.word	0x20000214

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	7d1b      	ldrb	r3, [r3, #20]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	b21a      	sxth	r2, r3
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	7cdb      	ldrb	r3, [r3, #19]
 8007138:	b21b      	sxth	r3, r3
 800713a:	4313      	orrs	r3, r2
 800713c:	b21b      	sxth	r3, r3
 800713e:	b29b      	uxth	r3, r3
 8007140:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007144:	2b00      	cmp	r3, #0
 8007146:	d112      	bne.n	800716e <find_volume+0x2e6>
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800714e:	061a      	lsls	r2, r3, #24
 8007150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007152:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	4313      	orrs	r3, r2
 800715a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800715c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007160:	0212      	lsls	r2, r2, #8
 8007162:	4313      	orrs	r3, r2
 8007164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007166:	f892 2020 	ldrb.w	r2, [r2, #32]
 800716a:	4313      	orrs	r3, r2
 800716c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	7bdb      	ldrb	r3, [r3, #15]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b21a      	sxth	r2, r3
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	7b9b      	ldrb	r3, [r3, #14]
 800717a:	b21b      	sxth	r3, r3
 800717c:	4313      	orrs	r3, r2
 800717e:	b21b      	sxth	r3, r3
 8007180:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007182:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <find_volume+0x304>
 8007188:	230d      	movs	r3, #13
 800718a:	e13b      	b.n	8007404 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800718c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800718e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007190:	4413      	add	r3, r2
 8007192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007194:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007198:	0912      	lsrs	r2, r2, #4
 800719a:	b292      	uxth	r2, r2
 800719c:	4413      	add	r3, r2
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80071a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d201      	bcs.n	80071ac <find_volume+0x324>
 80071a8:	230d      	movs	r3, #13
 80071aa:	e12b      	b.n	8007404 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80071ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80071b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <find_volume+0x340>
 80071c4:	230d      	movs	r3, #13
 80071c6:	e11d      	b.n	8007404 <find_volume+0x57c>
	fmt = FS_FAT12;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d902      	bls.n	80071de <find_volume+0x356>
 80071d8:	2302      	movs	r3, #2
 80071da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d902      	bls.n	80071ee <find_volume+0x366>
 80071e8:	2303      	movs	r3, #3
 80071ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	1c9a      	adds	r2, r3, #2
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007200:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007204:	441a      	add	r2, r3
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800720c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	441a      	add	r2, r3
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8007218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800721c:	2b03      	cmp	r3, #3
 800721e:	d121      	bne.n	8007264 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <find_volume+0x3a6>
 800722a:	230d      	movs	r3, #13
 800722c:	e0ea      	b.n	8007404 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800722e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007230:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007234:	061a      	lsls	r2, r3, #24
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800723c:	041b      	lsls	r3, r3, #16
 800723e:	4313      	orrs	r3, r2
 8007240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007242:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007246:	0212      	lsls	r2, r2, #8
 8007248:	4313      	orrs	r3, r2
 800724a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007250:	431a      	orrs	r2, r3
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	647b      	str	r3, [r7, #68]	; 0x44
 8007262:	e025      	b.n	80072b0 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <find_volume+0x3ea>
 800726e:	230d      	movs	r3, #13
 8007270:	e0c8      	b.n	8007404 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727a:	441a      	add	r2, r3
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007286:	2b02      	cmp	r3, #2
 8007288:	d104      	bne.n	8007294 <find_volume+0x40c>
 800728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	e00c      	b.n	80072ae <find_volume+0x426>
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800729a:	4613      	mov	r3, r2
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	4413      	add	r3, r2
 80072a0:	085a      	lsrs	r2, r3, #1
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80072ae:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80072b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80072bc:	0a5b      	lsrs	r3, r3, #9
 80072be:	429a      	cmp	r2, r3
 80072c0:	d201      	bcs.n	80072c6 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 80072c2:	230d      	movs	r3, #13
 80072c4:	e09e      	b.n	8007404 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	2280      	movs	r2, #128	; 0x80
 80072e0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80072e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d177      	bne.n	80073dc <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	b21a      	sxth	r2, r3
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072fc:	b21b      	sxth	r3, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	b21b      	sxth	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d16a      	bne.n	80073dc <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007308:	3301      	adds	r3, #1
 800730a:	4619      	mov	r1, r3
 800730c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800730e:	f7fe fcd0 	bl	8005cb2 <move_window>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d161      	bne.n	80073dc <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	b21a      	sxth	r2, r3
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007330:	b21b      	sxth	r3, r3
 8007332:	4313      	orrs	r3, r2
 8007334:	b21b      	sxth	r3, r3
 8007336:	4a35      	ldr	r2, [pc, #212]	; (800740c <find_volume+0x584>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d14f      	bne.n	80073dc <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	78db      	ldrb	r3, [r3, #3]
 8007340:	061a      	lsls	r2, r3, #24
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	789b      	ldrb	r3, [r3, #2]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	4313      	orrs	r3, r2
 800734a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800734c:	7852      	ldrb	r2, [r2, #1]
 800734e:	0212      	lsls	r2, r2, #8
 8007350:	4313      	orrs	r3, r2
 8007352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007354:	7812      	ldrb	r2, [r2, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	4a2d      	ldr	r2, [pc, #180]	; (8007410 <find_volume+0x588>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d13e      	bne.n	80073dc <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007364:	061a      	lsls	r2, r3, #24
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	4313      	orrs	r3, r2
 8007370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007372:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007376:	0212      	lsls	r2, r2, #8
 8007378:	4313      	orrs	r3, r2
 800737a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800737c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007380:	4313      	orrs	r3, r2
 8007382:	4a24      	ldr	r2, [pc, #144]	; (8007414 <find_volume+0x58c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d129      	bne.n	80073dc <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800738e:	061a      	lsls	r2, r3, #24
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	4313      	orrs	r3, r2
 800739a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800739c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80073a0:	0212      	lsls	r2, r2, #8
 80073a2:	4313      	orrs	r3, r2
 80073a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a6:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80073aa:	431a      	orrs	r2, r3
 80073ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80073b8:	061a      	lsls	r2, r3, #24
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	4313      	orrs	r3, r2
 80073c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c6:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80073ca:	0212      	lsls	r2, r2, #8
 80073cc:	4313      	orrs	r3, r2
 80073ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073d0:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80073d4:	431a      	orrs	r2, r3
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <find_volume+0x590>)
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	3301      	adds	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <find_volume+0x590>)
 80073f0:	801a      	strh	r2, [r3, #0]
 80073f2:	4b09      	ldr	r3, [pc, #36]	; (8007418 <find_volume+0x590>)
 80073f4:	881a      	ldrh	r2, [r3, #0]
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80073fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073fe:	f7fe fbe5 	bl	8005bcc <clear_lock>
#endif

	return FR_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3758      	adds	r7, #88	; 0x58
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	ffffaa55 	.word	0xffffaa55
 8007410:	41615252 	.word	0x41615252
 8007414:	61417272 	.word	0x61417272
 8007418:	20000218 	.word	0x20000218

0800741c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d022      	beq.n	8007474 <validate+0x58>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01d      	beq.n	8007474 <validate+0x58>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800743e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007442:	2b00      	cmp	r3, #0
 8007444:	d016      	beq.n	8007474 <validate+0x58>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800744c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007456:	429a      	cmp	r2, r3
 8007458:	d10c      	bne.n	8007474 <validate+0x58>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007460:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe f90b 	bl	8005680 <disk_status>
 800746a:	4603      	mov	r3, r0
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007474:	2309      	movs	r3, #9
 8007476:	e000      	b.n	800747a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007496:	f107 0310 	add.w	r3, r7, #16
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fc46 	bl	8006d2c <get_ldnumber>
 80074a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da01      	bge.n	80074ac <f_mount+0x28>
 80074a8:	230b      	movs	r3, #11
 80074aa:	e02d      	b.n	8007508 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80074ac:	4a18      	ldr	r2, [pc, #96]	; (8007510 <f_mount+0x8c>)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 80074bc:	69b8      	ldr	r0, [r7, #24]
 80074be:	f7fe fb85 	bl	8005bcc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	490d      	ldr	r1, [pc, #52]	; (8007510 <f_mount+0x8c>)
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <f_mount+0x6a>
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d001      	beq.n	80074f2 <f_mount+0x6e>
 80074ee:	2300      	movs	r3, #0
 80074f0:	e00a      	b.n	8007508 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80074f2:	f107 0108 	add.w	r1, r7, #8
 80074f6:	f107 030c 	add.w	r3, r7, #12
 80074fa:	2200      	movs	r2, #0
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff fcc3 	bl	8006e88 <find_volume>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007506:	7dfb      	ldrb	r3, [r7, #23]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000214 	.word	0x20000214

08007514 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800751a:	af00      	add	r7, sp, #0
 800751c:	f107 030c 	add.w	r3, r7, #12
 8007520:	6018      	str	r0, [r3, #0]
 8007522:	f107 0308 	add.w	r3, r7, #8
 8007526:	6019      	str	r1, [r3, #0]
 8007528:	1dfb      	adds	r3, r7, #7
 800752a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800752c:	f107 030c 	add.w	r3, r7, #12
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <f_open+0x26>
 8007536:	2309      	movs	r3, #9
 8007538:	e1f2      	b.n	8007920 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 800753a:	f107 030c 	add.w	r3, r7, #12
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007546:	1dfb      	adds	r3, r7, #7
 8007548:	1dfa      	adds	r2, r7, #7
 800754a:	7812      	ldrb	r2, [r2, #0]
 800754c:	f002 021f 	and.w	r2, r2, #31
 8007550:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007552:	1dfb      	adds	r3, r7, #7
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	b2da      	uxtb	r2, r3
 800755c:	f107 0108 	add.w	r1, r7, #8
 8007560:	f107 0320 	add.w	r3, r7, #32
 8007564:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fc8d 	bl	8006e88 <find_volume>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007574:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007578:	2b00      	cmp	r3, #0
 800757a:	f040 81cf 	bne.w	800791c <f_open+0x408>
		INIT_BUF(dj);
 800757e:	f107 0320 	add.w	r3, r7, #32
 8007582:	f107 0214 	add.w	r2, r7, #20
 8007586:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800758a:	f107 0308 	add.w	r3, r7, #8
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	f107 0320 	add.w	r3, r7, #32
 8007594:	4611      	mov	r1, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fb5a 	bl	8006c50 <follow_path>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 80075a2:	f107 0320 	add.w	r3, r7, #32
 80075a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075aa:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d11a      	bne.n	80075ec <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 80075b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d103      	bne.n	80075c6 <f_open+0xb2>
				res = FR_INVALID_NAME;
 80075be:	2306      	movs	r3, #6
 80075c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80075c4:	e012      	b.n	80075ec <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80075c6:	1dfb      	adds	r3, r7, #7
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f023 0301 	bic.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf14      	ite	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	2300      	moveq	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	f107 0320 	add.w	r3, r7, #32
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe f965 	bl	80058b0 <chk_lock>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80075ec:	1dfb      	adds	r3, r7, #7
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 031c 	and.w	r3, r3, #28
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80cc 	beq.w	8007792 <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 80075fa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d01f      	beq.n	8007642 <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007602:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007606:	2b04      	cmp	r3, #4
 8007608:	d10e      	bne.n	8007628 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800760a:	f7fe f9bf 	bl	800598c <enq_lock>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d006      	beq.n	8007622 <f_open+0x10e>
 8007614:	f107 0320 	add.w	r3, r7, #32
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff f9ae 	bl	800697a <dir_register>
 800761e:	4603      	mov	r3, r0
 8007620:	e000      	b.n	8007624 <f_open+0x110>
 8007622:	2312      	movs	r3, #18
 8007624:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007628:	1dfb      	adds	r3, r7, #7
 800762a:	1dfa      	adds	r2, r7, #7
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	f042 0208 	orr.w	r2, r2, #8
 8007632:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007634:	f107 0320 	add.w	r3, r7, #32
 8007638:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800763c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007640:	e014      	b.n	800766c <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007642:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007646:	330b      	adds	r3, #11
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	f003 0311 	and.w	r3, r3, #17
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <f_open+0x146>
					res = FR_DENIED;
 8007652:	2307      	movs	r3, #7
 8007654:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007658:	e008      	b.n	800766c <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800765a:	1dfb      	adds	r3, r7, #7
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <f_open+0x158>
						res = FR_EXIST;
 8007666:	2308      	movs	r3, #8
 8007668:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800766c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 80af 	bne.w	80077d4 <f_open+0x2c0>
 8007676:	1dfb      	adds	r3, r7, #7
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 0308 	and.w	r3, r3, #8
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80a8 	beq.w	80077d4 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8007684:	f001 f8f6 	bl	8008874 <get_fattime>
 8007688:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800768c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007690:	330e      	adds	r3, #14
 8007692:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800769e:	b29b      	uxth	r3, r3
 80076a0:	0a1b      	lsrs	r3, r3, #8
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076a8:	330f      	adds	r3, #15
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80076b2:	0c1a      	lsrs	r2, r3, #16
 80076b4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076b8:	3310      	adds	r3, #16
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80076c2:	0e1a      	lsrs	r2, r3, #24
 80076c4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076c8:	3311      	adds	r3, #17
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80076ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076d2:	330b      	adds	r3, #11
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80076d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076dc:	331c      	adds	r3, #28
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076e6:	331d      	adds	r3, #29
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076f0:	331e      	adds	r3, #30
 80076f2:	2200      	movs	r2, #0
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80076fa:	331f      	adds	r3, #31
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007700:	f107 0320 	add.w	r3, r7, #32
 8007704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007708:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800770c:	4618      	mov	r0, r3
 800770e:	f7ff f890 	bl	8006832 <ld_clust>
 8007712:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8007716:	2100      	movs	r1, #0
 8007718:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800771c:	f7ff f8b7 	bl	800688e <st_clust>
				dj.fs->wflag = 1;
 8007720:	f107 0320 	add.w	r3, r7, #32
 8007724:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800772e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8007732:	2b00      	cmp	r3, #0
 8007734:	d04e      	beq.n	80077d4 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8007736:	f107 0320 	add.w	r3, r7, #32
 800773a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800773e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007742:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8007746:	f107 0320 	add.w	r3, r7, #32
 800774a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800774e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe fd6c 	bl	8006230 <remove_chain>
 8007758:	4603      	mov	r3, r0
 800775a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800775e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007762:	2b00      	cmp	r3, #0
 8007764:	d136      	bne.n	80077d4 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007766:	f107 0320 	add.w	r3, r7, #32
 800776a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800776e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8007772:	3a01      	subs	r2, #1
 8007774:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8007778:	f107 0320 	add.w	r3, r7, #32
 800777c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007780:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8007784:	4618      	mov	r0, r3
 8007786:	f7fe fa94 	bl	8005cb2 <move_window>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007790:	e020      	b.n	80077d4 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007792:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007796:	2b00      	cmp	r3, #0
 8007798:	d11c      	bne.n	80077d4 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800779a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800779e:	330b      	adds	r3, #11
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <f_open+0x29e>
					res = FR_NO_FILE;
 80077aa:	2304      	movs	r3, #4
 80077ac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80077b0:	e010      	b.n	80077d4 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80077b2:	1dfb      	adds	r3, r7, #7
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <f_open+0x2c0>
 80077be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80077c2:	330b      	adds	r3, #11
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <f_open+0x2c0>
						res = FR_DENIED;
 80077ce:	2307      	movs	r3, #7
 80077d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80077d4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d13d      	bne.n	8007858 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80077dc:	1dfb      	adds	r3, r7, #7
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80077e8:	1dfb      	adds	r3, r7, #7
 80077ea:	1dfa      	adds	r2, r7, #7
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	f042 0220 	orr.w	r2, r2, #32
 80077f2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80077f4:	f107 0320 	add.w	r3, r7, #32
 80077f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077fc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007800:	f107 030c 	add.w	r3, r7, #12
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800780a:	f107 030c 	add.w	r3, r7, #12
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007814:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007818:	1dfb      	adds	r3, r7, #7
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	bf14      	ite	ne
 8007824:	2301      	movne	r3, #1
 8007826:	2300      	moveq	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	f107 0320 	add.w	r3, r7, #32
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe f8ce 	bl	80059d4 <inc_lock>
 8007838:	4602      	mov	r2, r0
 800783a:	f107 030c 	add.w	r3, r7, #12
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800784e:	2b00      	cmp	r3, #0
 8007850:	d102      	bne.n	8007858 <f_open+0x344>
 8007852:	2302      	movs	r3, #2
 8007854:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007858:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800785c:	2b00      	cmp	r3, #0
 800785e:	d15d      	bne.n	800791c <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	1dfa      	adds	r2, r7, #7
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800786e:	f107 030c 	add.w	r3, r7, #12
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800787a:	f107 0320 	add.w	r3, r7, #32
 800787e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007882:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe ffd3 	bl	8006832 <ld_clust>
 800788c:	4602      	mov	r2, r0
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007898:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800789c:	331f      	adds	r3, #31
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	061a      	lsls	r2, r3, #24
 80078a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80078a6:	331e      	adds	r3, #30
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80078b2:	321d      	adds	r2, #29
 80078b4:	7812      	ldrb	r2, [r2, #0]
 80078b6:	0212      	lsls	r2, r2, #8
 80078b8:	4313      	orrs	r3, r2
 80078ba:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80078be:	321c      	adds	r2, #28
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	f107 030c 	add.w	r3, r7, #12
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80078ce:	f107 030c 	add.w	r3, r7, #12
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80078da:	f107 030c 	add.w	r3, r7, #12
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80078e6:	f107 030c 	add.w	r3, r7, #12
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80078f2:	f107 0320 	add.w	r3, r7, #32
 80078f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80078fa:	f107 030c 	add.w	r3, r7, #12
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007904:	f107 030c 	add.w	r3, r7, #12
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800790e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007912:	f107 030c 	add.w	r3, r7, #12
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800791c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8007920:	4618      	mov	r0, r3
 8007922:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b08c      	sub	sp, #48	; 0x30
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
 8007936:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff fd6a 	bl	800741c <validate>
 8007948:	4603      	mov	r3, r0
 800794a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800794c:	7ffb      	ldrb	r3, [r7, #31]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <f_read+0x2c>
 8007952:	7ffb      	ldrb	r3, [r7, #31]
 8007954:	e150      	b.n	8007bf8 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007966:	e147      	b.n	8007bf8 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007976:	2307      	movs	r3, #7
 8007978:	e13e      	b.n	8007bf8 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	429a      	cmp	r2, r3
 8007990:	f240 812d 	bls.w	8007bee <f_read+0x2c4>
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007998:	e129      	b.n	8007bee <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 80f2 	bne.w	8007b8e <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079b0:	0a5b      	lsrs	r3, r3, #9
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079ba:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80079be:	3b01      	subs	r3, #1
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	4013      	ands	r3, r2
 80079c4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d139      	bne.n	8007a40 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079de:	e018      	b.n	8007a12 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079f0:	4619      	mov	r1, r3
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f7fe fd13 	bl	800641e <clmt_clust>
 80079f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079fa:	e00a      	b.n	8007a12 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7fe fa4e 	bl	8005eac <get_fat>
 8007a10:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d805      	bhi.n	8007a24 <f_read+0xfa>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007a20:	2302      	movs	r3, #2
 8007a22:	e0e9      	b.n	8007bf8 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a2a:	d105      	bne.n	8007a38 <f_read+0x10e>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007a34:	2301      	movs	r3, #1
 8007a36:	e0df      	b.n	8007bf8 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f7fe fa0a 	bl	8005e68 <clust2sect>
 8007a54:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d105      	bne.n	8007a68 <f_read+0x13e>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007a64:	2302      	movs	r3, #2
 8007a66:	e0c7      	b.n	8007bf8 <f_read+0x2ce>
			sect += csect;
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	0a5b      	lsrs	r3, r3, #9
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d046      	beq.n	8007b0a <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007a7c:	7dfa      	ldrb	r2, [r7, #23]
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	4413      	add	r3, r2
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007a88:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d908      	bls.n	8007aa2 <f_read+0x178>
					cc = fp->fs->csize - csect;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a96:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007aa8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	6a39      	ldr	r1, [r7, #32]
 8007ab2:	f7fd fe25 	bl	8005700 <disk_read>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e097      	b.n	8007bf8 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d015      	beq.n	8007b02 <f_read+0x1d8>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d90d      	bls.n	8007b02 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	025b      	lsls	r3, r3, #9
 8007af2:	6a3a      	ldr	r2, [r7, #32]
 8007af4:	4413      	add	r3, r2
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fd fe5d 	bl	80057bc <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	025b      	lsls	r3, r3, #9
 8007b06:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007b08:	e05b      	b.n	8007bc2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d037      	beq.n	8007b86 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01d      	beq.n	8007b60 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b2a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007b2e:	68f9      	ldr	r1, [r7, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007b36:	2301      	movs	r3, #1
 8007b38:	f7fd fe02 	bl	8005740 <disk_write>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d005      	beq.n	8007b4e <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e054      	b.n	8007bf8 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b66:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	f7fd fdc6 	bl	8005700 <disk_read>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b82:	2301      	movs	r3, #1
 8007b84:	e038      	b.n	8007bf8 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b98:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007b9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d901      	bls.n	8007baa <f_read+0x280>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6a38      	ldr	r0, [r7, #32]
 8007bbe:	f7fd fdfd 	bl	80057bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007bc2:	6a3a      	ldr	r2, [r7, #32]
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	4413      	add	r3, r2
 8007bc8:	623b      	str	r3, [r7, #32]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd2:	441a      	add	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	441a      	add	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f47f aed2 	bne.w	800799a <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3730      	adds	r7, #48	; 0x30
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fc07 	bl	800741c <validate>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 80a8 	bne.w	8007d6a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80a0 	beq.w	8007d6a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d019      	beq.n	8007c6c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c3e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f7fd fd78 	bl	8005740 <disk_write>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007c56:	2301      	movs	r3, #1
 8007c58:	e088      	b.n	8007d6c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f7fe f819 	bl	8005cb2 <move_window>
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d16f      	bne.n	8007d6a <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007c90:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	330b      	adds	r3, #11
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	330b      	adds	r3, #11
 8007c9c:	f042 0220 	orr.w	r2, r2, #32
 8007ca0:	b2d2      	uxtb	r2, r2
 8007ca2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	331c      	adds	r3, #28
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	0a1b      	lsrs	r3, r3, #8
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	331d      	adds	r3, #29
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007ccc:	0c1a      	lsrs	r2, r3, #16
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	331e      	adds	r3, #30
 8007cd2:	b2d2      	uxtb	r2, r2
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007cdc:	0e1a      	lsrs	r2, r3, #24
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	331f      	adds	r3, #31
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cec:	4619      	mov	r1, r3
 8007cee:	6938      	ldr	r0, [r7, #16]
 8007cf0:	f7fe fdcd 	bl	800688e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007cf4:	f000 fdbe 	bl	8008874 <get_fattime>
 8007cf8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	3316      	adds	r3, #22
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	b2d2      	uxtb	r2, r2
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	0a1b      	lsrs	r3, r3, #8
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	3317      	adds	r3, #23
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	0c1a      	lsrs	r2, r3, #16
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	0e1a      	lsrs	r2, r3, #24
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	3319      	adds	r3, #25
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	3312      	adds	r3, #18
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	3313      	adds	r3, #19
 8007d38:	2200      	movs	r2, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d42:	f023 0320 	bic.w	r3, r3, #32
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fd ffd4 	bl	8005d0e <sync_fs>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ff3f 	bl	8007c00 <f_sync>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d86:	7bfb      	ldrb	r3, [r7, #15]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d116      	bne.n	8007dba <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fb45 	bl	800741c <validate>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10e      	bne.n	8007dba <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fd fece 	bl	8005b44 <dec_lock>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d103      	bne.n	8007dba <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b090      	sub	sp, #64	; 0x40
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7ff fb24 	bl	800741c <validate>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007dda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <f_lseek+0x24>
 8007de2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007de6:	e247      	b.n	8008278 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007df8:	e23e      	b.n	8008278 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80f2 	beq.w	8007fea <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e0c:	d164      	bne.n	8007ed8 <f_lseek+0x114>
			tbl = fp->cltbl;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	1d1a      	adds	r2, r3, #4
 8007e1a:	627a      	str	r2, [r7, #36]	; 0x24
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	2302      	movs	r3, #2
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e2a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d041      	beq.n	8007eb6 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	2300      	movs	r3, #0
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	3301      	adds	r3, #1
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe f82a 	bl	8005eac <get_fat>
 8007e58:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d805      	bhi.n	8007e6c <f_lseek+0xa8>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e205      	b.n	8008278 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e72:	d105      	bne.n	8007e80 <f_lseek+0xbc>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e1fb      	b.n	8008278 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d0da      	beq.n	8007e40 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d809      	bhi.n	8007ea6 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	627a      	str	r2, [r7, #36]	; 0x24
 8007e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	1d1a      	adds	r2, r3, #4
 8007ea0:	627a      	str	r2, [r7, #36]	; 0x24
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007eac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3bd      	bcc.n	8007e32 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ebe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d803      	bhi.n	8007ed0 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e1d1      	b.n	8008274 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007ed0:	2311      	movs	r3, #17
 8007ed2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007ed6:	e1cd      	b.n	8008274 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d903      	bls.n	8007eec <f_lseek+0x128>
				ofs = fp->fsize;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007eea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f000 81bc 	beq.w	8008274 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fe fa8b 	bl	800641e <clmt_clust>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	f7fd ffa2 	bl	8005e68 <clust2sect>
 8007f24:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d105      	bne.n	8007f38 <f_lseek+0x174>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007f34:	2302      	movs	r3, #2
 8007f36:	e19f      	b.n	8008278 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	0a5b      	lsrs	r3, r3, #9
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007f44:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007f48:	3a01      	subs	r2, #1
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	4413      	add	r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 8189 	beq.w	8008274 <f_lseek+0x4b0>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	f000 8182 	beq.w	8008274 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01d      	beq.n	8007fba <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f84:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007f90:	2301      	movs	r3, #1
 8007f92:	f7fd fbd5 	bl	8005740 <disk_write>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e167      	b.n	8008278 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fc0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	f7fd fb99 	bl	8005700 <disk_read>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e14b      	b.n	8008278 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8007fe8:	e144      	b.n	8008274 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d90a      	bls.n	800800c <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800800a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008012:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800801c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80c6 	beq.w	80081b4 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800802e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008032:	025b      	lsls	r3, r3, #9
 8008034:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01e      	beq.n	800807a <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	fbb2 f2f3 	udiv	r2, r2, r3
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	1e59      	subs	r1, r3, #1
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008050:	429a      	cmp	r2, r3
 8008052:	d312      	bcc.n	800807a <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	1e5a      	subs	r2, r3, #1
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	425b      	negs	r3, r3
 800805c:	401a      	ands	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008076:	63bb      	str	r3, [r7, #56]	; 0x38
 8008078:	e029      	b.n	80080ce <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008080:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	2b00      	cmp	r3, #0
 8008086:	d11e      	bne.n	80080c6 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800808e:	2100      	movs	r1, #0
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe f927 	bl	80062e4 <create_chain>
 8008096:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	2b01      	cmp	r3, #1
 800809c:	d105      	bne.n	80080aa <f_lseek+0x2e6>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2202      	movs	r2, #2
 80080a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80080a6:	2302      	movs	r3, #2
 80080a8:	e0e6      	b.n	8008278 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b0:	d105      	bne.n	80080be <f_lseek+0x2fa>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80080ba:	2301      	movs	r3, #1
 80080bc:	e0dc      	b.n	8008278 <f_lseek+0x4b4>
					fp->sclust = clst;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d06f      	beq.n	80081b4 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 80080d4:	e047      	b.n	8008166 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00d      	beq.n	8008100 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe f8f9 	bl	80062e4 <create_chain>
 80080f2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10a      	bne.n	8008110 <f_lseek+0x34c>
							ofs = bcs; break;
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	603b      	str	r3, [r7, #0]
 80080fe:	e036      	b.n	800816e <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008106:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd fecf 	bl	8005eac <get_fat>
 800810e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008116:	d105      	bne.n	8008124 <f_lseek+0x360>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008120:	2301      	movs	r3, #1
 8008122:	e0a9      	b.n	8008278 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	2b01      	cmp	r3, #1
 8008128:	d907      	bls.n	800813a <f_lseek+0x376>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008130:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008136:	429a      	cmp	r2, r3
 8008138:	d305      	bcc.n	8008146 <f_lseek+0x382>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2202      	movs	r2, #2
 800813e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008142:	2302      	movs	r3, #2
 8008144:	e098      	b.n	8008278 <f_lseek+0x4b4>
					fp->clust = clst;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800814a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	441a      	add	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	429a      	cmp	r2, r3
 800816c:	d8b3      	bhi.n	80080d6 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	441a      	add	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008184:	2b00      	cmp	r3, #0
 8008186:	d015      	beq.n	80081b4 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800818e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008190:	4618      	mov	r0, r3
 8008192:	f7fd fe69 	bl	8005e68 <clust2sect>
 8008196:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819a:	2b00      	cmp	r3, #0
 800819c:	d105      	bne.n	80081aa <f_lseek+0x3e6>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80081a6:	2302      	movs	r3, #2
 80081a8:	e066      	b.n	8008278 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	0a5b      	lsrs	r3, r3, #9
 80081ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081b0:	4413      	add	r3, r2
 80081b2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80081ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d041      	beq.n	8008246 <f_lseek+0x482>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80081c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d03b      	beq.n	8008246 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01d      	beq.n	8008218 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80081ee:	2301      	movs	r3, #1
 80081f0:	f7fd faa6 	bl	8005740 <disk_write>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008202:	2301      	movs	r3, #1
 8008204:	e038      	b.n	8008278 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800820c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008210:	b2da      	uxtb	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800821e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	2301      	movs	r3, #1
 8008226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008228:	f7fd fa6a 	bl	8005700 <disk_read>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d005      	beq.n	800823e <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800823a:	2301      	movs	r3, #1
 800823c:	e01c      	b.n	8008278 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008242:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008252:	429a      	cmp	r2, r3
 8008254:	d90e      	bls.n	8008274 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008268:	f043 0320 	orr.w	r3, r3, #32
 800826c:	b2da      	uxtb	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008274:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008278:	4618      	mov	r0, r3
 800827a:	3740      	adds	r7, #64	; 0x40
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8008286:	af00      	add	r7, sp, #0
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	6018      	str	r0, [r3, #0]
 800828c:	463b      	mov	r3, r7
 800828e:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8008290:	1d39      	adds	r1, r7, #4
 8008292:	f107 0314 	add.w	r3, r7, #20
 8008296:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800829a:	2200      	movs	r2, #0
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fdf3 	bl	8006e88 <find_volume>
 80082a2:	4603      	mov	r3, r0
 80082a4:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 80082a8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d129      	bne.n	8008304 <f_stat+0x84>
		INIT_BUF(dj);
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	f107 0208 	add.w	r2, r7, #8
 80082b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	f107 0314 	add.w	r3, r7, #20
 80082c4:	4611      	mov	r1, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fcc2 	bl	8006c50 <follow_path>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 80082d2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d114      	bne.n	8008304 <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 80082da:	f107 0314 	add.w	r3, r7, #20
 80082de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 80082e6:	463b      	mov	r3, r7
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <f_stat+0x84>
 80082ee:	463b      	mov	r3, r7
 80082f0:	f107 0214 	add.w	r2, r7, #20
 80082f4:	6819      	ldr	r1, [r3, #0]
 80082f6:	4610      	mov	r0, r2
 80082f8:	f7fe fb78 	bl	80069ec <get_fileinfo>
 80082fc:	e002      	b.n	8008304 <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 80082fe:	2306      	movs	r3, #6
 8008300:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8008304:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8008308:	4618      	mov	r0, r3
 800830a:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	4613      	mov	r3, r2
 8008320:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008322:	2301      	movs	r3, #1
 8008324:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800832a:	4b1f      	ldr	r3, [pc, #124]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 800832c:	7a5b      	ldrb	r3, [r3, #9]
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b01      	cmp	r3, #1
 8008332:	d831      	bhi.n	8008398 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008334:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 8008336:	7a5b      	ldrb	r3, [r3, #9]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	4b1a      	ldr	r3, [pc, #104]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 800833e:	2100      	movs	r1, #0
 8008340:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008342:	4b19      	ldr	r3, [pc, #100]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 8008344:	7a5b      	ldrb	r3, [r3, #9]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	4a17      	ldr	r2, [pc, #92]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 8008354:	7a5b      	ldrb	r3, [r3, #9]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	461a      	mov	r2, r3
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 800835c:	4413      	add	r3, r2
 800835e:	79fa      	ldrb	r2, [r7, #7]
 8008360:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008362:	4b11      	ldr	r3, [pc, #68]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 8008364:	7a5b      	ldrb	r3, [r3, #9]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	b2d1      	uxtb	r1, r2
 800836c:	4a0e      	ldr	r2, [pc, #56]	; (80083a8 <FATFS_LinkDriverEx+0x94>)
 800836e:	7251      	strb	r1, [r2, #9]
 8008370:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008372:	7dbb      	ldrb	r3, [r7, #22]
 8008374:	3330      	adds	r3, #48	; 0x30
 8008376:	b2da      	uxtb	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	3301      	adds	r3, #1
 8008380:	223a      	movs	r2, #58	; 0x3a
 8008382:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	3302      	adds	r3, #2
 8008388:	222f      	movs	r2, #47	; 0x2f
 800838a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3303      	adds	r3, #3
 8008390:	2200      	movs	r2, #0
 8008392:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008398:	7dfb      	ldrb	r3, [r7, #23]
}
 800839a:	4618      	mov	r0, r3
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	20000234 	.word	0x20000234

080083ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80083b6:	2200      	movs	r2, #0
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff ffaa 	bl	8008314 <FATFS_LinkDriverEx>
 80083c0:	4603      	mov	r3, r0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

uint8_t Mount_SD (const TCHAR* path)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80083d4:	2201      	movs	r2, #1
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <Mount_SD+0x30>)
 80083da:	f7ff f853 	bl	8007484 <f_mount>
 80083de:	4603      	mov	r3, r0
 80083e0:	461a      	mov	r2, r3
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <Mount_SD+0x34>)
 80083e4:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80083e6:	4b06      	ldr	r3, [pc, #24]	; (8008400 <Mount_SD+0x34>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <Mount_SD+0x26>
		return 1;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <Mount_SD+0x28>
	return 0;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	200002a8 	.word	0x200002a8
 8008400:	200004e8 	.word	0x200004e8

08008404 <Unmount_SD>:

uint8_t Unmount_SD (const TCHAR* path)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800840c:	2201      	movs	r2, #1
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	2000      	movs	r0, #0
 8008412:	f7ff f837 	bl	8007484 <f_mount>
 8008416:	4603      	mov	r3, r0
 8008418:	461a      	mov	r2, r3
 800841a:	4b03      	ldr	r3, [pc, #12]	; (8008428 <Unmount_SD+0x24>)
 800841c:	701a      	strb	r2, [r3, #0]
}
 800841e:	bf00      	nop
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	200004e8 	.word	0x200004e8

0800842c <open_file>:
	    	}
	    }
	    return fresult;
}

FRESULT open_file(char *name){
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
	if((fresult = f_stat (name, &fno)) == FR_OK){
 8008434:	4910      	ldr	r1, [pc, #64]	; (8008478 <open_file+0x4c>)
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f7ff ff22 	bl	8008280 <f_stat>
 800843c:	4603      	mov	r3, r0
 800843e:	461a      	mov	r2, r3
 8008440:	4b0e      	ldr	r3, [pc, #56]	; (800847c <open_file+0x50>)
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	4b0d      	ldr	r3, [pc, #52]	; (800847c <open_file+0x50>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10f      	bne.n	800846c <open_file+0x40>
		if((fresult = f_open(&fil, name, FA_READ)) == FR_OK){
 800844c:	2201      	movs	r2, #1
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	480b      	ldr	r0, [pc, #44]	; (8008480 <open_file+0x54>)
 8008452:	f7ff f85f 	bl	8007514 <f_open>
 8008456:	4603      	mov	r3, r0
 8008458:	461a      	mov	r2, r3
 800845a:	4b08      	ldr	r3, [pc, #32]	; (800847c <open_file+0x50>)
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <open_file+0x50>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <open_file+0x40>
			open = 1;
 8008466:	4b07      	ldr	r3, [pc, #28]	; (8008484 <open_file+0x58>)
 8008468:	2201      	movs	r2, #1
 800846a:	701a      	strb	r2, [r3, #0]
		}
	}
	return fresult;
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <open_file+0x50>)
 800846e:	781b      	ldrb	r3, [r3, #0]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000290 	.word	0x20000290
 800847c:	200004e8 	.word	0x200004e8
 8008480:	200004f0 	.word	0x200004f0
 8008484:	20000240 	.word	0x20000240

08008488 <close_file>:

FRESULT close_file(){
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
	if(open){
 800848c:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <close_file+0x30>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00d      	beq.n	80084b0 <close_file+0x28>
		if((fresult = f_close(&fil)) == FR_OK){
 8008494:	4809      	ldr	r0, [pc, #36]	; (80084bc <close_file+0x34>)
 8008496:	f7ff fc6d 	bl	8007d74 <f_close>
 800849a:	4603      	mov	r3, r0
 800849c:	461a      	mov	r2, r3
 800849e:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <close_file+0x38>)
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <close_file+0x38>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d102      	bne.n	80084b0 <close_file+0x28>
			open = 0;
 80084aa:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <close_file+0x30>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
		}
	}
	return fresult;
 80084b0:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <close_file+0x38>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000240 	.word	0x20000240
 80084bc:	200004f0 	.word	0x200004f0
 80084c0:	200004e8 	.word	0x200004e8

080084c4 <Read_config_File>:

FRESULT Read_config_File (char *name, char* buffer, uint8_t buffer_size, uint32_t offset)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	4613      	mov	r3, r2
 80084d2:	71fb      	strb	r3, [r7, #7]
	if(open){
 80084d4:	4b12      	ldr	r3, [pc, #72]	; (8008520 <Read_config_File+0x5c>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00e      	beq.n	80084fa <Read_config_File+0x36>
		f_lseek(&fil, offset);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	4811      	ldr	r0, [pc, #68]	; (8008524 <Read_config_File+0x60>)
 80084e0:	f7ff fc70 	bl	8007dc4 <f_lseek>
		fresult = f_read (&fil, buffer, buffer_size, &br);
 80084e4:	79fa      	ldrb	r2, [r7, #7]
 80084e6:	4b10      	ldr	r3, [pc, #64]	; (8008528 <Read_config_File+0x64>)
 80084e8:	68b9      	ldr	r1, [r7, #8]
 80084ea:	480e      	ldr	r0, [pc, #56]	; (8008524 <Read_config_File+0x60>)
 80084ec:	f7ff fa1d 	bl	800792a <f_read>
 80084f0:	4603      	mov	r3, r0
 80084f2:	461a      	mov	r2, r3
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <Read_config_File+0x68>)
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	e00c      	b.n	8008514 <Read_config_File+0x50>
	}else{
		open_file(name);
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7ff ff96 	bl	800842c <open_file>
		fresult = f_read (&fil, buffer, buffer_size, &br);
 8008500:	79fa      	ldrb	r2, [r7, #7]
 8008502:	4b09      	ldr	r3, [pc, #36]	; (8008528 <Read_config_File+0x64>)
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	4807      	ldr	r0, [pc, #28]	; (8008524 <Read_config_File+0x60>)
 8008508:	f7ff fa0f 	bl	800792a <f_read>
 800850c:	4603      	mov	r3, r0
 800850e:	461a      	mov	r2, r3
 8008510:	4b06      	ldr	r3, [pc, #24]	; (800852c <Read_config_File+0x68>)
 8008512:	701a      	strb	r2, [r3, #0]
	}
	return fresult;
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <Read_config_File+0x68>)
 8008516:	781b      	ldrb	r3, [r3, #0]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20000240 	.word	0x20000240
 8008524:	200004f0 	.word	0x200004f0
 8008528:	200004d8 	.word	0x200004d8
 800852c:	200004e8 	.word	0x200004e8

08008530 <DHT_Delay>:


/********************* NO CHANGES AFTER THIS *************************************/

void DHT_Delay (uint16_t time)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(DHT_TIMER, 0);
 800853a:	4b08      	ldr	r3, [pc, #32]	; (800855c <DHT_Delay+0x2c>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2200      	movs	r2, #0
 8008540:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(DHT_TIMER))<time);
 8008542:	bf00      	nop
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <DHT_Delay+0x2c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	429a      	cmp	r2, r3
 800854e:	d3f9      	bcc.n	8008544 <DHT_Delay+0x14>
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	20000d7c 	.word	0x20000d7c

08008560 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800856c:	f107 030c 	add.w	r3, r7, #12
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	60da      	str	r2, [r3, #12]
 800857a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800857c:	887b      	ldrh	r3, [r7, #2]
 800857e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008580:	2301      	movs	r3, #1
 8008582:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008584:	2303      	movs	r3, #3
 8008586:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800858c:	f107 030c 	add.w	r3, r7, #12
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7f9 f8ba 	bl	800170c <HAL_GPIO_Init>
}
 8008598:	bf00      	nop
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085ac:	f107 030c 	add.w	r3, r7, #12
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	609a      	str	r2, [r3, #8]
 80085b8:	60da      	str	r2, [r3, #12]
 80085ba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80085bc:	887b      	ldrh	r3, [r7, #2]
 80085be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085c0:	2300      	movs	r3, #0
 80085c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085c4:	2301      	movs	r3, #1
 80085c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80085c8:	f107 030c 	add.w	r3, r7, #12
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7f9 f89c 	bl	800170c <HAL_GPIO_Init>
}
 80085d4:	bf00      	nop
 80085d6:	3720      	adds	r7, #32
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <DHT_Start>:

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM;

void DHT_Start (uint8_t DHT)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80085e6:	2120      	movs	r1, #32
 80085e8:	4811      	ldr	r0, [pc, #68]	; (8008630 <DHT_Start+0x54>)
 80085ea:	f7ff ffb9 	bl	8008560 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80085ee:	2200      	movs	r2, #0
 80085f0:	2120      	movs	r1, #32
 80085f2:	480f      	ldr	r0, [pc, #60]	; (8008630 <DHT_Start+0x54>)
 80085f4:	f7f9 fa14 	bl	8001a20 <HAL_GPIO_WritePin>
	if(DHT == 22){
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	2b16      	cmp	r3, #22
 80085fc:	d104      	bne.n	8008608 <DHT_Start+0x2c>
		DHT_Delay (1300);   // wait for >1ms
 80085fe:	f240 5014 	movw	r0, #1300	; 0x514
 8008602:	f7ff ff95 	bl	8008530 <DHT_Delay>
 8008606:	e003      	b.n	8008610 <DHT_Start+0x34>
	}else{
		DHT_Delay (18000);   // wait for 18ms
 8008608:	f244 6050 	movw	r0, #18000	; 0x4650
 800860c:	f7ff ff90 	bl	8008530 <DHT_Delay>
	}

    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8008610:	2201      	movs	r2, #1
 8008612:	2120      	movs	r1, #32
 8008614:	4806      	ldr	r0, [pc, #24]	; (8008630 <DHT_Start+0x54>)
 8008616:	f7f9 fa03 	bl	8001a20 <HAL_GPIO_WritePin>
    DHT_Delay (20);   // wait for 30us
 800861a:	2014      	movs	r0, #20
 800861c:	f7ff ff88 	bl	8008530 <DHT_Delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8008620:	2120      	movs	r1, #32
 8008622:	4803      	ldr	r0, [pc, #12]	; (8008630 <DHT_Start+0x54>)
 8008624:	f7ff ffbc 	bl	80085a0 <Set_Pin_Input>
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	48000400 	.word	0x48000400

08008634 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	71fb      	strb	r3, [r7, #7]
	DHT_Delay (40);
 800863e:	2028      	movs	r0, #40	; 0x28
 8008640:	f7ff ff76 	bl	8008530 <DHT_Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8008644:	2120      	movs	r1, #32
 8008646:	4812      	ldr	r0, [pc, #72]	; (8008690 <DHT_Check_Response+0x5c>)
 8008648:	f7f9 f9d2 	bl	80019f0 <HAL_GPIO_ReadPin>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10f      	bne.n	8008672 <DHT_Check_Response+0x3e>
	{
		DHT_Delay (80);
 8008652:	2050      	movs	r0, #80	; 0x50
 8008654:	f7ff ff6c 	bl	8008530 <DHT_Delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8008658:	2120      	movs	r1, #32
 800865a:	480d      	ldr	r0, [pc, #52]	; (8008690 <DHT_Check_Response+0x5c>)
 800865c:	f7f9 f9c8 	bl	80019f0 <HAL_GPIO_ReadPin>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <DHT_Check_Response+0x38>
 8008666:	2301      	movs	r3, #1
 8008668:	71fb      	strb	r3, [r7, #7]
 800866a:	e004      	b.n	8008676 <DHT_Check_Response+0x42>
		else Response = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	71fb      	strb	r3, [r7, #7]
 8008670:	e001      	b.n	8008676 <DHT_Check_Response+0x42>
	}else{
		return 0;
 8008672:	2300      	movs	r3, #0
 8008674:	e008      	b.n	8008688 <DHT_Check_Response+0x54>
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8008676:	bf00      	nop
 8008678:	2120      	movs	r1, #32
 800867a:	4805      	ldr	r0, [pc, #20]	; (8008690 <DHT_Check_Response+0x5c>)
 800867c:	f7f9 f9b8 	bl	80019f0 <HAL_GPIO_ReadPin>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1f8      	bne.n	8008678 <DHT_Check_Response+0x44>

	return Response;
 8008686:	79fb      	ldrb	r3, [r7, #7]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	48000400 	.word	0x48000400

08008694 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800869a:	2300      	movs	r3, #0
 800869c:	71bb      	strb	r3, [r7, #6]
 800869e:	e037      	b.n	8008710 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80086a0:	bf00      	nop
 80086a2:	2120      	movs	r1, #32
 80086a4:	481e      	ldr	r0, [pc, #120]	; (8008720 <DHT_Read+0x8c>)
 80086a6:	f7f9 f9a3 	bl	80019f0 <HAL_GPIO_ReadPin>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0f8      	beq.n	80086a2 <DHT_Read+0xe>
		DHT_Delay (40);   // wait for 40 us
 80086b0:	2028      	movs	r0, #40	; 0x28
 80086b2:	f7ff ff3d 	bl	8008530 <DHT_Delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80086b6:	2120      	movs	r1, #32
 80086b8:	4819      	ldr	r0, [pc, #100]	; (8008720 <DHT_Read+0x8c>)
 80086ba:	f7f9 f999 	bl	80019f0 <HAL_GPIO_ReadPin>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10e      	bne.n	80086e2 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80086c4:	79bb      	ldrb	r3, [r7, #6]
 80086c6:	f1c3 0307 	rsb	r3, r3, #7
 80086ca:	2201      	movs	r2, #1
 80086cc:	fa02 f303 	lsl.w	r3, r2, r3
 80086d0:	b25b      	sxtb	r3, r3
 80086d2:	43db      	mvns	r3, r3
 80086d4:	b25a      	sxtb	r2, r3
 80086d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086da:	4013      	ands	r3, r2
 80086dc:	b25b      	sxtb	r3, r3
 80086de:	71fb      	strb	r3, [r7, #7]
 80086e0:	e00b      	b.n	80086fa <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80086e2:	79bb      	ldrb	r3, [r7, #6]
 80086e4:	f1c3 0307 	rsb	r3, r3, #7
 80086e8:	2201      	movs	r2, #1
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	b25a      	sxtb	r2, r3
 80086f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	b25b      	sxtb	r3, r3
 80086f8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80086fa:	bf00      	nop
 80086fc:	2120      	movs	r1, #32
 80086fe:	4808      	ldr	r0, [pc, #32]	; (8008720 <DHT_Read+0x8c>)
 8008700:	f7f9 f976 	bl	80019f0 <HAL_GPIO_ReadPin>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f8      	bne.n	80086fc <DHT_Read+0x68>
	for (j=0;j<8;j++)
 800870a:	79bb      	ldrb	r3, [r7, #6]
 800870c:	3301      	adds	r3, #1
 800870e:	71bb      	strb	r3, [r7, #6]
 8008710:	79bb      	ldrb	r3, [r7, #6]
 8008712:	2b07      	cmp	r3, #7
 8008714:	d9c4      	bls.n	80086a0 <DHT_Read+0xc>
	}
	return i;
 8008716:	79fb      	ldrb	r3, [r7, #7]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	48000400 	.word	0x48000400

08008724 <DHT_Get_Data>:

uint8_t DHT_Get_Data (float *Temperature, float *Humidity, uint8_t DHT)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
	float TEMP, RH;
    DHT_Start (DHT);
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff ff51 	bl	80085dc <DHT_Start>
	if (DHT_Check_Response ())
 800873a:	f7ff ff7b 	bl	8008634 <DHT_Check_Response>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d073      	beq.n	800882c <DHT_Get_Data+0x108>
	{
		Rh_byte1 = DHT_Read ();
 8008744:	f7ff ffa6 	bl	8008694 <DHT_Read>
 8008748:	4603      	mov	r3, r0
 800874a:	461a      	mov	r2, r3
 800874c:	4b3b      	ldr	r3, [pc, #236]	; (800883c <DHT_Get_Data+0x118>)
 800874e:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT_Read ();
 8008750:	f7ff ffa0 	bl	8008694 <DHT_Read>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	4b39      	ldr	r3, [pc, #228]	; (8008840 <DHT_Get_Data+0x11c>)
 800875a:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT_Read ();
 800875c:	f7ff ff9a 	bl	8008694 <DHT_Read>
 8008760:	4603      	mov	r3, r0
 8008762:	461a      	mov	r2, r3
 8008764:	4b37      	ldr	r3, [pc, #220]	; (8008844 <DHT_Get_Data+0x120>)
 8008766:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT_Read ();
 8008768:	f7ff ff94 	bl	8008694 <DHT_Read>
 800876c:	4603      	mov	r3, r0
 800876e:	461a      	mov	r2, r3
 8008770:	4b35      	ldr	r3, [pc, #212]	; (8008848 <DHT_Get_Data+0x124>)
 8008772:	701a      	strb	r2, [r3, #0]
		SUM = DHT_Read();
 8008774:	f7ff ff8e 	bl	8008694 <DHT_Read>
 8008778:	4603      	mov	r3, r0
 800877a:	b29a      	uxth	r2, r3
 800877c:	4b33      	ldr	r3, [pc, #204]	; (800884c <DHT_Get_Data+0x128>)
 800877e:	801a      	strh	r2, [r3, #0]
		if((DHT & 4) == 4){
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	d026      	beq.n	80087d8 <DHT_Get_Data+0xb4>
			TEMP = (float)(((Temp_byte1<<8) | Temp_byte2)/10.0f);
 800878a:	4b2e      	ldr	r3, [pc, #184]	; (8008844 <DHT_Get_Data+0x120>)
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	4a2d      	ldr	r2, [pc, #180]	; (8008848 <DHT_Get_Data+0x124>)
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	4313      	orrs	r3, r2
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800879e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80087a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80087a6:	edc7 7a05 	vstr	s15, [r7, #20]
		    RH =  (float)(((Rh_byte1<<8) | Rh_byte2)/10.0f);
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <DHT_Get_Data+0x118>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	4a23      	ldr	r2, [pc, #140]	; (8008840 <DHT_Get_Data+0x11c>)
 80087b2:	7812      	ldrb	r2, [r2, #0]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087be:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80087c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80087c6:	edc7 7a04 	vstr	s15, [r7, #16]
		    *Temperature = TEMP;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	601a      	str	r2, [r3, #0]
		    *Humidity = RH;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	693a      	ldr	r2, [r7, #16]
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e02b      	b.n	8008830 <DHT_Get_Data+0x10c>
		}else{
			if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80087d8:	4b1c      	ldr	r3, [pc, #112]	; (800884c <DHT_Get_Data+0x128>)
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	4619      	mov	r1, r3
 80087de:	4b17      	ldr	r3, [pc, #92]	; (800883c <DHT_Get_Data+0x118>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	4b16      	ldr	r3, [pc, #88]	; (8008840 <DHT_Get_Data+0x11c>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	4413      	add	r3, r2
 80087ea:	4a16      	ldr	r2, [pc, #88]	; (8008844 <DHT_Get_Data+0x120>)
 80087ec:	7812      	ldrb	r2, [r2, #0]
 80087ee:	4413      	add	r3, r2
 80087f0:	4a15      	ldr	r2, [pc, #84]	; (8008848 <DHT_Get_Data+0x124>)
 80087f2:	7812      	ldrb	r2, [r2, #0]
 80087f4:	4413      	add	r3, r2
 80087f6:	4299      	cmp	r1, r3
 80087f8:	d116      	bne.n	8008828 <DHT_Get_Data+0x104>
			{
				TEMP = (float)Temp_byte1*1.0f;
 80087fa:	4b12      	ldr	r3, [pc, #72]	; (8008844 <DHT_Get_Data+0x120>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008806:	edc7 7a05 	vstr	s15, [r7, #20]
				RH =  (float)Rh_byte1*1.0f;
 800880a:	4b0c      	ldr	r3, [pc, #48]	; (800883c <DHT_Get_Data+0x118>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	edc7 7a04 	vstr	s15, [r7, #16]
			    *Temperature = TEMP;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	601a      	str	r2, [r3, #0]
			    *Humidity = RH;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	e003      	b.n	8008830 <DHT_Get_Data+0x10c>
			}
			else return -1;
 8008828:	23ff      	movs	r3, #255	; 0xff
 800882a:	e002      	b.n	8008832 <DHT_Get_Data+0x10e>
		}
	}
	else return -1;
 800882c:	23ff      	movs	r3, #255	; 0xff
 800882e:	e000      	b.n	8008832 <DHT_Get_Data+0x10e>


    //*Temperature = (int *)TEMP;
	//*Humidity = (int *)RH;

    return 1;
 8008830:	2301      	movs	r3, #1
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	2000071c 	.word	0x2000071c
 8008840:	2000071e 	.word	0x2000071e
 8008844:	2000071d 	.word	0x2000071d
 8008848:	20000722 	.word	0x20000722
 800884c:	20000720 	.word	0x20000720

08008850 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008854:	4904      	ldr	r1, [pc, #16]	; (8008868 <MX_FATFS_Init+0x18>)
 8008856:	4805      	ldr	r0, [pc, #20]	; (800886c <MX_FATFS_Init+0x1c>)
 8008858:	f7ff fda8 	bl	80083ac <FATFS_LinkDriver>
 800885c:	4603      	mov	r3, r0
 800885e:	461a      	mov	r2, r3
 8008860:	4b03      	ldr	r3, [pc, #12]	; (8008870 <MX_FATFS_Init+0x20>)
 8008862:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008864:	bf00      	nop
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000724 	.word	0x20000724
 800886c:	20000014 	.word	0x20000014
 8008870:	20000728 	.word	0x20000728

08008874 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008878:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800887a:	4618      	mov	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8008888:	2200      	movs	r2, #0
 800888a:	2102      	movs	r1, #2
 800888c:	4802      	ldr	r0, [pc, #8]	; (8008898 <SELECT+0x14>)
 800888e:	f7f9 f8c7 	bl	8001a20 <HAL_GPIO_WritePin>
}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	48001400 	.word	0x48001400

0800889c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80088a0:	2201      	movs	r2, #1
 80088a2:	2102      	movs	r1, #2
 80088a4:	4802      	ldr	r0, [pc, #8]	; (80088b0 <DESELECT+0x14>)
 80088a6:	f7f9 f8bb 	bl	8001a20 <HAL_GPIO_WritePin>
}
 80088aa:	bf00      	nop
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	48001400 	.word	0x48001400

080088b4 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80088be:	bf00      	nop
 80088c0:	4808      	ldr	r0, [pc, #32]	; (80088e4 <SPI_TxByte+0x30>)
 80088c2:	f7fb fb4e 	bl	8003f62 <HAL_SPI_GetState>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d1f9      	bne.n	80088c0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80088cc:	1df9      	adds	r1, r7, #7
 80088ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088d2:	2201      	movs	r2, #1
 80088d4:	4803      	ldr	r0, [pc, #12]	; (80088e4 <SPI_TxByte+0x30>)
 80088d6:	f7fa ffcb 	bl	8003870 <HAL_SPI_Transmit>
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000d14 	.word	0x20000d14

080088e8 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80088ee:	23ff      	movs	r3, #255	; 0xff
 80088f0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80088f6:	bf00      	nop
 80088f8:	4809      	ldr	r0, [pc, #36]	; (8008920 <SPI_RxByte+0x38>)
 80088fa:	f7fb fb32 	bl	8003f62 <HAL_SPI_GetState>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b01      	cmp	r3, #1
 8008902:	d1f9      	bne.n	80088f8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8008904:	1dba      	adds	r2, r7, #6
 8008906:	1df9      	adds	r1, r7, #7
 8008908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	2301      	movs	r3, #1
 8008910:	4803      	ldr	r0, [pc, #12]	; (8008920 <SPI_RxByte+0x38>)
 8008912:	f7fb f913 	bl	8003b3c <HAL_SPI_TransmitReceive>
  
  return data;
 8008916:	79bb      	ldrb	r3, [r7, #6]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000d14 	.word	0x20000d14

08008924 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800892c:	f7ff ffdc 	bl	80088e8 <SPI_RxByte>
 8008930:	4603      	mov	r3, r0
 8008932:	461a      	mov	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	701a      	strb	r2, [r3, #0]
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8008946:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <SD_ReadyWait+0x34>)
 8008948:	2232      	movs	r2, #50	; 0x32
 800894a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 800894c:	f7ff ffcc 	bl	80088e8 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8008950:	f7ff ffca 	bl	80088e8 <SPI_RxByte>
 8008954:	4603      	mov	r3, r0
 8008956:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	2bff      	cmp	r3, #255	; 0xff
 800895c:	d004      	beq.n	8008968 <SD_ReadyWait+0x28>
 800895e:	4b05      	ldr	r3, [pc, #20]	; (8008974 <SD_ReadyWait+0x34>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f3      	bne.n	8008950 <SD_ReadyWait+0x10>
  
  return res;
 8008968:	79fb      	ldrb	r3, [r7, #7]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20001630 	.word	0x20001630

08008978 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800897e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8008982:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8008984:	f7ff ff8a 	bl	800889c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8008988:	2300      	movs	r3, #0
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	e005      	b.n	800899a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800898e:	20ff      	movs	r0, #255	; 0xff
 8008990:	f7ff ff90 	bl	80088b4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	3301      	adds	r3, #1
 8008998:	613b      	str	r3, [r7, #16]
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b09      	cmp	r3, #9
 800899e:	ddf6      	ble.n	800898e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80089a0:	f7ff ff70 	bl	8008884 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80089a4:	2340      	movs	r3, #64	; 0x40
 80089a6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80089b8:	2395      	movs	r3, #149	; 0x95
 80089ba:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e009      	b.n	80089d6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80089c2:	1d3a      	adds	r2, r7, #4
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4413      	add	r3, r2
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7ff ff72 	bl	80088b4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b05      	cmp	r3, #5
 80089da:	ddf2      	ble.n	80089c2 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80089dc:	e002      	b.n	80089e4 <SD_PowerOn+0x6c>
  {
    Count--;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	3b01      	subs	r3, #1
 80089e2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80089e4:	f7ff ff80 	bl	80088e8 <SPI_RxByte>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d002      	beq.n	80089f4 <SD_PowerOn+0x7c>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f4      	bne.n	80089de <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80089f4:	f7ff ff52 	bl	800889c <DESELECT>
  SPI_TxByte(0XFF);
 80089f8:	20ff      	movs	r0, #255	; 0xff
 80089fa:	f7ff ff5b 	bl	80088b4 <SPI_TxByte>
  
  PowerFlag = 1;
 80089fe:	4b03      	ldr	r3, [pc, #12]	; (8008a0c <SD_PowerOn+0x94>)
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]
}
 8008a04:	bf00      	nop
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20000242 	.word	0x20000242

08008a10 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8008a14:	4b03      	ldr	r3, [pc, #12]	; (8008a24 <SD_PowerOff+0x14>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	701a      	strb	r2, [r3, #0]
}
 8008a1a:	bf00      	nop
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	20000242 	.word	0x20000242

08008a28 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8008a2c:	4b03      	ldr	r3, [pc, #12]	; (8008a3c <SD_CheckPower+0x14>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	20000242 	.word	0x20000242

08008a40 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8008a4a:	4b17      	ldr	r3, [pc, #92]	; (8008aa8 <SD_RxDataBlock+0x68>)
 8008a4c:	220a      	movs	r2, #10
 8008a4e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8008a50:	f7ff ff4a 	bl	80088e8 <SPI_RxByte>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	2bff      	cmp	r3, #255	; 0xff
 8008a5c:	d104      	bne.n	8008a68 <SD_RxDataBlock+0x28>
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <SD_RxDataBlock+0x68>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1f3      	bne.n	8008a50 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2bfe      	cmp	r3, #254	; 0xfe
 8008a6c:	d001      	beq.n	8008a72 <SD_RxDataBlock+0x32>
    return FALSE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e016      	b.n	8008aa0 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7ff ff53 	bl	8008924 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff ff4d 	bl	8008924 <SPI_RxBytePtr>
  } while(btr -= 2);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	3b02      	subs	r3, #2
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1ed      	bne.n	8008a72 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8008a96:	f7ff ff27 	bl	80088e8 <SPI_RxByte>
  SPI_RxByte();
 8008a9a:	f7ff ff25 	bl	80088e8 <SPI_RxByte>
  
  return TRUE;
 8008a9e:	2301      	movs	r3, #1
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20001631 	.word	0x20001631

08008aac <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8008abc:	f7ff ff40 	bl	8008940 <SD_ReadyWait>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2bff      	cmp	r3, #255	; 0xff
 8008ac4:	d001      	beq.n	8008aca <SD_TxDataBlock+0x1e>
    return FALSE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e040      	b.n	8008b4c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff fef1 	bl	80088b4 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	2bfd      	cmp	r3, #253	; 0xfd
 8008ad6:	d031      	beq.n	8008b3c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	607a      	str	r2, [r7, #4]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fee5 	bl	80088b4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff fede 	bl	80088b4 <SPI_TxByte>
    } while (--wc);
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	73bb      	strb	r3, [r7, #14]
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1eb      	bne.n	8008adc <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8008b04:	f7ff fef0 	bl	80088e8 <SPI_RxByte>
    SPI_RxByte();
 8008b08:	f7ff feee 	bl	80088e8 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8008b0c:	e00b      	b.n	8008b26 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8008b0e:	f7ff feeb 	bl	80088e8 <SPI_RxByte>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	f003 031f 	and.w	r3, r3, #31
 8008b1c:	2b05      	cmp	r3, #5
 8008b1e:	d006      	beq.n	8008b2e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8008b20:	7b7b      	ldrb	r3, [r7, #13]
 8008b22:	3301      	adds	r3, #1
 8008b24:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8008b26:	7b7b      	ldrb	r3, [r7, #13]
 8008b28:	2b40      	cmp	r3, #64	; 0x40
 8008b2a:	d9f0      	bls.n	8008b0e <SD_TxDataBlock+0x62>
 8008b2c:	e000      	b.n	8008b30 <SD_TxDataBlock+0x84>
        break;
 8008b2e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8008b30:	bf00      	nop
 8008b32:	f7ff fed9 	bl	80088e8 <SPI_RxByte>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0fa      	beq.n	8008b32 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	f003 031f 	and.w	r3, r3, #31
 8008b42:	2b05      	cmp	r3, #5
 8008b44:	d101      	bne.n	8008b4a <SD_TxDataBlock+0x9e>
    return TRUE;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	6039      	str	r1, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8008b60:	f7ff feee 	bl	8008940 <SD_ReadyWait>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2bff      	cmp	r3, #255	; 0xff
 8008b68:	d001      	beq.n	8008b6e <SD_SendCmd+0x1a>
    return 0xFF;
 8008b6a:	23ff      	movs	r3, #255	; 0xff
 8008b6c:	e040      	b.n	8008bf0 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff fe9f 	bl	80088b4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	0e1b      	lsrs	r3, r3, #24
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fe99 	bl	80088b4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	0c1b      	lsrs	r3, r3, #16
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff fe93 	bl	80088b4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	0a1b      	lsrs	r3, r3, #8
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff fe8d 	bl	80088b4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff fe88 	bl	80088b4 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	2b40      	cmp	r3, #64	; 0x40
 8008bac:	d101      	bne.n	8008bb2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8008bae:	2395      	movs	r3, #149	; 0x95
 8008bb0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	2b48      	cmp	r3, #72	; 0x48
 8008bb6:	d101      	bne.n	8008bbc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8008bb8:	2387      	movs	r3, #135	; 0x87
 8008bba:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7ff fe78 	bl	80088b4 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b4c      	cmp	r3, #76	; 0x4c
 8008bc8:	d101      	bne.n	8008bce <SD_SendCmd+0x7a>
    SPI_RxByte();
 8008bca:	f7ff fe8d 	bl	80088e8 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8008bce:	230a      	movs	r3, #10
 8008bd0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8008bd2:	f7ff fe89 	bl	80088e8 <SPI_RxByte>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8008bda:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da05      	bge.n	8008bee <SD_SendCmd+0x9a>
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	73bb      	strb	r3, [r7, #14]
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1f1      	bne.n	8008bd2 <SD_SendCmd+0x7e>
  
  return res;
 8008bee:	7b7b      	ldrb	r3, [r7, #13]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0d5      	b.n	8008db8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8008c0c:	4b6c      	ldr	r3, [pc, #432]	; (8008dc0 <SD_disk_initialize+0x1c8>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <SD_disk_initialize+0x2a>
    return Stat;        
 8008c1a:	4b69      	ldr	r3, [pc, #420]	; (8008dc0 <SD_disk_initialize+0x1c8>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	e0ca      	b.n	8008db8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8008c22:	f7ff fea9 	bl	8008978 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8008c26:	f7ff fe2d 	bl	8008884 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8008c2e:	2100      	movs	r1, #0
 8008c30:	2040      	movs	r0, #64	; 0x40
 8008c32:	f7ff ff8f 	bl	8008b54 <SD_SendCmd>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	f040 80a5 	bne.w	8008d88 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8008c3e:	4b61      	ldr	r3, [pc, #388]	; (8008dc4 <SD_disk_initialize+0x1cc>)
 8008c40:	2264      	movs	r2, #100	; 0x64
 8008c42:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8008c44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c48:	2048      	movs	r0, #72	; 0x48
 8008c4a:	f7ff ff83 	bl	8008b54 <SD_SendCmd>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d158      	bne.n	8008d06 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8008c54:	2300      	movs	r3, #0
 8008c56:	73fb      	strb	r3, [r7, #15]
 8008c58:	e00c      	b.n	8008c74 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8008c5a:	7bfc      	ldrb	r4, [r7, #15]
 8008c5c:	f7ff fe44 	bl	80088e8 <SPI_RxByte>
 8008c60:	4603      	mov	r3, r0
 8008c62:	461a      	mov	r2, r3
 8008c64:	f107 0310 	add.w	r3, r7, #16
 8008c68:	4423      	add	r3, r4
 8008c6a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	3301      	adds	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	2b03      	cmp	r3, #3
 8008c78:	d9ef      	bls.n	8008c5a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8008c7a:	7abb      	ldrb	r3, [r7, #10]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	f040 8083 	bne.w	8008d88 <SD_disk_initialize+0x190>
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	2baa      	cmp	r3, #170	; 0xaa
 8008c86:	d17f      	bne.n	8008d88 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8008c88:	2100      	movs	r1, #0
 8008c8a:	2077      	movs	r0, #119	; 0x77
 8008c8c:	f7ff ff62 	bl	8008b54 <SD_SendCmd>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d807      	bhi.n	8008ca6 <SD_disk_initialize+0xae>
 8008c96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008c9a:	2069      	movs	r0, #105	; 0x69
 8008c9c:	f7ff ff5a 	bl	8008b54 <SD_SendCmd>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8008ca6:	4b47      	ldr	r3, [pc, #284]	; (8008dc4 <SD_disk_initialize+0x1cc>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1eb      	bne.n	8008c88 <SD_disk_initialize+0x90>
 8008cb0:	e000      	b.n	8008cb4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8008cb2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8008cb4:	4b43      	ldr	r3, [pc, #268]	; (8008dc4 <SD_disk_initialize+0x1cc>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d064      	beq.n	8008d88 <SD_disk_initialize+0x190>
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	207a      	movs	r0, #122	; 0x7a
 8008cc2:	f7ff ff47 	bl	8008b54 <SD_SendCmd>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d15d      	bne.n	8008d88 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
 8008cd0:	e00c      	b.n	8008cec <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8008cd2:	7bfc      	ldrb	r4, [r7, #15]
 8008cd4:	f7ff fe08 	bl	80088e8 <SPI_RxByte>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	461a      	mov	r2, r3
 8008cdc:	f107 0310 	add.w	r3, r7, #16
 8008ce0:	4423      	add	r3, r4
 8008ce2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d9ef      	bls.n	8008cd2 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8008cf2:	7a3b      	ldrb	r3, [r7, #8]
 8008cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <SD_disk_initialize+0x108>
 8008cfc:	2306      	movs	r3, #6
 8008cfe:	e000      	b.n	8008d02 <SD_disk_initialize+0x10a>
 8008d00:	2302      	movs	r3, #2
 8008d02:	73bb      	strb	r3, [r7, #14]
 8008d04:	e040      	b.n	8008d88 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8008d06:	2100      	movs	r1, #0
 8008d08:	2077      	movs	r0, #119	; 0x77
 8008d0a:	f7ff ff23 	bl	8008b54 <SD_SendCmd>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d808      	bhi.n	8008d26 <SD_disk_initialize+0x12e>
 8008d14:	2100      	movs	r1, #0
 8008d16:	2069      	movs	r0, #105	; 0x69
 8008d18:	f7ff ff1c 	bl	8008b54 <SD_SendCmd>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d801      	bhi.n	8008d26 <SD_disk_initialize+0x12e>
 8008d22:	2302      	movs	r3, #2
 8008d24:	e000      	b.n	8008d28 <SD_disk_initialize+0x130>
 8008d26:	2301      	movs	r3, #1
 8008d28:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d10e      	bne.n	8008d4e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8008d30:	2100      	movs	r1, #0
 8008d32:	2077      	movs	r0, #119	; 0x77
 8008d34:	f7ff ff0e 	bl	8008b54 <SD_SendCmd>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d80e      	bhi.n	8008d5c <SD_disk_initialize+0x164>
 8008d3e:	2100      	movs	r1, #0
 8008d40:	2069      	movs	r0, #105	; 0x69
 8008d42:	f7ff ff07 	bl	8008b54 <SD_SendCmd>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d107      	bne.n	8008d5c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8008d4c:	e00d      	b.n	8008d6a <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8008d4e:	2100      	movs	r1, #0
 8008d50:	2041      	movs	r0, #65	; 0x41
 8008d52:	f7ff feff 	bl	8008b54 <SD_SendCmd>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8008d5c:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <SD_disk_initialize+0x1cc>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e1      	bne.n	8008d2a <SD_disk_initialize+0x132>
 8008d66:	e000      	b.n	8008d6a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8008d68:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8008d6a:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <SD_disk_initialize+0x1cc>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d007      	beq.n	8008d84 <SD_disk_initialize+0x18c>
 8008d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d78:	2050      	movs	r0, #80	; 0x50
 8008d7a:	f7ff feeb 	bl	8008b54 <SD_SendCmd>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8008d88:	4a0f      	ldr	r2, [pc, #60]	; (8008dc8 <SD_disk_initialize+0x1d0>)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8008d8e:	f7ff fd85 	bl	800889c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8008d92:	f7ff fda9 	bl	80088e8 <SPI_RxByte>
  
  if (type) 
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d008      	beq.n	8008dae <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8008d9c:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <SD_disk_initialize+0x1c8>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	f023 0301 	bic.w	r3, r3, #1
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <SD_disk_initialize+0x1c8>)
 8008daa:	701a      	strb	r2, [r3, #0]
 8008dac:	e001      	b.n	8008db2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8008dae:	f7ff fe2f 	bl	8008a10 <SD_PowerOff>
  }
  
  return Stat;
 8008db2:	4b03      	ldr	r3, [pc, #12]	; (8008dc0 <SD_disk_initialize+0x1c8>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	b2db      	uxtb	r3, r3
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd90      	pop	{r4, r7, pc}
 8008dc0:	20000005 	.word	0x20000005
 8008dc4:	20001631 	.word	0x20001631
 8008dc8:	20000241 	.word	0x20000241

08008dcc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e002      	b.n	8008de6 <SD_disk_status+0x1a>
  
  return Stat;
 8008de0:	4b04      	ldr	r3, [pc, #16]	; (8008df4 <SD_disk_status+0x28>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	b2db      	uxtb	r3, r3
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20000005 	.word	0x20000005

08008df8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <SD_disk_read+0x1c>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <SD_disk_read+0x20>
    return RES_PARERR;
 8008e14:	2304      	movs	r3, #4
 8008e16:	e051      	b.n	8008ebc <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8008e18:	4b2a      	ldr	r3, [pc, #168]	; (8008ec4 <SD_disk_read+0xcc>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e048      	b.n	8008ebc <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8008e2a:	4b27      	ldr	r3, [pc, #156]	; (8008ec8 <SD_disk_read+0xd0>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d102      	bne.n	8008e3c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	025b      	lsls	r3, r3, #9
 8008e3a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8008e3c:	f7ff fd22 	bl	8008884 <SELECT>
  
  if (count == 1) 
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d111      	bne.n	8008e6a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	2051      	movs	r0, #81	; 0x51
 8008e4a:	f7ff fe83 	bl	8008b54 <SD_SendCmd>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d129      	bne.n	8008ea8 <SD_disk_read+0xb0>
 8008e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e58:	68b8      	ldr	r0, [r7, #8]
 8008e5a:	f7ff fdf1 	bl	8008a40 <SD_RxDataBlock>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d021      	beq.n	8008ea8 <SD_disk_read+0xb0>
      count = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	e01e      	b.n	8008ea8 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	2052      	movs	r0, #82	; 0x52
 8008e6e:	f7ff fe71 	bl	8008b54 <SD_SendCmd>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d117      	bne.n	8008ea8 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8008e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e7c:	68b8      	ldr	r0, [r7, #8]
 8008e7e:	f7ff fddf 	bl	8008a40 <SD_RxDataBlock>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00a      	beq.n	8008e9e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008e8e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	603b      	str	r3, [r7, #0]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1ed      	bne.n	8008e78 <SD_disk_read+0x80>
 8008e9c:	e000      	b.n	8008ea0 <SD_disk_read+0xa8>
          break;
 8008e9e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	204c      	movs	r0, #76	; 0x4c
 8008ea4:	f7ff fe56 	bl	8008b54 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8008ea8:	f7ff fcf8 	bl	800889c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8008eac:	f7ff fd1c 	bl	80088e8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bf14      	ite	ne
 8008eb6:	2301      	movne	r3, #1
 8008eb8:	2300      	moveq	r3, #0
 8008eba:	b2db      	uxtb	r3, r3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000005 	.word	0x20000005
 8008ec8:	20000241 	.word	0x20000241

08008ecc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d102      	bne.n	8008ee8 <SD_disk_write+0x1c>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <SD_disk_write+0x20>
    return RES_PARERR;
 8008ee8:	2304      	movs	r3, #4
 8008eea:	e06b      	b.n	8008fc4 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8008eec:	4b37      	ldr	r3, [pc, #220]	; (8008fcc <SD_disk_write+0x100>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <SD_disk_write+0x32>
    return RES_NOTRDY;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e062      	b.n	8008fc4 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8008efe:	4b33      	ldr	r3, [pc, #204]	; (8008fcc <SD_disk_write+0x100>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	f003 0304 	and.w	r3, r3, #4
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <SD_disk_write+0x44>
    return RES_WRPRT;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e059      	b.n	8008fc4 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8008f10:	4b2f      	ldr	r3, [pc, #188]	; (8008fd0 <SD_disk_write+0x104>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d102      	bne.n	8008f22 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	025b      	lsls	r3, r3, #9
 8008f20:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8008f22:	f7ff fcaf 	bl	8008884 <SELECT>
  
  if (count == 1) 
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d110      	bne.n	8008f4e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	2058      	movs	r0, #88	; 0x58
 8008f30:	f7ff fe10 	bl	8008b54 <SD_SendCmd>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d13a      	bne.n	8008fb0 <SD_disk_write+0xe4>
 8008f3a:	21fe      	movs	r1, #254	; 0xfe
 8008f3c:	68b8      	ldr	r0, [r7, #8]
 8008f3e:	f7ff fdb5 	bl	8008aac <SD_TxDataBlock>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d033      	beq.n	8008fb0 <SD_disk_write+0xe4>
      count = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	603b      	str	r3, [r7, #0]
 8008f4c:	e030      	b.n	8008fb0 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8008f4e:	4b20      	ldr	r3, [pc, #128]	; (8008fd0 <SD_disk_write+0x104>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d007      	beq.n	8008f6a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	2077      	movs	r0, #119	; 0x77
 8008f5e:	f7ff fdf9 	bl	8008b54 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	2057      	movs	r0, #87	; 0x57
 8008f66:	f7ff fdf5 	bl	8008b54 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	2059      	movs	r0, #89	; 0x59
 8008f6e:	f7ff fdf1 	bl	8008b54 <SD_SendCmd>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d11b      	bne.n	8008fb0 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8008f78:	21fc      	movs	r1, #252	; 0xfc
 8008f7a:	68b8      	ldr	r0, [r7, #8]
 8008f7c:	f7ff fd96 	bl	8008aac <SD_TxDataBlock>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008f8c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1ee      	bne.n	8008f78 <SD_disk_write+0xac>
 8008f9a:	e000      	b.n	8008f9e <SD_disk_write+0xd2>
          break;
 8008f9c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8008f9e:	21fd      	movs	r1, #253	; 0xfd
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f7ff fd83 	bl	8008aac <SD_TxDataBlock>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <SD_disk_write+0xe4>
      {        
        count = 1;
 8008fac:	2301      	movs	r3, #1
 8008fae:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8008fb0:	f7ff fc74 	bl	800889c <DESELECT>
  SPI_RxByte();
 8008fb4:	f7ff fc98 	bl	80088e8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bf14      	ite	ne
 8008fbe:	2301      	movne	r3, #1
 8008fc0:	2300      	moveq	r3, #0
 8008fc2:	b2db      	uxtb	r3, r3
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000005 	.word	0x20000005
 8008fd0:	20000241 	.word	0x20000241

08008fd4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8008fd4:	b590      	push	{r4, r7, lr}
 8008fd6:	b08b      	sub	sp, #44	; 0x2c
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	603a      	str	r2, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8008fee:	2304      	movs	r3, #4
 8008ff0:	e117      	b.n	8009222 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8008ff8:	79bb      	ldrb	r3, [r7, #6]
 8008ffa:	2b05      	cmp	r3, #5
 8008ffc:	d126      	bne.n	800904c <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d00e      	beq.n	8009024 <SD_disk_ioctl+0x50>
 8009006:	2b02      	cmp	r3, #2
 8009008:	d012      	beq.n	8009030 <SD_disk_ioctl+0x5c>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d11a      	bne.n	8009044 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 800900e:	f7ff fd0b 	bl	8008a28 <SD_CheckPower>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8009018:	f7ff fcfa 	bl	8008a10 <SD_PowerOff>
      res = RES_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009022:	e0fc      	b.n	800921e <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8009024:	f7ff fca8 	bl	8008978 <SD_PowerOn>
      res = RES_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800902e:	e0f6      	b.n	800921e <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	1c5c      	adds	r4, r3, #1
 8009034:	f7ff fcf8 	bl	8008a28 <SD_CheckPower>
 8009038:	4603      	mov	r3, r0
 800903a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800903c:	2300      	movs	r3, #0
 800903e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009042:	e0ec      	b.n	800921e <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8009044:	2304      	movs	r3, #4
 8009046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800904a:	e0e8      	b.n	800921e <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800904c:	4b77      	ldr	r3, [pc, #476]	; (800922c <SD_disk_ioctl+0x258>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 800905a:	2303      	movs	r3, #3
 800905c:	e0e1      	b.n	8009222 <SD_disk_ioctl+0x24e>
    
    SELECT();
 800905e:	f7ff fc11 	bl	8008884 <SELECT>
    
    switch (ctrl) 
 8009062:	79bb      	ldrb	r3, [r7, #6]
 8009064:	2b0d      	cmp	r3, #13
 8009066:	f200 80cb 	bhi.w	8009200 <SD_disk_ioctl+0x22c>
 800906a:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <SD_disk_ioctl+0x9c>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	0800916b 	.word	0x0800916b
 8009074:	080090a9 	.word	0x080090a9
 8009078:	0800915b 	.word	0x0800915b
 800907c:	08009201 	.word	0x08009201
 8009080:	08009201 	.word	0x08009201
 8009084:	08009201 	.word	0x08009201
 8009088:	08009201 	.word	0x08009201
 800908c:	08009201 	.word	0x08009201
 8009090:	08009201 	.word	0x08009201
 8009094:	08009201 	.word	0x08009201
 8009098:	08009201 	.word	0x08009201
 800909c:	0800917d 	.word	0x0800917d
 80090a0:	080091a1 	.word	0x080091a1
 80090a4:	080091c5 	.word	0x080091c5
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80090a8:	2100      	movs	r1, #0
 80090aa:	2049      	movs	r0, #73	; 0x49
 80090ac:	f7ff fd52 	bl	8008b54 <SD_SendCmd>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f040 80a8 	bne.w	8009208 <SD_disk_ioctl+0x234>
 80090b8:	f107 030c 	add.w	r3, r7, #12
 80090bc:	2110      	movs	r1, #16
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff fcbe 	bl	8008a40 <SD_RxDataBlock>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 809e 	beq.w	8009208 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 80090cc:	7b3b      	ldrb	r3, [r7, #12]
 80090ce:	099b      	lsrs	r3, r3, #6
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d10e      	bne.n	80090f4 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80090d6:	7d7b      	ldrb	r3, [r7, #21]
 80090d8:	b29a      	uxth	r2, r3
 80090da:	7d3b      	ldrb	r3, [r7, #20]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	021b      	lsls	r3, r3, #8
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3301      	adds	r3, #1
 80090e8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80090ea:	8bfb      	ldrh	r3, [r7, #30]
 80090ec:	029a      	lsls	r2, r3, #10
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	e02e      	b.n	8009152 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80090f4:	7c7b      	ldrb	r3, [r7, #17]
 80090f6:	f003 030f 	and.w	r3, r3, #15
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	7dbb      	ldrb	r3, [r7, #22]
 80090fe:	09db      	lsrs	r3, r3, #7
 8009100:	b2db      	uxtb	r3, r3
 8009102:	4413      	add	r3, r2
 8009104:	b2da      	uxtb	r2, r3
 8009106:	7d7b      	ldrb	r3, [r7, #21]
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	b2db      	uxtb	r3, r3
 800910c:	f003 0306 	and.w	r3, r3, #6
 8009110:	b2db      	uxtb	r3, r3
 8009112:	4413      	add	r3, r2
 8009114:	b2db      	uxtb	r3, r3
 8009116:	3302      	adds	r3, #2
 8009118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800911c:	7d3b      	ldrb	r3, [r7, #20]
 800911e:	099b      	lsrs	r3, r3, #6
 8009120:	b2db      	uxtb	r3, r3
 8009122:	b29a      	uxth	r2, r3
 8009124:	7cfb      	ldrb	r3, [r7, #19]
 8009126:	b29b      	uxth	r3, r3
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	b29b      	uxth	r3, r3
 800912c:	4413      	add	r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	7cbb      	ldrb	r3, [r7, #18]
 8009132:	029b      	lsls	r3, r3, #10
 8009134:	b29b      	uxth	r3, r3
 8009136:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800913a:	b29b      	uxth	r3, r3
 800913c:	4413      	add	r3, r2
 800913e:	b29b      	uxth	r3, r3
 8009140:	3301      	adds	r3, #1
 8009142:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8009144:	8bfa      	ldrh	r2, [r7, #30]
 8009146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800914a:	3b09      	subs	r3, #9
 800914c:	409a      	lsls	r2, r3
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8009158:	e056      	b.n	8009208 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009160:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009168:	e055      	b.n	8009216 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800916a:	f7ff fbe9 	bl	8008940 <SD_ReadyWait>
 800916e:	4603      	mov	r3, r0
 8009170:	2bff      	cmp	r3, #255	; 0xff
 8009172:	d14b      	bne.n	800920c <SD_disk_ioctl+0x238>
        res = RES_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800917a:	e047      	b.n	800920c <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800917c:	2100      	movs	r1, #0
 800917e:	2049      	movs	r0, #73	; 0x49
 8009180:	f7ff fce8 	bl	8008b54 <SD_SendCmd>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d142      	bne.n	8009210 <SD_disk_ioctl+0x23c>
 800918a:	2110      	movs	r1, #16
 800918c:	6a38      	ldr	r0, [r7, #32]
 800918e:	f7ff fc57 	bl	8008a40 <SD_RxDataBlock>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d03b      	beq.n	8009210 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800919e:	e037      	b.n	8009210 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80091a0:	2100      	movs	r1, #0
 80091a2:	204a      	movs	r0, #74	; 0x4a
 80091a4:	f7ff fcd6 	bl	8008b54 <SD_SendCmd>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d132      	bne.n	8009214 <SD_disk_ioctl+0x240>
 80091ae:	2110      	movs	r1, #16
 80091b0:	6a38      	ldr	r0, [r7, #32]
 80091b2:	f7ff fc45 	bl	8008a40 <SD_RxDataBlock>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d02b      	beq.n	8009214 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80091c2:	e027      	b.n	8009214 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80091c4:	2100      	movs	r1, #0
 80091c6:	207a      	movs	r0, #122	; 0x7a
 80091c8:	f7ff fcc4 	bl	8008b54 <SD_SendCmd>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d116      	bne.n	8009200 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 80091d2:	2300      	movs	r3, #0
 80091d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091d8:	e00b      	b.n	80091f2 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 80091da:	6a3c      	ldr	r4, [r7, #32]
 80091dc:	1c63      	adds	r3, r4, #1
 80091de:	623b      	str	r3, [r7, #32]
 80091e0:	f7ff fb82 	bl	80088e8 <SPI_RxByte>
 80091e4:	4603      	mov	r3, r0
 80091e6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80091e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091ec:	3301      	adds	r3, #1
 80091ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80091f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d9ef      	bls.n	80091da <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8009200:	2304      	movs	r3, #4
 8009202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009206:	e006      	b.n	8009216 <SD_disk_ioctl+0x242>
      break;
 8009208:	bf00      	nop
 800920a:	e004      	b.n	8009216 <SD_disk_ioctl+0x242>
      break;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <SD_disk_ioctl+0x242>
      break;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <SD_disk_ioctl+0x242>
      break;
 8009214:	bf00      	nop
    }
    
    DESELECT();
 8009216:	f7ff fb41 	bl	800889c <DESELECT>
    SPI_RxByte();
 800921a:	f7ff fb65 	bl	80088e8 <SPI_RxByte>
  }
  
  return res;
 800921e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009222:	4618      	mov	r0, r3
 8009224:	372c      	adds	r7, #44	; 0x2c
 8009226:	46bd      	mov	sp, r7
 8009228:	bd90      	pop	{r4, r7, pc}
 800922a:	bf00      	nop
 800922c:	20000005 	.word	0x20000005

08009230 <cardInit>:
struct Sensors{
	uint8_t value;	//1 -> na voljo je ESP8266, 2->DHT11, 4-> DHT22, 8-> Co2, 16 -> O2, 32 -> C2H4, 64 -> S1, 128 -> S2.
	uint8_t wifi_status; //0 ni povezave, 1 je povezava.
} sensor;

void cardInit(){
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
	char buff[1];
	if(Mount_SD("/") == 1){
 8009236:	4835      	ldr	r0, [pc, #212]	; (800930c <cardInit+0xdc>)
 8009238:	f7ff f8c8 	bl	80083cc <Mount_SD>
 800923c:	4603      	mov	r3, r0
 800923e:	2b01      	cmp	r3, #1
 8009240:	d15a      	bne.n	80092f8 <cardInit+0xc8>

		uint8_t num = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	71fb      	strb	r3, [r7, #7]
		uint8_t i = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	71bb      	strb	r3, [r7, #6]
		uint8_t zamik = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	717b      	strb	r3, [r7, #5]

		if(open_file("config") == 0){
 800924e:	4830      	ldr	r0, [pc, #192]	; (8009310 <cardInit+0xe0>)
 8009250:	f7ff f8ec 	bl	800842c <open_file>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d14a      	bne.n	80092f0 <cardInit+0xc0>
			while(Read_config_File("config", buff, 1, zamik) == 0){
 800925a:	e03c      	b.n	80092d6 <cardInit+0xa6>
				zamik++;
 800925c:	797b      	ldrb	r3, [r7, #5]
 800925e:	3301      	adds	r3, #1
 8009260:	717b      	strb	r3, [r7, #5]
				if(buff[0] != ';'){
 8009262:	793b      	ldrb	r3, [r7, #4]
 8009264:	2b3b      	cmp	r3, #59	; 0x3b
 8009266:	d02e      	beq.n	80092c6 <cardInit+0x96>
					switch(num){
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b03      	cmp	r3, #3
 800926c:	d833      	bhi.n	80092d6 <cardInit+0xa6>
 800926e:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <cardInit+0x44>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	08009285 	.word	0x08009285
 8009278:	08009295 	.word	0x08009295
 800927c:	080092a5 	.word	0x080092a5
 8009280:	080092b5 	.word	0x080092b5
						case 0:
							SSID[i++] = buff[0];
 8009284:	79bb      	ldrb	r3, [r7, #6]
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	71ba      	strb	r2, [r7, #6]
 800928a:	461a      	mov	r2, r3
 800928c:	7939      	ldrb	r1, [r7, #4]
 800928e:	4b21      	ldr	r3, [pc, #132]	; (8009314 <cardInit+0xe4>)
 8009290:	5499      	strb	r1, [r3, r2]
							break;
 8009292:	e020      	b.n	80092d6 <cardInit+0xa6>
						case 1:
							passwd[i++] = buff[0];
 8009294:	79bb      	ldrb	r3, [r7, #6]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	71ba      	strb	r2, [r7, #6]
 800929a:	461a      	mov	r2, r3
 800929c:	7939      	ldrb	r1, [r7, #4]
 800929e:	4b1e      	ldr	r3, [pc, #120]	; (8009318 <cardInit+0xe8>)
 80092a0:	5499      	strb	r1, [r3, r2]
							break;
 80092a2:	e018      	b.n	80092d6 <cardInit+0xa6>
						case 2:
							Server[i++] = buff[0];
 80092a4:	79bb      	ldrb	r3, [r7, #6]
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	71ba      	strb	r2, [r7, #6]
 80092aa:	461a      	mov	r2, r3
 80092ac:	7939      	ldrb	r1, [r7, #4]
 80092ae:	4b1b      	ldr	r3, [pc, #108]	; (800931c <cardInit+0xec>)
 80092b0:	5499      	strb	r1, [r3, r2]
							break;
 80092b2:	e010      	b.n	80092d6 <cardInit+0xa6>
						case 3:
							Time[i++] = buff[0];
 80092b4:	79bb      	ldrb	r3, [r7, #6]
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	71ba      	strb	r2, [r7, #6]
 80092ba:	461a      	mov	r2, r3
 80092bc:	7939      	ldrb	r1, [r7, #4]
 80092be:	4b18      	ldr	r3, [pc, #96]	; (8009320 <cardInit+0xf0>)
 80092c0:	5499      	strb	r1, [r3, r2]
							break;
 80092c2:	bf00      	nop
 80092c4:	e007      	b.n	80092d6 <cardInit+0xa6>
					}
				}else{
					num++;
 80092c6:	79fb      	ldrb	r3, [r7, #7]
 80092c8:	3301      	adds	r3, #1
 80092ca:	71fb      	strb	r3, [r7, #7]
					i = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	71bb      	strb	r3, [r7, #6]
					if(num >= 4){
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d809      	bhi.n	80092ea <cardInit+0xba>
			while(Read_config_File("config", buff, 1, zamik) == 0){
 80092d6:	797b      	ldrb	r3, [r7, #5]
 80092d8:	1d39      	adds	r1, r7, #4
 80092da:	2201      	movs	r2, #1
 80092dc:	480c      	ldr	r0, [pc, #48]	; (8009310 <cardInit+0xe0>)
 80092de:	f7ff f8f1 	bl	80084c4 <Read_config_File>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0b9      	beq.n	800925c <cardInit+0x2c>
 80092e8:	e000      	b.n	80092ec <cardInit+0xbc>
						break;
 80092ea:	bf00      	nop
					}
				}
			}
			close_file();
 80092ec:	f7ff f8cc 	bl	8008488 <close_file>
		}
		//Format_SD();
		Unmount_SD("/");
 80092f0:	4806      	ldr	r0, [pc, #24]	; (800930c <cardInit+0xdc>)
 80092f2:	f7ff f887 	bl	8008404 <Unmount_SD>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		for(;;){
			__NOP();
		}
	}
}
 80092f6:	e006      	b.n	8009306 <cardInit+0xd6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80092f8:	2201      	movs	r2, #1
 80092fa:	2180      	movs	r1, #128	; 0x80
 80092fc:	4809      	ldr	r0, [pc, #36]	; (8009324 <cardInit+0xf4>)
 80092fe:	f7f8 fb8f 	bl	8001a20 <HAL_GPIO_WritePin>
			__NOP();
 8009302:	bf00      	nop
 8009304:	e7fd      	b.n	8009302 <cardInit+0xd2>
}
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	0800afb0 	.word	0x0800afb0
 8009310:	0800afb4 	.word	0x0800afb4
 8009314:	200015dc 	.word	0x200015dc
 8009318:	20000dbc 	.word	0x20000dbc
 800931c:	20000d04 	.word	0x20000d04
 8009320:	20000dd0 	.word	0x20000dd0
 8009324:	48000400 	.word	0x48000400

08009328 <alarmInit>:

void alarmInit(){
 8009328:	b5b0      	push	{r4, r5, r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
	char hours[2];
	char minutes[2];
	int seconds;
	uint8_t j = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	75fb      	strb	r3, [r7, #23]

	resetTime.Hours = 0;
 8009332:	4b64      	ldr	r3, [pc, #400]	; (80094c4 <alarmInit+0x19c>)
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
	resetTime.Minutes = 0;
 8009338:	4b62      	ldr	r3, [pc, #392]	; (80094c4 <alarmInit+0x19c>)
 800933a:	2200      	movs	r2, #0
 800933c:	705a      	strb	r2, [r3, #1]
	resetTime.Seconds = 0;
 800933e:	4b61      	ldr	r3, [pc, #388]	; (80094c4 <alarmInit+0x19c>)
 8009340:	2200      	movs	r2, #0
 8009342:	709a      	strb	r2, [r3, #2]
	resetTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009344:	4b5f      	ldr	r3, [pc, #380]	; (80094c4 <alarmInit+0x19c>)
 8009346:	2200      	movs	r2, #0
 8009348:	60da      	str	r2, [r3, #12]
	resetTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800934a:	4b5e      	ldr	r3, [pc, #376]	; (80094c4 <alarmInit+0x19c>)
 800934c:	2200      	movs	r2, #0
 800934e:	611a      	str	r2, [r3, #16]

	resetDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009350:	4b5d      	ldr	r3, [pc, #372]	; (80094c8 <alarmInit+0x1a0>)
 8009352:	2201      	movs	r2, #1
 8009354:	701a      	strb	r2, [r3, #0]
	resetDate.Month = RTC_MONTH_JANUARY;
 8009356:	4b5c      	ldr	r3, [pc, #368]	; (80094c8 <alarmInit+0x1a0>)
 8009358:	2201      	movs	r2, #1
 800935a:	705a      	strb	r2, [r3, #1]
	resetDate.Date = 1;
 800935c:	4b5a      	ldr	r3, [pc, #360]	; (80094c8 <alarmInit+0x1a0>)
 800935e:	2201      	movs	r2, #1
 8009360:	709a      	strb	r2, [r3, #2]
	resetDate.Year = 0;
 8009362:	4b59      	ldr	r3, [pc, #356]	; (80094c8 <alarmInit+0x1a0>)
 8009364:	2200      	movs	r2, #0
 8009366:	70da      	strb	r2, [r3, #3]


	for(int i = 0; i<5; i++){
 8009368:	2300      	movs	r3, #0
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	e026      	b.n	80093bc <alarmInit+0x94>
	  if(i < 2){
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b01      	cmp	r3, #1
 8009372:	dc0d      	bgt.n	8009390 <alarmInit+0x68>
		  hours[j++] = Time[i];
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	75fa      	strb	r2, [r7, #23]
 800937a:	4619      	mov	r1, r3
 800937c:	4a53      	ldr	r2, [pc, #332]	; (80094cc <alarmInit+0x1a4>)
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	4413      	add	r3, r2
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	f107 0318 	add.w	r3, r7, #24
 8009388:	440b      	add	r3, r1
 800938a:	f803 2c10 	strb.w	r2, [r3, #-16]
 800938e:	e012      	b.n	80093b6 <alarmInit+0x8e>
	  }else if(i > 2){
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2b02      	cmp	r3, #2
 8009394:	dd0d      	ble.n	80093b2 <alarmInit+0x8a>
		  minutes[j++] = Time[i];
 8009396:	7dfb      	ldrb	r3, [r7, #23]
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	75fa      	strb	r2, [r7, #23]
 800939c:	4619      	mov	r1, r3
 800939e:	4a4b      	ldr	r2, [pc, #300]	; (80094cc <alarmInit+0x1a4>)
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	4413      	add	r3, r2
 80093a4:	781a      	ldrb	r2, [r3, #0]
 80093a6:	f107 0318 	add.w	r3, r7, #24
 80093aa:	440b      	add	r3, r1
 80093ac:	f803 2c14 	strb.w	r2, [r3, #-20]
 80093b0:	e001      	b.n	80093b6 <alarmInit+0x8e>
	  }else{
		  j = 0;
 80093b2:	2300      	movs	r3, #0
 80093b4:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i<5; i++){
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	3301      	adds	r3, #1
 80093ba:	613b      	str	r3, [r7, #16]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2b04      	cmp	r3, #4
 80093c0:	ddd5      	ble.n	800936e <alarmInit+0x46>
	  }
	}

	seconds = (atoi(hours) * 60 * 60 + atoi(minutes) * 60) + (atoi(hours) * 60 * 60 + atoi(minutes) * 60)/5;
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 f8d1 	bl	800a56e <atoi>
 80093cc:	4602      	mov	r2, r0
 80093ce:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80093d2:	fb03 f402 	mul.w	r4, r3, r2
 80093d6:	1d3b      	adds	r3, r7, #4
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 f8c8 	bl	800a56e <atoi>
 80093de:	4602      	mov	r2, r0
 80093e0:	4613      	mov	r3, r2
 80093e2:	011b      	lsls	r3, r3, #4
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	441c      	add	r4, r3
 80093ea:	f107 0308 	add.w	r3, r7, #8
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 f8bd 	bl	800a56e <atoi>
 80093f4:	4602      	mov	r2, r0
 80093f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80093fa:	fb03 f502 	mul.w	r5, r3, r2
 80093fe:	1d3b      	adds	r3, r7, #4
 8009400:	4618      	mov	r0, r3
 8009402:	f001 f8b4 	bl	800a56e <atoi>
 8009406:	4602      	mov	r2, r0
 8009408:	4613      	mov	r3, r2
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	442b      	add	r3, r5
 8009412:	4a2f      	ldr	r2, [pc, #188]	; (80094d0 <alarmInit+0x1a8>)
 8009414:	fb82 1203 	smull	r1, r2, r2, r3
 8009418:	1052      	asrs	r2, r2, #1
 800941a:	17db      	asrs	r3, r3, #31
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	4423      	add	r3, r4
 8009420:	60fb      	str	r3, [r7, #12]

	sAlarm1.AlarmTime.Hours = seconds/3600;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4a2b      	ldr	r2, [pc, #172]	; (80094d4 <alarmInit+0x1ac>)
 8009426:	fb82 1203 	smull	r1, r2, r2, r3
 800942a:	441a      	add	r2, r3
 800942c:	12d2      	asrs	r2, r2, #11
 800942e:	17db      	asrs	r3, r3, #31
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	b2da      	uxtb	r2, r3
 8009434:	4b28      	ldr	r3, [pc, #160]	; (80094d8 <alarmInit+0x1b0>)
 8009436:	701a      	strb	r2, [r3, #0]
	sAlarm1.AlarmTime.Minutes = (seconds - sAlarm1.AlarmTime.Hours*60*60)/60;
 8009438:	4b27      	ldr	r3, [pc, #156]	; (80094d8 <alarmInit+0x1b0>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	4b27      	ldr	r3, [pc, #156]	; (80094dc <alarmInit+0x1b4>)
 8009440:	fb03 f202 	mul.w	r2, r3, r2
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	4413      	add	r3, r2
 8009448:	4a25      	ldr	r2, [pc, #148]	; (80094e0 <alarmInit+0x1b8>)
 800944a:	fb82 1203 	smull	r1, r2, r2, r3
 800944e:	441a      	add	r2, r3
 8009450:	1152      	asrs	r2, r2, #5
 8009452:	17db      	asrs	r3, r3, #31
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	b2da      	uxtb	r2, r3
 8009458:	4b1f      	ldr	r3, [pc, #124]	; (80094d8 <alarmInit+0x1b0>)
 800945a:	705a      	strb	r2, [r3, #1]
	sAlarm1.AlarmTime.Seconds = seconds - sAlarm1.AlarmTime.Hours*60*60 - sAlarm1.AlarmTime.Minutes*60;
 800945c:	4b1e      	ldr	r3, [pc, #120]	; (80094d8 <alarmInit+0x1b0>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	461a      	mov	r2, r3
 8009462:	0112      	lsls	r2, r2, #4
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	011b      	lsls	r3, r3, #4
 8009468:	b2da      	uxtb	r2, r3
 800946a:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <alarmInit+0x1b0>)
 800946c:	785b      	ldrb	r3, [r3, #1]
 800946e:	4619      	mov	r1, r3
 8009470:	011b      	lsls	r3, r3, #4
 8009472:	1acb      	subs	r3, r1, r3
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	b2db      	uxtb	r3, r3
 8009478:	4413      	add	r3, r2
 800947a:	b2da      	uxtb	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	4413      	add	r3, r2
 8009482:	b2da      	uxtb	r2, r3
 8009484:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <alarmInit+0x1b0>)
 8009486:	709a      	strb	r2, [r3, #2]
	sAlarm1.AlarmTime.SubSeconds = 0;
 8009488:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <alarmInit+0x1b0>)
 800948a:	2200      	movs	r2, #0
 800948c:	605a      	str	r2, [r3, #4]
	sAlarm1.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800948e:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <alarmInit+0x1b0>)
 8009490:	2200      	movs	r2, #0
 8009492:	60da      	str	r2, [r3, #12]
	sAlarm1.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009494:	4b10      	ldr	r3, [pc, #64]	; (80094d8 <alarmInit+0x1b0>)
 8009496:	2200      	movs	r2, #0
 8009498:	611a      	str	r2, [r3, #16]
	sAlarm1.AlarmMask = RTC_ALARMMASK_NONE;
 800949a:	4b0f      	ldr	r3, [pc, #60]	; (80094d8 <alarmInit+0x1b0>)
 800949c:	2200      	movs	r2, #0
 800949e:	615a      	str	r2, [r3, #20]
	sAlarm1.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80094a0:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <alarmInit+0x1b0>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	619a      	str	r2, [r3, #24]
	sAlarm1.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80094a6:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <alarmInit+0x1b0>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	61da      	str	r2, [r3, #28]
	sAlarm1.AlarmDateWeekDay = 1;
 80094ac:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <alarmInit+0x1b0>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm1.Alarm = RTC_ALARM_A;
 80094b4:	4b08      	ldr	r3, [pc, #32]	; (80094d8 <alarmInit+0x1b0>)
 80094b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bdb0      	pop	{r4, r5, r7, pc}
 80094c4:	20000b88 	.word	0x20000b88
 80094c8:	20000d00 	.word	0x20000d00
 80094cc:	20000dd0 	.word	0x20000dd0
 80094d0:	66666667 	.word	0x66666667
 80094d4:	91a2b3c5 	.word	0x91a2b3c5
 80094d8:	20000244 	.word	0x20000244
 80094dc:	fffff1f0 	.word	0xfffff1f0
 80094e0:	88888889 	.word	0x88888889

080094e4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
	  //Branje senzorjev, ko bo možno.
	  branje=1;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <HAL_RTC_AlarmAEventCallback+0x34>)
 80094ee:	2201      	movs	r2, #1
 80094f0:	601a      	str	r2, [r3, #0]
	  HAL_RTC_SetTime(hrtc,&resetTime,RTC_FORMAT_BIN);
 80094f2:	2200      	movs	r2, #0
 80094f4:	4909      	ldr	r1, [pc, #36]	; (800951c <HAL_RTC_AlarmAEventCallback+0x38>)
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7f9 fdd1 	bl	800309e <HAL_RTC_SetTime>
	  HAL_RTC_SetDate(hrtc, &resetDate, RTC_FORMAT_BIN);
 80094fc:	2200      	movs	r2, #0
 80094fe:	4908      	ldr	r1, [pc, #32]	; (8009520 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7f9 fe89 	bl	8003218 <HAL_RTC_SetDate>
	  HAL_RTC_SetAlarm_IT(hrtc, &sAlarm1, RTC_FORMAT_BIN);
 8009506:	2200      	movs	r2, #0
 8009508:	4906      	ldr	r1, [pc, #24]	; (8009524 <HAL_RTC_AlarmAEventCallback+0x40>)
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7f9 ff2c 	bl	8003368 <HAL_RTC_SetAlarm_IT>
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	2000026c 	.word	0x2000026c
 800951c:	20000b88 	.word	0x20000b88
 8009520:	20000d00 	.word	0x20000d00
 8009524:	20000244 	.word	0x20000244

08009528 <sendUART>:

void sendUART(char *text, uint16_t length, char *received, uint16_t rec_length, uint16_t delay){
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	607a      	str	r2, [r7, #4]
 8009532:	461a      	mov	r2, r3
 8009534:	460b      	mov	r3, r1
 8009536:	817b      	strh	r3, [r7, #10]
 8009538:	4613      	mov	r3, r2
 800953a:	813b      	strh	r3, [r7, #8]
	  HAL_UART_Transmit(&huart1, text, length, delay);
 800953c:	8b3b      	ldrh	r3, [r7, #24]
 800953e:	897a      	ldrh	r2, [r7, #10]
 8009540:	68f9      	ldr	r1, [r7, #12]
 8009542:	4806      	ldr	r0, [pc, #24]	; (800955c <sendUART+0x34>)
 8009544:	f7fb faa4 	bl	8004a90 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, prejeto, rec_length, delay);
 8009548:	8b3b      	ldrh	r3, [r7, #24]
 800954a:	893a      	ldrh	r2, [r7, #8]
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <sendUART+0x38>)
 800954e:	4803      	ldr	r0, [pc, #12]	; (800955c <sendUART+0x34>)
 8009550:	f7fb fb31 	bl	8004bb6 <HAL_UART_Receive>
}
 8009554:	bf00      	nop
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20000bec 	.word	0x20000bec
 8009560:	20000ddc 	.word	0x20000ddc

08009564 <sendHTTP>:

void sendHTTP(char *addr, char *payload){
 8009564:	b580      	push	{r7, lr}
 8009566:	b0bc      	sub	sp, #240	; 0xf0
 8009568:	af02      	add	r7, sp, #8
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
	  char buff[200];
	  char buff2[20];
	  if(payload[0] != '\0')
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00d      	beq.n	8009592 <sendHTTP+0x2e>
	  sprintf(buff,"POST %s HTTP/1.1\r\nHost: %s\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length:%d\r\n\r\n%s\r\n",addr,Server,strlen(payload),payload);
 8009576:	6838      	ldr	r0, [r7, #0]
 8009578:	f7f6 fe2a 	bl	80001d0 <strlen>
 800957c:	4602      	mov	r2, r0
 800957e:	f107 0020 	add.w	r0, r7, #32
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	9200      	str	r2, [sp, #0]
 8009588:	4b2f      	ldr	r3, [pc, #188]	; (8009648 <sendHTTP+0xe4>)
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	492f      	ldr	r1, [pc, #188]	; (800964c <sendHTTP+0xe8>)
 800958e:	f001 f825 	bl	800a5dc <siprintf>
	  sprintf(buff2,"AT+CIPSEND=%d\r\n",strlen(buff));
 8009592:	f107 0320 	add.w	r3, r7, #32
 8009596:	4618      	mov	r0, r3
 8009598:	f7f6 fe1a 	bl	80001d0 <strlen>
 800959c:	4602      	mov	r2, r0
 800959e:	f107 030c 	add.w	r3, r7, #12
 80095a2:	492b      	ldr	r1, [pc, #172]	; (8009650 <sendHTTP+0xec>)
 80095a4:	4618      	mov	r0, r3
 80095a6:	f001 f819 	bl	800a5dc <siprintf>
	  sprintf(payload,"AT+CIPSTART=\"TCP\",\"%s\",80\r\n",Server);
 80095aa:	4a27      	ldr	r2, [pc, #156]	; (8009648 <sendHTTP+0xe4>)
 80095ac:	4929      	ldr	r1, [pc, #164]	; (8009654 <sendHTTP+0xf0>)
 80095ae:	6838      	ldr	r0, [r7, #0]
 80095b0:	f001 f814 	bl	800a5dc <siprintf>
	  sendUART(payload, strlen(payload), prejeto, sizeof(prejeto), 1000);
 80095b4:	6838      	ldr	r0, [r7, #0]
 80095b6:	f7f6 fe0b 	bl	80001d0 <strlen>
 80095ba:	4603      	mov	r3, r0
 80095bc:	b299      	uxth	r1, r3
 80095be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095c8:	4a23      	ldr	r2, [pc, #140]	; (8009658 <sendHTTP+0xf4>)
 80095ca:	6838      	ldr	r0, [r7, #0]
 80095cc:	f7ff ffac 	bl	8009528 <sendUART>
	  HAL_Delay(1000);
 80095d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095d4:	f7f6 fe8a 	bl	80002ec <HAL_Delay>
	  sendUART(buff2, strlen(buff2), prejeto, sizeof(prejeto), 1000);
 80095d8:	f107 030c 	add.w	r3, r7, #12
 80095dc:	4618      	mov	r0, r3
 80095de:	f7f6 fdf7 	bl	80001d0 <strlen>
 80095e2:	4603      	mov	r3, r0
 80095e4:	b299      	uxth	r1, r3
 80095e6:	f107 000c 	add.w	r0, r7, #12
 80095ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095f4:	4a18      	ldr	r2, [pc, #96]	; (8009658 <sendHTTP+0xf4>)
 80095f6:	f7ff ff97 	bl	8009528 <sendUART>
	  HAL_Delay(1000);
 80095fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095fe:	f7f6 fe75 	bl	80002ec <HAL_Delay>
	  sendUART(buff, strlen(buff), prejeto, sizeof(prejeto), 2000);
 8009602:	f107 0320 	add.w	r3, r7, #32
 8009606:	4618      	mov	r0, r3
 8009608:	f7f6 fde2 	bl	80001d0 <strlen>
 800960c:	4603      	mov	r3, r0
 800960e:	b299      	uxth	r1, r3
 8009610:	f107 0020 	add.w	r0, r7, #32
 8009614:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800961e:	4a0e      	ldr	r2, [pc, #56]	; (8009658 <sendHTTP+0xf4>)
 8009620:	f7ff ff82 	bl	8009528 <sendUART>
	  HAL_Delay(1000);
 8009624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009628:	f7f6 fe60 	bl	80002ec <HAL_Delay>
	  sendUART("AT+CIPCLOSE\r\n",13,prejeto, sizeof(prejeto),1000);
 800962c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009636:	4a08      	ldr	r2, [pc, #32]	; (8009658 <sendHTTP+0xf4>)
 8009638:	210d      	movs	r1, #13
 800963a:	4808      	ldr	r0, [pc, #32]	; (800965c <sendHTTP+0xf8>)
 800963c:	f7ff ff74 	bl	8009528 <sendUART>
}
 8009640:	bf00      	nop
 8009642:	37e8      	adds	r7, #232	; 0xe8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000d04 	.word	0x20000d04
 800964c:	0800afbc 	.word	0x0800afbc
 8009650:	0800b024 	.word	0x0800b024
 8009654:	0800b034 	.word	0x0800b034
 8009658:	20000ddc 	.word	0x20000ddc
 800965c:	0800b050 	.word	0x0800b050

08009660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b094      	sub	sp, #80	; 0x50
 8009664:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009666:	f7f6 fe0b 	bl	8000280 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800966a:	f000 f951 	bl	8009910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800966e:	f000 fba5 	bl	8009dbc <MX_GPIO_Init>
  MX_DMA_Init();
 8009672:	f000 fb85 	bl	8009d80 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8009676:	f000 fb53 	bl	8009d20 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800967a:	f000 fb03 	bl	8009c84 <MX_TIM2_Init>
  MX_SPI1_Init();
 800967e:	f000 fac3 	bl	8009c08 <MX_SPI1_Init>
  MX_FATFS_Init();
 8009682:	f7ff f8e5 	bl	8008850 <MX_FATFS_Init>
  MX_RTC_Init();
 8009686:	f000 fa33 	bl	8009af0 <MX_RTC_Init>
  MX_ADC1_Init();
 800968a:	f000 f9a3 	bl	80099d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800968e:	488a      	ldr	r0, [pc, #552]	; (80098b8 <main+0x258>)
 8009690:	f7fa fdbe 	bl	8004210 <HAL_TIM_Base_Start>

  DHT_Start (22);
 8009694:	2016      	movs	r0, #22
 8009696:	f7fe ffa1 	bl	80085dc <DHT_Start>
  if(DHT_Check_Response() != 1){
 800969a:	f7fe ffcb 	bl	8008634 <DHT_Check_Response>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d00f      	beq.n	80096c4 <main+0x64>
	  DHT_Start (11);
 80096a4:	200b      	movs	r0, #11
 80096a6:	f7fe ff99 	bl	80085dc <DHT_Start>
	  if(DHT_Check_Response() == 1){
 80096aa:	f7fe ffc3 	bl	8008634 <DHT_Check_Response>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d10e      	bne.n	80096d2 <main+0x72>
		  sensor.value = (sensor.value | 2);
 80096b4:	4b81      	ldr	r3, [pc, #516]	; (80098bc <main+0x25c>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f043 0302 	orr.w	r3, r3, #2
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	4b7f      	ldr	r3, [pc, #508]	; (80098bc <main+0x25c>)
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e006      	b.n	80096d2 <main+0x72>
	  }
  }else{
	  sensor.value = (sensor.value | 4);
 80096c4:	4b7d      	ldr	r3, [pc, #500]	; (80098bc <main+0x25c>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	f043 0304 	orr.w	r3, r3, #4
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	4b7b      	ldr	r3, [pc, #492]	; (80098bc <main+0x25c>)
 80096d0:	701a      	strb	r2, [r3, #0]
  }


  cardInit();
 80096d2:	f7ff fdad 	bl	8009230 <cardInit>

  alarmInit();
 80096d6:	f7ff fe27 	bl	8009328 <alarmInit>

  //Odziv senzorja
  sendUART("AT\r\n", 4, prejeto, sizeof(prejeto), 400);
 80096da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096e4:	4a76      	ldr	r2, [pc, #472]	; (80098c0 <main+0x260>)
 80096e6:	2104      	movs	r1, #4
 80096e8:	4876      	ldr	r0, [pc, #472]	; (80098c4 <main+0x264>)
 80096ea:	f7ff ff1d 	bl	8009528 <sendUART>

  if(prejeto[6] == 'O' && prejeto[7] == 'K'){
 80096ee:	4b74      	ldr	r3, [pc, #464]	; (80098c0 <main+0x260>)
 80096f0:	799b      	ldrb	r3, [r3, #6]
 80096f2:	2b4f      	cmp	r3, #79	; 0x4f
 80096f4:	f040 8081 	bne.w	80097fa <main+0x19a>
 80096f8:	4b71      	ldr	r3, [pc, #452]	; (80098c0 <main+0x260>)
 80096fa:	79db      	ldrb	r3, [r3, #7]
 80096fc:	2b4b      	cmp	r3, #75	; 0x4b
 80096fe:	d17c      	bne.n	80097fa <main+0x19a>
	  //Če je esp8266 priključen pošljemo na bazo podatke.
	  sensor.value = (sensor.value | 1);
 8009700:	4b6e      	ldr	r3, [pc, #440]	; (80098bc <main+0x25c>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f043 0301 	orr.w	r3, r3, #1
 8009708:	b2da      	uxtb	r2, r3
 800970a:	4b6c      	ldr	r3, [pc, #432]	; (80098bc <main+0x25c>)
 800970c:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(500);
 800970e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009712:	f7f6 fdeb 	bl	80002ec <HAL_Delay>

	  char payload[50];

	  sendUART("AT+CWMODE=1\r\n", 13, prejeto, sizeof(prejeto), 500);
 8009716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009720:	4a67      	ldr	r2, [pc, #412]	; (80098c0 <main+0x260>)
 8009722:	210d      	movs	r1, #13
 8009724:	4868      	ldr	r0, [pc, #416]	; (80098c8 <main+0x268>)
 8009726:	f7ff feff 	bl	8009528 <sendUART>
	  HAL_Delay(500);
 800972a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800972e:	f7f6 fddd 	bl	80002ec <HAL_Delay>

	  sprintf(payload,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,passwd);
 8009732:	1d38      	adds	r0, r7, #4
 8009734:	4b65      	ldr	r3, [pc, #404]	; (80098cc <main+0x26c>)
 8009736:	4a66      	ldr	r2, [pc, #408]	; (80098d0 <main+0x270>)
 8009738:	4966      	ldr	r1, [pc, #408]	; (80098d4 <main+0x274>)
 800973a:	f000 ff4f 	bl	800a5dc <siprintf>
	  sendUART(payload, strlen(payload), prejeto, sizeof(prejeto), 10000);
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f7f6 fd45 	bl	80001d0 <strlen>
 8009746:	4603      	mov	r3, r0
 8009748:	b299      	uxth	r1, r3
 800974a:	1d38      	adds	r0, r7, #4
 800974c:	f242 7310 	movw	r3, #10000	; 0x2710
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009756:	4a5a      	ldr	r2, [pc, #360]	; (80098c0 <main+0x260>)
 8009758:	f7ff fee6 	bl	8009528 <sendUART>
	  int indeks = strlen(prejeto)-14;
 800975c:	4858      	ldr	r0, [pc, #352]	; (80098c0 <main+0x260>)
 800975e:	f7f6 fd37 	bl	80001d0 <strlen>
 8009762:	4603      	mov	r3, r0
 8009764:	3b0e      	subs	r3, #14
 8009766:	63bb      	str	r3, [r7, #56]	; 0x38
	  for(int i=0; i < strlen(prejeto); i++){
 8009768:	2300      	movs	r3, #0
 800976a:	647b      	str	r3, [r7, #68]	; 0x44
 800976c:	e018      	b.n	80097a0 <main+0x140>
		  if(prejeto[indeks] == 'G' && prejeto[indeks+1] == 'O' && prejeto[indeks+2] == 'T'){
 800976e:	4a54      	ldr	r2, [pc, #336]	; (80098c0 <main+0x260>)
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	4413      	add	r3, r2
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b47      	cmp	r3, #71	; 0x47
 8009778:	d10f      	bne.n	800979a <main+0x13a>
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	3301      	adds	r3, #1
 800977e:	4a50      	ldr	r2, [pc, #320]	; (80098c0 <main+0x260>)
 8009780:	5cd3      	ldrb	r3, [r2, r3]
 8009782:	2b4f      	cmp	r3, #79	; 0x4f
 8009784:	d109      	bne.n	800979a <main+0x13a>
 8009786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009788:	3302      	adds	r3, #2
 800978a:	4a4d      	ldr	r2, [pc, #308]	; (80098c0 <main+0x260>)
 800978c:	5cd3      	ldrb	r3, [r2, r3]
 800978e:	2b54      	cmp	r3, #84	; 0x54
 8009790:	d103      	bne.n	800979a <main+0x13a>
			  sensor.wifi_status = 1;
 8009792:	4b4a      	ldr	r3, [pc, #296]	; (80098bc <main+0x25c>)
 8009794:	2201      	movs	r2, #1
 8009796:	705a      	strb	r2, [r3, #1]
			  break;
 8009798:	e009      	b.n	80097ae <main+0x14e>
	  for(int i=0; i < strlen(prejeto); i++){
 800979a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800979c:	3301      	adds	r3, #1
 800979e:	647b      	str	r3, [r7, #68]	; 0x44
 80097a0:	4847      	ldr	r0, [pc, #284]	; (80098c0 <main+0x260>)
 80097a2:	f7f6 fd15 	bl	80001d0 <strlen>
 80097a6:	4602      	mov	r2, r0
 80097a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d8df      	bhi.n	800976e <main+0x10e>
		  }
	  }

	  HAL_Delay(500);
 80097ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097b2:	f7f6 fd9b 	bl	80002ec <HAL_Delay>
	  if(sensor.wifi_status == 1 && (sensor.value & 1) == 1){
 80097b6:	4b41      	ldr	r3, [pc, #260]	; (80098bc <main+0x25c>)
 80097b8:	785b      	ldrb	r3, [r3, #1]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d112      	bne.n	80097e4 <main+0x184>
 80097be:	4b3f      	ldr	r3, [pc, #252]	; (80098bc <main+0x25c>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00c      	beq.n	80097e4 <main+0x184>
		  sprintf(payload,"SerialNo=%s&sensors=%03d",SerialNo,sensor.value);
 80097ca:	4b3c      	ldr	r3, [pc, #240]	; (80098bc <main+0x25c>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	1d38      	adds	r0, r7, #4
 80097d0:	4a41      	ldr	r2, [pc, #260]	; (80098d8 <main+0x278>)
 80097d2:	4942      	ldr	r1, [pc, #264]	; (80098dc <main+0x27c>)
 80097d4:	f000 ff02 	bl	800a5dc <siprintf>
		  sendHTTP("/register", payload);
 80097d8:	1d3b      	adds	r3, r7, #4
 80097da:	4619      	mov	r1, r3
 80097dc:	4840      	ldr	r0, [pc, #256]	; (80098e0 <main+0x280>)
 80097de:	f7ff fec1 	bl	8009564 <sendHTTP>
 80097e2:	e00a      	b.n	80097fa <main+0x19a>
	  }else if((sensor.value & 1) == 1){
 80097e4:	4b35      	ldr	r3, [pc, #212]	; (80098bc <main+0x25c>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <main+0x19a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80097f0:	2201      	movs	r2, #1
 80097f2:	2180      	movs	r1, #128	; 0x80
 80097f4:	483b      	ldr	r0, [pc, #236]	; (80098e4 <main+0x284>)
 80097f6:	f7f8 f913 	bl	8001a20 <HAL_GPIO_WritePin>
	  }
  }
  uint8_t aktiven = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  HAL_Delay(200);
 8009800:	20c8      	movs	r0, #200	; 0xc8
 8009802:	f7f6 fd73 	bl	80002ec <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(branje){
 8009806:	4b38      	ldr	r3, [pc, #224]	; (80098e8 <main+0x288>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d014      	beq.n	8009838 <main+0x1d8>
		//Če je branje potem beri...
		HAL_ADC_Start_DMA(&hadc1, data, sizeof(data));
 800980e:	2206      	movs	r2, #6
 8009810:	4936      	ldr	r1, [pc, #216]	; (80098ec <main+0x28c>)
 8009812:	4837      	ldr	r0, [pc, #220]	; (80098f0 <main+0x290>)
 8009814:	f7f6 ff3c 	bl	8000690 <HAL_ADC_Start_DMA>
		DHT_Get_Data(&temp, &hum, sensor.value);
 8009818:	4b28      	ldr	r3, [pc, #160]	; (80098bc <main+0x25c>)
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	4935      	ldr	r1, [pc, #212]	; (80098f4 <main+0x294>)
 8009820:	4835      	ldr	r0, [pc, #212]	; (80098f8 <main+0x298>)
 8009822:	f7fe ff7f 	bl	8008724 <DHT_Get_Data>
		branje = 0;
 8009826:	4b30      	ldr	r3, [pc, #192]	; (80098e8 <main+0x288>)
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
		HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm1, RTC_FORMAT_BIN);
 800982c:	2200      	movs	r2, #0
 800982e:	4933      	ldr	r1, [pc, #204]	; (80098fc <main+0x29c>)
 8009830:	4833      	ldr	r0, [pc, #204]	; (8009900 <main+0x2a0>)
 8009832:	f7f9 fd99 	bl	8003368 <HAL_RTC_SetAlarm_IT>
 8009836:	e7e6      	b.n	8009806 <main+0x1a6>
	}else if(!aktiven){
 8009838:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e2      	bne.n	8009806 <main+0x1a6>
		char payload[50];
		memset(payload,0,50);
 8009840:	1d3b      	adds	r3, r7, #4
 8009842:	2232      	movs	r2, #50	; 0x32
 8009844:	2100      	movs	r1, #0
 8009846:	4618      	mov	r0, r3
 8009848:	f000 fec0 	bl	800a5cc <memset>
		memset(prejeto,0,500);
 800984c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009850:	2100      	movs	r1, #0
 8009852:	481b      	ldr	r0, [pc, #108]	; (80098c0 <main+0x260>)
 8009854:	f000 feba 	bl	800a5cc <memset>
		sprintf(payload,"SerialNo=%s",SerialNo);
 8009858:	1d3b      	adds	r3, r7, #4
 800985a:	4a1f      	ldr	r2, [pc, #124]	; (80098d8 <main+0x278>)
 800985c:	4929      	ldr	r1, [pc, #164]	; (8009904 <main+0x2a4>)
 800985e:	4618      	mov	r0, r3
 8009860:	f000 febc 	bl	800a5dc <siprintf>
		sendHTTP("/check",payload);
 8009864:	1d3b      	adds	r3, r7, #4
 8009866:	4619      	mov	r1, r3
 8009868:	4827      	ldr	r0, [pc, #156]	; (8009908 <main+0x2a8>)
 800986a:	f7ff fe7b 	bl	8009564 <sendHTTP>
		if(prejeto[219] == '/'){
 800986e:	4b14      	ldr	r3, [pc, #80]	; (80098c0 <main+0x260>)
 8009870:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8009874:	2b2f      	cmp	r3, #47	; 0x2f
 8009876:	d119      	bne.n	80098ac <main+0x24c>
			for(int i = 220; i < 225; i++){
 8009878:	23dc      	movs	r3, #220	; 0xdc
 800987a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800987c:	e00a      	b.n	8009894 <main+0x234>
				Time[i-220] = prejeto[i];
 800987e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009880:	3bdc      	subs	r3, #220	; 0xdc
 8009882:	490f      	ldr	r1, [pc, #60]	; (80098c0 <main+0x260>)
 8009884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009886:	440a      	add	r2, r1
 8009888:	7811      	ldrb	r1, [r2, #0]
 800988a:	4a20      	ldr	r2, [pc, #128]	; (800990c <main+0x2ac>)
 800988c:	54d1      	strb	r1, [r2, r3]
			for(int i = 220; i < 225; i++){
 800988e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009890:	3301      	adds	r3, #1
 8009892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009896:	2be0      	cmp	r3, #224	; 0xe0
 8009898:	ddf1      	ble.n	800987e <main+0x21e>
			}
			aktiven = 1;
 800989a:	2301      	movs	r3, #1
 800989c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			branje = 1;
 80098a0:	4b11      	ldr	r3, [pc, #68]	; (80098e8 <main+0x288>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	601a      	str	r2, [r3, #0]
			alarmInit();
 80098a6:	f7ff fd3f 	bl	8009328 <alarmInit>
 80098aa:	e7ac      	b.n	8009806 <main+0x1a6>
		}else{
			//Med preverjanji.
			HAL_Delay(30000);
 80098ac:	f247 5030 	movw	r0, #30000	; 0x7530
 80098b0:	f7f6 fd1c 	bl	80002ec <HAL_Delay>
	if(branje){
 80098b4:	e7a7      	b.n	8009806 <main+0x1a6>
 80098b6:	bf00      	nop
 80098b8:	20000d7c 	.word	0x20000d7c
 80098bc:	20000d78 	.word	0x20000d78
 80098c0:	20000ddc 	.word	0x20000ddc
 80098c4:	0800b060 	.word	0x0800b060
 80098c8:	0800b068 	.word	0x0800b068
 80098cc:	20000dbc 	.word	0x20000dbc
 80098d0:	200015dc 	.word	0x200015dc
 80098d4:	0800b078 	.word	0x0800b078
 80098d8:	20000008 	.word	0x20000008
 80098dc:	0800b090 	.word	0x0800b090
 80098e0:	0800b0ac 	.word	0x0800b0ac
 80098e4:	48000400 	.word	0x48000400
 80098e8:	2000026c 	.word	0x2000026c
 80098ec:	20000cd0 	.word	0x20000cd0
 80098f0:	20000b9c 	.word	0x20000b9c
 80098f4:	20000274 	.word	0x20000274
 80098f8:	20000270 	.word	0x20000270
 80098fc:	20000244 	.word	0x20000244
 8009900:	20000cb0 	.word	0x20000cb0
 8009904:	0800b0b8 	.word	0x0800b0b8
 8009908:	0800b0c4 	.word	0x0800b0c4
 800990c:	20000dd0 	.word	0x20000dd0

08009910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b096      	sub	sp, #88	; 0x58
 8009914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800991a:	2228      	movs	r2, #40	; 0x28
 800991c:	2100      	movs	r1, #0
 800991e:	4618      	mov	r0, r3
 8009920:	f000 fe54 	bl	800a5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009924:	f107 031c 	add.w	r3, r7, #28
 8009928:	2200      	movs	r2, #0
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	605a      	str	r2, [r3, #4]
 800992e:	609a      	str	r2, [r3, #8]
 8009930:	60da      	str	r2, [r3, #12]
 8009932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009934:	1d3b      	adds	r3, r7, #4
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	605a      	str	r2, [r3, #4]
 800993c:	609a      	str	r2, [r3, #8]
 800993e:	60da      	str	r2, [r3, #12]
 8009940:	611a      	str	r2, [r3, #16]
 8009942:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8009944:	230a      	movs	r3, #10
 8009946:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009948:	2301      	movs	r3, #1
 800994a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800994c:	2310      	movs	r3, #16
 800994e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009950:	2301      	movs	r3, #1
 8009952:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009954:	2302      	movs	r3, #2
 8009956:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009958:	2300      	movs	r3, #0
 800995a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800995c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8009960:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009962:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009966:	4618      	mov	r0, r3
 8009968:	f7f8 f872 	bl	8001a50 <HAL_RCC_OscConfig>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8009972:	f000 fa95 	bl	8009ea0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009976:	230f      	movs	r3, #15
 8009978:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800997a:	2302      	movs	r3, #2
 800997c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800997e:	2300      	movs	r3, #0
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009988:	2300      	movs	r3, #0
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800998c:	f107 031c 	add.w	r3, r7, #28
 8009990:	2102      	movs	r1, #2
 8009992:	4618      	mov	r0, r3
 8009994:	f7f8 ff64 	bl	8002860 <HAL_RCC_ClockConfig>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800999e:	f000 fa7f 	bl	8009ea0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 80099a2:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <SystemClock_Config+0xc0>)
 80099a4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80099aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099ae:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80099b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099b4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80099b6:	1d3b      	adds	r3, r7, #4
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7f9 f9b9 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80099c4:	f000 fa6c 	bl	8009ea0 <Error_Handler>
  }
}
 80099c8:	bf00      	nop
 80099ca:	3758      	adds	r7, #88	; 0x58
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	00010081 	.word	0x00010081

080099d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80099da:	f107 031c 	add.w	r3, r7, #28
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	605a      	str	r2, [r3, #4]
 80099e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80099e6:	1d3b      	adds	r3, r7, #4
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	605a      	str	r2, [r3, #4]
 80099ee:	609a      	str	r2, [r3, #8]
 80099f0:	60da      	str	r2, [r3, #12]
 80099f2:	611a      	str	r2, [r3, #16]
 80099f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80099f6:	4b3d      	ldr	r3, [pc, #244]	; (8009aec <MX_ADC1_Init+0x118>)
 80099f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80099fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80099fe:	4b3b      	ldr	r3, [pc, #236]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009a04:	4b39      	ldr	r3, [pc, #228]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8009a0a:	4b38      	ldr	r3, [pc, #224]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009a10:	4b36      	ldr	r3, [pc, #216]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009a16:	4b35      	ldr	r3, [pc, #212]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009a1e:	4b33      	ldr	r3, [pc, #204]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009a24:	4b31      	ldr	r3, [pc, #196]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a26:	2201      	movs	r2, #1
 8009a28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009a2a:	4b30      	ldr	r3, [pc, #192]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8009a30:	4b2e      	ldr	r3, [pc, #184]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a32:	2203      	movs	r2, #3
 8009a34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8009a36:	4b2d      	ldr	r3, [pc, #180]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009a3e:	4b2b      	ldr	r3, [pc, #172]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a40:	2204      	movs	r2, #4
 8009a42:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009a44:	4b29      	ldr	r3, [pc, #164]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8009a4a:	4b28      	ldr	r3, [pc, #160]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009a50:	4826      	ldr	r0, [pc, #152]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a52:	f7f6 fc8b 	bl	800036c <HAL_ADC_Init>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8009a5c:	f000 fa20 	bl	8009ea0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009a64:	f107 031c 	add.w	r3, r7, #28
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4820      	ldr	r0, [pc, #128]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a6c:	f7f7 f9ac 	bl	8000dc8 <HAL_ADCEx_MultiModeConfigChannel>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8009a76:	f000 fa13 	bl	8009ea0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009a82:	2300      	movs	r3, #0
 8009a84:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8009a86:	2304      	movs	r3, #4
 8009a88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009a92:	1d3b      	adds	r3, r7, #4
 8009a94:	4619      	mov	r1, r3
 8009a96:	4815      	ldr	r0, [pc, #84]	; (8009aec <MX_ADC1_Init+0x118>)
 8009a98:	f7f6 fed4 	bl	8000844 <HAL_ADC_ConfigChannel>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8009aa2:	f000 f9fd 	bl	8009ea0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009aaa:	2302      	movs	r3, #2
 8009aac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009aae:	1d3b      	adds	r3, r7, #4
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	480e      	ldr	r0, [pc, #56]	; (8009aec <MX_ADC1_Init+0x118>)
 8009ab4:	f7f6 fec6 	bl	8000844 <HAL_ADC_ConfigChannel>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8009abe:	f000 f9ef 	bl	8009ea0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009ace:	1d3b      	adds	r3, r7, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4806      	ldr	r0, [pc, #24]	; (8009aec <MX_ADC1_Init+0x118>)
 8009ad4:	f7f6 feb6 	bl	8000844 <HAL_ADC_ConfigChannel>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8009ade:	f000 f9df 	bl	8009ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009ae2:	bf00      	nop
 8009ae4:	3728      	adds	r7, #40	; 0x28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000b9c 	.word	0x20000b9c

08009af0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b090      	sub	sp, #64	; 0x40
 8009af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	605a      	str	r2, [r3, #4]
 8009b00:	609a      	str	r2, [r3, #8]
 8009b02:	60da      	str	r2, [r3, #12]
 8009b04:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8009b06:	2300      	movs	r3, #0
 8009b08:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8009b0a:	463b      	mov	r3, r7
 8009b0c:	2228      	movs	r2, #40	; 0x28
 8009b0e:	2100      	movs	r1, #0
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fd5b 	bl	800a5cc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009b16:	4b3a      	ldr	r3, [pc, #232]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b18:	4a3a      	ldr	r2, [pc, #232]	; (8009c04 <MX_RTC_Init+0x114>)
 8009b1a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009b1c:	4b38      	ldr	r3, [pc, #224]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009b22:	4b37      	ldr	r3, [pc, #220]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b24:	227f      	movs	r2, #127	; 0x7f
 8009b26:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009b28:	4b35      	ldr	r3, [pc, #212]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b2a:	22ff      	movs	r2, #255	; 0xff
 8009b2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009b2e:	4b34      	ldr	r3, [pc, #208]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009b34:	4b32      	ldr	r3, [pc, #200]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009b3a:	4b31      	ldr	r3, [pc, #196]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009b40:	482f      	ldr	r0, [pc, #188]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b42:	f7f9 fa1b 	bl	8002f7c <HAL_RTC_Init>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8009b4c:	f000 f9a8 	bl	8009ea0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009b62:	2300      	movs	r3, #0
 8009b64:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009b66:	2300      	movs	r3, #0
 8009b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8009b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4619      	mov	r1, r3
 8009b72:	4823      	ldr	r0, [pc, #140]	; (8009c00 <MX_RTC_Init+0x110>)
 8009b74:	f7f9 fa93 	bl	800309e <HAL_RTC_SetTime>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8009b7e:	f000 f98f 	bl	8009ea0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8009b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	4817      	ldr	r0, [pc, #92]	; (8009c00 <MX_RTC_Init+0x110>)
 8009ba4:	f7f9 fb38 	bl	8003218 <HAL_RTC_SetDate>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8009bae:	f000 f977 	bl	8009ea0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8009bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009be2:	463b      	mov	r3, r7
 8009be4:	2200      	movs	r2, #0
 8009be6:	4619      	mov	r1, r3
 8009be8:	4805      	ldr	r0, [pc, #20]	; (8009c00 <MX_RTC_Init+0x110>)
 8009bea:	f7f9 fbbd 	bl	8003368 <HAL_RTC_SetAlarm_IT>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8009bf4:	f000 f954 	bl	8009ea0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009bf8:	bf00      	nop
 8009bfa:	3740      	adds	r7, #64	; 0x40
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20000cb0 	.word	0x20000cb0
 8009c04:	40002800 	.word	0x40002800

08009c08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009c0c:	4b1b      	ldr	r3, [pc, #108]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c0e:	4a1c      	ldr	r2, [pc, #112]	; (8009c80 <MX_SPI1_Init+0x78>)
 8009c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009c12:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009c1a:	4b18      	ldr	r3, [pc, #96]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009c20:	4b16      	ldr	r3, [pc, #88]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009c26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c28:	4b14      	ldr	r3, [pc, #80]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009c34:	4b11      	ldr	r3, [pc, #68]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c3e:	2220      	movs	r2, #32
 8009c40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009c42:	4b0e      	ldr	r3, [pc, #56]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009c48:	4b0c      	ldr	r3, [pc, #48]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c4e:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c56:	2207      	movs	r2, #7
 8009c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009c5a:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009c60:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009c66:	4805      	ldr	r0, [pc, #20]	; (8009c7c <MX_SPI1_Init+0x74>)
 8009c68:	f7f9 fd78 	bl	800375c <HAL_SPI_Init>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009c72:	f000 f915 	bl	8009ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009c76:	bf00      	nop
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20000d14 	.word	0x20000d14
 8009c80:	40013000 	.word	0x40013000

08009c84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c8a:	f107 0310 	add.w	r3, r7, #16
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	605a      	str	r2, [r3, #4]
 8009c94:	609a      	str	r2, [r3, #8]
 8009c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c98:	1d3b      	adds	r3, r7, #4
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	605a      	str	r2, [r3, #4]
 8009ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009ca2:	4b1e      	ldr	r3, [pc, #120]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009ca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009ca8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8009caa:	4b1c      	ldr	r3, [pc, #112]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009cac:	223f      	movs	r2, #63	; 0x3f
 8009cae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cb0:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8009cb6:	4b19      	ldr	r3, [pc, #100]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009cb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009cbe:	4b17      	ldr	r3, [pc, #92]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cc4:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009cca:	4814      	ldr	r0, [pc, #80]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009ccc:	f7fa fa74 	bl	80041b8 <HAL_TIM_Base_Init>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8009cd6:	f000 f8e3 	bl	8009ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009ce0:	f107 0310 	add.w	r3, r7, #16
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	480d      	ldr	r0, [pc, #52]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009ce8:	f7fa fc05 	bl	80044f6 <HAL_TIM_ConfigClockSource>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8009cf2:	f000 f8d5 	bl	8009ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009cfe:	1d3b      	adds	r3, r7, #4
 8009d00:	4619      	mov	r1, r3
 8009d02:	4806      	ldr	r0, [pc, #24]	; (8009d1c <MX_TIM2_Init+0x98>)
 8009d04:	f7fa fdea 	bl	80048dc <HAL_TIMEx_MasterConfigSynchronization>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8009d0e:	f000 f8c7 	bl	8009ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009d12:	bf00      	nop
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20000d7c 	.word	0x20000d7c

08009d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009d24:	4b14      	ldr	r3, [pc, #80]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d26:	4a15      	ldr	r2, [pc, #84]	; (8009d7c <MX_USART1_UART_Init+0x5c>)
 8009d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009d2a:	4b13      	ldr	r3, [pc, #76]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009d32:	4b11      	ldr	r3, [pc, #68]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009d3e:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009d44:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d46:	220c      	movs	r2, #12
 8009d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d50:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009d56:	4b08      	ldr	r3, [pc, #32]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009d5c:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009d62:	4805      	ldr	r0, [pc, #20]	; (8009d78 <MX_USART1_UART_Init+0x58>)
 8009d64:	f7fa fe46 	bl	80049f4 <HAL_UART_Init>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8009d6e:	f000 f897 	bl	8009ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009d72:	bf00      	nop
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000bec 	.word	0x20000bec
 8009d7c:	40013800 	.word	0x40013800

08009d80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009d86:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <MX_DMA_Init+0x38>)
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	4a0b      	ldr	r2, [pc, #44]	; (8009db8 <MX_DMA_Init+0x38>)
 8009d8c:	f043 0301 	orr.w	r3, r3, #1
 8009d90:	6153      	str	r3, [r2, #20]
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <MX_DMA_Init+0x38>)
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	f003 0301 	and.w	r3, r3, #1
 8009d9a:	607b      	str	r3, [r7, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2100      	movs	r1, #0
 8009da2:	200b      	movs	r0, #11
 8009da4:	f7f7 fab2 	bl	800130c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009da8:	200b      	movs	r0, #11
 8009daa:	f7f7 facb 	bl	8001344 <HAL_NVIC_EnableIRQ>

}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	40021000 	.word	0x40021000

08009dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dc2:	f107 030c 	add.w	r3, r7, #12
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	605a      	str	r2, [r3, #4]
 8009dcc:	609a      	str	r2, [r3, #8]
 8009dce:	60da      	str	r2, [r3, #12]
 8009dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009dd2:	4b27      	ldr	r3, [pc, #156]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	4a26      	ldr	r2, [pc, #152]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ddc:	6153      	str	r3, [r2, #20]
 8009dde:	4b24      	ldr	r3, [pc, #144]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009de6:	60bb      	str	r3, [r7, #8]
 8009de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dea:	4b21      	ldr	r3, [pc, #132]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	4a20      	ldr	r2, [pc, #128]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df4:	6153      	str	r3, [r2, #20]
 8009df6:	4b1e      	ldr	r3, [pc, #120]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dfe:	607b      	str	r3, [r7, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e02:	4b1b      	ldr	r3, [pc, #108]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	4a1a      	ldr	r2, [pc, #104]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e0c:	6153      	str	r3, [r2, #20]
 8009e0e:	4b18      	ldr	r3, [pc, #96]	; (8009e70 <MX_GPIO_Init+0xb4>)
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e16:	603b      	str	r3, [r7, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2102      	movs	r1, #2
 8009e1e:	4815      	ldr	r0, [pc, #84]	; (8009e74 <MX_GPIO_Init+0xb8>)
 8009e20:	f7f7 fdfe 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8009e24:	2200      	movs	r2, #0
 8009e26:	21a0      	movs	r1, #160	; 0xa0
 8009e28:	4813      	ldr	r0, [pc, #76]	; (8009e78 <MX_GPIO_Init+0xbc>)
 8009e2a:	f7f7 fdf9 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009e2e:	2302      	movs	r3, #2
 8009e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e32:	2301      	movs	r3, #1
 8009e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009e3e:	f107 030c 	add.w	r3, r7, #12
 8009e42:	4619      	mov	r1, r3
 8009e44:	480b      	ldr	r0, [pc, #44]	; (8009e74 <MX_GPIO_Init+0xb8>)
 8009e46:	f7f7 fc61 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8009e4a:	23a0      	movs	r3, #160	; 0xa0
 8009e4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e56:	2300      	movs	r3, #0
 8009e58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e5a:	f107 030c 	add.w	r3, r7, #12
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4805      	ldr	r0, [pc, #20]	; (8009e78 <MX_GPIO_Init+0xbc>)
 8009e62:	f7f7 fc53 	bl	800170c <HAL_GPIO_Init>

}
 8009e66:	bf00      	nop
 8009e68:	3720      	adds	r7, #32
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	40021000 	.word	0x40021000
 8009e74:	48001400 	.word	0x48001400
 8009e78:	48000400 	.word	0x48000400

08009e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a04      	ldr	r2, [pc, #16]	; (8009e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d101      	bne.n	8009e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009e8e:	f7f6 fa0d 	bl	80002ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009e92:	bf00      	nop
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	40012c00 	.word	0x40012c00

08009ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009ea4:	bf00      	nop
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
	...

08009eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <HAL_MspInit+0x4c>)
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	4a10      	ldr	r2, [pc, #64]	; (8009efc <HAL_MspInit+0x4c>)
 8009ebc:	f043 0301 	orr.w	r3, r3, #1
 8009ec0:	6193      	str	r3, [r2, #24]
 8009ec2:	4b0e      	ldr	r3, [pc, #56]	; (8009efc <HAL_MspInit+0x4c>)
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	607b      	str	r3, [r7, #4]
 8009ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009ece:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <HAL_MspInit+0x4c>)
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	4a0a      	ldr	r2, [pc, #40]	; (8009efc <HAL_MspInit+0x4c>)
 8009ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ed8:	61d3      	str	r3, [r2, #28]
 8009eda:	4b08      	ldr	r3, [pc, #32]	; (8009efc <HAL_MspInit+0x4c>)
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ee2:	603b      	str	r3, [r7, #0]
 8009ee4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	210f      	movs	r1, #15
 8009eea:	f06f 0001 	mvn.w	r0, #1
 8009eee:	f7f7 fa0d 	bl	800130c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	40021000 	.word	0x40021000

08009f00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08a      	sub	sp, #40	; 0x28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f08:	f107 0314 	add.w	r3, r7, #20
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
 8009f10:	605a      	str	r2, [r3, #4]
 8009f12:	609a      	str	r2, [r3, #8]
 8009f14:	60da      	str	r2, [r3, #12]
 8009f16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f20:	d14c      	bne.n	8009fbc <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8009f22:	4b28      	ldr	r3, [pc, #160]	; (8009fc4 <HAL_ADC_MspInit+0xc4>)
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	4a27      	ldr	r2, [pc, #156]	; (8009fc4 <HAL_ADC_MspInit+0xc4>)
 8009f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	6153      	str	r3, [r2, #20]
 8009f2e:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <HAL_ADC_MspInit+0xc4>)
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f36:	613b      	str	r3, [r7, #16]
 8009f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f3a:	4b22      	ldr	r3, [pc, #136]	; (8009fc4 <HAL_ADC_MspInit+0xc4>)
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	4a21      	ldr	r2, [pc, #132]	; (8009fc4 <HAL_ADC_MspInit+0xc4>)
 8009f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f44:	6153      	str	r3, [r2, #20]
 8009f46:	4b1f      	ldr	r3, [pc, #124]	; (8009fc4 <HAL_ADC_MspInit+0xc4>)
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8009f52:	2307      	movs	r3, #7
 8009f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009f56:	2303      	movs	r3, #3
 8009f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f5e:	f107 0314 	add.w	r3, r7, #20
 8009f62:	4619      	mov	r1, r3
 8009f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f68:	f7f7 fbd0 	bl	800170c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8009f6c:	4b16      	ldr	r3, [pc, #88]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009f6e:	4a17      	ldr	r2, [pc, #92]	; (8009fcc <HAL_ADC_MspInit+0xcc>)
 8009f70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f72:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f78:	4b13      	ldr	r3, [pc, #76]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009f7e:	4b12      	ldr	r3, [pc, #72]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009f80:	2280      	movs	r2, #128	; 0x80
 8009f82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009f84:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8009f94:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8009f9a:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8009fa0:	4809      	ldr	r0, [pc, #36]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009fa2:	f7f7 f9dd 	bl	8001360 <HAL_DMA_Init>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8009fac:	f7ff ff78 	bl	8009ea0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a05      	ldr	r2, [pc, #20]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8009fb6:	4a04      	ldr	r2, [pc, #16]	; (8009fc8 <HAL_ADC_MspInit+0xc8>)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009fbc:	bf00      	nop
 8009fbe:	3728      	adds	r7, #40	; 0x28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	40021000 	.word	0x40021000
 8009fc8:	20000c6c 	.word	0x20000c6c
 8009fcc:	40020008 	.word	0x40020008

08009fd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a10      	ldr	r2, [pc, #64]	; (800a020 <HAL_RTC_MspInit+0x50>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d119      	bne.n	800a016 <HAL_RTC_MspInit+0x46>
 8009fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	fa93 f3a3 	rbit	r3, r3
 8009fee:	60bb      	str	r3, [r7, #8]
  return result;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009ff2:	fab3 f383 	clz	r3, r3
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <HAL_RTC_MspInit+0x54>)
 8009ffc:	4413      	add	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	461a      	mov	r2, r3
 800a002:	2301      	movs	r3, #1
 800a004:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800a006:	2200      	movs	r2, #0
 800a008:	2100      	movs	r1, #0
 800a00a:	2029      	movs	r0, #41	; 0x29
 800a00c:	f7f7 f97e 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800a010:	2029      	movs	r0, #41	; 0x29
 800a012:	f7f7 f997 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a016:	bf00      	nop
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	40002800 	.word	0x40002800
 800a024:	10908100 	.word	0x10908100

0800a028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08a      	sub	sp, #40	; 0x28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a030:	f107 0314 	add.w	r3, r7, #20
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	605a      	str	r2, [r3, #4]
 800a03a:	609a      	str	r2, [r3, #8]
 800a03c:	60da      	str	r2, [r3, #12]
 800a03e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a25      	ldr	r2, [pc, #148]	; (800a0dc <HAL_SPI_MspInit+0xb4>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d144      	bne.n	800a0d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a04a:	4b25      	ldr	r3, [pc, #148]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	4a24      	ldr	r2, [pc, #144]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a054:	6193      	str	r3, [r2, #24]
 800a056:	4b22      	ldr	r3, [pc, #136]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a05e:	613b      	str	r3, [r7, #16]
 800a060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a062:	4b1f      	ldr	r3, [pc, #124]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	4a1e      	ldr	r2, [pc, #120]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a06c:	6153      	str	r3, [r2, #20]
 800a06e:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a07a:	4b19      	ldr	r3, [pc, #100]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	4a18      	ldr	r2, [pc, #96]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a084:	6153      	str	r3, [r2, #20]
 800a086:	4b16      	ldr	r3, [pc, #88]	; (800a0e0 <HAL_SPI_MspInit+0xb8>)
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a08e:	60bb      	str	r3, [r7, #8]
 800a090:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a092:	2380      	movs	r3, #128	; 0x80
 800a094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a096:	2302      	movs	r3, #2
 800a098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a0a2:	2305      	movs	r3, #5
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0a6:	f107 0314 	add.w	r3, r7, #20
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0b0:	f7f7 fb2c 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800a0b4:	2318      	movs	r3, #24
 800a0b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a0c4:	2305      	movs	r3, #5
 800a0c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0c8:	f107 0314 	add.w	r3, r7, #20
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4805      	ldr	r0, [pc, #20]	; (800a0e4 <HAL_SPI_MspInit+0xbc>)
 800a0d0:	f7f7 fb1c 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a0d4:	bf00      	nop
 800a0d6:	3728      	adds	r7, #40	; 0x28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	40013000 	.word	0x40013000
 800a0e0:	40021000 	.word	0x40021000
 800a0e4:	48000400 	.word	0x48000400

0800a0e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f8:	d10b      	bne.n	800a112 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <HAL_TIM_Base_MspInit+0x38>)
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	4a08      	ldr	r2, [pc, #32]	; (800a120 <HAL_TIM_Base_MspInit+0x38>)
 800a100:	f043 0301 	orr.w	r3, r3, #1
 800a104:	61d3      	str	r3, [r2, #28]
 800a106:	4b06      	ldr	r3, [pc, #24]	; (800a120 <HAL_TIM_Base_MspInit+0x38>)
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800a112:	bf00      	nop
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	40021000 	.word	0x40021000

0800a124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	; 0x28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a12c:	f107 0314 	add.w	r3, r7, #20
 800a130:	2200      	movs	r2, #0
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	605a      	str	r2, [r3, #4]
 800a136:	609a      	str	r2, [r3, #8]
 800a138:	60da      	str	r2, [r3, #12]
 800a13a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a1c      	ldr	r2, [pc, #112]	; (800a1b4 <HAL_UART_MspInit+0x90>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d131      	bne.n	800a1aa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a146:	4b1c      	ldr	r3, [pc, #112]	; (800a1b8 <HAL_UART_MspInit+0x94>)
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	4a1b      	ldr	r2, [pc, #108]	; (800a1b8 <HAL_UART_MspInit+0x94>)
 800a14c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a150:	6193      	str	r3, [r2, #24]
 800a152:	4b19      	ldr	r3, [pc, #100]	; (800a1b8 <HAL_UART_MspInit+0x94>)
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a15e:	4b16      	ldr	r3, [pc, #88]	; (800a1b8 <HAL_UART_MspInit+0x94>)
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	4a15      	ldr	r2, [pc, #84]	; (800a1b8 <HAL_UART_MspInit+0x94>)
 800a164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a168:	6153      	str	r3, [r2, #20]
 800a16a:	4b13      	ldr	r3, [pc, #76]	; (800a1b8 <HAL_UART_MspInit+0x94>)
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a176:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a17a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a17c:	2302      	movs	r3, #2
 800a17e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a180:	2300      	movs	r3, #0
 800a182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a184:	2303      	movs	r3, #3
 800a186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a188:	2307      	movs	r3, #7
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a18c:	f107 0314 	add.w	r3, r7, #20
 800a190:	4619      	mov	r1, r3
 800a192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a196:	f7f7 fab9 	bl	800170c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a19a:	2200      	movs	r2, #0
 800a19c:	2100      	movs	r1, #0
 800a19e:	2025      	movs	r0, #37	; 0x25
 800a1a0:	f7f7 f8b4 	bl	800130c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a1a4:	2025      	movs	r0, #37	; 0x25
 800a1a6:	f7f7 f8cd 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a1aa:	bf00      	nop
 800a1ac:	3728      	adds	r7, #40	; 0x28
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40013800 	.word	0x40013800
 800a1b8:	40021000 	.word	0x40021000

0800a1bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08c      	sub	sp, #48	; 0x30
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	2019      	movs	r0, #25
 800a1d2:	f7f7 f89b 	bl	800130c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a1d6:	2019      	movs	r0, #25
 800a1d8:	f7f7 f8b4 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a1dc:	4b1e      	ldr	r3, [pc, #120]	; (800a258 <HAL_InitTick+0x9c>)
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	4a1d      	ldr	r2, [pc, #116]	; (800a258 <HAL_InitTick+0x9c>)
 800a1e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a1e6:	6193      	str	r3, [r2, #24]
 800a1e8:	4b1b      	ldr	r3, [pc, #108]	; (800a258 <HAL_InitTick+0x9c>)
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a1f4:	f107 0210 	add.w	r2, r7, #16
 800a1f8:	f107 0314 	add.w	r3, r7, #20
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7f8 fd64 	bl	8002ccc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800a204:	f7f8 fd40 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 800a208:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20c:	4a13      	ldr	r2, [pc, #76]	; (800a25c <HAL_InitTick+0xa0>)
 800a20e:	fba2 2303 	umull	r2, r3, r2, r3
 800a212:	0c9b      	lsrs	r3, r3, #18
 800a214:	3b01      	subs	r3, #1
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a218:	4b11      	ldr	r3, [pc, #68]	; (800a260 <HAL_InitTick+0xa4>)
 800a21a:	4a12      	ldr	r2, [pc, #72]	; (800a264 <HAL_InitTick+0xa8>)
 800a21c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800a21e:	4b10      	ldr	r3, [pc, #64]	; (800a260 <HAL_InitTick+0xa4>)
 800a220:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a224:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a226:	4a0e      	ldr	r2, [pc, #56]	; (800a260 <HAL_InitTick+0xa4>)
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a22c:	4b0c      	ldr	r3, [pc, #48]	; (800a260 <HAL_InitTick+0xa4>)
 800a22e:	2200      	movs	r2, #0
 800a230:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a232:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <HAL_InitTick+0xa4>)
 800a234:	2200      	movs	r2, #0
 800a236:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800a238:	4809      	ldr	r0, [pc, #36]	; (800a260 <HAL_InitTick+0xa4>)
 800a23a:	f7f9 ffbd 	bl	80041b8 <HAL_TIM_Base_Init>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d104      	bne.n	800a24e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800a244:	4806      	ldr	r0, [pc, #24]	; (800a260 <HAL_InitTick+0xa4>)
 800a246:	f7fa f80d 	bl	8004264 <HAL_TIM_Base_Start_IT>
 800a24a:	4603      	mov	r3, r0
 800a24c:	e000      	b.n	800a250 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
}
 800a250:	4618      	mov	r0, r3
 800a252:	3730      	adds	r7, #48	; 0x30
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	40021000 	.word	0x40021000
 800a25c:	431bde83 	.word	0x431bde83
 800a260:	200015f0 	.word	0x200015f0
 800a264:	40012c00 	.word	0x40012c00

0800a268 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800a268:	b480      	push	{r7}
 800a26a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800a26c:	4b0e      	ldr	r3, [pc, #56]	; (800a2a8 <SDTimer_Handler+0x40>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	d006      	beq.n	800a284 <SDTimer_Handler+0x1c>
    Timer1--;
 800a276:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <SDTimer_Handler+0x40>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	3b01      	subs	r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <SDTimer_Handler+0x40>)
 800a282:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800a284:	4b09      	ldr	r3, [pc, #36]	; (800a2ac <SDTimer_Handler+0x44>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d006      	beq.n	800a29c <SDTimer_Handler+0x34>
    Timer2--;
 800a28e:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <SDTimer_Handler+0x44>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	3b01      	subs	r3, #1
 800a296:	b2da      	uxtb	r2, r3
 800a298:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <SDTimer_Handler+0x44>)
 800a29a:	701a      	strb	r2, [r3, #0]
}
 800a29c:	bf00      	nop
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	20001631 	.word	0x20001631
 800a2ac:	20001630 	.word	0x20001630

0800a2b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a2b4:	bf00      	nop
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a2c2:	e7fe      	b.n	800a2c2 <HardFault_Handler+0x4>

0800a2c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a2c8:	e7fe      	b.n	800a2c8 <MemManage_Handler+0x4>

0800a2ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a2ce:	e7fe      	b.n	800a2ce <BusFault_Handler+0x4>

0800a2d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a2d4:	e7fe      	b.n	800a2d4 <UsageFault_Handler+0x4>

0800a2d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a2da:	bf00      	nop
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a2e8:	bf00      	nop
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a2f6:	bf00      	nop
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a304:	bf00      	nop
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
	...

0800a310 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a314:	4802      	ldr	r0, [pc, #8]	; (800a320 <DMA1_Channel1_IRQHandler+0x10>)
 800a316:	f7f7 f907 	bl	8001528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a31a:	bf00      	nop
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000c6c 	.word	0x20000c6c

0800a324 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	FatFsCnt++;
 800a328:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	3301      	adds	r3, #1
 800a330:	b2da      	uxtb	r2, r3
 800a332:	4b08      	ldr	r3, [pc, #32]	; (800a354 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800a334:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b09      	cmp	r3, #9
 800a33e:	d904      	bls.n	800a34a <TIM1_UP_TIM16_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 800a340:	4b04      	ldr	r3, [pc, #16]	; (800a354 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800a346:	f7ff ff8f 	bl	800a268 <SDTimer_Handler>
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a34a:	4803      	ldr	r0, [pc, #12]	; (800a358 <TIM1_UP_TIM16_IRQHandler+0x34>)
 800a34c:	f7f9 ffb4 	bl	80042b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a350:	bf00      	nop
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000278 	.word	0x20000278
 800a358:	200015f0 	.word	0x200015f0

0800a35c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a360:	4802      	ldr	r0, [pc, #8]	; (800a36c <USART1_IRQHandler+0x10>)
 800a362:	f7fa fcf5 	bl	8004d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a366:	bf00      	nop
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20000bec 	.word	0x20000bec

0800a370 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800a374:	4802      	ldr	r0, [pc, #8]	; (800a380 <RTC_Alarm_IRQHandler+0x10>)
 800a376:	f7f9 f92f 	bl	80035d8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800a37a:	bf00      	nop
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20000cb0 	.word	0x20000cb0

0800a384 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a38c:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <_sbrk+0x50>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <_sbrk+0x16>
		heap_end = &end;
 800a394:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <_sbrk+0x50>)
 800a396:	4a10      	ldr	r2, [pc, #64]	; (800a3d8 <_sbrk+0x54>)
 800a398:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <_sbrk+0x50>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <_sbrk+0x50>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	466a      	mov	r2, sp
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d907      	bls.n	800a3be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a3ae:	f000 f8e3 	bl	800a578 <__errno>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	230c      	movs	r3, #12
 800a3b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3bc:	e006      	b.n	800a3cc <_sbrk+0x48>
	}

	heap_end += incr;
 800a3be:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <_sbrk+0x50>)
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	4a03      	ldr	r2, [pc, #12]	; (800a3d4 <_sbrk+0x50>)
 800a3c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	2000027c 	.word	0x2000027c
 800a3d8:	20001638 	.word	0x20001638

0800a3dc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a3e0:	4b1f      	ldr	r3, [pc, #124]	; (800a460 <SystemInit+0x84>)
 800a3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e6:	4a1e      	ldr	r2, [pc, #120]	; (800a460 <SystemInit+0x84>)
 800a3e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800a3f0:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <SystemInit+0x88>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a1b      	ldr	r2, [pc, #108]	; (800a464 <SystemInit+0x88>)
 800a3f6:	f043 0301 	orr.w	r3, r3, #1
 800a3fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800a3fc:	4b19      	ldr	r3, [pc, #100]	; (800a464 <SystemInit+0x88>)
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	4918      	ldr	r1, [pc, #96]	; (800a464 <SystemInit+0x88>)
 800a402:	4b19      	ldr	r3, [pc, #100]	; (800a468 <SystemInit+0x8c>)
 800a404:	4013      	ands	r3, r2
 800a406:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800a408:	4b16      	ldr	r3, [pc, #88]	; (800a464 <SystemInit+0x88>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a15      	ldr	r2, [pc, #84]	; (800a464 <SystemInit+0x88>)
 800a40e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a416:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a418:	4b12      	ldr	r3, [pc, #72]	; (800a464 <SystemInit+0x88>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a11      	ldr	r2, [pc, #68]	; (800a464 <SystemInit+0x88>)
 800a41e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a422:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800a424:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <SystemInit+0x88>)
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	4a0e      	ldr	r2, [pc, #56]	; (800a464 <SystemInit+0x88>)
 800a42a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800a42e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800a430:	4b0c      	ldr	r3, [pc, #48]	; (800a464 <SystemInit+0x88>)
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	4a0b      	ldr	r2, [pc, #44]	; (800a464 <SystemInit+0x88>)
 800a436:	f023 030f 	bic.w	r3, r3, #15
 800a43a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800a43c:	4b09      	ldr	r3, [pc, #36]	; (800a464 <SystemInit+0x88>)
 800a43e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a440:	4908      	ldr	r1, [pc, #32]	; (800a464 <SystemInit+0x88>)
 800a442:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <SystemInit+0x90>)
 800a444:	4013      	ands	r3, r2
 800a446:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800a448:	4b06      	ldr	r3, [pc, #24]	; (800a464 <SystemInit+0x88>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a44e:	4b04      	ldr	r3, [pc, #16]	; (800a460 <SystemInit+0x84>)
 800a450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a454:	609a      	str	r2, [r3, #8]
#endif
}
 800a456:	bf00      	nop
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	e000ed00 	.word	0xe000ed00
 800a464:	40021000 	.word	0x40021000
 800a468:	f87fc00c 	.word	0xf87fc00c
 800a46c:	ff00fccc 	.word	0xff00fccc

0800a470 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe fbbb 	bl	8008bf8 <SD_disk_initialize>
 800a482:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return SD_disk_status(pdrv);
 800a496:	79fb      	ldrb	r3, [r7, #7]
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fe fc97 	bl	8008dcc <SD_disk_status>
 800a49e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
 800a4b2:	603b      	str	r3, [r7, #0]
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a4b8:	7bf8      	ldrb	r0, [r7, #15]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	68b9      	ldr	r1, [r7, #8]
 800a4c0:	f7fe fc9a 	bl	8008df8 <SD_disk_read>
 800a4c4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a4de:	7bf8      	ldrb	r0, [r7, #15]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	f7fe fcf1 	bl	8008ecc <SD_disk_write>
 800a4ea:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	603a      	str	r2, [r7, #0]
 800a4fe:	71fb      	strb	r3, [r7, #7]
 800a500:	460b      	mov	r3, r1
 800a502:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800a504:	79b9      	ldrb	r1, [r7, #6]
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fd62 	bl	8008fd4 <SD_disk_ioctl>
 800a510:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a512:	4618      	mov	r0, r3
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a51c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a554 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a520:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a522:	e003      	b.n	800a52c <LoopCopyDataInit>

0800a524 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a524:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a526:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a528:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a52a:	3104      	adds	r1, #4

0800a52c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a52c:	480b      	ldr	r0, [pc, #44]	; (800a55c <LoopForever+0xa>)
	ldr	r3, =_edata
 800a52e:	4b0c      	ldr	r3, [pc, #48]	; (800a560 <LoopForever+0xe>)
	adds	r2, r0, r1
 800a530:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a532:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a534:	d3f6      	bcc.n	800a524 <CopyDataInit>
	ldr	r2, =_sbss
 800a536:	4a0b      	ldr	r2, [pc, #44]	; (800a564 <LoopForever+0x12>)
	b	LoopFillZerobss
 800a538:	e002      	b.n	800a540 <LoopFillZerobss>

0800a53a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a53a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a53c:	f842 3b04 	str.w	r3, [r2], #4

0800a540 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a540:	4b09      	ldr	r3, [pc, #36]	; (800a568 <LoopForever+0x16>)
	cmp	r2, r3
 800a542:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a544:	d3f9      	bcc.n	800a53a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a546:	f7ff ff49 	bl	800a3dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a54a:	f000 f81b 	bl	800a584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a54e:	f7ff f887 	bl	8009660 <main>

0800a552 <LoopForever>:

LoopForever:
    b LoopForever
 800a552:	e7fe      	b.n	800a552 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800a554:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800a558:	0800b2cc 	.word	0x0800b2cc
	ldr	r0, =_sdata
 800a55c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a560:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 800a564:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 800a568:	20001638 	.word	0x20001638

0800a56c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a56c:	e7fe      	b.n	800a56c <ADC1_2_IRQHandler>

0800a56e <atoi>:
 800a56e:	220a      	movs	r2, #10
 800a570:	2100      	movs	r1, #0
 800a572:	f000 b8cf 	b.w	800a714 <strtol>
	...

0800a578 <__errno>:
 800a578:	4b01      	ldr	r3, [pc, #4]	; (800a580 <__errno+0x8>)
 800a57a:	6818      	ldr	r0, [r3, #0]
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	20000028 	.word	0x20000028

0800a584 <__libc_init_array>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	4e0d      	ldr	r6, [pc, #52]	; (800a5bc <__libc_init_array+0x38>)
 800a588:	4c0d      	ldr	r4, [pc, #52]	; (800a5c0 <__libc_init_array+0x3c>)
 800a58a:	1ba4      	subs	r4, r4, r6
 800a58c:	10a4      	asrs	r4, r4, #2
 800a58e:	2500      	movs	r5, #0
 800a590:	42a5      	cmp	r5, r4
 800a592:	d109      	bne.n	800a5a8 <__libc_init_array+0x24>
 800a594:	4e0b      	ldr	r6, [pc, #44]	; (800a5c4 <__libc_init_array+0x40>)
 800a596:	4c0c      	ldr	r4, [pc, #48]	; (800a5c8 <__libc_init_array+0x44>)
 800a598:	f000 fcdc 	bl	800af54 <_init>
 800a59c:	1ba4      	subs	r4, r4, r6
 800a59e:	10a4      	asrs	r4, r4, #2
 800a5a0:	2500      	movs	r5, #0
 800a5a2:	42a5      	cmp	r5, r4
 800a5a4:	d105      	bne.n	800a5b2 <__libc_init_array+0x2e>
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5ac:	4798      	blx	r3
 800a5ae:	3501      	adds	r5, #1
 800a5b0:	e7ee      	b.n	800a590 <__libc_init_array+0xc>
 800a5b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a5b6:	4798      	blx	r3
 800a5b8:	3501      	adds	r5, #1
 800a5ba:	e7f2      	b.n	800a5a2 <__libc_init_array+0x1e>
 800a5bc:	0800b2c4 	.word	0x0800b2c4
 800a5c0:	0800b2c4 	.word	0x0800b2c4
 800a5c4:	0800b2c4 	.word	0x0800b2c4
 800a5c8:	0800b2c8 	.word	0x0800b2c8

0800a5cc <memset>:
 800a5cc:	4402      	add	r2, r0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d100      	bne.n	800a5d6 <memset+0xa>
 800a5d4:	4770      	bx	lr
 800a5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5da:	e7f9      	b.n	800a5d0 <memset+0x4>

0800a5dc <siprintf>:
 800a5dc:	b40e      	push	{r1, r2, r3}
 800a5de:	b500      	push	{lr}
 800a5e0:	b09c      	sub	sp, #112	; 0x70
 800a5e2:	ab1d      	add	r3, sp, #116	; 0x74
 800a5e4:	9002      	str	r0, [sp, #8]
 800a5e6:	9006      	str	r0, [sp, #24]
 800a5e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5ec:	4809      	ldr	r0, [pc, #36]	; (800a614 <siprintf+0x38>)
 800a5ee:	9107      	str	r1, [sp, #28]
 800a5f0:	9104      	str	r1, [sp, #16]
 800a5f2:	4909      	ldr	r1, [pc, #36]	; (800a618 <siprintf+0x3c>)
 800a5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f8:	9105      	str	r1, [sp, #20]
 800a5fa:	6800      	ldr	r0, [r0, #0]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	a902      	add	r1, sp, #8
 800a600:	f000 f90e 	bl	800a820 <_svfiprintf_r>
 800a604:	9b02      	ldr	r3, [sp, #8]
 800a606:	2200      	movs	r2, #0
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	b01c      	add	sp, #112	; 0x70
 800a60c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a610:	b003      	add	sp, #12
 800a612:	4770      	bx	lr
 800a614:	20000028 	.word	0x20000028
 800a618:	ffff0208 	.word	0xffff0208

0800a61c <_strtol_l.isra.0>:
 800a61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	4680      	mov	r8, r0
 800a622:	4689      	mov	r9, r1
 800a624:	4692      	mov	sl, r2
 800a626:	461e      	mov	r6, r3
 800a628:	460f      	mov	r7, r1
 800a62a:	463d      	mov	r5, r7
 800a62c:	9808      	ldr	r0, [sp, #32]
 800a62e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a632:	f000 f885 	bl	800a740 <__locale_ctype_ptr_l>
 800a636:	4420      	add	r0, r4
 800a638:	7843      	ldrb	r3, [r0, #1]
 800a63a:	f013 0308 	ands.w	r3, r3, #8
 800a63e:	d132      	bne.n	800a6a6 <_strtol_l.isra.0+0x8a>
 800a640:	2c2d      	cmp	r4, #45	; 0x2d
 800a642:	d132      	bne.n	800a6aa <_strtol_l.isra.0+0x8e>
 800a644:	787c      	ldrb	r4, [r7, #1]
 800a646:	1cbd      	adds	r5, r7, #2
 800a648:	2201      	movs	r2, #1
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	d05d      	beq.n	800a70a <_strtol_l.isra.0+0xee>
 800a64e:	2e10      	cmp	r6, #16
 800a650:	d109      	bne.n	800a666 <_strtol_l.isra.0+0x4a>
 800a652:	2c30      	cmp	r4, #48	; 0x30
 800a654:	d107      	bne.n	800a666 <_strtol_l.isra.0+0x4a>
 800a656:	782b      	ldrb	r3, [r5, #0]
 800a658:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a65c:	2b58      	cmp	r3, #88	; 0x58
 800a65e:	d14f      	bne.n	800a700 <_strtol_l.isra.0+0xe4>
 800a660:	786c      	ldrb	r4, [r5, #1]
 800a662:	2610      	movs	r6, #16
 800a664:	3502      	adds	r5, #2
 800a666:	2a00      	cmp	r2, #0
 800a668:	bf14      	ite	ne
 800a66a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a66e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a672:	2700      	movs	r7, #0
 800a674:	fbb1 fcf6 	udiv	ip, r1, r6
 800a678:	4638      	mov	r0, r7
 800a67a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a67e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a682:	2b09      	cmp	r3, #9
 800a684:	d817      	bhi.n	800a6b6 <_strtol_l.isra.0+0x9a>
 800a686:	461c      	mov	r4, r3
 800a688:	42a6      	cmp	r6, r4
 800a68a:	dd23      	ble.n	800a6d4 <_strtol_l.isra.0+0xb8>
 800a68c:	1c7b      	adds	r3, r7, #1
 800a68e:	d007      	beq.n	800a6a0 <_strtol_l.isra.0+0x84>
 800a690:	4584      	cmp	ip, r0
 800a692:	d31c      	bcc.n	800a6ce <_strtol_l.isra.0+0xb2>
 800a694:	d101      	bne.n	800a69a <_strtol_l.isra.0+0x7e>
 800a696:	45a6      	cmp	lr, r4
 800a698:	db19      	blt.n	800a6ce <_strtol_l.isra.0+0xb2>
 800a69a:	fb00 4006 	mla	r0, r0, r6, r4
 800a69e:	2701      	movs	r7, #1
 800a6a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6a4:	e7eb      	b.n	800a67e <_strtol_l.isra.0+0x62>
 800a6a6:	462f      	mov	r7, r5
 800a6a8:	e7bf      	b.n	800a62a <_strtol_l.isra.0+0xe>
 800a6aa:	2c2b      	cmp	r4, #43	; 0x2b
 800a6ac:	bf04      	itt	eq
 800a6ae:	1cbd      	addeq	r5, r7, #2
 800a6b0:	787c      	ldrbeq	r4, [r7, #1]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	e7c9      	b.n	800a64a <_strtol_l.isra.0+0x2e>
 800a6b6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a6ba:	2b19      	cmp	r3, #25
 800a6bc:	d801      	bhi.n	800a6c2 <_strtol_l.isra.0+0xa6>
 800a6be:	3c37      	subs	r4, #55	; 0x37
 800a6c0:	e7e2      	b.n	800a688 <_strtol_l.isra.0+0x6c>
 800a6c2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a6c6:	2b19      	cmp	r3, #25
 800a6c8:	d804      	bhi.n	800a6d4 <_strtol_l.isra.0+0xb8>
 800a6ca:	3c57      	subs	r4, #87	; 0x57
 800a6cc:	e7dc      	b.n	800a688 <_strtol_l.isra.0+0x6c>
 800a6ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a6d2:	e7e5      	b.n	800a6a0 <_strtol_l.isra.0+0x84>
 800a6d4:	1c7b      	adds	r3, r7, #1
 800a6d6:	d108      	bne.n	800a6ea <_strtol_l.isra.0+0xce>
 800a6d8:	2322      	movs	r3, #34	; 0x22
 800a6da:	f8c8 3000 	str.w	r3, [r8]
 800a6de:	4608      	mov	r0, r1
 800a6e0:	f1ba 0f00 	cmp.w	sl, #0
 800a6e4:	d107      	bne.n	800a6f6 <_strtol_l.isra.0+0xda>
 800a6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ea:	b102      	cbz	r2, 800a6ee <_strtol_l.isra.0+0xd2>
 800a6ec:	4240      	negs	r0, r0
 800a6ee:	f1ba 0f00 	cmp.w	sl, #0
 800a6f2:	d0f8      	beq.n	800a6e6 <_strtol_l.isra.0+0xca>
 800a6f4:	b10f      	cbz	r7, 800a6fa <_strtol_l.isra.0+0xde>
 800a6f6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a6fa:	f8ca 9000 	str.w	r9, [sl]
 800a6fe:	e7f2      	b.n	800a6e6 <_strtol_l.isra.0+0xca>
 800a700:	2430      	movs	r4, #48	; 0x30
 800a702:	2e00      	cmp	r6, #0
 800a704:	d1af      	bne.n	800a666 <_strtol_l.isra.0+0x4a>
 800a706:	2608      	movs	r6, #8
 800a708:	e7ad      	b.n	800a666 <_strtol_l.isra.0+0x4a>
 800a70a:	2c30      	cmp	r4, #48	; 0x30
 800a70c:	d0a3      	beq.n	800a656 <_strtol_l.isra.0+0x3a>
 800a70e:	260a      	movs	r6, #10
 800a710:	e7a9      	b.n	800a666 <_strtol_l.isra.0+0x4a>
	...

0800a714 <strtol>:
 800a714:	4b08      	ldr	r3, [pc, #32]	; (800a738 <strtol+0x24>)
 800a716:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a718:	681c      	ldr	r4, [r3, #0]
 800a71a:	4d08      	ldr	r5, [pc, #32]	; (800a73c <strtol+0x28>)
 800a71c:	6a23      	ldr	r3, [r4, #32]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bf08      	it	eq
 800a722:	462b      	moveq	r3, r5
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	4613      	mov	r3, r2
 800a728:	460a      	mov	r2, r1
 800a72a:	4601      	mov	r1, r0
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff ff75 	bl	800a61c <_strtol_l.isra.0>
 800a732:	b003      	add	sp, #12
 800a734:	bd30      	pop	{r4, r5, pc}
 800a736:	bf00      	nop
 800a738:	20000028 	.word	0x20000028
 800a73c:	2000008c 	.word	0x2000008c

0800a740 <__locale_ctype_ptr_l>:
 800a740:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a744:	4770      	bx	lr

0800a746 <__ascii_mbtowc>:
 800a746:	b082      	sub	sp, #8
 800a748:	b901      	cbnz	r1, 800a74c <__ascii_mbtowc+0x6>
 800a74a:	a901      	add	r1, sp, #4
 800a74c:	b142      	cbz	r2, 800a760 <__ascii_mbtowc+0x1a>
 800a74e:	b14b      	cbz	r3, 800a764 <__ascii_mbtowc+0x1e>
 800a750:	7813      	ldrb	r3, [r2, #0]
 800a752:	600b      	str	r3, [r1, #0]
 800a754:	7812      	ldrb	r2, [r2, #0]
 800a756:	1c10      	adds	r0, r2, #0
 800a758:	bf18      	it	ne
 800a75a:	2001      	movne	r0, #1
 800a75c:	b002      	add	sp, #8
 800a75e:	4770      	bx	lr
 800a760:	4610      	mov	r0, r2
 800a762:	e7fb      	b.n	800a75c <__ascii_mbtowc+0x16>
 800a764:	f06f 0001 	mvn.w	r0, #1
 800a768:	e7f8      	b.n	800a75c <__ascii_mbtowc+0x16>

0800a76a <__ssputs_r>:
 800a76a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76e:	688e      	ldr	r6, [r1, #8]
 800a770:	429e      	cmp	r6, r3
 800a772:	4682      	mov	sl, r0
 800a774:	460c      	mov	r4, r1
 800a776:	4690      	mov	r8, r2
 800a778:	4699      	mov	r9, r3
 800a77a:	d837      	bhi.n	800a7ec <__ssputs_r+0x82>
 800a77c:	898a      	ldrh	r2, [r1, #12]
 800a77e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a782:	d031      	beq.n	800a7e8 <__ssputs_r+0x7e>
 800a784:	6825      	ldr	r5, [r4, #0]
 800a786:	6909      	ldr	r1, [r1, #16]
 800a788:	1a6f      	subs	r7, r5, r1
 800a78a:	6965      	ldr	r5, [r4, #20]
 800a78c:	2302      	movs	r3, #2
 800a78e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a792:	fb95 f5f3 	sdiv	r5, r5, r3
 800a796:	f109 0301 	add.w	r3, r9, #1
 800a79a:	443b      	add	r3, r7
 800a79c:	429d      	cmp	r5, r3
 800a79e:	bf38      	it	cc
 800a7a0:	461d      	movcc	r5, r3
 800a7a2:	0553      	lsls	r3, r2, #21
 800a7a4:	d530      	bpl.n	800a808 <__ssputs_r+0x9e>
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f000 fb3a 	bl	800ae20 <_malloc_r>
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	b950      	cbnz	r0, 800a7c6 <__ssputs_r+0x5c>
 800a7b0:	230c      	movs	r3, #12
 800a7b2:	f8ca 3000 	str.w	r3, [sl]
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7bc:	81a3      	strh	r3, [r4, #12]
 800a7be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c6:	463a      	mov	r2, r7
 800a7c8:	6921      	ldr	r1, [r4, #16]
 800a7ca:	f000 fab6 	bl	800ad3a <memcpy>
 800a7ce:	89a3      	ldrh	r3, [r4, #12]
 800a7d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d8:	81a3      	strh	r3, [r4, #12]
 800a7da:	6126      	str	r6, [r4, #16]
 800a7dc:	6165      	str	r5, [r4, #20]
 800a7de:	443e      	add	r6, r7
 800a7e0:	1bed      	subs	r5, r5, r7
 800a7e2:	6026      	str	r6, [r4, #0]
 800a7e4:	60a5      	str	r5, [r4, #8]
 800a7e6:	464e      	mov	r6, r9
 800a7e8:	454e      	cmp	r6, r9
 800a7ea:	d900      	bls.n	800a7ee <__ssputs_r+0x84>
 800a7ec:	464e      	mov	r6, r9
 800a7ee:	4632      	mov	r2, r6
 800a7f0:	4641      	mov	r1, r8
 800a7f2:	6820      	ldr	r0, [r4, #0]
 800a7f4:	f000 faac 	bl	800ad50 <memmove>
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	1b9b      	subs	r3, r3, r6
 800a7fc:	60a3      	str	r3, [r4, #8]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	441e      	add	r6, r3
 800a802:	6026      	str	r6, [r4, #0]
 800a804:	2000      	movs	r0, #0
 800a806:	e7dc      	b.n	800a7c2 <__ssputs_r+0x58>
 800a808:	462a      	mov	r2, r5
 800a80a:	f000 fb63 	bl	800aed4 <_realloc_r>
 800a80e:	4606      	mov	r6, r0
 800a810:	2800      	cmp	r0, #0
 800a812:	d1e2      	bne.n	800a7da <__ssputs_r+0x70>
 800a814:	6921      	ldr	r1, [r4, #16]
 800a816:	4650      	mov	r0, sl
 800a818:	f000 fab4 	bl	800ad84 <_free_r>
 800a81c:	e7c8      	b.n	800a7b0 <__ssputs_r+0x46>
	...

0800a820 <_svfiprintf_r>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	461d      	mov	r5, r3
 800a826:	898b      	ldrh	r3, [r1, #12]
 800a828:	061f      	lsls	r7, r3, #24
 800a82a:	b09d      	sub	sp, #116	; 0x74
 800a82c:	4680      	mov	r8, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	4616      	mov	r6, r2
 800a832:	d50f      	bpl.n	800a854 <_svfiprintf_r+0x34>
 800a834:	690b      	ldr	r3, [r1, #16]
 800a836:	b96b      	cbnz	r3, 800a854 <_svfiprintf_r+0x34>
 800a838:	2140      	movs	r1, #64	; 0x40
 800a83a:	f000 faf1 	bl	800ae20 <_malloc_r>
 800a83e:	6020      	str	r0, [r4, #0]
 800a840:	6120      	str	r0, [r4, #16]
 800a842:	b928      	cbnz	r0, 800a850 <_svfiprintf_r+0x30>
 800a844:	230c      	movs	r3, #12
 800a846:	f8c8 3000 	str.w	r3, [r8]
 800a84a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a84e:	e0c8      	b.n	800a9e2 <_svfiprintf_r+0x1c2>
 800a850:	2340      	movs	r3, #64	; 0x40
 800a852:	6163      	str	r3, [r4, #20]
 800a854:	2300      	movs	r3, #0
 800a856:	9309      	str	r3, [sp, #36]	; 0x24
 800a858:	2320      	movs	r3, #32
 800a85a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a85e:	2330      	movs	r3, #48	; 0x30
 800a860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a864:	9503      	str	r5, [sp, #12]
 800a866:	f04f 0b01 	mov.w	fp, #1
 800a86a:	4637      	mov	r7, r6
 800a86c:	463d      	mov	r5, r7
 800a86e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a872:	b10b      	cbz	r3, 800a878 <_svfiprintf_r+0x58>
 800a874:	2b25      	cmp	r3, #37	; 0x25
 800a876:	d13e      	bne.n	800a8f6 <_svfiprintf_r+0xd6>
 800a878:	ebb7 0a06 	subs.w	sl, r7, r6
 800a87c:	d00b      	beq.n	800a896 <_svfiprintf_r+0x76>
 800a87e:	4653      	mov	r3, sl
 800a880:	4632      	mov	r2, r6
 800a882:	4621      	mov	r1, r4
 800a884:	4640      	mov	r0, r8
 800a886:	f7ff ff70 	bl	800a76a <__ssputs_r>
 800a88a:	3001      	adds	r0, #1
 800a88c:	f000 80a4 	beq.w	800a9d8 <_svfiprintf_r+0x1b8>
 800a890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a892:	4453      	add	r3, sl
 800a894:	9309      	str	r3, [sp, #36]	; 0x24
 800a896:	783b      	ldrb	r3, [r7, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 809d 	beq.w	800a9d8 <_svfiprintf_r+0x1b8>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	9307      	str	r3, [sp, #28]
 800a8ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8b0:	931a      	str	r3, [sp, #104]	; 0x68
 800a8b2:	462f      	mov	r7, r5
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a8ba:	4850      	ldr	r0, [pc, #320]	; (800a9fc <_svfiprintf_r+0x1dc>)
 800a8bc:	f7f5 fc90 	bl	80001e0 <memchr>
 800a8c0:	9b04      	ldr	r3, [sp, #16]
 800a8c2:	b9d0      	cbnz	r0, 800a8fa <_svfiprintf_r+0xda>
 800a8c4:	06d9      	lsls	r1, r3, #27
 800a8c6:	bf44      	itt	mi
 800a8c8:	2220      	movmi	r2, #32
 800a8ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8ce:	071a      	lsls	r2, r3, #28
 800a8d0:	bf44      	itt	mi
 800a8d2:	222b      	movmi	r2, #43	; 0x2b
 800a8d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8d8:	782a      	ldrb	r2, [r5, #0]
 800a8da:	2a2a      	cmp	r2, #42	; 0x2a
 800a8dc:	d015      	beq.n	800a90a <_svfiprintf_r+0xea>
 800a8de:	9a07      	ldr	r2, [sp, #28]
 800a8e0:	462f      	mov	r7, r5
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	250a      	movs	r5, #10
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ec:	3b30      	subs	r3, #48	; 0x30
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d94d      	bls.n	800a98e <_svfiprintf_r+0x16e>
 800a8f2:	b1b8      	cbz	r0, 800a924 <_svfiprintf_r+0x104>
 800a8f4:	e00f      	b.n	800a916 <_svfiprintf_r+0xf6>
 800a8f6:	462f      	mov	r7, r5
 800a8f8:	e7b8      	b.n	800a86c <_svfiprintf_r+0x4c>
 800a8fa:	4a40      	ldr	r2, [pc, #256]	; (800a9fc <_svfiprintf_r+0x1dc>)
 800a8fc:	1a80      	subs	r0, r0, r2
 800a8fe:	fa0b f000 	lsl.w	r0, fp, r0
 800a902:	4318      	orrs	r0, r3
 800a904:	9004      	str	r0, [sp, #16]
 800a906:	463d      	mov	r5, r7
 800a908:	e7d3      	b.n	800a8b2 <_svfiprintf_r+0x92>
 800a90a:	9a03      	ldr	r2, [sp, #12]
 800a90c:	1d11      	adds	r1, r2, #4
 800a90e:	6812      	ldr	r2, [r2, #0]
 800a910:	9103      	str	r1, [sp, #12]
 800a912:	2a00      	cmp	r2, #0
 800a914:	db01      	blt.n	800a91a <_svfiprintf_r+0xfa>
 800a916:	9207      	str	r2, [sp, #28]
 800a918:	e004      	b.n	800a924 <_svfiprintf_r+0x104>
 800a91a:	4252      	negs	r2, r2
 800a91c:	f043 0302 	orr.w	r3, r3, #2
 800a920:	9207      	str	r2, [sp, #28]
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	783b      	ldrb	r3, [r7, #0]
 800a926:	2b2e      	cmp	r3, #46	; 0x2e
 800a928:	d10c      	bne.n	800a944 <_svfiprintf_r+0x124>
 800a92a:	787b      	ldrb	r3, [r7, #1]
 800a92c:	2b2a      	cmp	r3, #42	; 0x2a
 800a92e:	d133      	bne.n	800a998 <_svfiprintf_r+0x178>
 800a930:	9b03      	ldr	r3, [sp, #12]
 800a932:	1d1a      	adds	r2, r3, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	9203      	str	r2, [sp, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	bfb8      	it	lt
 800a93c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a940:	3702      	adds	r7, #2
 800a942:	9305      	str	r3, [sp, #20]
 800a944:	4d2e      	ldr	r5, [pc, #184]	; (800aa00 <_svfiprintf_r+0x1e0>)
 800a946:	7839      	ldrb	r1, [r7, #0]
 800a948:	2203      	movs	r2, #3
 800a94a:	4628      	mov	r0, r5
 800a94c:	f7f5 fc48 	bl	80001e0 <memchr>
 800a950:	b138      	cbz	r0, 800a962 <_svfiprintf_r+0x142>
 800a952:	2340      	movs	r3, #64	; 0x40
 800a954:	1b40      	subs	r0, r0, r5
 800a956:	fa03 f000 	lsl.w	r0, r3, r0
 800a95a:	9b04      	ldr	r3, [sp, #16]
 800a95c:	4303      	orrs	r3, r0
 800a95e:	3701      	adds	r7, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	7839      	ldrb	r1, [r7, #0]
 800a964:	4827      	ldr	r0, [pc, #156]	; (800aa04 <_svfiprintf_r+0x1e4>)
 800a966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a96a:	2206      	movs	r2, #6
 800a96c:	1c7e      	adds	r6, r7, #1
 800a96e:	f7f5 fc37 	bl	80001e0 <memchr>
 800a972:	2800      	cmp	r0, #0
 800a974:	d038      	beq.n	800a9e8 <_svfiprintf_r+0x1c8>
 800a976:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <_svfiprintf_r+0x1e8>)
 800a978:	bb13      	cbnz	r3, 800a9c0 <_svfiprintf_r+0x1a0>
 800a97a:	9b03      	ldr	r3, [sp, #12]
 800a97c:	3307      	adds	r3, #7
 800a97e:	f023 0307 	bic.w	r3, r3, #7
 800a982:	3308      	adds	r3, #8
 800a984:	9303      	str	r3, [sp, #12]
 800a986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a988:	444b      	add	r3, r9
 800a98a:	9309      	str	r3, [sp, #36]	; 0x24
 800a98c:	e76d      	b.n	800a86a <_svfiprintf_r+0x4a>
 800a98e:	fb05 3202 	mla	r2, r5, r2, r3
 800a992:	2001      	movs	r0, #1
 800a994:	460f      	mov	r7, r1
 800a996:	e7a6      	b.n	800a8e6 <_svfiprintf_r+0xc6>
 800a998:	2300      	movs	r3, #0
 800a99a:	3701      	adds	r7, #1
 800a99c:	9305      	str	r3, [sp, #20]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	250a      	movs	r5, #10
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9a8:	3a30      	subs	r2, #48	; 0x30
 800a9aa:	2a09      	cmp	r2, #9
 800a9ac:	d903      	bls.n	800a9b6 <_svfiprintf_r+0x196>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0c8      	beq.n	800a944 <_svfiprintf_r+0x124>
 800a9b2:	9105      	str	r1, [sp, #20]
 800a9b4:	e7c6      	b.n	800a944 <_svfiprintf_r+0x124>
 800a9b6:	fb05 2101 	mla	r1, r5, r1, r2
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	4607      	mov	r7, r0
 800a9be:	e7f0      	b.n	800a9a2 <_svfiprintf_r+0x182>
 800a9c0:	ab03      	add	r3, sp, #12
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	4b11      	ldr	r3, [pc, #68]	; (800aa0c <_svfiprintf_r+0x1ec>)
 800a9c8:	a904      	add	r1, sp, #16
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	f3af 8000 	nop.w
 800a9d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a9d4:	4681      	mov	r9, r0
 800a9d6:	d1d6      	bne.n	800a986 <_svfiprintf_r+0x166>
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	065b      	lsls	r3, r3, #25
 800a9dc:	f53f af35 	bmi.w	800a84a <_svfiprintf_r+0x2a>
 800a9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9e2:	b01d      	add	sp, #116	; 0x74
 800a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e8:	ab03      	add	r3, sp, #12
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <_svfiprintf_r+0x1ec>)
 800a9f0:	a904      	add	r1, sp, #16
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	f000 f882 	bl	800aafc <_printf_i>
 800a9f8:	e7ea      	b.n	800a9d0 <_svfiprintf_r+0x1b0>
 800a9fa:	bf00      	nop
 800a9fc:	0800b18e 	.word	0x0800b18e
 800aa00:	0800b194 	.word	0x0800b194
 800aa04:	0800b198 	.word	0x0800b198
 800aa08:	00000000 	.word	0x00000000
 800aa0c:	0800a76b 	.word	0x0800a76b

0800aa10 <_printf_common>:
 800aa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa14:	4691      	mov	r9, r2
 800aa16:	461f      	mov	r7, r3
 800aa18:	688a      	ldr	r2, [r1, #8]
 800aa1a:	690b      	ldr	r3, [r1, #16]
 800aa1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	bfb8      	it	lt
 800aa24:	4613      	movlt	r3, r2
 800aa26:	f8c9 3000 	str.w	r3, [r9]
 800aa2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa2e:	4606      	mov	r6, r0
 800aa30:	460c      	mov	r4, r1
 800aa32:	b112      	cbz	r2, 800aa3a <_printf_common+0x2a>
 800aa34:	3301      	adds	r3, #1
 800aa36:	f8c9 3000 	str.w	r3, [r9]
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	0699      	lsls	r1, r3, #26
 800aa3e:	bf42      	ittt	mi
 800aa40:	f8d9 3000 	ldrmi.w	r3, [r9]
 800aa44:	3302      	addmi	r3, #2
 800aa46:	f8c9 3000 	strmi.w	r3, [r9]
 800aa4a:	6825      	ldr	r5, [r4, #0]
 800aa4c:	f015 0506 	ands.w	r5, r5, #6
 800aa50:	d107      	bne.n	800aa62 <_printf_common+0x52>
 800aa52:	f104 0a19 	add.w	sl, r4, #25
 800aa56:	68e3      	ldr	r3, [r4, #12]
 800aa58:	f8d9 2000 	ldr.w	r2, [r9]
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	42ab      	cmp	r3, r5
 800aa60:	dc28      	bgt.n	800aab4 <_printf_common+0xa4>
 800aa62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aa66:	6822      	ldr	r2, [r4, #0]
 800aa68:	3300      	adds	r3, #0
 800aa6a:	bf18      	it	ne
 800aa6c:	2301      	movne	r3, #1
 800aa6e:	0692      	lsls	r2, r2, #26
 800aa70:	d42d      	bmi.n	800aace <_printf_common+0xbe>
 800aa72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa76:	4639      	mov	r1, r7
 800aa78:	4630      	mov	r0, r6
 800aa7a:	47c0      	blx	r8
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d020      	beq.n	800aac2 <_printf_common+0xb2>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	68e5      	ldr	r5, [r4, #12]
 800aa84:	f8d9 2000 	ldr.w	r2, [r9]
 800aa88:	f003 0306 	and.w	r3, r3, #6
 800aa8c:	2b04      	cmp	r3, #4
 800aa8e:	bf08      	it	eq
 800aa90:	1aad      	subeq	r5, r5, r2
 800aa92:	68a3      	ldr	r3, [r4, #8]
 800aa94:	6922      	ldr	r2, [r4, #16]
 800aa96:	bf0c      	ite	eq
 800aa98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa9c:	2500      	movne	r5, #0
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	bfc4      	itt	gt
 800aaa2:	1a9b      	subgt	r3, r3, r2
 800aaa4:	18ed      	addgt	r5, r5, r3
 800aaa6:	f04f 0900 	mov.w	r9, #0
 800aaaa:	341a      	adds	r4, #26
 800aaac:	454d      	cmp	r5, r9
 800aaae:	d11a      	bne.n	800aae6 <_printf_common+0xd6>
 800aab0:	2000      	movs	r0, #0
 800aab2:	e008      	b.n	800aac6 <_printf_common+0xb6>
 800aab4:	2301      	movs	r3, #1
 800aab6:	4652      	mov	r2, sl
 800aab8:	4639      	mov	r1, r7
 800aaba:	4630      	mov	r0, r6
 800aabc:	47c0      	blx	r8
 800aabe:	3001      	adds	r0, #1
 800aac0:	d103      	bne.n	800aaca <_printf_common+0xba>
 800aac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaca:	3501      	adds	r5, #1
 800aacc:	e7c3      	b.n	800aa56 <_printf_common+0x46>
 800aace:	18e1      	adds	r1, r4, r3
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	2030      	movs	r0, #48	; 0x30
 800aad4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aad8:	4422      	add	r2, r4
 800aada:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aade:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aae2:	3302      	adds	r3, #2
 800aae4:	e7c5      	b.n	800aa72 <_printf_common+0x62>
 800aae6:	2301      	movs	r3, #1
 800aae8:	4622      	mov	r2, r4
 800aaea:	4639      	mov	r1, r7
 800aaec:	4630      	mov	r0, r6
 800aaee:	47c0      	blx	r8
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d0e6      	beq.n	800aac2 <_printf_common+0xb2>
 800aaf4:	f109 0901 	add.w	r9, r9, #1
 800aaf8:	e7d8      	b.n	800aaac <_printf_common+0x9c>
	...

0800aafc <_printf_i>:
 800aafc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ab04:	460c      	mov	r4, r1
 800ab06:	7e09      	ldrb	r1, [r1, #24]
 800ab08:	b085      	sub	sp, #20
 800ab0a:	296e      	cmp	r1, #110	; 0x6e
 800ab0c:	4617      	mov	r7, r2
 800ab0e:	4606      	mov	r6, r0
 800ab10:	4698      	mov	r8, r3
 800ab12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab14:	f000 80b3 	beq.w	800ac7e <_printf_i+0x182>
 800ab18:	d822      	bhi.n	800ab60 <_printf_i+0x64>
 800ab1a:	2963      	cmp	r1, #99	; 0x63
 800ab1c:	d036      	beq.n	800ab8c <_printf_i+0x90>
 800ab1e:	d80a      	bhi.n	800ab36 <_printf_i+0x3a>
 800ab20:	2900      	cmp	r1, #0
 800ab22:	f000 80b9 	beq.w	800ac98 <_printf_i+0x19c>
 800ab26:	2958      	cmp	r1, #88	; 0x58
 800ab28:	f000 8083 	beq.w	800ac32 <_printf_i+0x136>
 800ab2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ab34:	e032      	b.n	800ab9c <_printf_i+0xa0>
 800ab36:	2964      	cmp	r1, #100	; 0x64
 800ab38:	d001      	beq.n	800ab3e <_printf_i+0x42>
 800ab3a:	2969      	cmp	r1, #105	; 0x69
 800ab3c:	d1f6      	bne.n	800ab2c <_printf_i+0x30>
 800ab3e:	6820      	ldr	r0, [r4, #0]
 800ab40:	6813      	ldr	r3, [r2, #0]
 800ab42:	0605      	lsls	r5, r0, #24
 800ab44:	f103 0104 	add.w	r1, r3, #4
 800ab48:	d52a      	bpl.n	800aba0 <_printf_i+0xa4>
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6011      	str	r1, [r2, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da03      	bge.n	800ab5a <_printf_i+0x5e>
 800ab52:	222d      	movs	r2, #45	; 0x2d
 800ab54:	425b      	negs	r3, r3
 800ab56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ab5a:	486f      	ldr	r0, [pc, #444]	; (800ad18 <_printf_i+0x21c>)
 800ab5c:	220a      	movs	r2, #10
 800ab5e:	e039      	b.n	800abd4 <_printf_i+0xd8>
 800ab60:	2973      	cmp	r1, #115	; 0x73
 800ab62:	f000 809d 	beq.w	800aca0 <_printf_i+0x1a4>
 800ab66:	d808      	bhi.n	800ab7a <_printf_i+0x7e>
 800ab68:	296f      	cmp	r1, #111	; 0x6f
 800ab6a:	d020      	beq.n	800abae <_printf_i+0xb2>
 800ab6c:	2970      	cmp	r1, #112	; 0x70
 800ab6e:	d1dd      	bne.n	800ab2c <_printf_i+0x30>
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	f043 0320 	orr.w	r3, r3, #32
 800ab76:	6023      	str	r3, [r4, #0]
 800ab78:	e003      	b.n	800ab82 <_printf_i+0x86>
 800ab7a:	2975      	cmp	r1, #117	; 0x75
 800ab7c:	d017      	beq.n	800abae <_printf_i+0xb2>
 800ab7e:	2978      	cmp	r1, #120	; 0x78
 800ab80:	d1d4      	bne.n	800ab2c <_printf_i+0x30>
 800ab82:	2378      	movs	r3, #120	; 0x78
 800ab84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab88:	4864      	ldr	r0, [pc, #400]	; (800ad1c <_printf_i+0x220>)
 800ab8a:	e055      	b.n	800ac38 <_printf_i+0x13c>
 800ab8c:	6813      	ldr	r3, [r2, #0]
 800ab8e:	1d19      	adds	r1, r3, #4
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6011      	str	r1, [r2, #0]
 800ab94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e08c      	b.n	800acba <_printf_i+0x1be>
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6011      	str	r1, [r2, #0]
 800aba4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aba8:	bf18      	it	ne
 800abaa:	b21b      	sxthne	r3, r3
 800abac:	e7cf      	b.n	800ab4e <_printf_i+0x52>
 800abae:	6813      	ldr	r3, [r2, #0]
 800abb0:	6825      	ldr	r5, [r4, #0]
 800abb2:	1d18      	adds	r0, r3, #4
 800abb4:	6010      	str	r0, [r2, #0]
 800abb6:	0628      	lsls	r0, r5, #24
 800abb8:	d501      	bpl.n	800abbe <_printf_i+0xc2>
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	e002      	b.n	800abc4 <_printf_i+0xc8>
 800abbe:	0668      	lsls	r0, r5, #25
 800abc0:	d5fb      	bpl.n	800abba <_printf_i+0xbe>
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	4854      	ldr	r0, [pc, #336]	; (800ad18 <_printf_i+0x21c>)
 800abc6:	296f      	cmp	r1, #111	; 0x6f
 800abc8:	bf14      	ite	ne
 800abca:	220a      	movne	r2, #10
 800abcc:	2208      	moveq	r2, #8
 800abce:	2100      	movs	r1, #0
 800abd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abd4:	6865      	ldr	r5, [r4, #4]
 800abd6:	60a5      	str	r5, [r4, #8]
 800abd8:	2d00      	cmp	r5, #0
 800abda:	f2c0 8095 	blt.w	800ad08 <_printf_i+0x20c>
 800abde:	6821      	ldr	r1, [r4, #0]
 800abe0:	f021 0104 	bic.w	r1, r1, #4
 800abe4:	6021      	str	r1, [r4, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d13d      	bne.n	800ac66 <_printf_i+0x16a>
 800abea:	2d00      	cmp	r5, #0
 800abec:	f040 808e 	bne.w	800ad0c <_printf_i+0x210>
 800abf0:	4665      	mov	r5, ip
 800abf2:	2a08      	cmp	r2, #8
 800abf4:	d10b      	bne.n	800ac0e <_printf_i+0x112>
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	07db      	lsls	r3, r3, #31
 800abfa:	d508      	bpl.n	800ac0e <_printf_i+0x112>
 800abfc:	6923      	ldr	r3, [r4, #16]
 800abfe:	6862      	ldr	r2, [r4, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	bfde      	ittt	le
 800ac04:	2330      	movle	r3, #48	; 0x30
 800ac06:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac0e:	ebac 0305 	sub.w	r3, ip, r5
 800ac12:	6123      	str	r3, [r4, #16]
 800ac14:	f8cd 8000 	str.w	r8, [sp]
 800ac18:	463b      	mov	r3, r7
 800ac1a:	aa03      	add	r2, sp, #12
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	4630      	mov	r0, r6
 800ac20:	f7ff fef6 	bl	800aa10 <_printf_common>
 800ac24:	3001      	adds	r0, #1
 800ac26:	d14d      	bne.n	800acc4 <_printf_i+0x1c8>
 800ac28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac2c:	b005      	add	sp, #20
 800ac2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac32:	4839      	ldr	r0, [pc, #228]	; (800ad18 <_printf_i+0x21c>)
 800ac34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ac38:	6813      	ldr	r3, [r2, #0]
 800ac3a:	6821      	ldr	r1, [r4, #0]
 800ac3c:	1d1d      	adds	r5, r3, #4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6015      	str	r5, [r2, #0]
 800ac42:	060a      	lsls	r2, r1, #24
 800ac44:	d50b      	bpl.n	800ac5e <_printf_i+0x162>
 800ac46:	07ca      	lsls	r2, r1, #31
 800ac48:	bf44      	itt	mi
 800ac4a:	f041 0120 	orrmi.w	r1, r1, #32
 800ac4e:	6021      	strmi	r1, [r4, #0]
 800ac50:	b91b      	cbnz	r3, 800ac5a <_printf_i+0x15e>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	f022 0220 	bic.w	r2, r2, #32
 800ac58:	6022      	str	r2, [r4, #0]
 800ac5a:	2210      	movs	r2, #16
 800ac5c:	e7b7      	b.n	800abce <_printf_i+0xd2>
 800ac5e:	064d      	lsls	r5, r1, #25
 800ac60:	bf48      	it	mi
 800ac62:	b29b      	uxthmi	r3, r3
 800ac64:	e7ef      	b.n	800ac46 <_printf_i+0x14a>
 800ac66:	4665      	mov	r5, ip
 800ac68:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac6c:	fb02 3311 	mls	r3, r2, r1, r3
 800ac70:	5cc3      	ldrb	r3, [r0, r3]
 800ac72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ac76:	460b      	mov	r3, r1
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	d1f5      	bne.n	800ac68 <_printf_i+0x16c>
 800ac7c:	e7b9      	b.n	800abf2 <_printf_i+0xf6>
 800ac7e:	6813      	ldr	r3, [r2, #0]
 800ac80:	6825      	ldr	r5, [r4, #0]
 800ac82:	6961      	ldr	r1, [r4, #20]
 800ac84:	1d18      	adds	r0, r3, #4
 800ac86:	6010      	str	r0, [r2, #0]
 800ac88:	0628      	lsls	r0, r5, #24
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	d501      	bpl.n	800ac92 <_printf_i+0x196>
 800ac8e:	6019      	str	r1, [r3, #0]
 800ac90:	e002      	b.n	800ac98 <_printf_i+0x19c>
 800ac92:	066a      	lsls	r2, r5, #25
 800ac94:	d5fb      	bpl.n	800ac8e <_printf_i+0x192>
 800ac96:	8019      	strh	r1, [r3, #0]
 800ac98:	2300      	movs	r3, #0
 800ac9a:	6123      	str	r3, [r4, #16]
 800ac9c:	4665      	mov	r5, ip
 800ac9e:	e7b9      	b.n	800ac14 <_printf_i+0x118>
 800aca0:	6813      	ldr	r3, [r2, #0]
 800aca2:	1d19      	adds	r1, r3, #4
 800aca4:	6011      	str	r1, [r2, #0]
 800aca6:	681d      	ldr	r5, [r3, #0]
 800aca8:	6862      	ldr	r2, [r4, #4]
 800acaa:	2100      	movs	r1, #0
 800acac:	4628      	mov	r0, r5
 800acae:	f7f5 fa97 	bl	80001e0 <memchr>
 800acb2:	b108      	cbz	r0, 800acb8 <_printf_i+0x1bc>
 800acb4:	1b40      	subs	r0, r0, r5
 800acb6:	6060      	str	r0, [r4, #4]
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	6123      	str	r3, [r4, #16]
 800acbc:	2300      	movs	r3, #0
 800acbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc2:	e7a7      	b.n	800ac14 <_printf_i+0x118>
 800acc4:	6923      	ldr	r3, [r4, #16]
 800acc6:	462a      	mov	r2, r5
 800acc8:	4639      	mov	r1, r7
 800acca:	4630      	mov	r0, r6
 800accc:	47c0      	blx	r8
 800acce:	3001      	adds	r0, #1
 800acd0:	d0aa      	beq.n	800ac28 <_printf_i+0x12c>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	079b      	lsls	r3, r3, #30
 800acd6:	d413      	bmi.n	800ad00 <_printf_i+0x204>
 800acd8:	68e0      	ldr	r0, [r4, #12]
 800acda:	9b03      	ldr	r3, [sp, #12]
 800acdc:	4298      	cmp	r0, r3
 800acde:	bfb8      	it	lt
 800ace0:	4618      	movlt	r0, r3
 800ace2:	e7a3      	b.n	800ac2c <_printf_i+0x130>
 800ace4:	2301      	movs	r3, #1
 800ace6:	464a      	mov	r2, r9
 800ace8:	4639      	mov	r1, r7
 800acea:	4630      	mov	r0, r6
 800acec:	47c0      	blx	r8
 800acee:	3001      	adds	r0, #1
 800acf0:	d09a      	beq.n	800ac28 <_printf_i+0x12c>
 800acf2:	3501      	adds	r5, #1
 800acf4:	68e3      	ldr	r3, [r4, #12]
 800acf6:	9a03      	ldr	r2, [sp, #12]
 800acf8:	1a9b      	subs	r3, r3, r2
 800acfa:	42ab      	cmp	r3, r5
 800acfc:	dcf2      	bgt.n	800ace4 <_printf_i+0x1e8>
 800acfe:	e7eb      	b.n	800acd8 <_printf_i+0x1dc>
 800ad00:	2500      	movs	r5, #0
 800ad02:	f104 0919 	add.w	r9, r4, #25
 800ad06:	e7f5      	b.n	800acf4 <_printf_i+0x1f8>
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1ac      	bne.n	800ac66 <_printf_i+0x16a>
 800ad0c:	7803      	ldrb	r3, [r0, #0]
 800ad0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad16:	e76c      	b.n	800abf2 <_printf_i+0xf6>
 800ad18:	0800b19f 	.word	0x0800b19f
 800ad1c:	0800b1b0 	.word	0x0800b1b0

0800ad20 <__ascii_wctomb>:
 800ad20:	b149      	cbz	r1, 800ad36 <__ascii_wctomb+0x16>
 800ad22:	2aff      	cmp	r2, #255	; 0xff
 800ad24:	bf85      	ittet	hi
 800ad26:	238a      	movhi	r3, #138	; 0x8a
 800ad28:	6003      	strhi	r3, [r0, #0]
 800ad2a:	700a      	strbls	r2, [r1, #0]
 800ad2c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ad30:	bf98      	it	ls
 800ad32:	2001      	movls	r0, #1
 800ad34:	4770      	bx	lr
 800ad36:	4608      	mov	r0, r1
 800ad38:	4770      	bx	lr

0800ad3a <memcpy>:
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	1e43      	subs	r3, r0, #1
 800ad3e:	440a      	add	r2, r1
 800ad40:	4291      	cmp	r1, r2
 800ad42:	d100      	bne.n	800ad46 <memcpy+0xc>
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad4e:	e7f7      	b.n	800ad40 <memcpy+0x6>

0800ad50 <memmove>:
 800ad50:	4288      	cmp	r0, r1
 800ad52:	b510      	push	{r4, lr}
 800ad54:	eb01 0302 	add.w	r3, r1, r2
 800ad58:	d807      	bhi.n	800ad6a <memmove+0x1a>
 800ad5a:	1e42      	subs	r2, r0, #1
 800ad5c:	4299      	cmp	r1, r3
 800ad5e:	d00a      	beq.n	800ad76 <memmove+0x26>
 800ad60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad64:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ad68:	e7f8      	b.n	800ad5c <memmove+0xc>
 800ad6a:	4283      	cmp	r3, r0
 800ad6c:	d9f5      	bls.n	800ad5a <memmove+0xa>
 800ad6e:	1881      	adds	r1, r0, r2
 800ad70:	1ad2      	subs	r2, r2, r3
 800ad72:	42d3      	cmn	r3, r2
 800ad74:	d100      	bne.n	800ad78 <memmove+0x28>
 800ad76:	bd10      	pop	{r4, pc}
 800ad78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ad80:	e7f7      	b.n	800ad72 <memmove+0x22>
	...

0800ad84 <_free_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	4605      	mov	r5, r0
 800ad88:	2900      	cmp	r1, #0
 800ad8a:	d045      	beq.n	800ae18 <_free_r+0x94>
 800ad8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad90:	1f0c      	subs	r4, r1, #4
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	bfb8      	it	lt
 800ad96:	18e4      	addlt	r4, r4, r3
 800ad98:	f000 f8d2 	bl	800af40 <__malloc_lock>
 800ad9c:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <_free_r+0x98>)
 800ad9e:	6813      	ldr	r3, [r2, #0]
 800ada0:	4610      	mov	r0, r2
 800ada2:	b933      	cbnz	r3, 800adb2 <_free_r+0x2e>
 800ada4:	6063      	str	r3, [r4, #4]
 800ada6:	6014      	str	r4, [r2, #0]
 800ada8:	4628      	mov	r0, r5
 800adaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adae:	f000 b8c8 	b.w	800af42 <__malloc_unlock>
 800adb2:	42a3      	cmp	r3, r4
 800adb4:	d90c      	bls.n	800add0 <_free_r+0x4c>
 800adb6:	6821      	ldr	r1, [r4, #0]
 800adb8:	1862      	adds	r2, r4, r1
 800adba:	4293      	cmp	r3, r2
 800adbc:	bf04      	itt	eq
 800adbe:	681a      	ldreq	r2, [r3, #0]
 800adc0:	685b      	ldreq	r3, [r3, #4]
 800adc2:	6063      	str	r3, [r4, #4]
 800adc4:	bf04      	itt	eq
 800adc6:	1852      	addeq	r2, r2, r1
 800adc8:	6022      	streq	r2, [r4, #0]
 800adca:	6004      	str	r4, [r0, #0]
 800adcc:	e7ec      	b.n	800ada8 <_free_r+0x24>
 800adce:	4613      	mov	r3, r2
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	b10a      	cbz	r2, 800add8 <_free_r+0x54>
 800add4:	42a2      	cmp	r2, r4
 800add6:	d9fa      	bls.n	800adce <_free_r+0x4a>
 800add8:	6819      	ldr	r1, [r3, #0]
 800adda:	1858      	adds	r0, r3, r1
 800addc:	42a0      	cmp	r0, r4
 800adde:	d10b      	bne.n	800adf8 <_free_r+0x74>
 800ade0:	6820      	ldr	r0, [r4, #0]
 800ade2:	4401      	add	r1, r0
 800ade4:	1858      	adds	r0, r3, r1
 800ade6:	4282      	cmp	r2, r0
 800ade8:	6019      	str	r1, [r3, #0]
 800adea:	d1dd      	bne.n	800ada8 <_free_r+0x24>
 800adec:	6810      	ldr	r0, [r2, #0]
 800adee:	6852      	ldr	r2, [r2, #4]
 800adf0:	605a      	str	r2, [r3, #4]
 800adf2:	4401      	add	r1, r0
 800adf4:	6019      	str	r1, [r3, #0]
 800adf6:	e7d7      	b.n	800ada8 <_free_r+0x24>
 800adf8:	d902      	bls.n	800ae00 <_free_r+0x7c>
 800adfa:	230c      	movs	r3, #12
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	e7d3      	b.n	800ada8 <_free_r+0x24>
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	1821      	adds	r1, r4, r0
 800ae04:	428a      	cmp	r2, r1
 800ae06:	bf04      	itt	eq
 800ae08:	6811      	ldreq	r1, [r2, #0]
 800ae0a:	6852      	ldreq	r2, [r2, #4]
 800ae0c:	6062      	str	r2, [r4, #4]
 800ae0e:	bf04      	itt	eq
 800ae10:	1809      	addeq	r1, r1, r0
 800ae12:	6021      	streq	r1, [r4, #0]
 800ae14:	605c      	str	r4, [r3, #4]
 800ae16:	e7c7      	b.n	800ada8 <_free_r+0x24>
 800ae18:	bd38      	pop	{r3, r4, r5, pc}
 800ae1a:	bf00      	nop
 800ae1c:	20000280 	.word	0x20000280

0800ae20 <_malloc_r>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	1ccd      	adds	r5, r1, #3
 800ae24:	f025 0503 	bic.w	r5, r5, #3
 800ae28:	3508      	adds	r5, #8
 800ae2a:	2d0c      	cmp	r5, #12
 800ae2c:	bf38      	it	cc
 800ae2e:	250c      	movcc	r5, #12
 800ae30:	2d00      	cmp	r5, #0
 800ae32:	4606      	mov	r6, r0
 800ae34:	db01      	blt.n	800ae3a <_malloc_r+0x1a>
 800ae36:	42a9      	cmp	r1, r5
 800ae38:	d903      	bls.n	800ae42 <_malloc_r+0x22>
 800ae3a:	230c      	movs	r3, #12
 800ae3c:	6033      	str	r3, [r6, #0]
 800ae3e:	2000      	movs	r0, #0
 800ae40:	bd70      	pop	{r4, r5, r6, pc}
 800ae42:	f000 f87d 	bl	800af40 <__malloc_lock>
 800ae46:	4a21      	ldr	r2, [pc, #132]	; (800aecc <_malloc_r+0xac>)
 800ae48:	6814      	ldr	r4, [r2, #0]
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	b991      	cbnz	r1, 800ae74 <_malloc_r+0x54>
 800ae4e:	4c20      	ldr	r4, [pc, #128]	; (800aed0 <_malloc_r+0xb0>)
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	b91b      	cbnz	r3, 800ae5c <_malloc_r+0x3c>
 800ae54:	4630      	mov	r0, r6
 800ae56:	f000 f863 	bl	800af20 <_sbrk_r>
 800ae5a:	6020      	str	r0, [r4, #0]
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f000 f85e 	bl	800af20 <_sbrk_r>
 800ae64:	1c43      	adds	r3, r0, #1
 800ae66:	d124      	bne.n	800aeb2 <_malloc_r+0x92>
 800ae68:	230c      	movs	r3, #12
 800ae6a:	6033      	str	r3, [r6, #0]
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f000 f868 	bl	800af42 <__malloc_unlock>
 800ae72:	e7e4      	b.n	800ae3e <_malloc_r+0x1e>
 800ae74:	680b      	ldr	r3, [r1, #0]
 800ae76:	1b5b      	subs	r3, r3, r5
 800ae78:	d418      	bmi.n	800aeac <_malloc_r+0x8c>
 800ae7a:	2b0b      	cmp	r3, #11
 800ae7c:	d90f      	bls.n	800ae9e <_malloc_r+0x7e>
 800ae7e:	600b      	str	r3, [r1, #0]
 800ae80:	50cd      	str	r5, [r1, r3]
 800ae82:	18cc      	adds	r4, r1, r3
 800ae84:	4630      	mov	r0, r6
 800ae86:	f000 f85c 	bl	800af42 <__malloc_unlock>
 800ae8a:	f104 000b 	add.w	r0, r4, #11
 800ae8e:	1d23      	adds	r3, r4, #4
 800ae90:	f020 0007 	bic.w	r0, r0, #7
 800ae94:	1ac3      	subs	r3, r0, r3
 800ae96:	d0d3      	beq.n	800ae40 <_malloc_r+0x20>
 800ae98:	425a      	negs	r2, r3
 800ae9a:	50e2      	str	r2, [r4, r3]
 800ae9c:	e7d0      	b.n	800ae40 <_malloc_r+0x20>
 800ae9e:	428c      	cmp	r4, r1
 800aea0:	684b      	ldr	r3, [r1, #4]
 800aea2:	bf16      	itet	ne
 800aea4:	6063      	strne	r3, [r4, #4]
 800aea6:	6013      	streq	r3, [r2, #0]
 800aea8:	460c      	movne	r4, r1
 800aeaa:	e7eb      	b.n	800ae84 <_malloc_r+0x64>
 800aeac:	460c      	mov	r4, r1
 800aeae:	6849      	ldr	r1, [r1, #4]
 800aeb0:	e7cc      	b.n	800ae4c <_malloc_r+0x2c>
 800aeb2:	1cc4      	adds	r4, r0, #3
 800aeb4:	f024 0403 	bic.w	r4, r4, #3
 800aeb8:	42a0      	cmp	r0, r4
 800aeba:	d005      	beq.n	800aec8 <_malloc_r+0xa8>
 800aebc:	1a21      	subs	r1, r4, r0
 800aebe:	4630      	mov	r0, r6
 800aec0:	f000 f82e 	bl	800af20 <_sbrk_r>
 800aec4:	3001      	adds	r0, #1
 800aec6:	d0cf      	beq.n	800ae68 <_malloc_r+0x48>
 800aec8:	6025      	str	r5, [r4, #0]
 800aeca:	e7db      	b.n	800ae84 <_malloc_r+0x64>
 800aecc:	20000280 	.word	0x20000280
 800aed0:	20000284 	.word	0x20000284

0800aed4 <_realloc_r>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	4607      	mov	r7, r0
 800aed8:	4614      	mov	r4, r2
 800aeda:	460e      	mov	r6, r1
 800aedc:	b921      	cbnz	r1, 800aee8 <_realloc_r+0x14>
 800aede:	4611      	mov	r1, r2
 800aee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aee4:	f7ff bf9c 	b.w	800ae20 <_malloc_r>
 800aee8:	b922      	cbnz	r2, 800aef4 <_realloc_r+0x20>
 800aeea:	f7ff ff4b 	bl	800ad84 <_free_r>
 800aeee:	4625      	mov	r5, r4
 800aef0:	4628      	mov	r0, r5
 800aef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef4:	f000 f826 	bl	800af44 <_malloc_usable_size_r>
 800aef8:	42a0      	cmp	r0, r4
 800aefa:	d20f      	bcs.n	800af1c <_realloc_r+0x48>
 800aefc:	4621      	mov	r1, r4
 800aefe:	4638      	mov	r0, r7
 800af00:	f7ff ff8e 	bl	800ae20 <_malloc_r>
 800af04:	4605      	mov	r5, r0
 800af06:	2800      	cmp	r0, #0
 800af08:	d0f2      	beq.n	800aef0 <_realloc_r+0x1c>
 800af0a:	4631      	mov	r1, r6
 800af0c:	4622      	mov	r2, r4
 800af0e:	f7ff ff14 	bl	800ad3a <memcpy>
 800af12:	4631      	mov	r1, r6
 800af14:	4638      	mov	r0, r7
 800af16:	f7ff ff35 	bl	800ad84 <_free_r>
 800af1a:	e7e9      	b.n	800aef0 <_realloc_r+0x1c>
 800af1c:	4635      	mov	r5, r6
 800af1e:	e7e7      	b.n	800aef0 <_realloc_r+0x1c>

0800af20 <_sbrk_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4c06      	ldr	r4, [pc, #24]	; (800af3c <_sbrk_r+0x1c>)
 800af24:	2300      	movs	r3, #0
 800af26:	4605      	mov	r5, r0
 800af28:	4608      	mov	r0, r1
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	f7ff fa2a 	bl	800a384 <_sbrk>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_sbrk_r+0x1a>
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	b103      	cbz	r3, 800af3a <_sbrk_r+0x1a>
 800af38:	602b      	str	r3, [r5, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	20001634 	.word	0x20001634

0800af40 <__malloc_lock>:
 800af40:	4770      	bx	lr

0800af42 <__malloc_unlock>:
 800af42:	4770      	bx	lr

0800af44 <_malloc_usable_size_r>:
 800af44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af48:	1f18      	subs	r0, r3, #4
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	bfbc      	itt	lt
 800af4e:	580b      	ldrlt	r3, [r1, r0]
 800af50:	18c0      	addlt	r0, r0, r3
 800af52:	4770      	bx	lr

0800af54 <_init>:
 800af54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af56:	bf00      	nop
 800af58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5a:	bc08      	pop	{r3}
 800af5c:	469e      	mov	lr, r3
 800af5e:	4770      	bx	lr

0800af60 <_fini>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	bf00      	nop
 800af64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af66:	bc08      	pop	{r3}
 800af68:	469e      	mov	lr, r3
 800af6a:	4770      	bx	lr
