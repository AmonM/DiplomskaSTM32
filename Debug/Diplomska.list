
Diplomska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d058  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800d1e8  0800d1e8  0001d1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d698  0800d698  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d698  0800d698  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d698  0800d698  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d698  0800d698  0001d698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d69c  0800d69c  0001d69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d6a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001440  200001f8  0800d898  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  0800d898  00021638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae84  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039c3  00000000  00000000  0003b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001748  00000000  00000000  0003ea70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001570  00000000  00000000  000401b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bfbc  00000000  00000000  00041728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014a42  00000000  00000000  0005d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c4ca  00000000  00000000  00072126  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e5f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be8  00000000  00000000  0010e66c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1d0 	.word	0x0800d1d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800d1d0 	.word	0x0800d1d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f001 f89a 	bl	8001cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f00a f824 	bl	800ac0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f009 fe9c 	bl	800a900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000004 	.word	0x20000004
 8000bf8:	20000288 	.word	0x20000288

08000bfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000288 	.word	0x20000288

08000c14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_Delay+0x40>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09a      	sub	sp, #104	; 0x68
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e172      	b.n	8000f9a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d176      	bne.n	8000db4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d152      	bne.n	8000d74 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f009 fe31 	bl	800a950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d13b      	bne.n	8000d74 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 feeb 	bl	8001ad8 <ADC_Disable>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d12f      	bne.n	8000d74 <HAL_ADC_Init+0xe0>
 8000d14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d12b      	bne.n	8000d74 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d24:	f023 0302 	bic.w	r3, r3, #2
 8000d28:	f043 0202 	orr.w	r2, r3, #2
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d3e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d4e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d50:	4b94      	ldr	r3, [pc, #592]	; (8000fa4 <HAL_ADC_Init+0x310>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a94      	ldr	r2, [pc, #592]	; (8000fa8 <HAL_ADC_Init+0x314>)
 8000d56:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5a:	0c9a      	lsrs	r2, r3, #18
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d66:	e002      	b.n	8000d6e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f9      	bne.n	8000d68 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d90:	d110      	bne.n	8000db4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f023 0312 	bic.w	r3, r3, #18
 8000d9a:	f043 0210 	orr.w	r2, r3, #16
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f043 0201 	orr.w	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 80df 	bne.w	8000f80 <HAL_ADC_Init+0x2ec>
 8000dc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 80da 	bne.w	8000f80 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 80d2 	bne.w	8000f80 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000de4:	f043 0202 	orr.w	r2, r3, #2
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dec:	4b6f      	ldr	r3, [pc, #444]	; (8000fac <HAL_ADC_Init+0x318>)
 8000dee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df8:	d102      	bne.n	8000e00 <HAL_ADC_Init+0x16c>
 8000dfa:	4b6d      	ldr	r3, [pc, #436]	; (8000fb0 <HAL_ADC_Init+0x31c>)
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	e002      	b.n	8000e06 <HAL_ADC_Init+0x172>
 8000e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000e04:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d108      	bne.n	8000e26 <HAL_ADC_Init+0x192>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d101      	bne.n	8000e26 <HAL_ADC_Init+0x192>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <HAL_ADC_Init+0x194>
 8000e26:	2300      	movs	r3, #0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d11c      	bne.n	8000e66 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d010      	beq.n	8000e54 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d107      	bne.n	8000e4e <HAL_ADC_Init+0x1ba>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d101      	bne.n	8000e4e <HAL_ADC_Init+0x1ba>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_ADC_Init+0x1bc>
 8000e4e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d108      	bne.n	8000e66 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e64:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7e5b      	ldrb	r3, [r3, #25]
 8000e6a:	035b      	lsls	r3, r3, #13
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e70:	2a01      	cmp	r2, #1
 8000e72:	d002      	beq.n	8000e7a <HAL_ADC_Init+0x1e6>
 8000e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e78:	e000      	b.n	8000e7c <HAL_ADC_Init+0x1e8>
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d11b      	bne.n	8000ed2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7e5b      	ldrb	r3, [r3, #25]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d109      	bne.n	8000eb6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	045a      	lsls	r2, r3, #17
 8000eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000eac:	4313      	orrs	r3, r2
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8000eb4:	e00d      	b.n	8000ed2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ebe:	f043 0220 	orr.w	r2, r3, #32
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f043 0201 	orr.w	r2, r3, #1
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d007      	beq.n	8000eea <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d114      	bne.n	8000f22 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f06:	f023 0302 	bic.w	r3, r3, #2
 8000f0a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7e1b      	ldrb	r3, [r3, #24]
 8000f10:	039a      	lsls	r2, r3, #14
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <HAL_ADC_Init+0x320>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f32:	430b      	orrs	r3, r1
 8000f34:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10c      	bne.n	8000f58 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f023 010f 	bic.w	r1, r3, #15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	1e5a      	subs	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
 8000f56:	e007      	b.n	8000f68 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 020f 	bic.w	r2, r2, #15
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f023 0303 	bic.w	r3, r3, #3
 8000f76:	f043 0201 	orr.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7e:	e00a      	b.n	8000f96 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f023 0312 	bic.w	r3, r3, #18
 8000f88:	f043 0210 	orr.w	r2, r3, #16
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000f90:	2301      	movs	r3, #1
 8000f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000f96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3768      	adds	r7, #104	; 0x68
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000010 	.word	0x20000010
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	50000300 	.word	0x50000300
 8000fb0:	50000100 	.word	0x50000100
 8000fb4:	fff0c007 	.word	0xfff0c007

08000fb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 80b9 	bne.w	800114a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Start_DMA+0x2e>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e0b4      	b.n	8001150 <HAL_ADC_Start_DMA+0x198>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <HAL_ADC_Start_DMA+0x1a0>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 80a0 	bne.w	800113c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f000 fd0d 	bl	8001a1c <ADC_Enable>
 8001002:	4603      	mov	r3, r0
 8001004:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	2b00      	cmp	r3, #0
 800100a:	f040 8092 	bne.w	8001132 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001022:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <HAL_ADC_Start_DMA+0x1a0>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_ADC_Start_DMA+0x80>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001036:	d115      	bne.n	8001064 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d027      	beq.n	80010a2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800105a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001062:	e01e      	b.n	80010a2 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001078:	d004      	beq.n	8001084 <HAL_ADC_Start_DMA+0xcc>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a37      	ldr	r2, [pc, #220]	; (800115c <HAL_ADC_Start_DMA+0x1a4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d10e      	bne.n	80010a2 <HAL_ADC_Start_DMA+0xea>
 8001084:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800109a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010ae:	d106      	bne.n	80010be <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	f023 0206 	bic.w	r2, r3, #6
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
 80010bc:	e002      	b.n	80010c4 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d0:	4a23      	ldr	r2, [pc, #140]	; (8001160 <HAL_ADC_Start_DMA+0x1a8>)
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d8:	4a22      	ldr	r2, [pc, #136]	; (8001164 <HAL_ADC_Start_DMA+0x1ac>)
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <HAL_ADC_Start_DMA+0x1b0>)
 80010e2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	221c      	movs	r2, #28
 80010ea:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0210 	orr.w	r2, r2, #16
 80010fa:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3340      	adds	r3, #64	; 0x40
 8001116:	4619      	mov	r1, r3
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f000 fe65 	bl	8001dea <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0204 	orr.w	r2, r2, #4
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	e00d      	b.n	800114e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800113a:	e008      	b.n	800114e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001148:	e001      	b.n	800114e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800114a:	2302      	movs	r3, #2
 800114c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800114e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	50000300 	.word	0x50000300
 800115c:	50000100 	.word	0x50000100
 8001160:	08001951 	.word	0x08001951
 8001164:	080019cb 	.word	0x080019cb
 8001168:	080019e7 	.word	0x080019e7

0800116c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <HAL_ADCEx_Calibration_Start+0x1c>
 8001184:	2302      	movs	r3, #2
 8001186:	e057      	b.n	8001238 <HAL_ADCEx_Calibration_Start+0xcc>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fca1 	bl	8001ad8 <ADC_Disable>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d146      	bne.n	800122e <HAL_ADCEx_Calibration_Start+0xc2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80011b4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d107      	bne.n	80011cc <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ca:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80011da:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80011dc:	f7ff fd0e 	bl	8000bfc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80011e2:	e014      	b.n	800120e <HAL_ADCEx_Calibration_Start+0xa2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80011e4:	f7ff fd0a 	bl	8000bfc <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d90d      	bls.n	800120e <HAL_ADCEx_Calibration_Start+0xa2>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f023 0312 	bic.w	r3, r3, #18
 80011fa:	f043 0210 	orr.w	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e014      	b.n	8001238 <HAL_ADCEx_Calibration_Start+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800121c:	d0e2      	beq.n	80011e4 <HAL_ADCEx_Calibration_Start+0x78>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001240:	b480      	push	{r7}
 8001242:	b09b      	sub	sp, #108	; 0x6c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x22>
 800125e:	2302      	movs	r3, #2
 8001260:	e2a5      	b.n	80017ae <HAL_ADC_ConfigChannel+0x56e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 8289 	bne.w	800178c <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d81c      	bhi.n	80012bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	461a      	mov	r2, r3
 8001296:	231f      	movs	r3, #31
 8001298:	4093      	lsls	r3, r2
 800129a:	43db      	mvns	r3, r3
 800129c:	4019      	ands	r1, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
 80012ba:	e063      	b.n	8001384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d81e      	bhi.n	8001302 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	3b1e      	subs	r3, #30
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	4019      	ands	r1, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3b1e      	subs	r3, #30
 80012f4:	fa00 f203 	lsl.w	r2, r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001300:	e040      	b.n	8001384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b0e      	cmp	r3, #14
 8001308:	d81e      	bhi.n	8001348 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	3b3c      	subs	r3, #60	; 0x3c
 800131e:	221f      	movs	r2, #31
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	4019      	ands	r1, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	3b3c      	subs	r3, #60	; 0x3c
 800133a:	fa00 f203 	lsl.w	r2, r0, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
 8001346:	e01d      	b.n	8001384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	3b5a      	subs	r3, #90	; 0x5a
 800135c:	221f      	movs	r2, #31
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	4019      	ands	r1, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	3b5a      	subs	r3, #90	; 0x5a
 8001378:	fa00 f203 	lsl.w	r2, r0, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 80e5 	bne.w	800155e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d91c      	bls.n	80013d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6999      	ldr	r1, [r3, #24]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	3b1e      	subs	r3, #30
 80013ae:	2207      	movs	r2, #7
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4019      	ands	r1, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6898      	ldr	r0, [r3, #8]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	3b1e      	subs	r3, #30
 80013c8:	fa00 f203 	lsl.w	r2, r0, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	619a      	str	r2, [r3, #24]
 80013d4:	e019      	b.n	800140a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6959      	ldr	r1, [r3, #20]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	2207      	movs	r2, #7
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4019      	ands	r1, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6898      	ldr	r0, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	3b01      	subs	r3, #1
 8001428:	2b03      	cmp	r3, #3
 800142a:	d84f      	bhi.n	80014cc <HAL_ADC_ConfigChannel+0x28c>
 800142c:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <HAL_ADC_ConfigChannel+0x1f4>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001445 	.word	0x08001445
 8001438:	08001467 	.word	0x08001467
 800143c:	08001489 	.word	0x08001489
 8001440:	080014ab 	.word	0x080014ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800144a:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <HAL_ADC_ConfigChannel+0x484>)
 800144c:	4013      	ands	r3, r2
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	0691      	lsls	r1, r2, #26
 8001454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001456:	430a      	orrs	r2, r1
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001462:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001464:	e07e      	b.n	8001564 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800146c:	4b95      	ldr	r3, [pc, #596]	; (80016c4 <HAL_ADC_ConfigChannel+0x484>)
 800146e:	4013      	ands	r3, r2
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	0691      	lsls	r1, r2, #26
 8001476:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001478:	430a      	orrs	r2, r1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001484:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001486:	e06d      	b.n	8001564 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800148e:	4b8d      	ldr	r3, [pc, #564]	; (80016c4 <HAL_ADC_ConfigChannel+0x484>)
 8001490:	4013      	ands	r3, r2
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	0691      	lsls	r1, r2, #26
 8001498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800149a:	430a      	orrs	r2, r1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014a8:	e05c      	b.n	8001564 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014b0:	4b84      	ldr	r3, [pc, #528]	; (80016c4 <HAL_ADC_ConfigChannel+0x484>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	0691      	lsls	r1, r2, #26
 80014ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014bc:	430a      	orrs	r2, r1
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014ca:	e04b      	b.n	8001564 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	069b      	lsls	r3, r3, #26
 80014dc:	429a      	cmp	r2, r3
 80014de:	d107      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	069b      	lsls	r3, r3, #26
 8001500:	429a      	cmp	r2, r3
 8001502:	d107      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001512:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800151a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	069b      	lsls	r3, r3, #26
 8001524:	429a      	cmp	r2, r3
 8001526:	d107      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001536:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800153e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	069b      	lsls	r3, r3, #26
 8001548:	429a      	cmp	r2, r3
 800154a:	d10a      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800155a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800155c:	e001      	b.n	8001562 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800155e:	bf00      	nop
 8001560:	e000      	b.n	8001564 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001562:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x344>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x344>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_ADC_ConfigChannel+0x346>
 8001584:	2300      	movs	r3, #0
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 810b 	bne.w	80017a2 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d00f      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	400a      	ands	r2, r1
 80015ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80015b2:	e049      	b.n	8001648 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2201      	movs	r2, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b09      	cmp	r3, #9
 80015d4:	d91c      	bls.n	8001610 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6999      	ldr	r1, [r3, #24]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	3b1b      	subs	r3, #27
 80015e8:	2207      	movs	r2, #7
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	4019      	ands	r1, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6898      	ldr	r0, [r3, #8]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	3b1b      	subs	r3, #27
 8001602:	fa00 f203 	lsl.w	r2, r0, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	e01b      	b.n	8001648 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6959      	ldr	r1, [r3, #20]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	2207      	movs	r2, #7
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	4019      	ands	r1, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	6898      	ldr	r0, [r3, #8]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	fa00 f203 	lsl.w	r2, r0, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_ADC_ConfigChannel+0x488>)
 800164a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b10      	cmp	r3, #16
 8001652:	d105      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800165c:	2b00      	cmp	r3, #0
 800165e:	d015      	beq.n	800168c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001664:	2b11      	cmp	r3, #17
 8001666:	d105      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001678:	2b12      	cmp	r3, #18
 800167a:	f040 8092 	bne.w	80017a2 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800167e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 808b 	bne.w	80017a2 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001694:	d102      	bne.n	800169c <HAL_ADC_ConfigChannel+0x45c>
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_ADC_ConfigChannel+0x48c>)
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e002      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x462>
 800169c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016a0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10f      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x490>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x490>
 80016be:	2301      	movs	r3, #1
 80016c0:	e007      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x492>
 80016c2:	bf00      	nop
 80016c4:	83fff000 	.word	0x83fff000
 80016c8:	50000300 	.word	0x50000300
 80016cc:	50000100 	.word	0x50000100
 80016d0:	2300      	movs	r3, #0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d150      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d010      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d107      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x4b8>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x4b8>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_ADC_ConfigChannel+0x4ba>
 80016f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d13c      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b10      	cmp	r3, #16
 8001704:	d11d      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x502>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170e:	d118      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800171a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_ADC_ConfigChannel+0x57c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_ADC_ConfigChannel+0x580>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9a      	lsrs	r2, r3, #18
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001732:	e002      	b.n	800173a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3b01      	subs	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f9      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001740:	e02e      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b11      	cmp	r3, #17
 8001748:	d10b      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x522>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001752:	d106      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800175c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001760:	e01e      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b12      	cmp	r3, #18
 8001768:	d11a      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800176a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001774:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001776:	e013      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f043 0220 	orr.w	r2, r3, #32
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800178a:	e00a      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f043 0220 	orr.w	r2, r3, #32
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800179e:	e000      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	376c      	adds	r7, #108	; 0x6c
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000010 	.word	0x20000010
 80017c0:	431bde83 	.word	0x431bde83

080017c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b099      	sub	sp, #100	; 0x64
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017dc:	d102      	bne.n	80017e4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	e002      	b.n	80017ea <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80017e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0a2      	b.n	800193a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80017fe:	2302      	movs	r3, #2
 8001800:	e09b      	b.n	800193a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d17f      	bne.n	8001918 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d179      	bne.n	8001918 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001824:	4b49      	ldr	r3, [pc, #292]	; (800194c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001826:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d040      	beq.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001842:	035b      	lsls	r3, r3, #13
 8001844:	430b      	orrs	r3, r1
 8001846:	431a      	orrs	r2, r3
 8001848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800184a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800186c:	2300      	movs	r3, #0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d15c      	bne.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800188e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001890:	2b00      	cmp	r3, #0
 8001892:	d14b      	bne.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001894:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800189c:	f023 030f 	bic.w	r3, r3, #15
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	6811      	ldr	r1, [r2, #0]
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	6892      	ldr	r2, [r2, #8]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	431a      	orrs	r2, r3
 80018ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018b0:	e03c      	b.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80018b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018bc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d108      	bne.n	80018de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80018de:	2300      	movs	r3, #0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d123      	bne.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d107      	bne.n	8001900 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001900:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d112      	bne.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800190e:	f023 030f 	bic.w	r3, r3, #15
 8001912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001914:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001916:	e009      	b.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f043 0220 	orr.w	r2, r3, #32
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800192a:	e000      	b.n	800192e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800192c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800193a:	4618      	mov	r0, r3
 800193c:	3764      	adds	r7, #100	; 0x64
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	50000100 	.word	0x50000100
 800194c:	50000300 	.word	0x50000300

08001950 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001966:	2b00      	cmp	r3, #0
 8001968:	d126      	bne.n	80019b8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001980:	2b00      	cmp	r3, #0
 8001982:	d115      	bne.n	80019b0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001988:	2b00      	cmp	r3, #0
 800198a:	d111      	bne.n	80019b0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff f951 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019b6:	e004      	b.n	80019c2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff f947 	bl	8000c6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f043 0204 	orr.w	r2, r3, #4
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff f937 	bl	8000c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <ADC_Enable+0x2c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <ADC_Enable+0x2c>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <ADC_Enable+0x2e>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d13c      	bne.n	8001ac8 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <ADC_Enable+0xb8>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00d      	beq.n	8001a78 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f043 0210 	orr.w	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e028      	b.n	8001aca <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a88:	f7ff f8b8 	bl	8000bfc <HAL_GetTick>
 8001a8c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a8e:	e014      	b.n	8001aba <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a90:	f7ff f8b4 	bl	8000bfc <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d90d      	bls.n	8001aba <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f043 0210 	orr.w	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e007      	b.n	8001aca <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d1e3      	bne.n	8001a90 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	8000003f 	.word	0x8000003f

08001ad8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <ADC_Disable+0x2c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <ADC_Disable+0x2c>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <ADC_Disable+0x2e>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d040      	beq.n	8001b8c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 030d 	and.w	r3, r3, #13
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10f      	bne.n	8001b38 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0202 	orr.w	r2, r2, #2
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f864 	bl	8000bfc <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b36:	e022      	b.n	8001b7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f043 0210 	orr.w	r2, r3, #16
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	f043 0201 	orr.w	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e01c      	b.n	8001b8e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b54:	f7ff f852 	bl	8000bfc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d90d      	bls.n	8001b7e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f043 0210 	orr.w	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e007      	b.n	8001b8e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d0e3      	beq.n	8001b54 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ff4c 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1a:	f7ff ff61 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	6978      	ldr	r0, [r7, #20]
 8001d26:	f7ff ffb1 	bl	8001c8c <NVIC_EncodePriority>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff80 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d38:	bf00      	nop
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff54 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e037      	b.n	8001de2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d88:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f97f 	bl	80020c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}  
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_DMA_Start_IT+0x20>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e04a      	b.n	8001ea0 <HAL_DMA_Start_IT+0xb6>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d13a      	bne.n	8001e92 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f912 	bl	800206a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f042 020e 	orr.w	r2, r2, #14
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e00f      	b.n	8001e80 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 020a 	orr.w	r2, r2, #10
 8001e6e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e005      	b.n	8001e9e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d005      	beq.n	8001eca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e027      	b.n	8001f1a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 020e 	bic.w	r2, r2, #14
 8001ed8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
    } 
  }
  return status;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	2204      	movs	r2, #4
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d024      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x72>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01f      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0204 	bic.w	r2, r2, #4
 8001f72:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f82:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d06a      	beq.n	8002062 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001f94:	e065      	b.n	8002062 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d02c      	beq.n	8002000 <HAL_DMA_IRQHandler+0xdc>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d027      	beq.n	8002000 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 020a 	bic.w	r2, r2, #10
 8001fcc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	2102      	movs	r1, #2
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d035      	beq.n	8002062 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001ffe:	e030      	b.n	8002062 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d028      	beq.n	8002062 <HAL_DMA_IRQHandler+0x13e>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d023      	beq.n	8002062 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 020e 	bic.w	r2, r2, #14
 8002028:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
    }
  }
}  
 8002060:	e7ff      	b.n	8002062 <HAL_DMA_IRQHandler+0x13e>
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b10      	cmp	r3, #16
 8002096:	d108      	bne.n	80020aa <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020a8:	e007      	b.n	80020ba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	60da      	str	r2, [r3, #12]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
	...

080020c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <DMA_CalcBaseAndBitshift+0x34>)
 80020d8:	4413      	add	r3, r2
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <DMA_CalcBaseAndBitshift+0x38>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	009a      	lsls	r2, r3, #2
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <DMA_CalcBaseAndBitshift+0x3c>)
 80020ec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	bffdfff8 	.word	0xbffdfff8
 8002100:	cccccccd 	.word	0xcccccccd
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002116:	e14e      	b.n	80023b6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8140 	beq.w	80023b0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x38>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b12      	cmp	r3, #18
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	6939      	ldr	r1, [r7, #16]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d00b      	beq.n	80021dc <HAL_GPIO_Init+0xd4>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d0:	2b11      	cmp	r3, #17
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b12      	cmp	r3, #18
 80021da:	d130      	bne.n	800223e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002212:	2201      	movs	r2, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0201 	and.w	r2, r3, #1
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 809a 	beq.w	80023b0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_GPIO_Init+0x2cc>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a54      	ldr	r2, [pc, #336]	; (80023d4 <HAL_GPIO_Init+0x2cc>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b52      	ldr	r3, [pc, #328]	; (80023d4 <HAL_GPIO_Init+0x2cc>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002294:	4a50      	ldr	r2, [pc, #320]	; (80023d8 <HAL_GPIO_Init+0x2d0>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022be:	d013      	beq.n	80022e8 <HAL_GPIO_Init+0x1e0>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a46      	ldr	r2, [pc, #280]	; (80023dc <HAL_GPIO_Init+0x2d4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00d      	beq.n	80022e4 <HAL_GPIO_Init+0x1dc>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a45      	ldr	r2, [pc, #276]	; (80023e0 <HAL_GPIO_Init+0x2d8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d007      	beq.n	80022e0 <HAL_GPIO_Init+0x1d8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a44      	ldr	r2, [pc, #272]	; (80023e4 <HAL_GPIO_Init+0x2dc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_GPIO_Init+0x1d4>
 80022d8:	2303      	movs	r3, #3
 80022da:	e006      	b.n	80022ea <HAL_GPIO_Init+0x1e2>
 80022dc:	2305      	movs	r3, #5
 80022de:	e004      	b.n	80022ea <HAL_GPIO_Init+0x1e2>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e002      	b.n	80022ea <HAL_GPIO_Init+0x1e2>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_GPIO_Init+0x1e2>
 80022e8:	2300      	movs	r3, #0
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	f002 0203 	and.w	r2, r2, #3
 80022f0:	0092      	lsls	r2, r2, #2
 80022f2:	4093      	lsls	r3, r2
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022fa:	4937      	ldr	r1, [pc, #220]	; (80023d8 <HAL_GPIO_Init+0x2d0>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002308:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800232c:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002356:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002380:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_GPIO_Init+0x2e0>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3301      	adds	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f aea9 	bne.w	8002118 <HAL_GPIO_Init+0x10>
  }
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010000 	.word	0x40010000
 80023dc:	48000400 	.word	0x48000400
 80023e0:	48000800 	.word	0x48000800
 80023e4:	48000c00 	.word	0x48000c00
 80023e8:	40010400 	.word	0x40010400

080023ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e001      	b.n	800240e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002438:	e002      	b.n	8002440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002452:	af00      	add	r7, sp, #0
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	f000 bef4 	b.w	800324e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 816a 	beq.w	800274a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002476:	4bb3      	ldr	r3, [pc, #716]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b04      	cmp	r3, #4
 8002480:	d00c      	beq.n	800249c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002482:	4bb0      	ldr	r3, [pc, #704]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	d159      	bne.n	8002542 <HAL_RCC_OscConfig+0xf6>
 800248e:	4bad      	ldr	r3, [pc, #692]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249a:	d152      	bne.n	8002542 <HAL_RCC_OscConfig+0xf6>
 800249c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_OscConfig+0x82>
 80024c8:	4b9e      	ldr	r3, [pc, #632]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e015      	b.n	80024fa <HAL_RCC_OscConfig+0xae>
 80024ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024f6:	4b93      	ldr	r3, [pc, #588]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024fe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002502:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002506:	fa92 f2a2 	rbit	r2, r2
 800250a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800250e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002512:	fab2 f282 	clz	r2, r2
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f002 021f 	and.w	r2, r2, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f202 	lsl.w	r2, r1, r2
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 810c 	beq.w	8002748 <HAL_RCC_OscConfig+0x2fc>
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 8106 	bne.w	8002748 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f000 be86 	b.w	800324e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d106      	bne.n	800255c <HAL_RCC_OscConfig+0x110>
 800254e:	4b7d      	ldr	r3, [pc, #500]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7c      	ldr	r2, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e030      	b.n	80025be <HAL_RCC_OscConfig+0x172>
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x134>
 8002566:	4b77      	ldr	r3, [pc, #476]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a76      	ldr	r2, [pc, #472]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b74      	ldr	r3, [pc, #464]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a73      	ldr	r2, [pc, #460]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01e      	b.n	80025be <HAL_RCC_OscConfig+0x172>
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258a:	d10c      	bne.n	80025a6 <HAL_RCC_OscConfig+0x15a>
 800258c:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6c      	ldr	r2, [pc, #432]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a69      	ldr	r2, [pc, #420]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e00b      	b.n	80025be <HAL_RCC_OscConfig+0x172>
 80025a6:	4b67      	ldr	r3, [pc, #412]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a66      	ldr	r2, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80025ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b64      	ldr	r3, [pc, #400]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a63      	ldr	r2, [pc, #396]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80025b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025be:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f023 020f 	bic.w	r2, r3, #15
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	495d      	ldr	r1, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d059      	beq.n	8002690 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fb0e 	bl	8000bfc <HAL_GetTick>
 80025e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e6:	f7fe fb09 	bl	8000bfc <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d902      	bls.n	80025fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	f000 be29 	b.w	800324e <HAL_RCC_OscConfig+0xe02>
 80025fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002600:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002610:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_RCC_OscConfig+0x1e2>
 8002628:	4b46      	ldr	r3, [pc, #280]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x20e>
 800262e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002632:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002646:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800264a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800265e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002662:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002666:	fa92 f2a2 	rbit	r2, r2
 800266a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800266e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002672:	fab2 f282 	clz	r2, r2
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f042 0220 	orr.w	r2, r2, #32
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f002 021f 	and.w	r2, r2, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ab      	beq.n	80025e6 <HAL_RCC_OscConfig+0x19a>
 800268e:	e05c      	b.n	800274a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe fab4 	bl	8000bfc <HAL_GetTick>
 8002694:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269a:	f7fe faaf 	bl	8000bfc <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d902      	bls.n	80026b0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f000 bdcf 	b.w	800324e <HAL_RCC_OscConfig+0xe02>
 80026b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d102      	bne.n	80026e2 <HAL_RCC_OscConfig+0x296>
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x2c2>
 80026e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_RCC_OscConfig+0x2f8>)
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002712:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002716:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800271a:	fa92 f2a2 	rbit	r2, r2
 800271e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002722:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ab      	bne.n	800269a <HAL_RCC_OscConfig+0x24e>
 8002742:	e002      	b.n	800274a <HAL_RCC_OscConfig+0x2fe>
 8002744:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 816f 	beq.w	8002a38 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800275a:	4bd0      	ldr	r3, [pc, #832]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002766:	4bcd      	ldr	r3, [pc, #820]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b08      	cmp	r3, #8
 8002770:	d16c      	bne.n	800284c <HAL_RCC_OscConfig+0x400>
 8002772:	4bca      	ldr	r3, [pc, #808]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d166      	bne.n	800284c <HAL_RCC_OscConfig+0x400>
 800277e:	2302      	movs	r3, #2
 8002780:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002790:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d102      	bne.n	80027ae <HAL_RCC_OscConfig+0x362>
 80027a8:	4bbc      	ldr	r3, [pc, #752]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e013      	b.n	80027d6 <HAL_RCC_OscConfig+0x38a>
 80027ae:	2302      	movs	r3, #2
 80027b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027d2:	4bb2      	ldr	r3, [pc, #712]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	2202      	movs	r2, #2
 80027d8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027e0:	fa92 f2a2 	rbit	r2, r2
 80027e4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027e8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027ec:	fab2 f282 	clz	r2, r2
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	f042 0220 	orr.w	r2, r2, #32
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f002 021f 	and.w	r2, r2, #31
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_RCC_OscConfig+0x3cc>
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d002      	beq.n	8002818 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	f000 bd1b 	b.w	800324e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4ba0      	ldr	r3, [pc, #640]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	21f8      	movs	r1, #248	; 0xf8
 8002828:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002830:	fa91 f1a1 	rbit	r1, r1
 8002834:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002838:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800283c:	fab1 f181 	clz	r1, r1
 8002840:	b2c9      	uxtb	r1, r1
 8002842:	408b      	lsls	r3, r1
 8002844:	4995      	ldr	r1, [pc, #596]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	e0f5      	b.n	8002a38 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8085 	beq.w	8002962 <HAL_RCC_OscConfig+0x516>
 8002858:	2301      	movs	r3, #1
 800285a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002862:	fa93 f3a3 	rbit	r3, r3
 8002866:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800286a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	461a      	mov	r2, r3
 8002880:	2301      	movs	r3, #1
 8002882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe f9ba 	bl	8000bfc <HAL_GetTick>
 8002888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288e:	f7fe f9b5 	bl	8000bfc <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d902      	bls.n	80028a4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	f000 bcd5 	b.w	800324e <HAL_RCC_OscConfig+0xe02>
 80028a4:	2302      	movs	r3, #2
 80028a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x488>
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	e013      	b.n	80028fc <HAL_RCC_OscConfig+0x4b0>
 80028d4:	2302      	movs	r3, #2
 80028d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028e6:	2302      	movs	r3, #2
 80028e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	2202      	movs	r2, #2
 80028fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002902:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002906:	fa92 f2a2 	rbit	r2, r2
 800290a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800290e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002912:	fab2 f282 	clz	r2, r2
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f042 0220 	orr.w	r2, r2, #32
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	f002 021f 	and.w	r2, r2, #31
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0af      	beq.n	800288e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	21f8      	movs	r1, #248	; 0xf8
 800293e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002946:	fa91 f1a1 	rbit	r1, r1
 800294a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800294e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002952:	fab1 f181 	clz	r1, r1
 8002956:	b2c9      	uxtb	r1, r1
 8002958:	408b      	lsls	r3, r1
 800295a:	4950      	ldr	r1, [pc, #320]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
 8002960:	e06a      	b.n	8002a38 <HAL_RCC_OscConfig+0x5ec>
 8002962:	2301      	movs	r3, #1
 8002964:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002974:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002978:	fab3 f383 	clz	r3, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002982:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	2300      	movs	r3, #0
 800298c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe f935 	bl	8000bfc <HAL_GetTick>
 8002992:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe f930 	bl	8000bfc <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d902      	bls.n	80029ae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	f000 bc50 	b.w	800324e <HAL_RCC_OscConfig+0xe02>
 80029ae:	2302      	movs	r3, #2
 80029b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d102      	bne.n	80029de <HAL_RCC_OscConfig+0x592>
 80029d8:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	e013      	b.n	8002a06 <HAL_RCC_OscConfig+0x5ba>
 80029de:	2302      	movs	r3, #2
 80029e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029f0:	2302      	movs	r3, #2
 80029f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_RCC_OscConfig+0x650>)
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	2202      	movs	r2, #2
 8002a08:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a0c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a10:	fa92 f2a2 	rbit	r2, r2
 8002a14:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a18:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1af      	bne.n	8002998 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80da 	beq.w	8002bfc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d069      	beq.n	8002b26 <HAL_RCC_OscConfig+0x6da>
 8002a52:	2301      	movs	r3, #1
 8002a54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_OscConfig+0x654>)
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2301      	movs	r3, #1
 8002a7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7c:	f7fe f8be 	bl	8000bfc <HAL_GetTick>
 8002a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a84:	e00e      	b.n	8002aa4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a86:	f7fe f8b9 	bl	8000bfc <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d906      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e3d9      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	10908120 	.word	0x10908120
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ab6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002ae4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4ba5      	ldr	r3, [pc, #660]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002aee:	2102      	movs	r1, #2
 8002af0:	6019      	str	r1, [r3, #0]
 8002af2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f1a3 	rbit	r1, r3
 8002afc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b00:	6019      	str	r1, [r3, #0]
  return result;
 8002b02:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0b0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x63a>
 8002b24:	e06a      	b.n	8002bfc <HAL_RCC_OscConfig+0x7b0>
 8002b26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	fa93 f2a3 	rbit	r2, r3
 8002b38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b3c:	601a      	str	r2, [r3, #0]
  return result;
 8002b3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b42:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b8c      	ldr	r3, [pc, #560]	; (8002d80 <HAL_RCC_OscConfig+0x934>)
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	461a      	mov	r2, r3
 8002b54:	2300      	movs	r3, #0
 8002b56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b58:	f7fe f850 	bl	8000bfc <HAL_GetTick>
 8002b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e009      	b.n	8002b76 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f84b 	bl	8000bfc <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e36b      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
 8002b76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	fa93 f2a3 	rbit	r2, r3
 8002b88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b92:	2202      	movs	r2, #2
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002baa:	2202      	movs	r2, #2
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f2a3 	rbit	r2, r3
 8002bb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbe:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002bc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	6019      	str	r1, [r3, #0]
 8002bca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f1a3 	rbit	r1, r3
 8002bd4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bd8:	6019      	str	r1, [r3, #0]
  return result;
 8002bda:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1b2      	bne.n	8002b62 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8158 	beq.w	8002ebc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c12:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a56      	ldr	r2, [pc, #344]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c44:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <HAL_RCC_OscConfig+0x938>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d11a      	bne.n	8002c86 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCC_OscConfig+0x938>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_RCC_OscConfig+0x938>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5c:	f7fd ffce 	bl	8000bfc <HAL_GetTick>
 8002c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	e009      	b.n	8002c7a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fd ffc9 	bl	8000bfc <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e2e9      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_RCC_OscConfig+0x938>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0ef      	beq.n	8002c66 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCC_OscConfig+0x852>
 8002c90:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a39      	ldr	r2, [pc, #228]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6213      	str	r3, [r2, #32]
 8002c9c:	e02f      	b.n	8002cfe <HAL_RCC_OscConfig+0x8b2>
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x876>
 8002ca8:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a33      	ldr	r2, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	4a30      	ldr	r2, [pc, #192]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cba:	f023 0304 	bic.w	r3, r3, #4
 8002cbe:	6213      	str	r3, [r2, #32]
 8002cc0:	e01d      	b.n	8002cfe <HAL_RCC_OscConfig+0x8b2>
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x89a>
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cd2:	f043 0304 	orr.w	r3, r3, #4
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a27      	ldr	r2, [pc, #156]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x8b2>
 8002ce6:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a24      	ldr	r2, [pc, #144]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d06b      	beq.n	8002de0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d08:	f7fd ff78 	bl	8000bfc <HAL_GetTick>
 8002d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00b      	b.n	8002d2a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fd ff73 	bl	8000bfc <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e291      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
 8002d2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d2e:	2202      	movs	r2, #2
 8002d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d46:	2202      	movs	r2, #2
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d58:	601a      	str	r2, [r3, #0]
  return result;
 8002d5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d109      	bne.n	8002d88 <HAL_RCC_OscConfig+0x93c>
 8002d74:	4b01      	ldr	r3, [pc, #4]	; (8002d7c <HAL_RCC_OscConfig+0x930>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x958>
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	10908120 	.word	0x10908120
 8002d84:	40007000 	.word	0x40007000
 8002d88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	4bbb      	ldr	r3, [pc, #748]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002da8:	2102      	movs	r1, #2
 8002daa:	6011      	str	r1, [r2, #0]
 8002dac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	fa92 f1a2 	rbit	r1, r2
 8002db6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002dba:	6011      	str	r1, [r2, #0]
  return result;
 8002dbc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d099      	beq.n	8002d12 <HAL_RCC_OscConfig+0x8c6>
 8002dde:	e063      	b.n	8002ea8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de0:	f7fd ff0c 	bl	8000bfc <HAL_GetTick>
 8002de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	e00b      	b.n	8002e02 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fd ff07 	bl	8000bfc <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e225      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
 8002e02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e06:	2202      	movs	r2, #2
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e1e:	2202      	movs	r2, #2
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e30:	601a      	str	r2, [r3, #0]
  return result;
 8002e32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f043 0302 	orr.w	r3, r3, #2
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d102      	bne.n	8002e52 <HAL_RCC_OscConfig+0xa06>
 8002e4c:	4b90      	ldr	r3, [pc, #576]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	e00d      	b.n	8002e6e <HAL_RCC_OscConfig+0xa22>
 8002e52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e56:	2202      	movs	r2, #2
 8002e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	fa93 f2a3 	rbit	r2, r3
 8002e64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	4b89      	ldr	r3, [pc, #548]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e72:	2102      	movs	r1, #2
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	fa92 f1a2 	rbit	r1, r2
 8002e80:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e84:	6011      	str	r1, [r2, #0]
  return result;
 8002e86:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	fab2 f282 	clz	r2, r2
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f002 021f 	and.w	r2, r2, #31
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1a0      	bne.n	8002dea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ea8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb0:	4b77      	ldr	r3, [pc, #476]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	4a76      	ldr	r2, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebc:	1d3b      	adds	r3, r7, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 81c2 	beq.w	800324c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec8:	4b71      	ldr	r3, [pc, #452]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	f000 819c 	beq.w	800320e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	f040 8114 	bne.w	800310a <HAL_RCC_OscConfig+0xcbe>
 8002ee2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ee6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002efa:	601a      	str	r2, [r3, #0]
  return result;
 8002efc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	461a      	mov	r2, r3
 8002f14:	2300      	movs	r3, #0
 8002f16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fd fe70 	bl	8000bfc <HAL_GetTick>
 8002f1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	e009      	b.n	8002f36 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fd fe6b 	bl	8000bfc <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e18b      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
 8002f36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f4e:	601a      	str	r2, [r3, #0]
  return result;
 8002f50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_OscConfig+0xb24>
 8002f6a:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e01b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xb5c>
 8002f70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	fa93 f2a3 	rbit	r2, r3
 8002f84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fb0:	6011      	str	r1, [r2, #0]
 8002fb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	fa92 f1a2 	rbit	r1, r2
 8002fbc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fc0:	6011      	str	r1, [r2, #0]
  return result;
 8002fc2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f002 021f 	and.w	r2, r2, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d19e      	bne.n	8002f22 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	4925      	ldr	r1, [pc, #148]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
 8003000:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003018:	601a      	str	r2, [r3, #0]
  return result;
 800301a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800301e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800302a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	2301      	movs	r3, #1
 8003034:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fd fde1 	bl	8000bfc <HAL_GetTick>
 800303a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800303e:	e009      	b.n	8003054 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fd fddc 	bl	8000bfc <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0fc      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
 8003054:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003058:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fa93 f2a3 	rbit	r2, r3
 8003068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800306c:	601a      	str	r2, [r3, #0]
  return result;
 800306e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003072:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0xc48>
 8003088:	4b01      	ldr	r3, [pc, #4]	; (8003090 <HAL_RCC_OscConfig+0xc44>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	e01e      	b.n	80030cc <HAL_RCC_OscConfig+0xc80>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f2a3 	rbit	r2, r3
 80030c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_OscConfig+0xe0c>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030d4:	6011      	str	r1, [r2, #0]
 80030d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	fa92 f1a2 	rbit	r1, r2
 80030e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030e4:	6011      	str	r1, [r2, #0]
  return result;
 80030e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	fab2 f282 	clz	r2, r2
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	f042 0220 	orr.w	r2, r2, #32
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	f002 021f 	and.w	r2, r2, #31
 80030fc:	2101      	movs	r1, #1
 80030fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d09b      	beq.n	8003040 <HAL_RCC_OscConfig+0xbf4>
 8003108:	e0a0      	b.n	800324c <HAL_RCC_OscConfig+0xe00>
 800310a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800310e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003122:	601a      	str	r2, [r3, #0]
  return result;
 8003124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003128:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003134:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	461a      	mov	r2, r3
 800313c:	2300      	movs	r3, #0
 800313e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fd fd5c 	bl	8000bfc <HAL_GetTick>
 8003144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003148:	e009      	b.n	800315e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314a:	f7fd fd57 	bl	8000bfc <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e077      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
 800315e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003176:	601a      	str	r2, [r3, #0]
  return result;
 8003178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_RCC_OscConfig+0xd4c>
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_OscConfig+0xe0c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e01b      	b.n	80031d0 <HAL_RCC_OscConfig+0xd84>
 8003198:	f107 0320 	add.w	r3, r7, #32
 800319c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f107 0320 	add.w	r3, r7, #32
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f107 0318 	add.w	r3, r7, #24
 80031b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f107 0318 	add.w	r3, r7, #24
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	fa93 f2a3 	rbit	r2, r3
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_OscConfig+0xe0c>)
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f107 0210 	add.w	r2, r7, #16
 80031d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	f107 0210 	add.w	r2, r7, #16
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	fa92 f1a2 	rbit	r1, r2
 80031e4:	f107 020c 	add.w	r2, r7, #12
 80031e8:	6011      	str	r1, [r2, #0]
  return result;
 80031ea:	f107 020c 	add.w	r2, r7, #12
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	fab2 f282 	clz	r2, r2
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	f042 0220 	orr.w	r2, r2, #32
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f002 021f 	and.w	r2, r2, #31
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d19e      	bne.n	800314a <HAL_RCC_OscConfig+0xcfe>
 800320c:	e01e      	b.n	800324c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e018      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_RCC_OscConfig+0xe0c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003224:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	429a      	cmp	r2, r3
 8003234:	d108      	bne.n	8003248 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003236:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800323a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000

0800325c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b09e      	sub	sp, #120	; 0x78
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e162      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b90      	ldr	r3, [pc, #576]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	498b      	ldr	r1, [pc, #556]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e14a      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b0:	4b82      	ldr	r3, [pc, #520]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	497f      	ldr	r1, [pc, #508]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80dc 	beq.w	8003488 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d13c      	bne.n	8003352 <HAL_RCC_ClockConfig+0xf6>
 80032d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <HAL_RCC_ClockConfig+0xa6>
 80032fc:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	e00f      	b.n	8003322 <HAL_RCC_ClockConfig+0xc6>
 8003302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003306:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	667b      	str	r3, [r7, #100]	; 0x64
 8003310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
 8003316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800331e:	4b67      	ldr	r3, [pc, #412]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003326:	65ba      	str	r2, [r7, #88]	; 0x58
 8003328:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800332a:	fa92 f2a2 	rbit	r2, r2
 800332e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0220 	orr.w	r2, r2, #32
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d17b      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0f3      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d13c      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x178>
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_RCC_ClockConfig+0x128>
 800337e:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e00f      	b.n	80033a4 <HAL_RCC_ClockConfig+0x148>
 8003384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
 8003392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003396:	643b      	str	r3, [r7, #64]	; 0x40
 8003398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a0:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80033aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ac:	fa92 f2a2 	rbit	r2, r2
 80033b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b4:	fab2 f282 	clz	r2, r2
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f042 0220 	orr.w	r2, r2, #32
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f002 021f 	and.w	r2, r2, #31
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d13a      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b2      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
 80033d4:	2302      	movs	r3, #2
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d102      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	e00d      	b.n	8003418 <HAL_RCC_ClockConfig+0x1bc>
 80033fc:	2302      	movs	r3, #2
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	2302      	movs	r3, #2
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2202      	movs	r2, #2
 800341a:	61ba      	str	r2, [r7, #24]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	617a      	str	r2, [r7, #20]
  return result;
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e079      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	491a      	ldr	r1, [pc, #104]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003458:	f7fd fbd0 	bl	8000bfc <HAL_GetTick>
 800345c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	e00a      	b.n	8003476 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003460:	f7fd fbcc 	bl	8000bfc <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e061      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 020c 	and.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	429a      	cmp	r2, r3
 8003486:	d1eb      	bne.n	8003460 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d214      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0207 	bic.w	r2, r3, #7
 800349e:	4906      	ldr	r1, [pc, #24]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e040      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	491a      	ldr	r1, [pc, #104]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4912      	ldr	r1, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034fe:	f000 f829 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003502:	4601      	mov	r1, r0
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350c:	22f0      	movs	r2, #240	; 0xf0
 800350e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	60fa      	str	r2, [r7, #12]
  return result;
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	fab2 f282 	clz	r2, r2
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	40d3      	lsrs	r3, r2
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x2ec>)
 8003524:	5cd3      	ldrb	r3, [r2, r3]
 8003526:	fa21 f303 	lsr.w	r3, r1, r3
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_RCC_ClockConfig+0x2f0>)
 800352c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCC_ClockConfig+0x2f4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f007 fb6a 	bl	800ac0c <HAL_InitTick>
  
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3778      	adds	r7, #120	; 0x78
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	0800d420 	.word	0x0800d420
 800354c:	20000010 	.word	0x20000010
 8003550:	20000000 	.word	0x20000000

08003554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x30>
 800357e:	2b08      	cmp	r3, #8
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x36>
 8003582:	e03c      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003586:	623b      	str	r3, [r7, #32]
      break;
 8003588:	e03c      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003590:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003594:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	fa92 f2a2 	rbit	r2, r2
 800359c:	607a      	str	r2, [r7, #4]
  return result;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	40d3      	lsrs	r3, r2
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_RCC_GetSysClockFreq+0xc8>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	220f      	movs	r2, #15
 80035b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	fa92 f2a2 	rbit	r2, r2
 80035c0:	60fa      	str	r2, [r7, #12]
  return result;
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	fab2 f282 	clz	r2, r2
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	40d3      	lsrs	r3, r2
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
 80035ec:	e004      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	623b      	str	r3, [r7, #32]
      break;
 80035fc:	e002      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003600:	623b      	str	r3, [r7, #32]
      break;
 8003602:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003604:	6a3b      	ldr	r3, [r7, #32]
}
 8003606:	4618      	mov	r0, r3
 8003608:	372c      	adds	r7, #44	; 0x2c
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	007a1200 	.word	0x007a1200
 800361c:	0800d380 	.word	0x0800d380
 8003620:	0800d390 	.word	0x0800d390
 8003624:	003d0900 	.word	0x003d0900

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000010 	.word	0x20000010

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003646:	f7ff ffef 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 800364a:	4601      	mov	r1, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003654:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003658:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	603a      	str	r2, [r7, #0]
  return result;
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	40d3      	lsrs	r3, r2
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x40>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	0800d430 	.word	0x0800d430

08003684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800368a:	f7ff ffcd 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 800368e:	4601      	mov	r1, r0
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003698:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800369c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	fa92 f2a2 	rbit	r2, r2
 80036a4:	603a      	str	r2, [r7, #0]
  return result;
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	fab2 f282 	clz	r2, r2
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	40d3      	lsrs	r3, r2
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	0800d430 	.word	0x0800d430

080036c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	220f      	movs	r2, #15
 80036d6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_RCC_GetClockConfig+0x5c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0203 	and.w	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_RCC_GetClockConfig+0x5c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_RCC_GetClockConfig+0x5c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_GetClockConfig+0x5c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	08db      	lsrs	r3, r3, #3
 8003702:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <HAL_RCC_GetClockConfig+0x60>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0207 	and.w	r2, r3, #7
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	40022000 	.word	0x40022000

0800372c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b092      	sub	sp, #72	; 0x48
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80d0 	beq.w	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003750:	4b86      	ldr	r3, [pc, #536]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10e      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375c:	4b83      	ldr	r3, [pc, #524]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4a82      	ldr	r2, [pc, #520]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	61d3      	str	r3, [r2, #28]
 8003768:	4b80      	ldr	r3, [pc, #512]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	4b7d      	ldr	r3, [pc, #500]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d118      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003786:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a79      	ldr	r2, [pc, #484]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003790:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003792:	f7fd fa33 	bl	8000bfc <HAL_GetTick>
 8003796:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	e008      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379a:	f7fd fa2f 	bl	8000bfc <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b64      	cmp	r3, #100	; 0x64
 80037a6:	d901      	bls.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e0db      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	4b70      	ldr	r3, [pc, #448]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037b8:	4b6c      	ldr	r3, [pc, #432]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d07d      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d076      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	4b5e      	ldr	r3, [pc, #376]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	461a      	mov	r2, r3
 8003800:	2301      	movs	r3, #1
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003808:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	4b55      	ldr	r3, [pc, #340]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	461a      	mov	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003828:	4a50      	ldr	r2, [pc, #320]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800382a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800382e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d045      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003838:	f7fd f9e0 	bl	8000bfc <HAL_GetTick>
 800383c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fd f9dc 	bl	8000bfc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e086      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003856:	2302      	movs	r3, #2
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	2302      	movs	r3, #2
 8003864:	623b      	str	r3, [r7, #32]
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	61fb      	str	r3, [r7, #28]
  return result;
 800386e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f043 0302 	orr.w	r3, r3, #2
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d102      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003884:	4b39      	ldr	r3, [pc, #228]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	e007      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800388a:	2302      	movs	r3, #2
 800388c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	4b35      	ldr	r3, [pc, #212]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2202      	movs	r2, #2
 800389c:	613a      	str	r2, [r7, #16]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	fa92 f2a2 	rbit	r2, r2
 80038a4:	60fa      	str	r2, [r7, #12]
  return result;
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	fab2 f282 	clz	r2, r2
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f002 021f 	and.w	r2, r2, #31
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f202 	lsl.w	r2, r1, r2
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0bd      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038c4:	4b29      	ldr	r3, [pc, #164]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4926      	ldr	r1, [pc, #152]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4a22      	ldr	r2, [pc, #136]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	491a      	ldr	r1, [pc, #104]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003904:	4313      	orrs	r3, r2
 8003906:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	f023 0210 	bic.w	r2, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003922:	4313      	orrs	r3, r2
 8003924:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	490b      	ldr	r1, [pc, #44]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003940:	4313      	orrs	r3, r2
 8003942:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800395e:	4313      	orrs	r3, r2
 8003960:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3748      	adds	r7, #72	; 0x48
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	40007000 	.word	0x40007000
 8003974:	10908100 	.word	0x10908100

08003978 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e083      	b.n	8003a92 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	7f5b      	ldrb	r3, [r3, #29]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f007 f840 	bl	800aa20 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	22ca      	movs	r2, #202	; 0xca
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2253      	movs	r2, #83	; 0x53
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fb7a 	bl	80040b0 <RTC_EnterInitMode>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	22ff      	movs	r2, #255	; 0xff
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2204      	movs	r2, #4
 80039ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e05e      	b.n	8003a92 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80039e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6899      	ldr	r1, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68d2      	ldr	r2, [r2, #12]
 8003a0e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6919      	ldr	r1, [r3, #16]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	041a      	lsls	r2, r3, #16
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10e      	bne.n	8003a60 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fb0c 	bl	8004060 <HAL_RTC_WaitForSynchro>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	22ff      	movs	r2, #255	; 0xff
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2204      	movs	r2, #4
 8003a5a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e018      	b.n	8003a92 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	22ff      	movs	r2, #255	; 0xff
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a9a:	b590      	push	{r4, r7, lr}
 8003a9c:	b087      	sub	sp, #28
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	7f1b      	ldrb	r3, [r3, #28]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RTC_SetTime+0x1c>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e0aa      	b.n	8003c0c <HAL_RTC_SetTime+0x172>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d126      	bne.n	8003b16 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fb11 	bl	8004108 <RTC_ByteToBcd2>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fb0a 	bl	8004108 <RTC_ByteToBcd2>
 8003af4:	4603      	mov	r3, r0
 8003af6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003af8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	789b      	ldrb	r3, [r3, #2]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fb02 	bl	8004108 <RTC_ByteToBcd2>
 8003b04:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b06:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	78db      	ldrb	r3, [r3, #3]
 8003b0e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e018      	b.n	8003b48 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2200      	movs	r2, #0
 8003b28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b36:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003b3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	78db      	ldrb	r3, [r3, #3]
 8003b42:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	22ca      	movs	r2, #202	; 0xca
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2253      	movs	r2, #83	; 0x53
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 faa9 	bl	80040b0 <RTC_EnterInitMode>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00b      	beq.n	8003b7c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e047      	b.n	8003c0c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003b86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b8a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6899      	ldr	r1, [r3, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d111      	bne.n	8003bf6 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fa44 	bl	8004060 <HAL_RTC_WaitForSynchro>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	22ff      	movs	r2, #255	; 0xff
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2204      	movs	r2, #4
 8003bea:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e00a      	b.n	8003c0c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	22ff      	movs	r2, #255	; 0xff
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
  }
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd90      	pop	{r4, r7, pc}

08003c14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	7f1b      	ldrb	r3, [r3, #28]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_RTC_SetDate+0x1c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e094      	b.n	8003d5a <HAL_RTC_SetDate+0x146>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <HAL_RTC_SetDate+0x4c>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	785b      	ldrb	r3, [r3, #1]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	785b      	ldrb	r3, [r3, #1]
 8003c52:	f023 0310 	bic.w	r3, r3, #16
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	330a      	adds	r3, #10
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d11c      	bne.n	8003ca0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	78db      	ldrb	r3, [r3, #3]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fa4c 	bl	8004108 <RTC_ByteToBcd2>
 8003c70:	4603      	mov	r3, r0
 8003c72:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fa45 	bl	8004108 <RTC_ByteToBcd2>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c82:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	789b      	ldrb	r3, [r3, #2]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fa3d 	bl	8004108 <RTC_ByteToBcd2>
 8003c8e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003c90:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	e00e      	b.n	8003cbe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	78db      	ldrb	r3, [r3, #3]
 8003ca4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	785b      	ldrb	r3, [r3, #1]
 8003caa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003cac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003cb2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	22ca      	movs	r2, #202	; 0xca
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2253      	movs	r2, #83	; 0x53
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f9ee 	bl	80040b0 <RTC_EnterInitMode>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	22ff      	movs	r2, #255	; 0xff
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e033      	b.n	8003d5a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cfc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d00:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d10:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f99d 	bl	8004060 <HAL_RTC_WaitForSynchro>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	22ff      	movs	r2, #255	; 0xff
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2204      	movs	r2, #4
 8003d38:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e00a      	b.n	8003d5a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	22ff      	movs	r2, #255	; 0xff
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}
	...

08003d64 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b089      	sub	sp, #36	; 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	7f1b      	ldrb	r3, [r3, #28]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_RTC_SetAlarm_IT+0x24>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e11f      	b.n	8003fc8 <HAL_RTC_SetAlarm_IT+0x264>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2202      	movs	r2, #2
 8003d92:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d137      	bne.n	8003e0a <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d102      	bne.n	8003dae <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2200      	movs	r2, #0
 8003dac:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f9a8 	bl	8004108 <RTC_ByteToBcd2>
 8003db8:	4603      	mov	r3, r0
 8003dba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f9a1 	bl	8004108 <RTC_ByteToBcd2>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003dca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	789b      	ldrb	r3, [r3, #2]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f999 	bl	8004108 <RTC_ByteToBcd2>
 8003dd6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003dd8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	78db      	ldrb	r3, [r3, #3]
 8003de0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003de2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 f98b 	bl	8004108 <RTC_ByteToBcd2>
 8003df2:	4603      	mov	r3, r0
 8003df4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003df6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003dfe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e023      	b.n	8003e52 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e2a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e30:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	78db      	ldrb	r3, [r3, #3]
 8003e36:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003e38:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e40:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e48:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	22ca      	movs	r2, #202	; 0xca
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2253      	movs	r2, #83	; 0x53
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e76:	d148      	bne.n	8003f0a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e86:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003e98:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e9a:	f7fc feaf 	bl	8000bfc <HAL_GetTick>
 8003e9e:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003ea0:	e013      	b.n	8003eca <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ea2:	f7fc feab 	bl	8000bfc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb0:	d90b      	bls.n	8003eca <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	22ff      	movs	r2, #255	; 0xff
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e07e      	b.n	8003fc8 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0e4      	beq.n	8003ea2 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	e047      	b.n	8003f9a <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f18:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003f2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f2c:	f7fc fe66 	bl	8000bfc <HAL_GetTick>
 8003f30:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003f32:	e013      	b.n	8003f5c <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f34:	f7fc fe62 	bl	8000bfc <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f42:	d90b      	bls.n	8003f5c <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	22ff      	movs	r2, #255	; 0xff
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e035      	b.n	8003fc8 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0e4      	beq.n	8003f34 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f88:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f98:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa4:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	22ff      	movs	r2, #255	; 0xff
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3724      	adds	r7, #36	; 0x24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd90      	pop	{r4, r7, pc}
 8003fd0:	40010400 	.word	0x40010400

08003fd4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00b      	beq.n	8004010 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f005 ff2d 	bl	8009e58 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800400e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d012      	beq.n	8004044 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00b      	beq.n	8004044 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f889 	bl	8004144 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004042:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_RTC_AlarmIRQHandler+0x88>)
 8004046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800404a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	775a      	strb	r2, [r3, #29]
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40010400 	.word	0x40010400

08004060 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800407a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800407c:	f7fc fdbe 	bl	8000bfc <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004082:	e009      	b.n	8004098 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004084:	f7fc fdba 	bl	8000bfc <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004092:	d901      	bls.n	8004098 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e007      	b.n	80040a8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ee      	beq.n	8004084 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d119      	bne.n	80040fe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80040d4:	f7fc fd92 	bl	8000bfc <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040da:	e009      	b.n	80040f0 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040dc:	f7fc fd8e 	bl	8000bfc <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ea:	d901      	bls.n	80040f0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e007      	b.n	8004100 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0ee      	beq.n	80040dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004116:	e005      	b.n	8004124 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	3b0a      	subs	r3, #10
 8004122:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	2b09      	cmp	r3, #9
 8004128:	d8f6      	bhi.n	8004118 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	b2da      	uxtb	r2, r3
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	4313      	orrs	r3, r2
 8004136:	b2db      	uxtb	r3, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e07c      	b.n	8004264 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f006 fc77 	bl	800aa78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041aa:	d902      	bls.n	80041b2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e002      	b.n	80041b8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80041c0:	d007      	beq.n	80041d2 <HAL_SPI_Init+0x7a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041ca:	d002      	beq.n	80041d2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041e2:	d903      	bls.n	80041ec <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
 80041ea:	e002      	b.n	80041f2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0204 	and.w	r2, r3, #4
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	ea42 0103 	orr.w	r1, r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_SPI_Transmit+0x22>
 800428a:	2302      	movs	r3, #2
 800428c:	e150      	b.n	8004530 <HAL_SPI_Transmit+0x2c4>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004296:	f7fc fcb1 	bl	8000bfc <HAL_GetTick>
 800429a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d002      	beq.n	80042b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
 80042ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042b0:	e135      	b.n	800451e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit+0x52>
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c2:	e12c      	b.n	800451e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2203      	movs	r2, #3
 80042c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430e:	d107      	bne.n	8004320 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d007      	beq.n	800433e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004346:	d94b      	bls.n	80043e0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_SPI_Transmit+0xea>
 8004350:	8afb      	ldrh	r3, [r7, #22]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d13e      	bne.n	80043d4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	881a      	ldrh	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	1c9a      	adds	r2, r3, #2
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800437a:	e02b      	b.n	80043d4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b02      	cmp	r3, #2
 8004388:	d112      	bne.n	80043b0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	881a      	ldrh	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043ae:	e011      	b.n	80043d4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b0:	f7fc fc24 	bl	8000bfc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d803      	bhi.n	80043c8 <HAL_SPI_Transmit+0x15c>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c6:	d102      	bne.n	80043ce <HAL_SPI_Transmit+0x162>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043d2:	e0a4      	b.n	800451e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1ce      	bne.n	800437c <HAL_SPI_Transmit+0x110>
 80043de:	e07c      	b.n	80044da <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_SPI_Transmit+0x182>
 80043e8:	8afb      	ldrh	r3, [r7, #22]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d170      	bne.n	80044d0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d912      	bls.n	800441e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b02      	subs	r3, #2
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800441c:	e058      	b.n	80044d0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004444:	e044      	b.n	80044d0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d12b      	bne.n	80044ac <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d912      	bls.n	8004484 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	881a      	ldrh	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b02      	subs	r3, #2
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004482:	e025      	b.n	80044d0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	7812      	ldrb	r2, [r2, #0]
 8004490:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044aa:	e011      	b.n	80044d0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ac:	f7fc fba6 	bl	8000bfc <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d803      	bhi.n	80044c4 <HAL_SPI_Transmit+0x258>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044c2:	d102      	bne.n	80044ca <HAL_SPI_Transmit+0x25e>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044ce:	e026      	b.n	800451e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1b5      	bne.n	8004446 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	6839      	ldr	r1, [r7, #0]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fb22 	bl	8004b28 <SPI_EndRxTxTransaction>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e000      	b.n	800451e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800451c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800452e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004546:	2301      	movs	r3, #1
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_SPI_TransmitReceive+0x26>
 800455a:	2302      	movs	r3, #2
 800455c:	e1fb      	b.n	8004956 <HAL_SPI_TransmitReceive+0x41e>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004566:	f7fc fb49 	bl	8000bfc <HAL_GetTick>
 800456a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004572:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800457a:	887b      	ldrh	r3, [r7, #2]
 800457c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800457e:	887b      	ldrh	r3, [r7, #2]
 8004580:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004582:	7efb      	ldrb	r3, [r7, #27]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d00e      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x6e>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800458e:	d106      	bne.n	800459e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <HAL_SPI_TransmitReceive+0x66>
 8004598:	7efb      	ldrb	r3, [r7, #27]
 800459a:	2b04      	cmp	r3, #4
 800459c:	d003      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800459e:	2302      	movs	r3, #2
 80045a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045a4:	e1cd      	b.n	8004942 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x80>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_SPI_TransmitReceive+0x80>
 80045b2:	887b      	ldrh	r3, [r7, #2]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80045be:	e1c0      	b.n	8004942 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d003      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2205      	movs	r2, #5
 80045d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	887a      	ldrh	r2, [r7, #2]
 80045ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	887a      	ldrh	r2, [r7, #2]
 80045fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	887a      	ldrh	r2, [r7, #2]
 8004600:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004616:	d802      	bhi.n	800461e <HAL_SPI_TransmitReceive+0xe6>
 8004618:	8a3b      	ldrh	r3, [r7, #16]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d908      	bls.n	8004630 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	e007      	b.n	8004640 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d007      	beq.n	800465e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800465c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004666:	d97c      	bls.n	8004762 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_SPI_TransmitReceive+0x13e>
 8004670:	8a7b      	ldrh	r3, [r7, #18]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d169      	bne.n	800474a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	881a      	ldrh	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	1c9a      	adds	r2, r3, #2
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800469a:	e056      	b.n	800474a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d11b      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x1aa>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d016      	beq.n	80046e2 <HAL_SPI_TransmitReceive+0x1aa>
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d113      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	881a      	ldrh	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	1c9a      	adds	r2, r3, #2
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d11c      	bne.n	800472a <HAL_SPI_TransmitReceive+0x1f2>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d016      	beq.n	800472a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	b292      	uxth	r2, r2
 8004708:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	1c9a      	adds	r2, r3, #2
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004726:	2301      	movs	r3, #1
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800472a:	f7fc fa67 	bl	8000bfc <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	429a      	cmp	r2, r3
 8004738:	d807      	bhi.n	800474a <HAL_SPI_TransmitReceive+0x212>
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004740:	d003      	beq.n	800474a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004748:	e0fb      	b.n	8004942 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1a3      	bne.n	800469c <HAL_SPI_TransmitReceive+0x164>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d19d      	bne.n	800469c <HAL_SPI_TransmitReceive+0x164>
 8004760:	e0df      	b.n	8004922 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x23a>
 800476a:	8a7b      	ldrh	r3, [r7, #18]
 800476c:	2b01      	cmp	r3, #1
 800476e:	f040 80cb 	bne.w	8004908 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d912      	bls.n	80047a2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	881a      	ldrh	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b02      	subs	r3, #2
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047a0:	e0b2      	b.n	8004908 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330c      	adds	r3, #12
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c8:	e09e      	b.n	8004908 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d134      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x30a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d02f      	beq.n	8004842 <HAL_SPI_TransmitReceive+0x30a>
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d12c      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d912      	bls.n	8004818 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	881a      	ldrh	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b02      	subs	r3, #2
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004816:	e012      	b.n	800483e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b01      	cmp	r3, #1
 800484e:	d148      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x3aa>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d042      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d923      	bls.n	80048b0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	b292      	uxth	r2, r2
 8004874:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	1c9a      	adds	r2, r3, #2
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b02      	subs	r3, #2
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d81f      	bhi.n	80048de <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	e016      	b.n	80048de <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f103 020c 	add.w	r2, r3, #12
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	7812      	ldrb	r2, [r2, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048de:	2301      	movs	r3, #1
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048e2:	f7fc f98b 	bl	8000bfc <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d803      	bhi.n	80048fa <HAL_SPI_TransmitReceive+0x3c2>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f8:	d102      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x3c8>
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004906:	e01c      	b.n	8004942 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	f47f af5b 	bne.w	80047ca <HAL_SPI_TransmitReceive+0x292>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	f47f af54 	bne.w	80047ca <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f8fe 	bl	8004b28 <SPI_EndRxTxTransaction>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	661a      	str	r2, [r3, #96]	; 0x60
 800493e:	e000      	b.n	8004942 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004940:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004956:	4618      	mov	r0, r3
 8004958:	3728      	adds	r7, #40	; 0x28
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800496c:	b2db      	uxtb	r3, r3
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800498a:	e04c      	b.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004992:	d048      	beq.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004994:	f7fc f932 	bl	8000bfc <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d902      	bls.n	80049aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d13d      	bne.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c2:	d111      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049cc:	d004      	beq.n	80049d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d6:	d107      	bne.n	80049e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f0:	d10f      	bne.n	8004a12 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00f      	b.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d1a3      	bne.n	800498c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a5c:	e057      	b.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a64:	d106      	bne.n	8004a74 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d103      	bne.n	8004a74 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a7a:	d048      	beq.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a7c:	f7fc f8be 	bl	8000bfc <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d902      	bls.n	8004a92 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d13d      	bne.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aaa:	d111      	bne.n	8004ad0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab4:	d004      	beq.n	8004ac0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abe:	d107      	bne.n	8004ad0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ace:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad8:	d10f      	bne.n	8004afa <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e008      	b.n	8004b20 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d19f      	bne.n	8004a5e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ff84 	bl	8004a4e <SPI_WaitFifoStateUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e027      	b.n	8004bac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff ff07 	bl	800497a <SPI_WaitFlagStateUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e014      	b.n	8004bac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff5d 	bl	8004a4e <SPI_WaitFifoStateUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9e:	f043 0220 	orr.w	r2, r3, #32
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e000      	b.n	8004bac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e01d      	b.n	8004c02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f005 ffac 	bl	800ab38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 fa5e 	bl	80050b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <HAL_TIM_Base_Start+0x50>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d00b      	beq.n	8004c46 <HAL_TIM_Base_Start+0x3a>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d007      	beq.n	8004c46 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	00010007 	.word	0x00010007

08004c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <HAL_TIM_Base_Start_IT+0x50>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d00b      	beq.n	8004ca2 <HAL_TIM_Base_Start_IT+0x42>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c90:	d007      	beq.n	8004ca2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	00010007 	.word	0x00010007

08004cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d122      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d11b      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0202 	mvn.w	r2, #2
 8004ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9be 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f9b0 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f9c1 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d122      	bne.n	8004d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b04      	cmp	r3, #4
 8004d2a:	d11b      	bne.n	8004d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0204 	mvn.w	r2, #4
 8004d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f994 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004d50:	e005      	b.n	8004d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f986 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f997 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d122      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d11b      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0208 	mvn.w	r2, #8
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f96a 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f95c 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f96d 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b10      	cmp	r3, #16
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0210 	mvn.w	r2, #16
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2208      	movs	r2, #8
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f940 	bl	8005078 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f932 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f943 	bl	800508c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10e      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d107      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0201 	mvn.w	r2, #1
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f005 fd4a 	bl	800a8cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b80      	cmp	r3, #128	; 0x80
 8004e44:	d10e      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e50:	2b80      	cmp	r3, #128	; 0x80
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fab2 	bl	80053c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	d10e      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d107      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 faa5 	bl	80053dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d10e      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d107      	bne.n	8004ebe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f8f1 	bl	80050a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d10e      	bne.n	8004eea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d107      	bne.n	8004eea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f06f 0220 	mvn.w	r2, #32
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fa65 	bl	80053b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_ConfigClockSource+0x18>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e0a8      	b.n	800505c <HAL_TIM_ConfigClockSource+0x16a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f34:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d067      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x124>
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d80b      	bhi.n	8004f62 <HAL_TIM_ConfigClockSource+0x70>
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d073      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x144>
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d802      	bhi.n	8004f58 <HAL_TIM_ConfigClockSource+0x66>
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d06f      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f56:	e078      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d06c      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x144>
 8004f5c:	2b30      	cmp	r3, #48	; 0x30
 8004f5e:	d06a      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004f60:	e073      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f62:	2b70      	cmp	r3, #112	; 0x70
 8004f64:	d00d      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x90>
 8004f66:	2b70      	cmp	r3, #112	; 0x70
 8004f68:	d804      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x82>
 8004f6a:	2b50      	cmp	r3, #80	; 0x50
 8004f6c:	d033      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0xe4>
 8004f6e:	2b60      	cmp	r3, #96	; 0x60
 8004f70:	d041      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004f72:	e06a      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f78:	d066      	beq.n	8005048 <HAL_TIM_ConfigClockSource+0x156>
 8004f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f7e:	d017      	beq.n	8004fb0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004f80:	e063      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6899      	ldr	r1, [r3, #8]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f000 f981 	bl	8005298 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	609a      	str	r2, [r3, #8]
      break;
 8004fae:	e04c      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6818      	ldr	r0, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	6899      	ldr	r1, [r3, #8]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f000 f96a 	bl	8005298 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fd2:	609a      	str	r2, [r3, #8]
      break;
 8004fd4:	e039      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f000 f8de 	bl	80051a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2150      	movs	r1, #80	; 0x50
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f937 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 8004ff4:	e029      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	461a      	mov	r2, r3
 8005004:	f000 f8fd 	bl	8005202 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2160      	movs	r1, #96	; 0x60
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f927 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 8005014:	e019      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6859      	ldr	r1, [r3, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	461a      	mov	r2, r3
 8005024:	f000 f8be 	bl	80051a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2140      	movs	r1, #64	; 0x40
 800502e:	4618      	mov	r0, r3
 8005030:	f000 f917 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 8005034:	e009      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4619      	mov	r1, r3
 8005040:	4610      	mov	r0, r2
 8005042:	f000 f90e 	bl	8005262 <TIM_ITRx_SetConfig>
      break;
 8005046:	e000      	b.n	800504a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005048:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a32      	ldr	r2, [pc, #200]	; (8005190 <TIM_Base_SetConfig+0xdc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x28>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x28>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2f      	ldr	r2, [pc, #188]	; (8005194 <TIM_Base_SetConfig+0xe0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a27      	ldr	r2, [pc, #156]	; (8005190 <TIM_Base_SetConfig+0xdc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <TIM_Base_SetConfig+0x6a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d00f      	beq.n	800511e <TIM_Base_SetConfig+0x6a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a24      	ldr	r2, [pc, #144]	; (8005194 <TIM_Base_SetConfig+0xe0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00b      	beq.n	800511e <TIM_Base_SetConfig+0x6a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a23      	ldr	r2, [pc, #140]	; (8005198 <TIM_Base_SetConfig+0xe4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d007      	beq.n	800511e <TIM_Base_SetConfig+0x6a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a22      	ldr	r2, [pc, #136]	; (800519c <TIM_Base_SetConfig+0xe8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_Base_SetConfig+0x6a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <TIM_Base_SetConfig+0xec>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d108      	bne.n	8005130 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a0e      	ldr	r2, [pc, #56]	; (8005190 <TIM_Base_SetConfig+0xdc>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_Base_SetConfig+0xc0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0e      	ldr	r2, [pc, #56]	; (8005198 <TIM_Base_SetConfig+0xe4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_Base_SetConfig+0xc0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a0d      	ldr	r2, [pc, #52]	; (800519c <TIM_Base_SetConfig+0xe8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_Base_SetConfig+0xc0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <TIM_Base_SetConfig+0xec>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d103      	bne.n	800517c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	615a      	str	r2, [r3, #20]
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40000400 	.word	0x40000400
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800

080051a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 030a 	bic.w	r3, r3, #10
 80051e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005202:	b480      	push	{r7}
 8005204:	b087      	sub	sp, #28
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0210 	bic.w	r2, r3, #16
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800522c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	031b      	lsls	r3, r3, #12
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800523e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	f043 0307 	orr.w	r3, r3, #7
 8005284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	021a      	lsls	r2, r3, #8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4313      	orrs	r3, r2
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e054      	b.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a24      	ldr	r2, [pc, #144]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005320:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d009      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a13      	ldr	r2, [pc, #76]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a11      	ldr	r2, [pc, #68]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d10c      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	4313      	orrs	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40014000 	.word	0x40014000

080053b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e040      	b.n	8005484 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f005 fbae 	bl	800ab74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2224      	movs	r2, #36	; 0x24
 800541c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fae6 	bl	8005a00 <UART_SetConfig>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e022      	b.n	8005484 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fc5c 	bl	8005d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800545a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800546a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fce3 	bl	8005e48 <UART_CheckIdleState>
 8005482:	4603      	mov	r3, r0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	f040 8081 	bne.w	80055a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_UART_Transmit+0x26>
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e079      	b.n	80055aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_UART_Transmit+0x38>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e072      	b.n	80055aa <HAL_UART_Transmit+0x11e>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2221      	movs	r2, #33	; 0x21
 80054d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054d8:	f7fb fb90 	bl	8000bfc <HAL_GetTick>
 80054dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	d108      	bne.n	800550a <HAL_UART_Transmit+0x7e>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e003      	b.n	8005512 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005512:	e02d      	b.n	8005570 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2200      	movs	r2, #0
 800551c:	2180      	movs	r1, #128	; 0x80
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fcd7 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e03d      	b.n	80055aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	881a      	ldrh	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005540:	b292      	uxth	r2, r2
 8005542:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	3302      	adds	r3, #2
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e008      	b.n	800555e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	b292      	uxth	r2, r2
 8005556:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1cb      	bne.n	8005514 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2200      	movs	r2, #0
 8005584:	2140      	movs	r1, #64	; 0x40
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fca3 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e009      	b.n	80055aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	e000      	b.n	80055aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80055a8:	2302      	movs	r3, #2
  }
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b08a      	sub	sp, #40	; 0x28
 80055b6:	af02      	add	r7, sp, #8
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	f040 80bb 	bne.w	8005742 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_UART_Receive+0x26>
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0b3      	b.n	8005744 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Receive+0x38>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e0ac      	b.n	8005744 <HAL_UART_Receive+0x192>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2222      	movs	r2, #34	; 0x22
 80055fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80055fe:	f7fb fafd 	bl	8000bfc <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561c:	d10e      	bne.n	800563c <HAL_UART_Receive+0x8a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d105      	bne.n	8005632 <HAL_UART_Receive+0x80>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f240 12ff 	movw	r2, #511	; 0x1ff
 800562c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005630:	e02d      	b.n	800568e <HAL_UART_Receive+0xdc>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800563a:	e028      	b.n	800568e <HAL_UART_Receive+0xdc>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10d      	bne.n	8005660 <HAL_UART_Receive+0xae>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_UART_Receive+0xa4>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	22ff      	movs	r2, #255	; 0xff
 8005650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005654:	e01b      	b.n	800568e <HAL_UART_Receive+0xdc>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	227f      	movs	r2, #127	; 0x7f
 800565a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800565e:	e016      	b.n	800568e <HAL_UART_Receive+0xdc>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005668:	d10d      	bne.n	8005686 <HAL_UART_Receive+0xd4>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Receive+0xca>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	227f      	movs	r2, #127	; 0x7f
 8005676:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800567a:	e008      	b.n	800568e <HAL_UART_Receive+0xdc>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	223f      	movs	r2, #63	; 0x3f
 8005680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005684:	e003      	b.n	800568e <HAL_UART_Receive+0xdc>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005694:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d108      	bne.n	80056b2 <HAL_UART_Receive+0x100>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	e003      	b.n	80056ba <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056ba:	e033      	b.n	8005724 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	2120      	movs	r1, #32
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fc03 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e036      	b.n	8005744 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10c      	bne.n	80056f6 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	8a7b      	ldrh	r3, [r7, #18]
 80056e6:	4013      	ands	r3, r2
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	3302      	adds	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e00d      	b.n	8005712 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	8a7b      	ldrh	r3, [r7, #18]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	4013      	ands	r3, r2
 8005706:	b2da      	uxtb	r2, r3
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	3301      	adds	r3, #1
 8005710:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1c5      	bne.n	80056bc <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	e000      	b.n	8005744 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005742:	2302      	movs	r3, #2
  }
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005772:	4013      	ands	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d113      	bne.n	80057a4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d009      	beq.n	80057a4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8114 	beq.w	80059c2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
      }
      return;
 80057a2:	e10e      	b.n	80059c2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80d6 	beq.w	8005958 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d105      	bne.n	80057c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80cb 	beq.w	8005958 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00e      	beq.n	80057ea <HAL_UART_IRQHandler+0x9e>
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2201      	movs	r2, #1
 80057dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e2:	f043 0201 	orr.w	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <HAL_UART_IRQHandler+0xc6>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2202      	movs	r2, #2
 8005804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800580a:	f043 0204 	orr.w	r2, r3, #4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00e      	beq.n	800583a <HAL_UART_IRQHandler+0xee>
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2204      	movs	r2, #4
 800582c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005832:	f043 0202 	orr.w	r2, r3, #2
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d013      	beq.n	800586c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d104      	bne.n	8005858 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2208      	movs	r2, #8
 800585e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005864:	f043 0208 	orr.w	r2, r3, #8
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00f      	beq.n	8005896 <HAL_UART_IRQHandler+0x14a>
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	f043 0220 	orr.w	r2, r3, #32
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8093 	beq.w	80059c6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d007      	beq.n	80058c4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d004      	beq.n	80058e2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d031      	beq.n	8005946 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fb70 	bl	8005fc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d123      	bne.n	800593e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005904:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d013      	beq.n	8005936 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005912:	4a30      	ldr	r2, [pc, #192]	; (80059d4 <HAL_UART_IRQHandler+0x288>)
 8005914:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800591a:	4618      	mov	r0, r3
 800591c:	f7fc fac4 	bl	8001ea8 <HAL_DMA_Abort_IT>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d016      	beq.n	8005954 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	e00e      	b.n	8005954 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f858 	bl	80059ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593c:	e00a      	b.n	8005954 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f854 	bl	80059ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005944:	e006      	b.n	8005954 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f850 	bl	80059ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005952:	e038      	b.n	80059c6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	bf00      	nop
    return;
 8005956:	e036      	b.n	80059c6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <HAL_UART_IRQHandler+0x232>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fb75 	bl	8006066 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800597c:	e026      	b.n	80059cc <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00d      	beq.n	80059a4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005996:	2b00      	cmp	r3, #0
 8005998:	d017      	beq.n	80059ca <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
    }
    return;
 80059a2:	e012      	b.n	80059ca <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00e      	beq.n	80059cc <HAL_UART_IRQHandler+0x280>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fb3b 	bl	8006034 <UART_EndTransmit_IT>
    return;
 80059be:	bf00      	nop
 80059c0:	e004      	b.n	80059cc <HAL_UART_IRQHandler+0x280>
      return;
 80059c2:	bf00      	nop
 80059c4:	e002      	b.n	80059cc <HAL_UART_IRQHandler+0x280>
    return;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <HAL_UART_IRQHandler+0x280>
    return;
 80059ca:	bf00      	nop
  }

}
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	08006009 	.word	0x08006009

080059d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4ba2      	ldr	r3, [pc, #648]	; (8005cb8 <UART_SetConfig+0x2b8>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	6939      	ldr	r1, [r7, #16]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a90      	ldr	r2, [pc, #576]	; (8005cbc <UART_SetConfig+0x2bc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d121      	bne.n	8005ac4 <UART_SetConfig+0xc4>
 8005a80:	4b8f      	ldr	r3, [pc, #572]	; (8005cc0 <UART_SetConfig+0x2c0>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d817      	bhi.n	8005abc <UART_SetConfig+0xbc>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x94>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005ab1 	.word	0x08005ab1
 8005a9c:	08005ab7 	.word	0x08005ab7
 8005aa0:	08005aab 	.word	0x08005aab
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e01e      	b.n	8005ae8 <UART_SetConfig+0xe8>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	77fb      	strb	r3, [r7, #31]
 8005aae:	e01b      	b.n	8005ae8 <UART_SetConfig+0xe8>
 8005ab0:	2304      	movs	r3, #4
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e018      	b.n	8005ae8 <UART_SetConfig+0xe8>
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e015      	b.n	8005ae8 <UART_SetConfig+0xe8>
 8005abc:	2310      	movs	r3, #16
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	bf00      	nop
 8005ac2:	e011      	b.n	8005ae8 <UART_SetConfig+0xe8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a7e      	ldr	r2, [pc, #504]	; (8005cc4 <UART_SetConfig+0x2c4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d102      	bne.n	8005ad4 <UART_SetConfig+0xd4>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e009      	b.n	8005ae8 <UART_SetConfig+0xe8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a7b      	ldr	r2, [pc, #492]	; (8005cc8 <UART_SetConfig+0x2c8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d102      	bne.n	8005ae4 <UART_SetConfig+0xe4>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e001      	b.n	8005ae8 <UART_SetConfig+0xe8>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af0:	f040 8082 	bne.w	8005bf8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005af4:	7ffb      	ldrb	r3, [r7, #31]
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d85e      	bhi.n	8005bb8 <UART_SetConfig+0x1b8>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UART_SetConfig+0x100>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b25 	.word	0x08005b25
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08005b65 	.word	0x08005b65
 8005b0c:	08005bb9 	.word	0x08005bb9
 8005b10:	08005b81 	.word	0x08005b81
 8005b14:	08005bb9 	.word	0x08005bb9
 8005b18:	08005bb9 	.word	0x08005bb9
 8005b1c:	08005bb9 	.word	0x08005bb9
 8005b20:	08005ba1 	.word	0x08005ba1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b24:	f7fd fd8c 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005b28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	005a      	lsls	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	085b      	lsrs	r3, r3, #1
 8005b34:	441a      	add	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	61bb      	str	r3, [r7, #24]
        break;
 8005b42:	e03c      	b.n	8005bbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7fd fd9e 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 8005b48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	005a      	lsls	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	61bb      	str	r3, [r7, #24]
        break;
 8005b62:	e02c      	b.n	8005bbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005b6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6852      	ldr	r2, [r2, #4]
 8005b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	61bb      	str	r3, [r7, #24]
        break;
 8005b7e:	e01e      	b.n	8005bbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b80:	f7fd fce8 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8005b84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	005a      	lsls	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	441a      	add	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	61bb      	str	r3, [r7, #24]
        break;
 8005b9e:	e00e      	b.n	8005bbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	61bb      	str	r3, [r7, #24]
        break;
 8005bb6:	e002      	b.n	8005bbe <UART_SetConfig+0x1be>
      default:
        ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	75fb      	strb	r3, [r7, #23]
        break;
 8005bbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b0f      	cmp	r3, #15
 8005bc2:	d916      	bls.n	8005bf2 <UART_SetConfig+0x1f2>
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bca:	d212      	bcs.n	8005bf2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f023 030f 	bic.w	r3, r3, #15
 8005bd4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	897b      	ldrh	r3, [r7, #10]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	897a      	ldrh	r2, [r7, #10]
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e07d      	b.n	8005cee <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
 8005bf6:	e07a      	b.n	8005cee <UART_SetConfig+0x2ee>
    }
  }
  else
  {
    switch (clocksource)
 8005bf8:	7ffb      	ldrb	r3, [r7, #31]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d866      	bhi.n	8005ccc <UART_SetConfig+0x2cc>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <UART_SetConfig+0x204>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c47 	.word	0x08005c47
 8005c0c:	08005c65 	.word	0x08005c65
 8005c10:	08005ccd 	.word	0x08005ccd
 8005c14:	08005c81 	.word	0x08005c81
 8005c18:	08005ccd 	.word	0x08005ccd
 8005c1c:	08005ccd 	.word	0x08005ccd
 8005c20:	08005ccd 	.word	0x08005ccd
 8005c24:	08005c9f 	.word	0x08005c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c28:	f7fd fd0a 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005c2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	085a      	lsrs	r2, r3, #1
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	441a      	add	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	61bb      	str	r3, [r7, #24]
        break;
 8005c44:	e045      	b.n	8005cd2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c46:	f7fd fd1d 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 8005c4a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	085a      	lsrs	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	61bb      	str	r3, [r7, #24]
        break;
 8005c62:	e036      	b.n	8005cd2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	085b      	lsrs	r3, r3, #1
 8005c6a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005c6e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6852      	ldr	r2, [r2, #4]
 8005c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	61bb      	str	r3, [r7, #24]
        break;
 8005c7e:	e028      	b.n	8005cd2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c80:	f7fd fc68 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8005c84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	085a      	lsrs	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	441a      	add	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	61bb      	str	r3, [r7, #24]
        break;
 8005c9c:	e019      	b.n	8005cd2 <UART_SetConfig+0x2d2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	61bb      	str	r3, [r7, #24]
        break;
 8005cb4:	e00d      	b.n	8005cd2 <UART_SetConfig+0x2d2>
 8005cb6:	bf00      	nop
 8005cb8:	efff69f3 	.word	0xefff69f3
 8005cbc:	40013800 	.word	0x40013800
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40004400 	.word	0x40004400
 8005cc8:	40004800 	.word	0x40004800
      default:
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
        break;
 8005cd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b0f      	cmp	r3, #15
 8005cd6:	d908      	bls.n	8005cea <UART_SetConfig+0x2ea>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cde:	d204      	bcs.n	8005cea <UART_SetConfig+0x2ea>
    {
      huart->Instance->BRR = usartdiv;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	e001      	b.n	8005cee <UART_SetConfig+0x2ee>
    }
    else
    {
      ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01a      	beq.n	8005e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e02:	d10a      	bne.n	8005e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e56:	f7fa fed1 	bl	8000bfc <HAL_GetTick>
 8005e5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d10e      	bne.n	8005e88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f82a 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e020      	b.n	8005eca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d10e      	bne.n	8005eb4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f814 	bl	8005ed2 <UART_WaitOnFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e00a      	b.n	8005eca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	603b      	str	r3, [r7, #0]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee2:	e05d      	b.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eea:	d059      	beq.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eec:	f7fa fe86 	bl	8000bfc <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d302      	bcc.n	8005f02 <UART_WaitOnFlagUntilTimeout+0x30>
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d11b      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0201 	bic.w	r2, r2, #1
 8005f20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e042      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02b      	beq.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f56:	d123      	bne.n	8005fa0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f60:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e00f      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	bf0c      	ite	eq
 8005fb0:	2301      	moveq	r3, #1
 8005fb2:	2300      	movne	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d092      	beq.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fde:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff fce0 	bl	80059ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff fcbd 	bl	80059d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
	...

0800607c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	4a08      	ldr	r2, [pc, #32]	; (80060ac <disk_status+0x30>)
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	79fa      	ldrb	r2, [r7, #7]
 8006094:	4905      	ldr	r1, [pc, #20]	; (80060ac <disk_status+0x30>)
 8006096:	440a      	add	r2, r1
 8006098:	7a12      	ldrb	r2, [r2, #8]
 800609a:	4610      	mov	r0, r2
 800609c:	4798      	blx	r3
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000234 	.word	0x20000234

080060b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80060be:	79fb      	ldrb	r3, [r7, #7]
 80060c0:	4a0d      	ldr	r2, [pc, #52]	; (80060f8 <disk_initialize+0x48>)
 80060c2:	5cd3      	ldrb	r3, [r2, r3]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d111      	bne.n	80060ec <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <disk_initialize+0x48>)
 80060cc:	2101      	movs	r1, #1
 80060ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	4a09      	ldr	r2, [pc, #36]	; (80060f8 <disk_initialize+0x48>)
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	79fa      	ldrb	r2, [r7, #7]
 80060de:	4906      	ldr	r1, [pc, #24]	; (80060f8 <disk_initialize+0x48>)
 80060e0:	440a      	add	r2, r1
 80060e2:	7a12      	ldrb	r2, [r2, #8]
 80060e4:	4610      	mov	r0, r2
 80060e6:	4798      	blx	r3
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000234 	.word	0x20000234

080060fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <disk_read+0x3c>)
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	689c      	ldr	r4, [r3, #8]
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	4a07      	ldr	r2, [pc, #28]	; (8006138 <disk_read+0x3c>)
 800611c:	4413      	add	r3, r2
 800611e:	7a18      	ldrb	r0, [r3, #8]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	47a0      	blx	r4
 8006128:	4603      	mov	r3, r0
 800612a:	75fb      	strb	r3, [r7, #23]
  return res;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
}
 800612e:	4618      	mov	r0, r3
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd90      	pop	{r4, r7, pc}
 8006136:	bf00      	nop
 8006138:	20000234 	.word	0x20000234

0800613c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800613c:	b590      	push	{r4, r7, lr}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <disk_write+0x3c>)
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	68dc      	ldr	r4, [r3, #12]
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	4a07      	ldr	r2, [pc, #28]	; (8006178 <disk_write+0x3c>)
 800615c:	4413      	add	r3, r2
 800615e:	7a18      	ldrb	r0, [r3, #8]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	47a0      	blx	r4
 8006168:	4603      	mov	r3, r0
 800616a:	75fb      	strb	r3, [r7, #23]
  return res;
 800616c:	7dfb      	ldrb	r3, [r7, #23]
}
 800616e:	4618      	mov	r0, r3
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	bd90      	pop	{r4, r7, pc}
 8006176:	bf00      	nop
 8006178:	20000234 	.word	0x20000234

0800617c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	603a      	str	r2, [r7, #0]
 8006186:	71fb      	strb	r3, [r7, #7]
 8006188:	460b      	mov	r3, r1
 800618a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <disk_ioctl+0x38>)
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	79fa      	ldrb	r2, [r7, #7]
 800619a:	4906      	ldr	r1, [pc, #24]	; (80061b4 <disk_ioctl+0x38>)
 800619c:	440a      	add	r2, r1
 800619e:	7a10      	ldrb	r0, [r2, #8]
 80061a0:	79b9      	ldrb	r1, [r7, #6]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	4798      	blx	r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000234 	.word	0x20000234

080061b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80061cc:	e007      	b.n	80061de <mem_cpy+0x26>
		*d++ = *s++;
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	1c53      	adds	r3, r2, #1
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	1c59      	adds	r1, r3, #1
 80061d8:	6179      	str	r1, [r7, #20]
 80061da:	7812      	ldrb	r2, [r2, #0]
 80061dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	1e5a      	subs	r2, r3, #1
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1f2      	bne.n	80061ce <mem_cpy+0x16>
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006204:	e005      	b.n	8006212 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	617a      	str	r2, [r7, #20]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	1e5a      	subs	r2, r3, #1
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f4      	bne.n	8006206 <mem_set+0x12>
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006228:	b480      	push	{r7}
 800622a:	b089      	sub	sp, #36	; 0x24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006240:	bf00      	nop
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	1e5a      	subs	r2, r3, #1
 8006246:	607a      	str	r2, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <mem_cmp+0x40>
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	61fa      	str	r2, [r7, #28]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	4619      	mov	r1, r3
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	61ba      	str	r2, [r7, #24]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	1acb      	subs	r3, r1, r3
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0ec      	beq.n	8006242 <mem_cmp+0x1a>
	return r;
 8006268:	697b      	ldr	r3, [r7, #20]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3724      	adds	r7, #36	; 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006280:	e002      	b.n	8006288 <chk_chr+0x12>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3301      	adds	r3, #1
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <chk_chr+0x26>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	461a      	mov	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	4293      	cmp	r3, r2
 800629a:	d1f2      	bne.n	8006282 <chk_chr+0xc>
	return *str;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	781b      	ldrb	r3, [r3, #0]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e038      	b.n	8006332 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80062c0:	4930      	ldr	r1, [pc, #192]	; (8006384 <chk_lock+0xd8>)
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4613      	mov	r3, r2
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d029      	beq.n	8006328 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80062d4:	492b      	ldr	r1, [pc, #172]	; (8006384 <chk_lock+0xd8>)
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4613      	mov	r3, r2
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	4413      	add	r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d11e      	bne.n	800632c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80062ee:	4925      	ldr	r1, [pc, #148]	; (8006384 <chk_lock+0xd8>)
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4613      	mov	r3, r2
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3304      	adds	r3, #4
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006306:	429a      	cmp	r2, r3
 8006308:	d110      	bne.n	800632c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800630a:	491e      	ldr	r1, [pc, #120]	; (8006384 <chk_lock+0xd8>)
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4613      	mov	r3, r2
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	440b      	add	r3, r1
 8006318:	3308      	adds	r3, #8
 800631a:	881a      	ldrh	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8006322:	429a      	cmp	r2, r3
 8006324:	d102      	bne.n	800632c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006326:	e007      	b.n	8006338 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8006328:	2301      	movs	r3, #1
 800632a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d9c3      	bls.n	80062c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d109      	bne.n	8006352 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <chk_lock+0x9e>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d101      	bne.n	800634e <chk_lock+0xa2>
 800634a:	2300      	movs	r3, #0
 800634c:	e013      	b.n	8006376 <chk_lock+0xca>
 800634e:	2312      	movs	r3, #18
 8006350:	e011      	b.n	8006376 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <chk_lock+0xc4>
 8006358:	490a      	ldr	r1, [pc, #40]	; (8006384 <chk_lock+0xd8>)
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4613      	mov	r3, r2
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	330a      	adds	r3, #10
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636e:	d101      	bne.n	8006374 <chk_lock+0xc8>
 8006370:	2310      	movs	r3, #16
 8006372:	e000      	b.n	8006376 <chk_lock+0xca>
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	2000021c 	.word	0x2000021c

08006388 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	e002      	b.n	800639a <enq_lock+0x12>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3301      	adds	r3, #1
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d809      	bhi.n	80063b4 <enq_lock+0x2c>
 80063a0:	490a      	ldr	r1, [pc, #40]	; (80063cc <enq_lock+0x44>)
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ef      	bne.n	8006394 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	bf14      	ite	ne
 80063ba:	2301      	movne	r3, #1
 80063bc:	2300      	moveq	r3, #0
 80063be:	b2db      	uxtb	r3, r3
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	2000021c 	.word	0x2000021c

080063d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	e02b      	b.n	8006438 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80063e0:	4956      	ldr	r1, [pc, #344]	; (800653c <inc_lock+0x16c>)
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4613      	mov	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d11b      	bne.n	8006432 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80063fa:	4950      	ldr	r1, [pc, #320]	; (800653c <inc_lock+0x16c>)
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	3304      	adds	r3, #4
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8006412:	429a      	cmp	r2, r3
 8006414:	d10d      	bne.n	8006432 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8006416:	4949      	ldr	r1, [pc, #292]	; (800653c <inc_lock+0x16c>)
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4613      	mov	r3, r2
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	3308      	adds	r3, #8
 8006426:	881a      	ldrh	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800642e:	429a      	cmp	r2, r3
 8006430:	d006      	beq.n	8006440 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d9d0      	bls.n	80063e0 <inc_lock+0x10>
 800643e:	e000      	b.n	8006442 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8006440:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d145      	bne.n	80064d4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e002      	b.n	8006454 <inc_lock+0x84>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3301      	adds	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d809      	bhi.n	800646e <inc_lock+0x9e>
 800645a:	4938      	ldr	r1, [pc, #224]	; (800653c <inc_lock+0x16c>)
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1ef      	bne.n	800644e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d101      	bne.n	8006478 <inc_lock+0xa8>
 8006474:	2300      	movs	r3, #0
 8006476:	e05a      	b.n	800652e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800647e:	482f      	ldr	r0, [pc, #188]	; (800653c <inc_lock+0x16c>)
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4613      	mov	r3, r2
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4403      	add	r3, r0
 800648c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8006494:	4829      	ldr	r0, [pc, #164]	; (800653c <inc_lock+0x16c>)
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4613      	mov	r3, r2
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4403      	add	r3, r0
 80064a2:	3304      	adds	r3, #4
 80064a4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80064ac:	4923      	ldr	r1, [pc, #140]	; (800653c <inc_lock+0x16c>)
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	3308      	adds	r3, #8
 80064bc:	4602      	mov	r2, r0
 80064be:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80064c0:	491e      	ldr	r1, [pc, #120]	; (800653c <inc_lock+0x16c>)
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4613      	mov	r3, r2
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	330a      	adds	r3, #10
 80064d0:	2200      	movs	r2, #0
 80064d2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00c      	beq.n	80064f4 <inc_lock+0x124>
 80064da:	4918      	ldr	r1, [pc, #96]	; (800653c <inc_lock+0x16c>)
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4613      	mov	r3, r2
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	440b      	add	r3, r1
 80064e8:	330a      	adds	r3, #10
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <inc_lock+0x124>
 80064f0:	2300      	movs	r3, #0
 80064f2:	e01c      	b.n	800652e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <inc_lock+0x142>
 80064fa:	4910      	ldr	r1, [pc, #64]	; (800653c <inc_lock+0x16c>)
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	330a      	adds	r3, #10
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	b299      	uxth	r1, r3
 8006510:	e001      	b.n	8006516 <inc_lock+0x146>
 8006512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006516:	4809      	ldr	r0, [pc, #36]	; (800653c <inc_lock+0x16c>)
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4613      	mov	r3, r2
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4403      	add	r3, r0
 8006524:	330a      	adds	r3, #10
 8006526:	460a      	mov	r2, r1
 8006528:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	2000021c 	.word	0x2000021c

08006540 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3b01      	subs	r3, #1
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d82e      	bhi.n	80065b2 <dec_lock+0x72>
		n = Files[i].ctr;
 8006554:	491b      	ldr	r1, [pc, #108]	; (80065c4 <dec_lock+0x84>)
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	4613      	mov	r3, r2
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	330a      	adds	r3, #10
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006568:	89fb      	ldrh	r3, [r7, #14]
 800656a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656e:	d101      	bne.n	8006574 <dec_lock+0x34>
 8006570:	2300      	movs	r3, #0
 8006572:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <dec_lock+0x40>
 800657a:	89fb      	ldrh	r3, [r7, #14]
 800657c:	3b01      	subs	r3, #1
 800657e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006580:	4910      	ldr	r1, [pc, #64]	; (80065c4 <dec_lock+0x84>)
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	330a      	adds	r3, #10
 8006590:	89fa      	ldrh	r2, [r7, #14]
 8006592:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006594:	89fb      	ldrh	r3, [r7, #14]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <dec_lock+0x6c>
 800659a:	490a      	ldr	r1, [pc, #40]	; (80065c4 <dec_lock+0x84>)
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	737b      	strb	r3, [r7, #13]
 80065b0:	e001      	b.n	80065b6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80065b2:	2302      	movs	r3, #2
 80065b4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80065b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	2000021c 	.word	0x2000021c

080065c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e016      	b.n	8006604 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80065d6:	4910      	ldr	r1, [pc, #64]	; (8006618 <clear_lock+0x50>)
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d108      	bne.n	80065fe <clear_lock+0x36>
 80065ec:	490a      	ldr	r1, [pc, #40]	; (8006618 <clear_lock+0x50>)
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d9e5      	bls.n	80065d6 <clear_lock+0xe>
	}
}
 800660a:	bf00      	nop
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	2000021c 	.word	0x2000021c

0800661c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800662e:	2b00      	cmp	r3, #0
 8006630:	d038      	beq.n	80066a4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006638:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	2301      	movs	r3, #1
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	f7ff fd79 	bl	800613c <disk_write>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
 8006654:	e026      	b.n	80066a4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800666e:	429a      	cmp	r2, r3
 8006670:	d218      	bcs.n	80066a4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e010      	b.n	800669e <sync_window+0x82>
					wsect += fs->fsize;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4413      	add	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	2301      	movs	r3, #1
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	f7ff fd52 	bl	800613c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	3b01      	subs	r3, #1
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d8eb      	bhi.n	800667c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d01b      	beq.n	8006700 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ffa7 	bl	800661c <sync_window>
 80066ce:	4603      	mov	r3, r0
 80066d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d113      	bne.n	8006700 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	2301      	movs	r3, #1
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	f7ff fd0a 	bl	80060fc <disk_read>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff ff82 	bl	800661c <sync_window>
 8006718:	4603      	mov	r3, r0
 800671a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 809b 	bne.w	800685a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800672a:	2b03      	cmp	r3, #3
 800672c:	f040 8088 	bne.w	8006840 <sync_fs+0x136>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006736:	2b01      	cmp	r3, #1
 8006738:	f040 8082 	bne.w	8006840 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006742:	2100      	movs	r1, #0
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff fd55 	bl	80061f4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2255      	movs	r2, #85	; 0x55
 800674e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	22aa      	movs	r2, #170	; 0xaa
 8006756:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2252      	movs	r2, #82	; 0x52
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2252      	movs	r2, #82	; 0x52
 8006764:	705a      	strb	r2, [r3, #1]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2261      	movs	r2, #97	; 0x61
 800676a:	709a      	strb	r2, [r3, #2]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2241      	movs	r2, #65	; 0x41
 8006770:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2272      	movs	r2, #114	; 0x72
 8006776:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2272      	movs	r2, #114	; 0x72
 800677e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2241      	movs	r2, #65	; 0x41
 8006786:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2261      	movs	r2, #97	; 0x61
 800678e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006798:	b2da      	uxtb	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	0a1b      	lsrs	r3, r3, #8
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067ba:	0c1b      	lsrs	r3, r3, #16
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067ca:	0e1b      	lsrs	r3, r3, #24
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800680c:	0e1b      	lsrs	r3, r3, #24
 800680e:	b2da      	uxtb	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8006832:	2301      	movs	r3, #1
 8006834:	f7ff fc82 	bl	800613c <disk_write>
			fs->fsi_flag = 0;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006846:	2200      	movs	r2, #0
 8006848:	2100      	movs	r1, #0
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fc96 	bl	800617c <disk_ioctl>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8006856:	2301      	movs	r3, #1
 8006858:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	3b02      	subs	r3, #2
 8006872:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800687a:	3b02      	subs	r3, #2
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d301      	bcc.n	8006886 <clust2sect+0x22>
 8006882:	2300      	movs	r3, #0
 8006884:	e00a      	b.n	800689c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800688c:	461a      	mov	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	fb03 f202 	mul.w	r2, r3, r2
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800689a:	4413      	add	r3, r2
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d905      	bls.n	80068c4 <get_fat+0x1c>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <get_fat+0x22>
		val = 1;	/* Internal error */
 80068c4:	2301      	movs	r3, #1
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	e0a0      	b.n	8006a0c <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80068ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ce:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d044      	beq.n	8006964 <get_fat+0xbc>
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d063      	beq.n	80069a6 <get_fat+0xfe>
 80068de:	2b01      	cmp	r3, #1
 80068e0:	f040 808a 	bne.w	80069f8 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	085b      	lsrs	r3, r3, #1
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	0a5b      	lsrs	r3, r3, #9
 80068fc:	4413      	add	r3, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fed4 	bl	80066ae <move_window>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d178      	bne.n	80069fe <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	60fa      	str	r2, [r7, #12]
 8006912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	5cd3      	ldrb	r3, [r2, r3]
 800691a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	0a5b      	lsrs	r3, r3, #9
 8006926:	4413      	add	r3, r2
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff febf 	bl	80066ae <move_window>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d165      	bne.n	8006a02 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	5cd3      	ldrb	r3, [r2, r3]
 8006940:	021b      	lsls	r3, r3, #8
 8006942:	461a      	mov	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <get_fat+0xb2>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	091b      	lsrs	r3, r3, #4
 8006958:	e002      	b.n	8006960 <get_fat+0xb8>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006960:	617b      	str	r3, [r7, #20]
			break;
 8006962:	e053      	b.n	8006a0c <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	4413      	add	r3, r2
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff fe9b 	bl	80066ae <move_window>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d143      	bne.n	8006a06 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	3301      	adds	r3, #1
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	b21a      	sxth	r2, r3
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b21b      	sxth	r3, r3
 800699c:	4313      	orrs	r3, r2
 800699e:	b21b      	sxth	r3, r3
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	617b      	str	r3, [r7, #20]
			break;
 80069a4:	e032      	b.n	8006a0c <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	09db      	lsrs	r3, r3, #7
 80069b0:	4413      	add	r3, r2
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fe7a 	bl	80066ae <move_window>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d124      	bne.n	8006a0a <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4413      	add	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3303      	adds	r3, #3
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	061a      	lsls	r2, r3, #24
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3302      	adds	r3, #2
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	4313      	orrs	r3, r2
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	3201      	adds	r2, #1
 80069e4:	7812      	ldrb	r2, [r2, #0]
 80069e6:	0212      	lsls	r2, r2, #8
 80069e8:	4313      	orrs	r3, r2
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069f4:	617b      	str	r3, [r7, #20]
			break;
 80069f6:	e009      	b.n	8006a0c <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 80069f8:	2301      	movs	r3, #1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e006      	b.n	8006a0c <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069fe:	bf00      	nop
 8006a00:	e004      	b.n	8006a0c <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a02:	bf00      	nop
 8006a04:	e002      	b.n	8006a0c <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a0a:	bf00      	nop
		}
	}

	return val;
 8006a0c:	697b      	ldr	r3, [r7, #20]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b088      	sub	sp, #32
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d905      	bls.n	8006a34 <put_fat+0x1e>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d302      	bcc.n	8006a3a <put_fat+0x24>
		res = FR_INT_ERR;
 8006a34:	2302      	movs	r3, #2
 8006a36:	77fb      	strb	r3, [r7, #31]
 8006a38:	e0f3      	b.n	8006c22 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d074      	beq.n	8006b2e <put_fat+0x118>
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	f000 8099 	beq.w	8006b7c <put_fat+0x166>
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	f040 80df 	bne.w	8006c0e <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	0a5b      	lsrs	r3, r3, #9
 8006a68:	4413      	add	r3, r2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff fe1e 	bl	80066ae <move_window>
 8006a72:	4603      	mov	r3, r0
 8006a74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a76:	7ffb      	ldrb	r3, [r7, #31]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 80cb 	bne.w	8006c14 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	617a      	str	r2, [r7, #20]
 8006a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <put_fat+0x9e>
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	b25b      	sxtb	r3, r3
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	b25a      	sxtb	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	4313      	orrs	r3, r2
 8006aae:	b25b      	sxtb	r3, r3
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e001      	b.n	8006ab8 <put_fat+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	0a5b      	lsrs	r3, r3, #9
 8006ace:	4413      	add	r3, r2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fdeb 	bl	80066ae <move_window>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006adc:	7ffb      	ldrb	r3, [r7, #31]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 809a 	bne.w	8006c18 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <put_fat+0xec>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	091b      	lsrs	r3, r3, #4
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	e00e      	b.n	8006b20 <put_fat+0x10a>
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	f023 030f 	bic.w	r3, r3, #15
 8006b0c:	b25a      	sxtb	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	b25b      	sxtb	r3, r3
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	b25b      	sxtb	r3, r3
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006b2c:	e079      	b.n	8006c22 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	0a1b      	lsrs	r3, r3, #8
 8006b38:	4413      	add	r3, r2
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff fdb6 	bl	80066ae <move_window>
 8006b42:	4603      	mov	r3, r0
 8006b44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b46:	7ffb      	ldrb	r3, [r7, #31]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d167      	bne.n	8006c1c <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	0a1b      	lsrs	r3, r3, #8
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006b7a:	e052      	b.n	8006c22 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	09db      	lsrs	r3, r3, #7
 8006b86:	4413      	add	r3, r2
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff fd8f 	bl	80066ae <move_window>
 8006b90:	4603      	mov	r3, r0
 8006b92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b94:	7ffb      	ldrb	r3, [r7, #31]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d142      	bne.n	8006c20 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	3303      	adds	r3, #3
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	061a      	lsls	r2, r3, #24
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	3302      	adds	r3, #2
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	3201      	adds	r2, #1
 8006bbe:	7812      	ldrb	r2, [r2, #0]
 8006bc0:	0212      	lsls	r2, r2, #8
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	7812      	ldrb	r2, [r2, #0]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	0a1b      	lsrs	r3, r3, #8
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	3301      	adds	r3, #1
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	0c1a      	lsrs	r2, r3, #16
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0e1a      	lsrs	r2, r3, #24
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	3303      	adds	r3, #3
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8006c0c:	e009      	b.n	8006c22 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	77fb      	strb	r3, [r7, #31]
 8006c12:	e006      	b.n	8006c22 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006c14:	bf00      	nop
 8006c16:	e004      	b.n	8006c22 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006c18:	bf00      	nop
 8006c1a:	e002      	b.n	8006c22 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006c1c:	bf00      	nop
 8006c1e:	e000      	b.n	8006c22 <put_fat+0x20c>
			if (res != FR_OK) break;
 8006c20:	bf00      	nop
		}
	}

	return res;
 8006c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d905      	bls.n	8006c48 <remove_chain+0x1c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d302      	bcc.n	8006c4e <remove_chain+0x22>
		res = FR_INT_ERR;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	73fb      	strb	r3, [r7, #15]
 8006c4c:	e043      	b.n	8006cd6 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006c52:	e036      	b.n	8006cc2 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff fe26 	bl	80068a8 <get_fat>
 8006c5c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d035      	beq.n	8006cd0 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d102      	bne.n	8006c70 <remove_chain+0x44>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	e032      	b.n	8006cd6 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c76:	d102      	bne.n	8006c7e <remove_chain+0x52>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	e02b      	b.n	8006cd6 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006c7e:	2200      	movs	r2, #0
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fec7 	bl	8006a16 <put_fat>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d120      	bne.n	8006cd4 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c9c:	d00f      	beq.n	8006cbe <remove_chain+0x92>
				fs->free_clust++;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d3c2      	bcc.n	8006c54 <remove_chain+0x28>
 8006cce:	e002      	b.n	8006cd6 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8006cd0:	bf00      	nop
 8006cd2:	e000      	b.n	8006cd6 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006cd4:	bf00      	nop
		}
	}

	return res;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10f      	bne.n	8006d10 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006cf6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <create_chain+0x2a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d31c      	bcc.n	8006d44 <create_chain+0x64>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	e019      	b.n	8006d44 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff fdc8 	bl	80068a8 <get_fat>
 8006d18:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d801      	bhi.n	8006d24 <create_chain+0x44>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e076      	b.n	8006e12 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d2a:	d101      	bne.n	8006d30 <create_chain+0x50>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	e070      	b.n	8006e12 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d201      	bcs.n	8006d40 <create_chain+0x60>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	e068      	b.n	8006e12 <create_chain+0x132>
		scl = clst;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d307      	bcc.n	8006d6a <create_chain+0x8a>
			ncl = 2;
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d901      	bls.n	8006d6a <create_chain+0x8a>
 8006d66:	2300      	movs	r3, #0
 8006d68:	e053      	b.n	8006e12 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006d6a:	6979      	ldr	r1, [r7, #20]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fd9b 	bl	80068a8 <get_fat>
 8006d72:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00e      	beq.n	8006d98 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d80:	d002      	beq.n	8006d88 <create_chain+0xa8>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <create_chain+0xac>
			return cs;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	e042      	b.n	8006e12 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d1d9      	bne.n	8006d48 <create_chain+0x68>
 8006d94:	2300      	movs	r3, #0
 8006d96:	e03c      	b.n	8006e12 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006d98:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006d9a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006d9e:	6979      	ldr	r1, [r7, #20]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff fe38 	bl	8006a16 <put_fat>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d109      	bne.n	8006dc4 <create_chain+0xe4>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff fe2b 	bl	8006a16 <put_fat>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d11a      	bne.n	8006e00 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ddc:	d018      	beq.n	8006e10 <create_chain+0x130>
			fs->free_clust--;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006de4:	1e5a      	subs	r2, r3, #1
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006df2:	f043 0301 	orr.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8006dfe:	e007      	b.n	8006e10 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d102      	bne.n	8006e0c <create_chain+0x12c>
 8006e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e0a:	e000      	b.n	8006e0e <create_chain+0x12e>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006e10:	697b      	ldr	r3, [r7, #20]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	0a5b      	lsrs	r3, r3, #9
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006e38:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	1d1a      	adds	r2, r3, #4
 8006e46:	613a      	str	r2, [r7, #16]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <clmt_clust+0x3c>
 8006e52:	2300      	movs	r3, #0
 8006e54:	e010      	b.n	8006e78 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d307      	bcc.n	8006e6e <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e6c:	e7e9      	b.n	8006e42 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006e6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	4413      	add	r3, r2
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006e9e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d007      	beq.n	8006eb6 <dir_sdi+0x32>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006eac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d301      	bcc.n	8006eba <dir_sdi+0x36>
		return FR_INT_ERR;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e074      	b.n	8006fa4 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10c      	bne.n	8006eda <dir_sdi+0x56>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ec6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d105      	bne.n	8006eda <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ed4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006ed8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d111      	bne.n	8006f04 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ee6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006eea:	461a      	mov	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d301      	bcc.n	8006ef6 <dir_sdi+0x72>
			return FR_INT_ERR;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e056      	b.n	8006fa4 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006efc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	e032      	b.n	8006f6a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f0a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006f12:	e01e      	b.n	8006f52 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f1a:	6979      	ldr	r1, [r7, #20]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fcc3 	bl	80068a8 <get_fat>
 8006f22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f2a:	d101      	bne.n	8006f30 <dir_sdi+0xac>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e039      	b.n	8006fa4 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d907      	bls.n	8006f46 <dir_sdi+0xc2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d301      	bcc.n	8006f4a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8006f46:	2302      	movs	r3, #2
 8006f48:	e02c      	b.n	8006fa4 <dir_sdi+0x120>
			idx -= ic;
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d2dc      	bcs.n	8006f14 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f60:	6979      	ldr	r1, [r7, #20]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff fc7e 	bl	8006864 <clust2sect>
 8006f68:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <dir_sdi+0xf8>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e013      	b.n	8006fa4 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	091a      	lsrs	r2, r3, #4
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	441a      	add	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f90:	461a      	mov	r2, r3
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	015b      	lsls	r3, r3, #5
 8006f9a:	441a      	add	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006fac:	b590      	push	{r4, r7, lr}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <dir_next+0x26>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <dir_next+0x2a>
		return FR_NO_FILE;
 8006fd2:	2304      	movs	r3, #4
 8006fd4:	e0dd      	b.n	8007192 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f040 80c6 	bne.w	800716e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007000:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007004:	461a      	mov	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4293      	cmp	r3, r2
 800700a:	f0c0 80b0 	bcc.w	800716e <dir_next+0x1c2>
				return FR_NO_FILE;
 800700e:	2304      	movs	r3, #4
 8007010:	e0bf      	b.n	8007192 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	091b      	lsrs	r3, r3, #4
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800701c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007020:	3a01      	subs	r2, #1
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 80a2 	bne.w	800716e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f7ff fc35 	bl	80068a8 <get_fat>
 800703e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d801      	bhi.n	800704a <dir_next+0x9e>
 8007046:	2302      	movs	r3, #2
 8007048:	e0a3      	b.n	8007192 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007050:	d101      	bne.n	8007056 <dir_next+0xaa>
 8007052:	2301      	movs	r3, #1
 8007054:	e09d      	b.n	8007192 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800705c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	429a      	cmp	r2, r3
 8007064:	d374      	bcc.n	8007150 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <dir_next+0xc4>
 800706c:	2304      	movs	r3, #4
 800706e:	e090      	b.n	8007192 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f7ff fe2e 	bl	8006ce0 <create_chain>
 8007084:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <dir_next+0xe4>
 800708c:	2307      	movs	r3, #7
 800708e:	e080      	b.n	8007192 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <dir_next+0xee>
 8007096:	2302      	movs	r3, #2
 8007098:	e07b      	b.n	8007192 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070a0:	d101      	bne.n	80070a6 <dir_next+0xfa>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e075      	b.n	8007192 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff fab5 	bl	800661c <sync_window>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <dir_next+0x110>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e06a      	b.n	8007192 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c6:	2100      	movs	r1, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff f893 	bl	80061f4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80070da:	6979      	ldr	r1, [r7, #20]
 80070dc:	4610      	mov	r0, r2
 80070de:	f7ff fbc1 	bl	8006864 <clust2sect>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80070e8:	2300      	movs	r3, #0
 80070ea:	613b      	str	r3, [r7, #16]
 80070ec:	e01b      	b.n	8007126 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fa8b 	bl	800661c <sync_window>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <dir_next+0x164>
 800710c:	2301      	movs	r3, #1
 800710e:	e040      	b.n	8007192 <dir_next+0x1e6>
						dp->fs->winsect++;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007116:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800711a:	3201      	adds	r2, #1
 800711c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	3301      	adds	r3, #1
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800712c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007130:	461a      	mov	r2, r3
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4293      	cmp	r3, r2
 8007136:	d3da      	bcc.n	80070ee <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800713e:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	1a8a      	subs	r2, r1, r2
 800714c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800715e:	6979      	ldr	r1, [r7, #20]
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff fb7f 	bl	8006864 <clust2sect>
 8007166:	4602      	mov	r2, r0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	b29a      	uxth	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800717e:	461a      	mov	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	015b      	lsls	r3, r3, #5
 8007188:	441a      	add	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	bd90      	pop	{r4, r7, pc}

0800719a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80071a4:	2100      	movs	r1, #0
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff fe6c 	bl	8006e84 <dir_sdi>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d131      	bne.n	800721a <dir_alloc+0x80>
		n = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071c6:	4619      	mov	r1, r3
 80071c8:	4610      	mov	r0, r2
 80071ca:	f7ff fa70 	bl	80066ae <move_window>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11f      	bne.n	8007218 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2be5      	cmp	r3, #229	; 0xe5
 80071e2:	d005      	beq.n	80071f0 <dir_alloc+0x56>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d107      	bne.n	8007200 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d102      	bne.n	8007204 <dir_alloc+0x6a>
 80071fe:	e00c      	b.n	800721a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007200:	2300      	movs	r3, #0
 8007202:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007204:	2101      	movs	r1, #1
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fed0 	bl	8006fac <dir_next>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0d1      	beq.n	80071ba <dir_alloc+0x20>
 8007216:	e000      	b.n	800721a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8007218:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b04      	cmp	r3, #4
 800721e:	d101      	bne.n	8007224 <dir_alloc+0x8a>
 8007220:	2307      	movs	r3, #7
 8007222:	73fb      	strb	r3, [r7, #15]
	return res;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	331b      	adds	r3, #27
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	b21a      	sxth	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	331a      	adds	r3, #26
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	b21b      	sxth	r3, r3
 800724a:	4313      	orrs	r3, r2
 800724c:	b21b      	sxth	r3, r3
 800724e:	b29b      	uxth	r3, r3
 8007250:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007258:	2b03      	cmp	r3, #3
 800725a:	d10f      	bne.n	800727c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	3315      	adds	r3, #21
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	b21a      	sxth	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	3314      	adds	r3, #20
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b21b      	sxth	r3, r3
 800726e:	4313      	orrs	r3, r2
 8007270:	b21b      	sxth	r3, r3
 8007272:	b29b      	uxth	r3, r3
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]

	return cl;
 800727c:	68fb      	ldr	r3, [r7, #12]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	331a      	adds	r3, #26
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	0a1b      	lsrs	r3, r3, #8
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	331b      	adds	r3, #27
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	0c1a      	lsrs	r2, r3, #16
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3314      	adds	r3, #20
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	b29b      	uxth	r3, r3
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3315      	adds	r3, #21
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fdce 	bl	8006e84 <dir_sdi>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <dir_find+0x1e>
 80072f2:	7dfb      	ldrb	r3, [r7, #23]
 80072f4:	e03b      	b.n	800736e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007302:	4619      	mov	r1, r3
 8007304:	4610      	mov	r0, r2
 8007306:	f7ff f9d2 	bl	80066ae <move_window>
 800730a:	4603      	mov	r3, r0
 800730c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d128      	bne.n	8007366 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800731a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <dir_find+0x56>
 8007328:	2304      	movs	r3, #4
 800732a:	75fb      	strb	r3, [r7, #23]
 800732c:	e01e      	b.n	800736c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	330b      	adds	r3, #11
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <dir_find+0x7a>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007342:	220b      	movs	r2, #11
 8007344:	4619      	mov	r1, r3
 8007346:	6938      	ldr	r0, [r7, #16]
 8007348:	f7fe ff6e 	bl	8006228 <mem_cmp>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00b      	beq.n	800736a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007352:	2100      	movs	r1, #0
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff fe29 	bl	8006fac <dir_next>
 800735a:	4603      	mov	r3, r0
 800735c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0c8      	beq.n	80072f6 <dir_find+0x1e>
 8007364:	e002      	b.n	800736c <dir_find+0x94>
		if (res != FR_OK) break;
 8007366:	bf00      	nop
 8007368:	e000      	b.n	800736c <dir_find+0x94>
			break;
 800736a:	bf00      	nop

	return res;
 800736c:	7dfb      	ldrb	r3, [r7, #23]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800737e:	2101      	movs	r1, #1
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff0a 	bl	800719a <dir_alloc>
 8007386:	4603      	mov	r3, r0
 8007388:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d126      	bne.n	80073de <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7ff f985 	bl	80066ae <move_window>
 80073a4:	4603      	mov	r3, r0
 80073a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d117      	bne.n	80073de <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073b4:	2220      	movs	r2, #32
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe ff1b 	bl	80061f4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80073ca:	220b      	movs	r2, #11
 80073cc:	4619      	mov	r1, r3
 80073ce:	f7fe fef3 	bl	80061b8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	3309      	adds	r3, #9
 80073f6:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d05a      	beq.n	80074b8 <get_fileinfo+0xd0>
		dir = dp->dir;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007408:	60bb      	str	r3, [r7, #8]
		i = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800740e:	e01c      	b.n	800744a <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	617a      	str	r2, [r7, #20]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b20      	cmp	r3, #32
 8007422:	d100      	bne.n	8007426 <get_fileinfo+0x3e>
 8007424:	e011      	b.n	800744a <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b05      	cmp	r3, #5
 800742a:	d101      	bne.n	8007430 <get_fileinfo+0x48>
 800742c:	23e5      	movs	r3, #229	; 0xe5
 800742e:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b09      	cmp	r3, #9
 8007434:	d104      	bne.n	8007440 <get_fileinfo+0x58>
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	613a      	str	r2, [r7, #16]
 800743c:	222e      	movs	r2, #46	; 0x2e
 800743e:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	613a      	str	r2, [r7, #16]
 8007446:	7bfa      	ldrb	r2, [r7, #15]
 8007448:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b0a      	cmp	r3, #10
 800744e:	d9df      	bls.n	8007410 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	7ada      	ldrb	r2, [r3, #11]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	331f      	adds	r3, #31
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	061a      	lsls	r2, r3, #24
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	331e      	adds	r3, #30
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	4313      	orrs	r3, r2
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	321d      	adds	r2, #29
 800746e:	7812      	ldrb	r2, [r2, #0]
 8007470:	0212      	lsls	r2, r2, #8
 8007472:	4313      	orrs	r3, r2
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	321c      	adds	r2, #28
 8007478:	7812      	ldrb	r2, [r2, #0]
 800747a:	431a      	orrs	r2, r3
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3319      	adds	r3, #25
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	b21a      	sxth	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	3318      	adds	r3, #24
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	b21b      	sxth	r3, r3
 8007492:	4313      	orrs	r3, r2
 8007494:	b21b      	sxth	r3, r3
 8007496:	b29a      	uxth	r2, r3
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	3317      	adds	r3, #23
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	b21a      	sxth	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	3316      	adds	r3, #22
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b21b      	sxth	r3, r3
 80074ae:	4313      	orrs	r3, r2
 80074b0:	b21b      	sxth	r3, r3
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 80074be:	bf00      	nop
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	e002      	b.n	80074e4 <create_name+0x18>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b2f      	cmp	r3, #47	; 0x2f
 80074ea:	d0f8      	beq.n	80074de <create_name+0x12>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b5c      	cmp	r3, #92	; 0x5c
 80074f2:	d0f4      	beq.n	80074de <create_name+0x12>
	sfn = dp->fn;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80074fa:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80074fc:	220b      	movs	r2, #11
 80074fe:	2120      	movs	r1, #32
 8007500:	68b8      	ldr	r0, [r7, #8]
 8007502:	f7fe fe77 	bl	80061f4 <mem_set>
	si = i = b = 0; ni = 8;
 8007506:	2300      	movs	r3, #0
 8007508:	77fb      	strb	r3, [r7, #31]
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	2308      	movs	r3, #8
 8007514:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	617a      	str	r2, [r7, #20]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007524:	7fbb      	ldrb	r3, [r7, #30]
 8007526:	2b20      	cmp	r3, #32
 8007528:	d953      	bls.n	80075d2 <create_name+0x106>
 800752a:	7fbb      	ldrb	r3, [r7, #30]
 800752c:	2b2f      	cmp	r3, #47	; 0x2f
 800752e:	d050      	beq.n	80075d2 <create_name+0x106>
 8007530:	7fbb      	ldrb	r3, [r7, #30]
 8007532:	2b5c      	cmp	r3, #92	; 0x5c
 8007534:	d04d      	beq.n	80075d2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8007536:	7fbb      	ldrb	r3, [r7, #30]
 8007538:	2b2e      	cmp	r3, #46	; 0x2e
 800753a:	d003      	beq.n	8007544 <create_name+0x78>
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	429a      	cmp	r2, r3
 8007542:	d30f      	bcc.n	8007564 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b08      	cmp	r3, #8
 8007548:	d102      	bne.n	8007550 <create_name+0x84>
 800754a:	7fbb      	ldrb	r3, [r7, #30]
 800754c:	2b2e      	cmp	r3, #46	; 0x2e
 800754e:	d001      	beq.n	8007554 <create_name+0x88>
 8007550:	2306      	movs	r3, #6
 8007552:	e073      	b.n	800763c <create_name+0x170>
			i = 8; ni = 11;
 8007554:	2308      	movs	r3, #8
 8007556:	613b      	str	r3, [r7, #16]
 8007558:	230b      	movs	r3, #11
 800755a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800755c:	7ffb      	ldrb	r3, [r7, #31]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	77fb      	strb	r3, [r7, #31]
 8007562:	e035      	b.n	80075d0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007564:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007568:	2b00      	cmp	r3, #0
 800756a:	da08      	bge.n	800757e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800756c:	7ffb      	ldrb	r3, [r7, #31]
 800756e:	f043 0303 	orr.w	r3, r3, #3
 8007572:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007574:	7fbb      	ldrb	r3, [r7, #30]
 8007576:	3b80      	subs	r3, #128	; 0x80
 8007578:	4a32      	ldr	r2, [pc, #200]	; (8007644 <create_name+0x178>)
 800757a:	5cd3      	ldrb	r3, [r2, r3]
 800757c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800757e:	7fbb      	ldrb	r3, [r7, #30]
 8007580:	4619      	mov	r1, r3
 8007582:	4831      	ldr	r0, [pc, #196]	; (8007648 <create_name+0x17c>)
 8007584:	f7fe fe77 	bl	8006276 <chk_chr>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <create_name+0xc6>
				return FR_INVALID_NAME;
 800758e:	2306      	movs	r3, #6
 8007590:	e054      	b.n	800763c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007592:	7fbb      	ldrb	r3, [r7, #30]
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	d907      	bls.n	80075a8 <create_name+0xdc>
 8007598:	7fbb      	ldrb	r3, [r7, #30]
 800759a:	2b5a      	cmp	r3, #90	; 0x5a
 800759c:	d804      	bhi.n	80075a8 <create_name+0xdc>
				b |= 2;
 800759e:	7ffb      	ldrb	r3, [r7, #31]
 80075a0:	f043 0302 	orr.w	r3, r3, #2
 80075a4:	77fb      	strb	r3, [r7, #31]
 80075a6:	e00c      	b.n	80075c2 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80075a8:	7fbb      	ldrb	r3, [r7, #30]
 80075aa:	2b60      	cmp	r3, #96	; 0x60
 80075ac:	d909      	bls.n	80075c2 <create_name+0xf6>
 80075ae:	7fbb      	ldrb	r3, [r7, #30]
 80075b0:	2b7a      	cmp	r3, #122	; 0x7a
 80075b2:	d806      	bhi.n	80075c2 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80075b4:	7ffb      	ldrb	r3, [r7, #31]
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	77fb      	strb	r3, [r7, #31]
 80075bc:	7fbb      	ldrb	r3, [r7, #30]
 80075be:	3b20      	subs	r3, #32
 80075c0:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	613a      	str	r2, [r7, #16]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	4413      	add	r3, r2
 80075cc:	7fba      	ldrb	r2, [r7, #30]
 80075ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80075d0:	e7a1      	b.n	8007516 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	441a      	add	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80075dc:	7fbb      	ldrb	r3, [r7, #30]
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d801      	bhi.n	80075e6 <create_name+0x11a>
 80075e2:	2304      	movs	r3, #4
 80075e4:	e000      	b.n	80075e8 <create_name+0x11c>
 80075e6:	2300      	movs	r3, #0
 80075e8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <create_name+0x128>
 80075f0:	2306      	movs	r3, #6
 80075f2:	e023      	b.n	800763c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2be5      	cmp	r3, #229	; 0xe5
 80075fa:	d102      	bne.n	8007602 <create_name+0x136>
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	2205      	movs	r2, #5
 8007600:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b08      	cmp	r3, #8
 8007606:	d102      	bne.n	800760e <create_name+0x142>
 8007608:	7ffb      	ldrb	r3, [r7, #31]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800760e:	7ffb      	ldrb	r3, [r7, #31]
 8007610:	f003 0303 	and.w	r3, r3, #3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d103      	bne.n	8007620 <create_name+0x154>
 8007618:	7fbb      	ldrb	r3, [r7, #30]
 800761a:	f043 0310 	orr.w	r3, r3, #16
 800761e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007620:	7ffb      	ldrb	r3, [r7, #31]
 8007622:	f003 030c 	and.w	r3, r3, #12
 8007626:	2b04      	cmp	r3, #4
 8007628:	d103      	bne.n	8007632 <create_name+0x166>
 800762a:	7fbb      	ldrb	r3, [r7, #30]
 800762c:	f043 0308 	orr.w	r3, r3, #8
 8007630:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	330b      	adds	r3, #11
 8007636:	7fba      	ldrb	r2, [r7, #30]
 8007638:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800763a:	2300      	movs	r3, #0
#endif
}
 800763c:	4618      	mov	r0, r3
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	0800d3a0 	.word	0x0800d3a0
 8007648:	0800d1e8 	.word	0x0800d1e8

0800764c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b2f      	cmp	r3, #47	; 0x2f
 800765c:	d003      	beq.n	8007666 <follow_path+0x1a>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b5c      	cmp	r3, #92	; 0x5c
 8007664:	d102      	bne.n	800766c <follow_path+0x20>
		path++;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b1f      	cmp	r3, #31
 800767a:	d80a      	bhi.n	8007692 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800767c:	2100      	movs	r1, #0
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fc00 	bl	8006e84 <dir_sdi>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007690:	e045      	b.n	800771e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007692:	463b      	mov	r3, r7
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff ff18 	bl	80074cc <create_name>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d136      	bne.n	8007714 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff fe16 	bl	80072d8 <dir_find>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076b6:	7adb      	ldrb	r3, [r3, #11]
 80076b8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00a      	beq.n	80076d6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d128      	bne.n	8007718 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d123      	bne.n	8007718 <follow_path+0xcc>
 80076d0:	2305      	movs	r3, #5
 80076d2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80076d4:	e020      	b.n	8007718 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d11d      	bne.n	800771c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076e6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	330b      	adds	r3, #11
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	f003 0310 	and.w	r3, r3, #16
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80076f6:	2305      	movs	r3, #5
 80076f8:	73fb      	strb	r3, [r7, #15]
 80076fa:	e010      	b.n	800771e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fd92 	bl	800722e <ld_clust>
 800770a:	4602      	mov	r2, r0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007712:	e7be      	b.n	8007692 <follow_path+0x46>
			if (res != FR_OK) break;
 8007714:	bf00      	nop
 8007716:	e002      	b.n	800771e <follow_path+0xd2>
				break;
 8007718:	bf00      	nop
 800771a:	e000      	b.n	800771e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800771c:	bf00      	nop
		}
	}

	return res;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007734:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d031      	beq.n	80077a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e002      	b.n	800774c <get_ldnumber+0x24>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	3301      	adds	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b20      	cmp	r3, #32
 8007752:	d903      	bls.n	800775c <get_ldnumber+0x34>
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b3a      	cmp	r3, #58	; 0x3a
 800775a:	d1f4      	bne.n	8007746 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b3a      	cmp	r3, #58	; 0x3a
 8007762:	d11c      	bne.n	800779e <get_ldnumber+0x76>
			tp = *path;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	60fa      	str	r2, [r7, #12]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	3b30      	subs	r3, #48	; 0x30
 8007774:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b09      	cmp	r3, #9
 800777a:	d80e      	bhi.n	800779a <get_ldnumber+0x72>
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	429a      	cmp	r2, r3
 8007782:	d10a      	bne.n	800779a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d107      	bne.n	800779a <get_ldnumber+0x72>
					vol = (int)i;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	3301      	adds	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	e002      	b.n	80077a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800779e:	2300      	movs	r3, #0
 80077a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80077a2:	693b      	ldr	r3, [r7, #16]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077c8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fe ff6d 	bl	80066ae <move_window>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <check_fs+0x2e>
		return 3;
 80077da:	2303      	movs	r3, #3
 80077dc:	e04a      	b.n	8007874 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077e4:	3301      	adds	r3, #1
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	b21a      	sxth	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80077f2:	b21b      	sxth	r3, r3
 80077f4:	4313      	orrs	r3, r2
 80077f6:	b21b      	sxth	r3, r3
 80077f8:	4a20      	ldr	r2, [pc, #128]	; (800787c <check_fs+0xcc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d001      	beq.n	8007802 <check_fs+0x52>
		return 2;
 80077fe:	2302      	movs	r3, #2
 8007800:	e038      	b.n	8007874 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3336      	adds	r3, #54	; 0x36
 8007806:	3303      	adds	r3, #3
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	061a      	lsls	r2, r3, #24
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3336      	adds	r3, #54	; 0x36
 8007810:	3302      	adds	r3, #2
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	041b      	lsls	r3, r3, #16
 8007816:	4313      	orrs	r3, r2
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	3236      	adds	r2, #54	; 0x36
 800781c:	3201      	adds	r2, #1
 800781e:	7812      	ldrb	r2, [r2, #0]
 8007820:	0212      	lsls	r2, r2, #8
 8007822:	4313      	orrs	r3, r2
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800782a:	4313      	orrs	r3, r2
 800782c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007830:	4a13      	ldr	r2, [pc, #76]	; (8007880 <check_fs+0xd0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d101      	bne.n	800783a <check_fs+0x8a>
		return 0;
 8007836:	2300      	movs	r3, #0
 8007838:	e01c      	b.n	8007874 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3352      	adds	r3, #82	; 0x52
 800783e:	3303      	adds	r3, #3
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	061a      	lsls	r2, r3, #24
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3352      	adds	r3, #82	; 0x52
 8007848:	3302      	adds	r3, #2
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	4313      	orrs	r3, r2
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	3252      	adds	r2, #82	; 0x52
 8007854:	3201      	adds	r2, #1
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	0212      	lsls	r2, r2, #8
 800785a:	4313      	orrs	r3, r2
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007862:	4313      	orrs	r3, r2
 8007864:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007868:	4a05      	ldr	r2, [pc, #20]	; (8007880 <check_fs+0xd0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d101      	bne.n	8007872 <check_fs+0xc2>
		return 0;
 800786e:	2300      	movs	r3, #0
 8007870:	e000      	b.n	8007874 <check_fs+0xc4>

	return 1;
 8007872:	2301      	movs	r3, #1
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	ffffaa55 	.word	0xffffaa55
 8007880:	00544146 	.word	0x00544146

08007884 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b096      	sub	sp, #88	; 0x58
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007898:	68b8      	ldr	r0, [r7, #8]
 800789a:	f7ff ff45 	bl	8007728 <get_ldnumber>
 800789e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80078a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	da01      	bge.n	80078aa <find_volume+0x26>
 80078a6:	230b      	movs	r3, #11
 80078a8:	e2aa      	b.n	8007e00 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80078aa:	4a9e      	ldr	r2, [pc, #632]	; (8007b24 <find_volume+0x2a0>)
 80078ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <find_volume+0x3a>
 80078ba:	230c      	movs	r3, #12
 80078bc:	e2a0      	b.n	8007e00 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078c2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d01b      	beq.n	8007906 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fbd1 	bl	800607c <disk_status>
 80078da:	4603      	mov	r3, r0
 80078dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80078e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10c      	bne.n	8007906 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <find_volume+0x7e>
 80078f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80078fe:	230a      	movs	r3, #10
 8007900:	e27e      	b.n	8007e00 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8007902:	2300      	movs	r3, #0
 8007904:	e27c      	b.n	8007e00 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800790e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007910:	b2da      	uxtb	r2, r3
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800791e:	4618      	mov	r0, r3
 8007920:	f7fe fbc6 	bl	80060b0 <disk_initialize>
 8007924:	4603      	mov	r3, r0
 8007926:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800792a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007936:	2303      	movs	r3, #3
 8007938:	e262      	b.n	8007e00 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <find_volume+0xcc>
 8007940:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800794c:	230a      	movs	r3, #10
 800794e:	e257      	b.n	8007e00 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007954:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007956:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007958:	f7ff ff2a 	bl	80077b0 <check_fs>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007962:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007966:	2b01      	cmp	r3, #1
 8007968:	d155      	bne.n	8007a16 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800796a:	2300      	movs	r3, #0
 800796c:	643b      	str	r3, [r7, #64]	; 0x40
 800796e:	e029      	b.n	80079c4 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800797a:	4413      	add	r3, r2
 800797c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	3304      	adds	r3, #4
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d012      	beq.n	80079ae <find_volume+0x12a>
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	330b      	adds	r3, #11
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	061a      	lsls	r2, r3, #24
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	330a      	adds	r3, #10
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	041b      	lsls	r3, r3, #16
 8007998:	4313      	orrs	r3, r2
 800799a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799c:	3209      	adds	r2, #9
 800799e:	7812      	ldrb	r2, [r2, #0]
 80079a0:	0212      	lsls	r2, r2, #8
 80079a2:	4313      	orrs	r3, r2
 80079a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a6:	3208      	adds	r2, #8
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	431a      	orrs	r2, r3
 80079ac:	e000      	b.n	80079b0 <find_volume+0x12c>
 80079ae:	2200      	movs	r2, #0
 80079b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80079b8:	440b      	add	r3, r1
 80079ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80079be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c0:	3301      	adds	r3, #1
 80079c2:	643b      	str	r3, [r7, #64]	; 0x40
 80079c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d9d2      	bls.n	8007970 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80079ca:	2300      	movs	r3, #0
 80079cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80079ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <find_volume+0x156>
 80079d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079d6:	3b01      	subs	r3, #1
 80079d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80079da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80079e2:	4413      	add	r3, r2
 80079e4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80079e8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80079ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <find_volume+0x178>
 80079f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079f4:	f7ff fedc 	bl	80077b0 <check_fs>
 80079f8:	4603      	mov	r3, r0
 80079fa:	e000      	b.n	80079fe <find_volume+0x17a>
 80079fc:	2302      	movs	r3, #2
 80079fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007a02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <find_volume+0x192>
 8007a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d9e1      	bls.n	80079da <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007a16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d101      	bne.n	8007a22 <find_volume+0x19e>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e1ee      	b.n	8007e00 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007a22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <find_volume+0x1aa>
 8007a2a:	230d      	movs	r3, #13
 8007a2c:	e1e8      	b.n	8007e00 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	7b1b      	ldrb	r3, [r3, #12]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	b21a      	sxth	r2, r3
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	7adb      	ldrb	r3, [r3, #11]
 8007a3a:	b21b      	sxth	r3, r3
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	b21b      	sxth	r3, r3
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a44:	d001      	beq.n	8007a4a <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8007a46:	230d      	movs	r3, #13
 8007a48:	e1da      	b.n	8007e00 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	7ddb      	ldrb	r3, [r3, #23]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	b21a      	sxth	r2, r3
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	7d9b      	ldrb	r3, [r3, #22]
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b21b      	sxth	r3, r3
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d112      	bne.n	8007a8c <find_volume+0x208>
 8007a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007a6c:	061a      	lsls	r2, r3, #24
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	4313      	orrs	r3, r2
 8007a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a7a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007a7e:	0212      	lsls	r2, r2, #8
 8007a80:	4313      	orrs	r3, r2
 8007a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a84:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	7c1a      	ldrb	r2, [r3, #16]
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d006      	beq.n	8007ab6 <find_volume+0x232>
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d001      	beq.n	8007ab6 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8007ab2:	230d      	movs	r3, #13
 8007ab4:	e1a4      	b.n	8007e00 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007abc:	461a      	mov	r2, r3
 8007abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac0:	fb02 f303 	mul.w	r3, r2, r3
 8007ac4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	7b5a      	ldrb	r2, [r3, #13]
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <find_volume+0x26c>
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8007af0:	230d      	movs	r3, #13
 8007af2:	e185      	b.n	8007e00 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	7c9b      	ldrb	r3, [r3, #18]
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	b21a      	sxth	r2, r3
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	7c5b      	ldrb	r3, [r3, #17]
 8007b00:	b21b      	sxth	r3, r3
 8007b02:	4313      	orrs	r3, r2
 8007b04:	b21b      	sxth	r3, r3
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007b14:	f003 030f 	and.w	r3, r3, #15
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d004      	beq.n	8007b28 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8007b1e:	230d      	movs	r3, #13
 8007b20:	e16e      	b.n	8007e00 <find_volume+0x57c>
 8007b22:	bf00      	nop
 8007b24:	20000214 	.word	0x20000214

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	7d1b      	ldrb	r3, [r3, #20]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	b21a      	sxth	r2, r3
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	7cdb      	ldrb	r3, [r3, #19]
 8007b34:	b21b      	sxth	r3, r3
 8007b36:	4313      	orrs	r3, r2
 8007b38:	b21b      	sxth	r3, r3
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d112      	bne.n	8007b6a <find_volume+0x2e6>
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007b4a:	061a      	lsls	r2, r3, #24
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007b52:	041b      	lsls	r3, r3, #16
 8007b54:	4313      	orrs	r3, r2
 8007b56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b58:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007b5c:	0212      	lsls	r2, r2, #8
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b62:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6c:	7bdb      	ldrb	r3, [r3, #15]
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	b21a      	sxth	r2, r3
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	7b9b      	ldrb	r3, [r3, #14]
 8007b76:	b21b      	sxth	r3, r3
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	b21b      	sxth	r3, r3
 8007b7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007b7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <find_volume+0x304>
 8007b84:	230d      	movs	r3, #13
 8007b86:	e13b      	b.n	8007e00 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007b88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8c:	4413      	add	r3, r2
 8007b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b90:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8007b94:	0912      	lsrs	r2, r2, #4
 8007b96:	b292      	uxth	r2, r2
 8007b98:	4413      	add	r3, r2
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d201      	bcs.n	8007ba8 <find_volume+0x324>
 8007ba4:	230d      	movs	r3, #13
 8007ba6:	e12b      	b.n	8007e00 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <find_volume+0x340>
 8007bc0:	230d      	movs	r3, #13
 8007bc2:	e11d      	b.n	8007e00 <find_volume+0x57c>
	fmt = FS_FAT12;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d902      	bls.n	8007bda <find_volume+0x356>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d902      	bls.n	8007bea <find_volume+0x366>
 8007be4:	2303      	movs	r3, #3
 8007be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bf8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007bfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c00:	441a      	add	r2, r3
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8007c08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0c:	441a      	add	r2, r3
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8007c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d121      	bne.n	8007c60 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <find_volume+0x3a6>
 8007c26:	230d      	movs	r3, #13
 8007c28:	e0ea      	b.n	8007e00 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007c30:	061a      	lsls	r2, r3, #24
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007c38:	041b      	lsls	r3, r3, #16
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007c42:	0212      	lsls	r2, r2, #8
 8007c44:	4313      	orrs	r3, r2
 8007c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c48:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5e:	e025      	b.n	8007cac <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <find_volume+0x3ea>
 8007c6a:	230d      	movs	r3, #13
 8007c6c:	e0c8      	b.n	8007e00 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c70:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c76:	441a      	add	r2, r3
 8007c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007c7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d104      	bne.n	8007c90 <find_volume+0x40c>
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	e00c      	b.n	8007caa <find_volume+0x426>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007c96:	4613      	mov	r3, r2
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	4413      	add	r3, r2
 8007c9c:	085a      	lsrs	r2, r3, #1
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007caa:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cb4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007cb8:	0a5b      	lsrs	r3, r3, #9
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d201      	bcs.n	8007cc2 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8007cbe:	230d      	movs	r3, #13
 8007cc0:	e09e      	b.n	8007e00 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cc8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	2280      	movs	r2, #128	; 0x80
 8007cdc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d177      	bne.n	8007dd8 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	b21a      	sxth	r2, r3
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cf8:	b21b      	sxth	r3, r3
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	b21b      	sxth	r3, r3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d16a      	bne.n	8007dd8 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d04:	3301      	adds	r3, #1
 8007d06:	4619      	mov	r1, r3
 8007d08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d0a:	f7fe fcd0 	bl	80066ae <move_window>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d161      	bne.n	8007dd8 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	b21a      	sxth	r2, r3
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007d2c:	b21b      	sxth	r3, r3
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	b21b      	sxth	r3, r3
 8007d32:	4a35      	ldr	r2, [pc, #212]	; (8007e08 <find_volume+0x584>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d14f      	bne.n	8007dd8 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	78db      	ldrb	r3, [r3, #3]
 8007d3c:	061a      	lsls	r2, r3, #24
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	789b      	ldrb	r3, [r3, #2]
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	4313      	orrs	r3, r2
 8007d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d48:	7852      	ldrb	r2, [r2, #1]
 8007d4a:	0212      	lsls	r2, r2, #8
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d50:	7812      	ldrb	r2, [r2, #0]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	4a2d      	ldr	r2, [pc, #180]	; (8007e0c <find_volume+0x588>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d13e      	bne.n	8007dd8 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007d60:	061a      	lsls	r2, r3, #24
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007d68:	041b      	lsls	r3, r3, #16
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d6e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007d72:	0212      	lsls	r2, r2, #8
 8007d74:	4313      	orrs	r3, r2
 8007d76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d78:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	4a24      	ldr	r2, [pc, #144]	; (8007e10 <find_volume+0x58c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d129      	bne.n	8007dd8 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007d8a:	061a      	lsls	r2, r3, #24
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	4313      	orrs	r3, r2
 8007d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d98:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007d9c:	0212      	lsls	r2, r2, #8
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007da2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007da6:	431a      	orrs	r2, r3
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007db4:	061a      	lsls	r2, r3, #24
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007dc6:	0212      	lsls	r2, r2, #8
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dcc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007dde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <find_volume+0x590>)
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	3301      	adds	r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <find_volume+0x590>)
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <find_volume+0x590>)
 8007df0:	881a      	ldrh	r2, [r3, #0]
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007df8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007dfa:	f7fe fbe5 	bl	80065c8 <clear_lock>
#endif

	return FR_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3758      	adds	r7, #88	; 0x58
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	ffffaa55 	.word	0xffffaa55
 8007e0c:	41615252 	.word	0x41615252
 8007e10:	61417272 	.word	0x61417272
 8007e14:	20000218 	.word	0x20000218

08007e18 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d022      	beq.n	8007e70 <validate+0x58>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01d      	beq.n	8007e70 <validate+0x58>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d016      	beq.n	8007e70 <validate+0x58>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e48:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d10c      	bne.n	8007e70 <validate+0x58>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e5c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fe f90b 	bl	800607c <disk_status>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007e70:	2309      	movs	r3, #9
 8007e72:	e000      	b.n	8007e76 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007e92:	f107 0310 	add.w	r3, r7, #16
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fc46 	bl	8007728 <get_ldnumber>
 8007e9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	da01      	bge.n	8007ea8 <f_mount+0x28>
 8007ea4:	230b      	movs	r3, #11
 8007ea6:	e02d      	b.n	8007f04 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ea8:	4a18      	ldr	r2, [pc, #96]	; (8007f0c <f_mount+0x8c>)
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007eb8:	69b8      	ldr	r0, [r7, #24]
 8007eba:	f7fe fb85 	bl	80065c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	490d      	ldr	r1, [pc, #52]	; (8007f0c <f_mount+0x8c>)
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <f_mount+0x6a>
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d001      	beq.n	8007eee <f_mount+0x6e>
 8007eea:	2300      	movs	r3, #0
 8007eec:	e00a      	b.n	8007f04 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007eee:	f107 0108 	add.w	r1, r7, #8
 8007ef2:	f107 030c 	add.w	r3, r7, #12
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff fcc3 	bl	8007884 <find_volume>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3720      	adds	r7, #32
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000214 	.word	0x20000214

08007f10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	f107 030c 	add.w	r3, r7, #12
 8007f1c:	6018      	str	r0, [r3, #0]
 8007f1e:	f107 0308 	add.w	r3, r7, #8
 8007f22:	6019      	str	r1, [r3, #0]
 8007f24:	1dfb      	adds	r3, r7, #7
 8007f26:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007f28:	f107 030c 	add.w	r3, r7, #12
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <f_open+0x26>
 8007f32:	2309      	movs	r3, #9
 8007f34:	e1f2      	b.n	800831c <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 8007f36:	f107 030c 	add.w	r3, r7, #12
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007f42:	1dfb      	adds	r3, r7, #7
 8007f44:	1dfa      	adds	r2, r7, #7
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	f002 021f 	and.w	r2, r2, #31
 8007f4c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007f4e:	1dfb      	adds	r3, r7, #7
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f023 0301 	bic.w	r3, r3, #1
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	f107 0108 	add.w	r1, r7, #8
 8007f5c:	f107 0320 	add.w	r3, r7, #32
 8007f60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff fc8d 	bl	8007884 <find_volume>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007f70:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f040 81cf 	bne.w	8008318 <f_open+0x408>
		INIT_BUF(dj);
 8007f7a:	f107 0320 	add.w	r3, r7, #32
 8007f7e:	f107 0214 	add.w	r2, r7, #20
 8007f82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	f107 0320 	add.w	r3, r7, #32
 8007f90:	4611      	mov	r1, r2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff fb5a 	bl	800764c <follow_path>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8007f9e:	f107 0320 	add.w	r3, r7, #32
 8007fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fa6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007faa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d11a      	bne.n	8007fe8 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8007fb2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d103      	bne.n	8007fc2 <f_open+0xb2>
				res = FR_INVALID_NAME;
 8007fba:	2306      	movs	r3, #6
 8007fbc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007fc0:	e012      	b.n	8007fe8 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fc2:	1dfb      	adds	r3, r7, #7
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f023 0301 	bic.w	r3, r3, #1
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bf14      	ite	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	2300      	moveq	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f107 0320 	add.w	r3, r7, #32
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe f965 	bl	80062ac <chk_lock>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007fe8:	1dfb      	adds	r3, r7, #7
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f003 031c 	and.w	r3, r3, #28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 80cc 	beq.w	800818e <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8007ff6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01f      	beq.n	800803e <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007ffe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008002:	2b04      	cmp	r3, #4
 8008004:	d10e      	bne.n	8008024 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008006:	f7fe f9bf 	bl	8006388 <enq_lock>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d006      	beq.n	800801e <f_open+0x10e>
 8008010:	f107 0320 	add.w	r3, r7, #32
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff f9ae 	bl	8007376 <dir_register>
 800801a:	4603      	mov	r3, r0
 800801c:	e000      	b.n	8008020 <f_open+0x110>
 800801e:	2312      	movs	r3, #18
 8008020:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008024:	1dfb      	adds	r3, r7, #7
 8008026:	1dfa      	adds	r2, r7, #7
 8008028:	7812      	ldrb	r2, [r2, #0]
 800802a:	f042 0208 	orr.w	r2, r2, #8
 800802e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8008030:	f107 0320 	add.w	r3, r7, #32
 8008034:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008038:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800803c:	e014      	b.n	8008068 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800803e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008042:	330b      	adds	r3, #11
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	f003 0311 	and.w	r3, r3, #17
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <f_open+0x146>
					res = FR_DENIED;
 800804e:	2307      	movs	r3, #7
 8008050:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008054:	e008      	b.n	8008068 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008056:	1dfb      	adds	r3, r7, #7
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <f_open+0x158>
						res = FR_EXIST;
 8008062:	2308      	movs	r3, #8
 8008064:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008068:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800806c:	2b00      	cmp	r3, #0
 800806e:	f040 80af 	bne.w	80081d0 <f_open+0x2c0>
 8008072:	1dfb      	adds	r3, r7, #7
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 80a8 	beq.w	80081d0 <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8008080:	f001 f8f6 	bl	8009270 <get_fattime>
 8008084:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008088:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800808c:	330e      	adds	r3, #14
 800808e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800809a:	b29b      	uxth	r3, r3
 800809c:	0a1b      	lsrs	r3, r3, #8
 800809e:	b29a      	uxth	r2, r3
 80080a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080a4:	330f      	adds	r3, #15
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]
 80080aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80080ae:	0c1a      	lsrs	r2, r3, #16
 80080b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080b4:	3310      	adds	r3, #16
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80080be:	0e1a      	lsrs	r2, r3, #24
 80080c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080c4:	3311      	adds	r3, #17
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80080ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080ce:	330b      	adds	r3, #11
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80080d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080d8:	331c      	adds	r3, #28
 80080da:	2200      	movs	r2, #0
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080e2:	331d      	adds	r3, #29
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080ec:	331e      	adds	r3, #30
 80080ee:	2200      	movs	r2, #0
 80080f0:	701a      	strb	r2, [r3, #0]
 80080f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80080f6:	331f      	adds	r3, #31
 80080f8:	2200      	movs	r2, #0
 80080fa:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80080fc:	f107 0320 	add.w	r3, r7, #32
 8008100:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008104:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff f890 	bl	800722e <ld_clust>
 800810e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8008112:	2100      	movs	r1, #0
 8008114:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8008118:	f7ff f8b7 	bl	800728a <st_clust>
				dj.fs->wflag = 1;
 800811c:	f107 0320 	add.w	r3, r7, #32
 8008120:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800812a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800812e:	2b00      	cmp	r3, #0
 8008130:	d04e      	beq.n	80081d0 <f_open+0x2c0>
					dw = dj.fs->winsect;
 8008132:	f107 0320 	add.w	r3, r7, #32
 8008136:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800813a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800813e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8008142:	f107 0320 	add.w	r3, r7, #32
 8008146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800814a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fd6c 	bl	8006c2c <remove_chain>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800815a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800815e:	2b00      	cmp	r3, #0
 8008160:	d136      	bne.n	80081d0 <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008162:	f107 0320 	add.w	r3, r7, #32
 8008166:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800816a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800816e:	3a01      	subs	r2, #1
 8008170:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8008174:	f107 0320 	add.w	r3, r7, #32
 8008178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800817c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fa94 	bl	80066ae <move_window>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800818c:	e020      	b.n	80081d0 <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800818e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008192:	2b00      	cmp	r3, #0
 8008194:	d11c      	bne.n	80081d0 <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008196:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800819a:	330b      	adds	r3, #11
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	f003 0310 	and.w	r3, r3, #16
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <f_open+0x29e>
					res = FR_NO_FILE;
 80081a6:	2304      	movs	r3, #4
 80081a8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80081ac:	e010      	b.n	80081d0 <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80081ae:	1dfb      	adds	r3, r7, #7
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <f_open+0x2c0>
 80081ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80081be:	330b      	adds	r3, #11
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <f_open+0x2c0>
						res = FR_DENIED;
 80081ca:	2307      	movs	r3, #7
 80081cc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80081d0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d13d      	bne.n	8008254 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80081d8:	1dfb      	adds	r3, r7, #7
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <f_open+0x2e0>
				mode |= FA__WRITTEN;
 80081e4:	1dfb      	adds	r3, r7, #7
 80081e6:	1dfa      	adds	r2, r7, #7
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	f042 0220 	orr.w	r2, r2, #32
 80081ee:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80081f0:	f107 0320 	add.w	r3, r7, #32
 80081f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081f8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8008206:	f107 030c 	add.w	r3, r7, #12
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008210:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008214:	1dfb      	adds	r3, r7, #7
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	bf14      	ite	ne
 8008220:	2301      	movne	r3, #1
 8008222:	2300      	moveq	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	461a      	mov	r2, r3
 8008228:	f107 0320 	add.w	r3, r7, #32
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe f8ce 	bl	80063d0 <inc_lock>
 8008234:	4602      	mov	r2, r0
 8008236:	f107 030c 	add.w	r3, r7, #12
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <f_open+0x344>
 800824e:	2302      	movs	r3, #2
 8008250:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008254:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008258:	2b00      	cmp	r3, #0
 800825a:	d15d      	bne.n	8008318 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800825c:	f107 030c 	add.w	r3, r7, #12
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	1dfa      	adds	r2, r7, #7
 8008264:	7812      	ldrb	r2, [r2, #0]
 8008266:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800826a:	f107 030c 	add.w	r3, r7, #12
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008276:	f107 0320 	add.w	r3, r7, #32
 800827a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800827e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe ffd3 	bl	800722e <ld_clust>
 8008288:	4602      	mov	r2, r0
 800828a:	f107 030c 	add.w	r3, r7, #12
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008294:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008298:	331f      	adds	r3, #31
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	061a      	lsls	r2, r3, #24
 800829e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80082a2:	331e      	adds	r3, #30
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	041b      	lsls	r3, r3, #16
 80082a8:	4313      	orrs	r3, r2
 80082aa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80082ae:	321d      	adds	r2, #29
 80082b0:	7812      	ldrb	r2, [r2, #0]
 80082b2:	0212      	lsls	r2, r2, #8
 80082b4:	4313      	orrs	r3, r2
 80082b6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80082ba:	321c      	adds	r2, #28
 80082bc:	7812      	ldrb	r2, [r2, #0]
 80082be:	431a      	orrs	r2, r3
 80082c0:	f107 030c 	add.w	r3, r7, #12
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80082ca:	f107 030c 	add.w	r3, r7, #12
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2200      	movs	r2, #0
 80082de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80082e2:	f107 030c 	add.w	r3, r7, #12
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80082ee:	f107 0320 	add.w	r3, r7, #32
 80082f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80082f6:	f107 030c 	add.w	r3, r7, #12
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8008300:	f107 030c 	add.w	r3, r7, #12
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800830a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800830e:	f107 030c 	add.w	r3, r7, #12
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8008318:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800831c:	4618      	mov	r0, r3
 800831e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b08c      	sub	sp, #48	; 0x30
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff fd6a 	bl	8007e18 <validate>
 8008344:	4603      	mov	r3, r0
 8008346:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008348:	7ffb      	ldrb	r3, [r7, #31]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <f_read+0x2c>
 800834e:	7ffb      	ldrb	r3, [r7, #31]
 8008350:	e150      	b.n	80085f4 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8008362:	e147      	b.n	80085f4 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008372:	2307      	movs	r3, #7
 8008374:	e13e      	b.n	80085f4 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	429a      	cmp	r2, r3
 800838c:	f240 812d 	bls.w	80085ea <f_read+0x2c4>
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008394:	e129      	b.n	80085ea <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800839c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f040 80f2 	bne.w	800858a <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80083ac:	0a5b      	lsrs	r3, r3, #9
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083b6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	4013      	ands	r3, r2
 80083c0:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d139      	bne.n	800843c <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083da:	e018      	b.n	800840e <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d008      	beq.n	80083f8 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80083ec:	4619      	mov	r1, r3
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7fe fd13 	bl	8006e1a <clmt_clust>
 80083f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80083f6:	e00a      	b.n	800840e <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008404:	4619      	mov	r1, r3
 8008406:	4610      	mov	r0, r2
 8008408:	f7fe fa4e 	bl	80068a8 <get_fat>
 800840c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800840e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008410:	2b01      	cmp	r3, #1
 8008412:	d805      	bhi.n	8008420 <f_read+0xfa>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800841c:	2302      	movs	r3, #2
 800841e:	e0e9      	b.n	80085f4 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008426:	d105      	bne.n	8008434 <f_read+0x10e>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008430:	2301      	movs	r3, #1
 8008432:	e0df      	b.n	80085f4 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7fe fa0a 	bl	8006864 <clust2sect>
 8008450:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d105      	bne.n	8008464 <f_read+0x13e>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008460:	2302      	movs	r3, #2
 8008462:	e0c7      	b.n	80085f4 <f_read+0x2ce>
			sect += csect;
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	4413      	add	r3, r2
 800846a:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	0a5b      	lsrs	r3, r3, #9
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d046      	beq.n	8008506 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008478:	7dfa      	ldrb	r2, [r7, #23]
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	4413      	add	r3, r2
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008484:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008488:	4293      	cmp	r3, r2
 800848a:	d908      	bls.n	800849e <f_read+0x178>
					cc = fp->fs->csize - csect;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008492:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008496:	461a      	mov	r2, r3
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80084a4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	6a39      	ldr	r1, [r7, #32]
 80084ae:	f7fd fe25 	bl	80060fc <disk_read>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d005      	beq.n	80084c4 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80084c0:	2301      	movs	r3, #1
 80084c2:	e097      	b.n	80085f4 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d015      	beq.n	80084fe <f_read+0x1d8>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084de:	429a      	cmp	r2, r3
 80084e0:	d90d      	bls.n	80084fe <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	025b      	lsls	r3, r3, #9
 80084ee:	6a3a      	ldr	r2, [r7, #32]
 80084f0:	4413      	add	r3, r2
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fd fe5d 	bl	80061b8 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80084fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008500:	025b      	lsls	r3, r3, #9
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8008504:	e05b      	b.n	80085be <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	429a      	cmp	r2, r3
 8008510:	d037      	beq.n	8008582 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01d      	beq.n	800855c <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008526:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008532:	2301      	movs	r3, #1
 8008534:	f7fd fe02 	bl	800613c <disk_write>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008546:	2301      	movs	r3, #1
 8008548:	e054      	b.n	80085f4 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008554:	b2da      	uxtb	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008562:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	2301      	movs	r3, #1
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	f7fd fdc6 	bl	80060fc <disk_read>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800857e:	2301      	movs	r3, #1
 8008580:	e038      	b.n	80085f4 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008594:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008598:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800859a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d901      	bls.n	80085a6 <f_read+0x280>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80085ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085b6:	4619      	mov	r1, r3
 80085b8:	6a38      	ldr	r0, [r7, #32]
 80085ba:	f7fd fdfd 	bl	80061b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80085be:	6a3a      	ldr	r2, [r7, #32]
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	4413      	add	r3, r2
 80085c4:	623b      	str	r3, [r7, #32]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	441a      	add	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	441a      	add	r2, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f47f aed2 	bne.w	8008396 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3730      	adds	r7, #48	; 0x30
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff fc07 	bl	8007e18 <validate>
 800860a:	4603      	mov	r3, r0
 800860c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 80a8 	bne.w	8008766 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800861c:	f003 0320 	and.w	r3, r3, #32
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80a0 	beq.w	8008766 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b00      	cmp	r3, #0
 8008632:	d019      	beq.n	8008668 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800863a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008646:	2301      	movs	r3, #1
 8008648:	f7fd fd78 	bl	800613c <disk_write>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008652:	2301      	movs	r3, #1
 8008654:	e088      	b.n	8008768 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800865c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008660:	b2da      	uxtb	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f7fe f819 	bl	80066ae <move_window>
 800867c:	4603      	mov	r3, r0
 800867e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d16f      	bne.n	8008766 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800868c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	330b      	adds	r3, #11
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	330b      	adds	r3, #11
 8008698:	f042 0220 	orr.w	r2, r2, #32
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	331c      	adds	r3, #28
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	0a1b      	lsrs	r3, r3, #8
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	331d      	adds	r3, #29
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80086c8:	0c1a      	lsrs	r2, r3, #16
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	331e      	adds	r3, #30
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80086d8:	0e1a      	lsrs	r2, r3, #24
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	331f      	adds	r3, #31
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80086e8:	4619      	mov	r1, r3
 80086ea:	6938      	ldr	r0, [r7, #16]
 80086ec:	f7fe fdcd 	bl	800728a <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80086f0:	f000 fdbe 	bl	8009270 <get_fattime>
 80086f4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3316      	adds	r3, #22
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	b2d2      	uxtb	r2, r2
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	b29b      	uxth	r3, r3
 8008704:	0a1b      	lsrs	r3, r3, #8
 8008706:	b29a      	uxth	r2, r3
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	3317      	adds	r3, #23
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	0c1a      	lsrs	r2, r3, #16
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	3318      	adds	r3, #24
 8008718:	b2d2      	uxtb	r2, r2
 800871a:	701a      	strb	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	0e1a      	lsrs	r2, r3, #24
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3319      	adds	r3, #25
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	3312      	adds	r3, #18
 800872c:	2200      	movs	r2, #0
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	3313      	adds	r3, #19
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800873e:	f023 0320 	bic.w	r3, r3, #32
 8008742:	b2da      	uxtb	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800875c:	4618      	mov	r0, r3
 800875e:	f7fd ffd4 	bl	800670a <sync_fs>
 8008762:	4603      	mov	r3, r0
 8008764:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008766:	7dfb      	ldrb	r3, [r7, #23]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff ff3f 	bl	80085fc <f_sync>
 800877e:	4603      	mov	r3, r0
 8008780:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d116      	bne.n	80087b6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f7ff fb45 	bl	8007e18 <validate>
 800878e:	4603      	mov	r3, r0
 8008790:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10e      	bne.n	80087b6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd fece 	bl	8006540 <dec_lock>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d103      	bne.n	80087b6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b090      	sub	sp, #64	; 0x40
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fb24 	bl	8007e18 <validate>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80087d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <f_lseek+0x24>
 80087de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087e2:	e247      	b.n	8008c74 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80087f4:	e23e      	b.n	8008c74 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80f2 	beq.w	80089e6 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008808:	d164      	bne.n	80088d4 <f_lseek+0x114>
			tbl = fp->cltbl;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008810:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	1d1a      	adds	r2, r3, #4
 8008816:	627a      	str	r2, [r7, #36]	; 0x24
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	2302      	movs	r3, #2
 800881e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008826:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	2b00      	cmp	r3, #0
 800882c:	d041      	beq.n	80088b2 <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	2300      	movs	r3, #0
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	3302      	adds	r3, #2
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	3301      	adds	r3, #1
 8008844:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800884c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe f82a 	bl	80068a8 <get_fat>
 8008854:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	2b01      	cmp	r3, #1
 800885a:	d805      	bhi.n	8008868 <f_lseek+0xa8>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008864:	2302      	movs	r3, #2
 8008866:	e205      	b.n	8008c74 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800886e:	d105      	bne.n	800887c <f_lseek+0xbc>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008878:	2301      	movs	r3, #1
 800887a:	e1fb      	b.n	8008c74 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008882:	429a      	cmp	r2, r3
 8008884:	d0da      	beq.n	800883c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	429a      	cmp	r2, r3
 800888c:	d809      	bhi.n	80088a2 <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	1d1a      	adds	r2, r3, #4
 8008892:	627a      	str	r2, [r7, #36]	; 0x24
 8008894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	1d1a      	adds	r2, r3, #4
 800889c:	627a      	str	r2, [r7, #36]	; 0x24
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80088a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d3bd      	bcc.n	800882e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80088b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80088bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d803      	bhi.n	80088cc <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	e1d1      	b.n	8008c70 <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80088cc:	2311      	movs	r3, #17
 80088ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80088d2:	e1cd      	b.n	8008c70 <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d903      	bls.n	80088e8 <f_lseek+0x128>
				ofs = fp->fsize;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80088e6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 81bc 	beq.w	8008c70 <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fe fa8b 	bl	8006e1a <clmt_clust>
 8008904:	4602      	mov	r2, r0
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008918:	4619      	mov	r1, r3
 800891a:	4610      	mov	r0, r2
 800891c:	f7fd ffa2 	bl	8006864 <clust2sect>
 8008920:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d105      	bne.n	8008934 <f_lseek+0x174>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2202      	movs	r2, #2
 800892c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008930:	2302      	movs	r3, #2
 8008932:	e19f      	b.n	8008c74 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	3b01      	subs	r3, #1
 8008938:	0a5b      	lsrs	r3, r3, #9
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008940:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008944:	3a01      	subs	r2, #1
 8008946:	4013      	ands	r3, r2
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	4413      	add	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8189 	beq.w	8008c70 <f_lseek+0x4b0>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	429a      	cmp	r2, r3
 8008968:	f000 8182 	beq.w	8008c70 <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01d      	beq.n	80089b6 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008980:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800898c:	2301      	movs	r3, #1
 800898e:	f7fd fbd5 	bl	800613c <disk_write>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80089a0:	2301      	movs	r3, #1
 80089a2:	e167      	b.n	8008c74 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80089aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089bc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	2301      	movs	r3, #1
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	f7fd fb99 	bl	80060fc <disk_read>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80089d8:	2301      	movs	r3, #1
 80089da:	e14b      	b.n	8008c74 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80089e4:	e144      	b.n	8008c70 <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d90a      	bls.n	8008a08 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80089f8:	f003 0302 	and.w	r3, r3, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d103      	bne.n	8008a08 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008a06:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008a0e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	637b      	str	r3, [r7, #52]	; 0x34
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 80c6 	beq.w	8008bb0 <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a2a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008a2e:	025b      	lsls	r3, r3, #9
 8008a30:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01e      	beq.n	8008a76 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1e5a      	subs	r2, r3, #1
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a42:	6a3b      	ldr	r3, [r7, #32]
 8008a44:	1e59      	subs	r1, r3, #1
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d312      	bcc.n	8008a76 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	1e5a      	subs	r2, r3, #1
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	425b      	negs	r3, r3
 8008a58:	401a      	ands	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a74:	e029      	b.n	8008aca <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a7c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d11e      	bne.n	8008ac2 <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe f927 	bl	8006ce0 <create_chain>
 8008a92:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d105      	bne.n	8008aa6 <f_lseek+0x2e6>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e0e6      	b.n	8008c74 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aac:	d105      	bne.n	8008aba <f_lseek+0x2fa>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e0dc      	b.n	8008c74 <f_lseek+0x4b4>
					fp->sclust = clst;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008abe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ac6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d06f      	beq.n	8008bb0 <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8008ad0:	e047      	b.n	8008b62 <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00d      	beq.n	8008afc <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe f8f9 	bl	8006ce0 <create_chain>
 8008aee:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <f_lseek+0x34c>
							ofs = bcs; break;
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	e036      	b.n	8008b6a <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fd fecf 	bl	80068a8 <get_fat>
 8008b0a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b12:	d105      	bne.n	8008b20 <f_lseek+0x360>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e0a9      	b.n	8008c74 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d907      	bls.n	8008b36 <f_lseek+0x376>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d305      	bcc.n	8008b42 <f_lseek+0x382>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2202      	movs	r2, #2
 8008b3a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e098      	b.n	8008c74 <f_lseek+0x4b4>
					fp->clust = clst;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	441a      	add	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8008b5a:	683a      	ldr	r2, [r7, #0]
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d8b3      	bhi.n	8008ad2 <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	441a      	add	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d015      	beq.n	8008bb0 <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008b8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fd fe69 	bl	8006864 <clust2sect>
 8008b92:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <f_lseek+0x3e6>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e066      	b.n	8008c74 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	0a5b      	lsrs	r3, r3, #9
 8008baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bac:	4413      	add	r3, r2
 8008bae:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d041      	beq.n	8008c42 <f_lseek+0x482>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d03b      	beq.n	8008c42 <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d01d      	beq.n	8008c14 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008bde:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008bea:	2301      	movs	r3, #1
 8008bec:	f7fd faa6 	bl	800613c <disk_write>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e038      	b.n	8008c74 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c1a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	2301      	movs	r3, #1
 8008c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c24:	f7fd fa6a 	bl	80060fc <disk_read>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008c36:	2301      	movs	r3, #1
 8008c38:	e01c      	b.n	8008c74 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d90e      	bls.n	8008c70 <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008c64:	f043 0320 	orr.w	r3, r3, #32
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3740      	adds	r7, #64	; 0x40
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	1d3b      	adds	r3, r7, #4
 8008c86:	6018      	str	r0, [r3, #0]
 8008c88:	463b      	mov	r3, r7
 8008c8a:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 8008c8c:	1d39      	adds	r1, r7, #4
 8008c8e:	f107 0314 	add.w	r3, r7, #20
 8008c92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008c96:	2200      	movs	r2, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe fdf3 	bl	8007884 <find_volume>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 8008ca4:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d129      	bne.n	8008d00 <f_stat+0x84>
		INIT_BUF(dj);
 8008cac:	f107 0314 	add.w	r3, r7, #20
 8008cb0:	f107 0208 	add.w	r2, r7, #8
 8008cb4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	f107 0314 	add.w	r3, r7, #20
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe fcc2 	bl	800764c <follow_path>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 8008cce:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d114      	bne.n	8008d00 <f_stat+0x84>
			if (dj.dir) {		/* Found an object */
 8008cd6:	f107 0314 	add.w	r3, r7, #20
 8008cda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00b      	beq.n	8008cfa <f_stat+0x7e>
				if (fno) get_fileinfo(&dj, fno);
 8008ce2:	463b      	mov	r3, r7
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <f_stat+0x84>
 8008cea:	463b      	mov	r3, r7
 8008cec:	f107 0214 	add.w	r2, r7, #20
 8008cf0:	6819      	ldr	r1, [r3, #0]
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f7fe fb78 	bl	80073e8 <get_fileinfo>
 8008cf8:	e002      	b.n	8008d00 <f_stat+0x84>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 8008cfa:	2306      	movs	r3, #6
 8008cfc:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8008d00:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	f507 770e 	add.w	r7, r7, #568	; 0x238
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008d26:	4b1f      	ldr	r3, [pc, #124]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d28:	7a5b      	ldrb	r3, [r3, #9]
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d831      	bhi.n	8008d94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d30:	4b1c      	ldr	r3, [pc, #112]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d32:	7a5b      	ldrb	r3, [r3, #9]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	4b1a      	ldr	r3, [pc, #104]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008d3e:	4b19      	ldr	r3, [pc, #100]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d40:	7a5b      	ldrb	r3, [r3, #9]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	4a17      	ldr	r2, [pc, #92]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008d4e:	4b15      	ldr	r3, [pc, #84]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d50:	7a5b      	ldrb	r3, [r3, #9]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	461a      	mov	r2, r3
 8008d56:	4b13      	ldr	r3, [pc, #76]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d58:	4413      	add	r3, r2
 8008d5a:	79fa      	ldrb	r2, [r7, #7]
 8008d5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d5e:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d60:	7a5b      	ldrb	r3, [r3, #9]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	b2d1      	uxtb	r1, r2
 8008d68:	4a0e      	ldr	r2, [pc, #56]	; (8008da4 <FATFS_LinkDriverEx+0x94>)
 8008d6a:	7251      	strb	r1, [r2, #9]
 8008d6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d6e:	7dbb      	ldrb	r3, [r7, #22]
 8008d70:	3330      	adds	r3, #48	; 0x30
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	223a      	movs	r2, #58	; 0x3a
 8008d7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	3302      	adds	r3, #2
 8008d84:	222f      	movs	r2, #47	; 0x2f
 8008d86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	3303      	adds	r3, #3
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d90:	2300      	movs	r3, #0
 8008d92:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20000234 	.word	0x20000234

08008da8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008db2:	2200      	movs	r2, #0
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff ffaa 	bl	8008d10 <FATFS_LinkDriverEx>
 8008dbc:	4603      	mov	r3, r0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

uint8_t Mount_SD (const TCHAR* path)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	4808      	ldr	r0, [pc, #32]	; (8008df8 <Mount_SD+0x30>)
 8008dd6:	f7ff f853 	bl	8007e80 <f_mount>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4b07      	ldr	r3, [pc, #28]	; (8008dfc <Mount_SD+0x34>)
 8008de0:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8008de2:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <Mount_SD+0x34>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <Mount_SD+0x26>
		return 1;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <Mount_SD+0x28>
	return 0;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	200002a8 	.word	0x200002a8
 8008dfc:	200004e8 	.word	0x200004e8

08008e00 <Unmount_SD>:

uint8_t Unmount_SD (const TCHAR* path)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8008e08:	2201      	movs	r2, #1
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	f7ff f837 	bl	8007e80 <f_mount>
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <Unmount_SD+0x24>)
 8008e18:	701a      	strb	r2, [r3, #0]
}
 8008e1a:	bf00      	nop
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	200004e8 	.word	0x200004e8

08008e28 <open_file>:
	    	}
	    }
	    return fresult;
}

FRESULT open_file(char *name){
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
	if((fresult = f_stat (name, &fno)) == FR_OK){
 8008e30:	4910      	ldr	r1, [pc, #64]	; (8008e74 <open_file+0x4c>)
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff ff22 	bl	8008c7c <f_stat>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	4b0e      	ldr	r3, [pc, #56]	; (8008e78 <open_file+0x50>)
 8008e3e:	701a      	strb	r2, [r3, #0]
 8008e40:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <open_file+0x50>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10f      	bne.n	8008e68 <open_file+0x40>
		if((fresult = f_open(&fil, name, FA_READ)) == FR_OK){
 8008e48:	2201      	movs	r2, #1
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	480b      	ldr	r0, [pc, #44]	; (8008e7c <open_file+0x54>)
 8008e4e:	f7ff f85f 	bl	8007f10 <f_open>
 8008e52:	4603      	mov	r3, r0
 8008e54:	461a      	mov	r2, r3
 8008e56:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <open_file+0x50>)
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <open_file+0x50>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <open_file+0x40>
			open = 1;
 8008e62:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <open_file+0x58>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	701a      	strb	r2, [r3, #0]
		}
	}
	return fresult;
 8008e68:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <open_file+0x50>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000290 	.word	0x20000290
 8008e78:	200004e8 	.word	0x200004e8
 8008e7c:	200004f0 	.word	0x200004f0
 8008e80:	20000240 	.word	0x20000240

08008e84 <close_file>:

FRESULT close_file(){
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
	if(open){
 8008e88:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <close_file+0x30>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00d      	beq.n	8008eac <close_file+0x28>
		if((fresult = f_close(&fil)) == FR_OK){
 8008e90:	4809      	ldr	r0, [pc, #36]	; (8008eb8 <close_file+0x34>)
 8008e92:	f7ff fc6d 	bl	8008770 <f_close>
 8008e96:	4603      	mov	r3, r0
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4b08      	ldr	r3, [pc, #32]	; (8008ebc <close_file+0x38>)
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <close_file+0x38>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d102      	bne.n	8008eac <close_file+0x28>
			open = 0;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <close_file+0x30>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	701a      	strb	r2, [r3, #0]
		}
	}
	return fresult;
 8008eac:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <close_file+0x38>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000240 	.word	0x20000240
 8008eb8:	200004f0 	.word	0x200004f0
 8008ebc:	200004e8 	.word	0x200004e8

08008ec0 <Read_config_File>:

FRESULT Read_config_File (char *name, char* buffer, uint8_t buffer_size, uint32_t offset)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	71fb      	strb	r3, [r7, #7]
	if(open){
 8008ed0:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <Read_config_File+0x5c>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00e      	beq.n	8008ef6 <Read_config_File+0x36>
		f_lseek(&fil, offset);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	4811      	ldr	r0, [pc, #68]	; (8008f20 <Read_config_File+0x60>)
 8008edc:	f7ff fc70 	bl	80087c0 <f_lseek>
		fresult = f_read (&fil, buffer, buffer_size, &br);
 8008ee0:	79fa      	ldrb	r2, [r7, #7]
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <Read_config_File+0x64>)
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	480e      	ldr	r0, [pc, #56]	; (8008f20 <Read_config_File+0x60>)
 8008ee8:	f7ff fa1d 	bl	8008326 <f_read>
 8008eec:	4603      	mov	r3, r0
 8008eee:	461a      	mov	r2, r3
 8008ef0:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <Read_config_File+0x68>)
 8008ef2:	701a      	strb	r2, [r3, #0]
 8008ef4:	e00c      	b.n	8008f10 <Read_config_File+0x50>
	}else{
		open_file(name);
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	f7ff ff96 	bl	8008e28 <open_file>
		fresult = f_read (&fil, buffer, buffer_size, &br);
 8008efc:	79fa      	ldrb	r2, [r7, #7]
 8008efe:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <Read_config_File+0x64>)
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	4807      	ldr	r0, [pc, #28]	; (8008f20 <Read_config_File+0x60>)
 8008f04:	f7ff fa0f 	bl	8008326 <f_read>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <Read_config_File+0x68>)
 8008f0e:	701a      	strb	r2, [r3, #0]
	}
	return fresult;
 8008f10:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <Read_config_File+0x68>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000240 	.word	0x20000240
 8008f20:	200004f0 	.word	0x200004f0
 8008f24:	200004d8 	.word	0x200004d8
 8008f28:	200004e8 	.word	0x200004e8

08008f2c <DHT_Delay>:


/********************* NO CHANGES AFTER THIS *************************************/

void DHT_Delay (uint16_t time)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(DHT_TIMER, 0);
 8008f36:	4b08      	ldr	r3, [pc, #32]	; (8008f58 <DHT_Delay+0x2c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(DHT_TIMER))<time);
 8008f3e:	bf00      	nop
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <DHT_Delay+0x2c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d3f9      	bcc.n	8008f40 <DHT_Delay+0x14>
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	20000d7c 	.word	0x20000d7c

08008f5c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f68:	f107 030c 	add.w	r3, r7, #12
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	605a      	str	r2, [r3, #4]
 8008f72:	609a      	str	r2, [r3, #8]
 8008f74:	60da      	str	r2, [r3, #12]
 8008f76:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8008f78:	887b      	ldrh	r3, [r7, #2]
 8008f7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f80:	2303      	movs	r3, #3
 8008f82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8008f88:	f107 030c 	add.w	r3, r7, #12
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7f9 f8ba 	bl	8002108 <HAL_GPIO_Init>
}
 8008f94:	bf00      	nop
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fa8:	f107 030c 	add.w	r3, r7, #12
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	609a      	str	r2, [r3, #8]
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8008fb8:	887b      	ldrh	r3, [r7, #2]
 8008fba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8008fc4:	f107 030c 	add.w	r3, r7, #12
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7f9 f89c 	bl	8002108 <HAL_GPIO_Init>
}
 8008fd0:	bf00      	nop
 8008fd2:	3720      	adds	r7, #32
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <DHT_Start>:

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM;

void DHT_Start (uint8_t DHT)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8008fe2:	2120      	movs	r1, #32
 8008fe4:	4811      	ldr	r0, [pc, #68]	; (800902c <DHT_Start+0x54>)
 8008fe6:	f7ff ffb9 	bl	8008f5c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8008fea:	2200      	movs	r2, #0
 8008fec:	2120      	movs	r1, #32
 8008fee:	480f      	ldr	r0, [pc, #60]	; (800902c <DHT_Start+0x54>)
 8008ff0:	f7f9 fa14 	bl	800241c <HAL_GPIO_WritePin>
	if(DHT == 22){
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	2b16      	cmp	r3, #22
 8008ff8:	d104      	bne.n	8009004 <DHT_Start+0x2c>
		DHT_Delay (1300);   // wait for >1ms
 8008ffa:	f240 5014 	movw	r0, #1300	; 0x514
 8008ffe:	f7ff ff95 	bl	8008f2c <DHT_Delay>
 8009002:	e003      	b.n	800900c <DHT_Start+0x34>
	}else{
		DHT_Delay (18000);   // wait for 18ms
 8009004:	f244 6050 	movw	r0, #18000	; 0x4650
 8009008:	f7ff ff90 	bl	8008f2c <DHT_Delay>
	}

    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800900c:	2201      	movs	r2, #1
 800900e:	2120      	movs	r1, #32
 8009010:	4806      	ldr	r0, [pc, #24]	; (800902c <DHT_Start+0x54>)
 8009012:	f7f9 fa03 	bl	800241c <HAL_GPIO_WritePin>
    DHT_Delay (20);   // wait for 30us
 8009016:	2014      	movs	r0, #20
 8009018:	f7ff ff88 	bl	8008f2c <DHT_Delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 800901c:	2120      	movs	r1, #32
 800901e:	4803      	ldr	r0, [pc, #12]	; (800902c <DHT_Start+0x54>)
 8009020:	f7ff ffbc 	bl	8008f9c <Set_Pin_Input>
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	48000400 	.word	0x48000400

08009030 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	71fb      	strb	r3, [r7, #7]
	DHT_Delay (40);
 800903a:	2028      	movs	r0, #40	; 0x28
 800903c:	f7ff ff76 	bl	8008f2c <DHT_Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8009040:	2120      	movs	r1, #32
 8009042:	4812      	ldr	r0, [pc, #72]	; (800908c <DHT_Check_Response+0x5c>)
 8009044:	f7f9 f9d2 	bl	80023ec <HAL_GPIO_ReadPin>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10f      	bne.n	800906e <DHT_Check_Response+0x3e>
	{
		DHT_Delay (80);
 800904e:	2050      	movs	r0, #80	; 0x50
 8009050:	f7ff ff6c 	bl	8008f2c <DHT_Delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8009054:	2120      	movs	r1, #32
 8009056:	480d      	ldr	r0, [pc, #52]	; (800908c <DHT_Check_Response+0x5c>)
 8009058:	f7f9 f9c8 	bl	80023ec <HAL_GPIO_ReadPin>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <DHT_Check_Response+0x38>
 8009062:	2301      	movs	r3, #1
 8009064:	71fb      	strb	r3, [r7, #7]
 8009066:	e004      	b.n	8009072 <DHT_Check_Response+0x42>
		else Response = 0;
 8009068:	2300      	movs	r3, #0
 800906a:	71fb      	strb	r3, [r7, #7]
 800906c:	e001      	b.n	8009072 <DHT_Check_Response+0x42>
	}else{
		return 0;
 800906e:	2300      	movs	r3, #0
 8009070:	e008      	b.n	8009084 <DHT_Check_Response+0x54>
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8009072:	bf00      	nop
 8009074:	2120      	movs	r1, #32
 8009076:	4805      	ldr	r0, [pc, #20]	; (800908c <DHT_Check_Response+0x5c>)
 8009078:	f7f9 f9b8 	bl	80023ec <HAL_GPIO_ReadPin>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1f8      	bne.n	8009074 <DHT_Check_Response+0x44>

	return Response;
 8009082:	79fb      	ldrb	r3, [r7, #7]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3708      	adds	r7, #8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	48000400 	.word	0x48000400

08009090 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8009096:	2300      	movs	r3, #0
 8009098:	71bb      	strb	r3, [r7, #6]
 800909a:	e037      	b.n	800910c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 800909c:	bf00      	nop
 800909e:	2120      	movs	r1, #32
 80090a0:	481e      	ldr	r0, [pc, #120]	; (800911c <DHT_Read+0x8c>)
 80090a2:	f7f9 f9a3 	bl	80023ec <HAL_GPIO_ReadPin>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0f8      	beq.n	800909e <DHT_Read+0xe>
		DHT_Delay (40);   // wait for 40 us
 80090ac:	2028      	movs	r0, #40	; 0x28
 80090ae:	f7ff ff3d 	bl	8008f2c <DHT_Delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80090b2:	2120      	movs	r1, #32
 80090b4:	4819      	ldr	r0, [pc, #100]	; (800911c <DHT_Read+0x8c>)
 80090b6:	f7f9 f999 	bl	80023ec <HAL_GPIO_ReadPin>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10e      	bne.n	80090de <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80090c0:	79bb      	ldrb	r3, [r7, #6]
 80090c2:	f1c3 0307 	rsb	r3, r3, #7
 80090c6:	2201      	movs	r2, #1
 80090c8:	fa02 f303 	lsl.w	r3, r2, r3
 80090cc:	b25b      	sxtb	r3, r3
 80090ce:	43db      	mvns	r3, r3
 80090d0:	b25a      	sxtb	r2, r3
 80090d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d6:	4013      	ands	r3, r2
 80090d8:	b25b      	sxtb	r3, r3
 80090da:	71fb      	strb	r3, [r7, #7]
 80090dc:	e00b      	b.n	80090f6 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80090de:	79bb      	ldrb	r3, [r7, #6]
 80090e0:	f1c3 0307 	rsb	r3, r3, #7
 80090e4:	2201      	movs	r2, #1
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	b25a      	sxtb	r2, r3
 80090ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	b25b      	sxtb	r3, r3
 80090f4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80090f6:	bf00      	nop
 80090f8:	2120      	movs	r1, #32
 80090fa:	4808      	ldr	r0, [pc, #32]	; (800911c <DHT_Read+0x8c>)
 80090fc:	f7f9 f976 	bl	80023ec <HAL_GPIO_ReadPin>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1f8      	bne.n	80090f8 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8009106:	79bb      	ldrb	r3, [r7, #6]
 8009108:	3301      	adds	r3, #1
 800910a:	71bb      	strb	r3, [r7, #6]
 800910c:	79bb      	ldrb	r3, [r7, #6]
 800910e:	2b07      	cmp	r3, #7
 8009110:	d9c4      	bls.n	800909c <DHT_Read+0xc>
	}
	return i;
 8009112:	79fb      	ldrb	r3, [r7, #7]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	48000400 	.word	0x48000400

08009120 <DHT_Get_Data>:

uint8_t DHT_Get_Data (float *Temperature, float *Humidity, uint8_t DHT)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	71fb      	strb	r3, [r7, #7]
	float TEMP, RH;
    DHT_Start (DHT);
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff ff51 	bl	8008fd8 <DHT_Start>
	if (DHT_Check_Response ())
 8009136:	f7ff ff7b 	bl	8009030 <DHT_Check_Response>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d073      	beq.n	8009228 <DHT_Get_Data+0x108>
	{
		Rh_byte1 = DHT_Read ();
 8009140:	f7ff ffa6 	bl	8009090 <DHT_Read>
 8009144:	4603      	mov	r3, r0
 8009146:	461a      	mov	r2, r3
 8009148:	4b3b      	ldr	r3, [pc, #236]	; (8009238 <DHT_Get_Data+0x118>)
 800914a:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT_Read ();
 800914c:	f7ff ffa0 	bl	8009090 <DHT_Read>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	4b39      	ldr	r3, [pc, #228]	; (800923c <DHT_Get_Data+0x11c>)
 8009156:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT_Read ();
 8009158:	f7ff ff9a 	bl	8009090 <DHT_Read>
 800915c:	4603      	mov	r3, r0
 800915e:	461a      	mov	r2, r3
 8009160:	4b37      	ldr	r3, [pc, #220]	; (8009240 <DHT_Get_Data+0x120>)
 8009162:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT_Read ();
 8009164:	f7ff ff94 	bl	8009090 <DHT_Read>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	4b35      	ldr	r3, [pc, #212]	; (8009244 <DHT_Get_Data+0x124>)
 800916e:	701a      	strb	r2, [r3, #0]
		SUM = DHT_Read();
 8009170:	f7ff ff8e 	bl	8009090 <DHT_Read>
 8009174:	4603      	mov	r3, r0
 8009176:	b29a      	uxth	r2, r3
 8009178:	4b33      	ldr	r3, [pc, #204]	; (8009248 <DHT_Get_Data+0x128>)
 800917a:	801a      	strh	r2, [r3, #0]
		if((DHT & 4) == 4){
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	2b00      	cmp	r3, #0
 8009184:	d026      	beq.n	80091d4 <DHT_Get_Data+0xb4>
			TEMP = (float)(((Temp_byte1<<8) | Temp_byte2)/10.0f);
 8009186:	4b2e      	ldr	r3, [pc, #184]	; (8009240 <DHT_Get_Data+0x120>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	021b      	lsls	r3, r3, #8
 800918c:	4a2d      	ldr	r2, [pc, #180]	; (8009244 <DHT_Get_Data+0x124>)
 800918e:	7812      	ldrb	r2, [r2, #0]
 8009190:	4313      	orrs	r3, r2
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800919a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800919e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091a2:	edc7 7a05 	vstr	s15, [r7, #20]
		    RH =  (float)(((Rh_byte1<<8) | Rh_byte2)/10.0f);
 80091a6:	4b24      	ldr	r3, [pc, #144]	; (8009238 <DHT_Get_Data+0x118>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	021b      	lsls	r3, r3, #8
 80091ac:	4a23      	ldr	r2, [pc, #140]	; (800923c <DHT_Get_Data+0x11c>)
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091ba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80091be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091c2:	edc7 7a04 	vstr	s15, [r7, #16]
		    *Temperature = TEMP;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	601a      	str	r2, [r3, #0]
		    *Humidity = RH;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	e02b      	b.n	800922c <DHT_Get_Data+0x10c>
		}else{
			if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80091d4:	4b1c      	ldr	r3, [pc, #112]	; (8009248 <DHT_Get_Data+0x128>)
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	4619      	mov	r1, r3
 80091da:	4b17      	ldr	r3, [pc, #92]	; (8009238 <DHT_Get_Data+0x118>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	461a      	mov	r2, r3
 80091e0:	4b16      	ldr	r3, [pc, #88]	; (800923c <DHT_Get_Data+0x11c>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	4413      	add	r3, r2
 80091e6:	4a16      	ldr	r2, [pc, #88]	; (8009240 <DHT_Get_Data+0x120>)
 80091e8:	7812      	ldrb	r2, [r2, #0]
 80091ea:	4413      	add	r3, r2
 80091ec:	4a15      	ldr	r2, [pc, #84]	; (8009244 <DHT_Get_Data+0x124>)
 80091ee:	7812      	ldrb	r2, [r2, #0]
 80091f0:	4413      	add	r3, r2
 80091f2:	4299      	cmp	r1, r3
 80091f4:	d116      	bne.n	8009224 <DHT_Get_Data+0x104>
			{
				TEMP = (float)Temp_byte1*1.0f;
 80091f6:	4b12      	ldr	r3, [pc, #72]	; (8009240 <DHT_Get_Data+0x120>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009202:	edc7 7a05 	vstr	s15, [r7, #20]
				RH =  (float)Rh_byte1*1.0f;
 8009206:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <DHT_Get_Data+0x118>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	edc7 7a04 	vstr	s15, [r7, #16]
			    *Temperature = TEMP;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	601a      	str	r2, [r3, #0]
			    *Humidity = RH;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	e003      	b.n	800922c <DHT_Get_Data+0x10c>
			}
			else return -1;
 8009224:	23ff      	movs	r3, #255	; 0xff
 8009226:	e002      	b.n	800922e <DHT_Get_Data+0x10e>
		}
	}
	else return -1;
 8009228:	23ff      	movs	r3, #255	; 0xff
 800922a:	e000      	b.n	800922e <DHT_Get_Data+0x10e>


    //*Temperature = (int *)TEMP;
	//*Humidity = (int *)RH;

    return 1;
 800922c:	2301      	movs	r3, #1
}
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	2000071c 	.word	0x2000071c
 800923c:	2000071e 	.word	0x2000071e
 8009240:	2000071d 	.word	0x2000071d
 8009244:	20000722 	.word	0x20000722
 8009248:	20000720 	.word	0x20000720

0800924c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009250:	4904      	ldr	r1, [pc, #16]	; (8009264 <MX_FATFS_Init+0x18>)
 8009252:	4805      	ldr	r0, [pc, #20]	; (8009268 <MX_FATFS_Init+0x1c>)
 8009254:	f7ff fda8 	bl	8008da8 <FATFS_LinkDriver>
 8009258:	4603      	mov	r3, r0
 800925a:	461a      	mov	r2, r3
 800925c:	4b03      	ldr	r3, [pc, #12]	; (800926c <MX_FATFS_Init+0x20>)
 800925e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009260:	bf00      	nop
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000724 	.word	0x20000724
 8009268:	20000014 	.word	0x20000014
 800926c:	20000728 	.word	0x20000728

08009270 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009274:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009276:	4618      	mov	r0, r3
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8009284:	2200      	movs	r2, #0
 8009286:	2102      	movs	r1, #2
 8009288:	4802      	ldr	r0, [pc, #8]	; (8009294 <SELECT+0x14>)
 800928a:	f7f9 f8c7 	bl	800241c <HAL_GPIO_WritePin>
}
 800928e:	bf00      	nop
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	48001400 	.word	0x48001400

08009298 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800929c:	2201      	movs	r2, #1
 800929e:	2102      	movs	r1, #2
 80092a0:	4802      	ldr	r0, [pc, #8]	; (80092ac <DESELECT+0x14>)
 80092a2:	f7f9 f8bb 	bl	800241c <HAL_GPIO_WritePin>
}
 80092a6:	bf00      	nop
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	48001400 	.word	0x48001400

080092b0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80092ba:	bf00      	nop
 80092bc:	4808      	ldr	r0, [pc, #32]	; (80092e0 <SPI_TxByte+0x30>)
 80092be:	f7fb fb4e 	bl	800495e <HAL_SPI_GetState>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d1f9      	bne.n	80092bc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80092c8:	1df9      	adds	r1, r7, #7
 80092ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092ce:	2201      	movs	r2, #1
 80092d0:	4803      	ldr	r0, [pc, #12]	; (80092e0 <SPI_TxByte+0x30>)
 80092d2:	f7fa ffcb 	bl	800426c <HAL_SPI_Transmit>
}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000d14 	.word	0x20000d14

080092e4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80092ea:	23ff      	movs	r3, #255	; 0xff
 80092ec:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80092f2:	bf00      	nop
 80092f4:	4809      	ldr	r0, [pc, #36]	; (800931c <SPI_RxByte+0x38>)
 80092f6:	f7fb fb32 	bl	800495e <HAL_SPI_GetState>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d1f9      	bne.n	80092f4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8009300:	1dba      	adds	r2, r7, #6
 8009302:	1df9      	adds	r1, r7, #7
 8009304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	2301      	movs	r3, #1
 800930c:	4803      	ldr	r0, [pc, #12]	; (800931c <SPI_RxByte+0x38>)
 800930e:	f7fb f913 	bl	8004538 <HAL_SPI_TransmitReceive>
  
  return data;
 8009312:	79bb      	ldrb	r3, [r7, #6]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000d14 	.word	0x20000d14

08009320 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8009328:	f7ff ffdc 	bl	80092e4 <SPI_RxByte>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	701a      	strb	r2, [r3, #0]
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8009342:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <SD_ReadyWait+0x34>)
 8009344:	2232      	movs	r2, #50	; 0x32
 8009346:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8009348:	f7ff ffcc 	bl	80092e4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800934c:	f7ff ffca 	bl	80092e4 <SPI_RxByte>
 8009350:	4603      	mov	r3, r0
 8009352:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	2bff      	cmp	r3, #255	; 0xff
 8009358:	d004      	beq.n	8009364 <SD_ReadyWait+0x28>
 800935a:	4b05      	ldr	r3, [pc, #20]	; (8009370 <SD_ReadyWait+0x34>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1f3      	bne.n	800934c <SD_ReadyWait+0x10>
  
  return res;
 8009364:	79fb      	ldrb	r3, [r7, #7]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20001630 	.word	0x20001630

08009374 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800937a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800937e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8009380:	f7ff ff8a 	bl	8009298 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8009384:	2300      	movs	r3, #0
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	e005      	b.n	8009396 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800938a:	20ff      	movs	r0, #255	; 0xff
 800938c:	f7ff ff90 	bl	80092b0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	3301      	adds	r3, #1
 8009394:	613b      	str	r3, [r7, #16]
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	2b09      	cmp	r3, #9
 800939a:	ddf6      	ble.n	800938a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800939c:	f7ff ff70 	bl	8009280 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80093a0:	2340      	movs	r3, #64	; 0x40
 80093a2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80093b4:	2395      	movs	r3, #149	; 0x95
 80093b6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	e009      	b.n	80093d2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80093be:	1d3a      	adds	r2, r7, #4
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7ff ff72 	bl	80092b0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b05      	cmp	r3, #5
 80093d6:	ddf2      	ble.n	80093be <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80093d8:	e002      	b.n	80093e0 <SD_PowerOn+0x6c>
  {
    Count--;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	3b01      	subs	r3, #1
 80093de:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80093e0:	f7ff ff80 	bl	80092e4 <SPI_RxByte>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d002      	beq.n	80093f0 <SD_PowerOn+0x7c>
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1f4      	bne.n	80093da <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80093f0:	f7ff ff52 	bl	8009298 <DESELECT>
  SPI_TxByte(0XFF);
 80093f4:	20ff      	movs	r0, #255	; 0xff
 80093f6:	f7ff ff5b 	bl	80092b0 <SPI_TxByte>
  
  PowerFlag = 1;
 80093fa:	4b03      	ldr	r3, [pc, #12]	; (8009408 <SD_PowerOn+0x94>)
 80093fc:	2201      	movs	r2, #1
 80093fe:	701a      	strb	r2, [r3, #0]
}
 8009400:	bf00      	nop
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000242 	.word	0x20000242

0800940c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8009410:	4b03      	ldr	r3, [pc, #12]	; (8009420 <SD_PowerOff+0x14>)
 8009412:	2200      	movs	r2, #0
 8009414:	701a      	strb	r2, [r3, #0]
}
 8009416:	bf00      	nop
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	20000242 	.word	0x20000242

08009424 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8009428:	4b03      	ldr	r3, [pc, #12]	; (8009438 <SD_CheckPower+0x14>)
 800942a:	781b      	ldrb	r3, [r3, #0]
}
 800942c:	4618      	mov	r0, r3
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000242 	.word	0x20000242

0800943c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8009446:	4b17      	ldr	r3, [pc, #92]	; (80094a4 <SD_RxDataBlock+0x68>)
 8009448:	220a      	movs	r2, #10
 800944a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800944c:	f7ff ff4a 	bl	80092e4 <SPI_RxByte>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	2bff      	cmp	r3, #255	; 0xff
 8009458:	d104      	bne.n	8009464 <SD_RxDataBlock+0x28>
 800945a:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <SD_RxDataBlock+0x68>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1f3      	bne.n	800944c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	2bfe      	cmp	r3, #254	; 0xfe
 8009468:	d001      	beq.n	800946e <SD_RxDataBlock+0x32>
    return FALSE;
 800946a:	2300      	movs	r3, #0
 800946c:	e016      	b.n	800949c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	4618      	mov	r0, r3
 8009476:	f7ff ff53 	bl	8009320 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	1c5a      	adds	r2, r3, #1
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff ff4d 	bl	8009320 <SPI_RxBytePtr>
  } while(btr -= 2);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	3b02      	subs	r3, #2
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1ed      	bne.n	800946e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8009492:	f7ff ff27 	bl	80092e4 <SPI_RxByte>
  SPI_RxByte();
 8009496:	f7ff ff25 	bl	80092e4 <SPI_RxByte>
  
  return TRUE;
 800949a:	2301      	movs	r3, #1
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20001631 	.word	0x20001631

080094a8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80094b8:	f7ff ff40 	bl	800933c <SD_ReadyWait>
 80094bc:	4603      	mov	r3, r0
 80094be:	2bff      	cmp	r3, #255	; 0xff
 80094c0:	d001      	beq.n	80094c6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e040      	b.n	8009548 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff fef1 	bl	80092b0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	2bfd      	cmp	r3, #253	; 0xfd
 80094d2:	d031      	beq.n	8009538 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	607a      	str	r2, [r7, #4]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff fee5 	bl	80092b0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	607a      	str	r2, [r7, #4]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff fede 	bl	80092b0 <SPI_TxByte>
    } while (--wc);
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	73bb      	strb	r3, [r7, #14]
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1eb      	bne.n	80094d8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8009500:	f7ff fef0 	bl	80092e4 <SPI_RxByte>
    SPI_RxByte();
 8009504:	f7ff feee 	bl	80092e4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8009508:	e00b      	b.n	8009522 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800950a:	f7ff feeb 	bl	80092e4 <SPI_RxByte>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	f003 031f 	and.w	r3, r3, #31
 8009518:	2b05      	cmp	r3, #5
 800951a:	d006      	beq.n	800952a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800951c:	7b7b      	ldrb	r3, [r7, #13]
 800951e:	3301      	adds	r3, #1
 8009520:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8009522:	7b7b      	ldrb	r3, [r7, #13]
 8009524:	2b40      	cmp	r3, #64	; 0x40
 8009526:	d9f0      	bls.n	800950a <SD_TxDataBlock+0x62>
 8009528:	e000      	b.n	800952c <SD_TxDataBlock+0x84>
        break;
 800952a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800952c:	bf00      	nop
 800952e:	f7ff fed9 	bl	80092e4 <SPI_RxByte>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d0fa      	beq.n	800952e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	f003 031f 	and.w	r3, r3, #31
 800953e:	2b05      	cmp	r3, #5
 8009540:	d101      	bne.n	8009546 <SD_TxDataBlock+0x9e>
    return TRUE;
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	6039      	str	r1, [r7, #0]
 800955a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800955c:	f7ff feee 	bl	800933c <SD_ReadyWait>
 8009560:	4603      	mov	r3, r0
 8009562:	2bff      	cmp	r3, #255	; 0xff
 8009564:	d001      	beq.n	800956a <SD_SendCmd+0x1a>
    return 0xFF;
 8009566:	23ff      	movs	r3, #255	; 0xff
 8009568:	e040      	b.n	80095ec <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	4618      	mov	r0, r3
 800956e:	f7ff fe9f 	bl	80092b0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	0e1b      	lsrs	r3, r3, #24
 8009576:	b2db      	uxtb	r3, r3
 8009578:	4618      	mov	r0, r3
 800957a:	f7ff fe99 	bl	80092b0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	0c1b      	lsrs	r3, r3, #16
 8009582:	b2db      	uxtb	r3, r3
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff fe93 	bl	80092b0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	0a1b      	lsrs	r3, r3, #8
 800958e:	b2db      	uxtb	r3, r3
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff fe8d 	bl	80092b0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff fe88 	bl	80092b0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	2b40      	cmp	r3, #64	; 0x40
 80095a8:	d101      	bne.n	80095ae <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80095aa:	2395      	movs	r3, #149	; 0x95
 80095ac:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80095ae:	79fb      	ldrb	r3, [r7, #7]
 80095b0:	2b48      	cmp	r3, #72	; 0x48
 80095b2:	d101      	bne.n	80095b8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80095b4:	2387      	movs	r3, #135	; 0x87
 80095b6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff fe78 	bl	80092b0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b4c      	cmp	r3, #76	; 0x4c
 80095c4:	d101      	bne.n	80095ca <SD_SendCmd+0x7a>
    SPI_RxByte();
 80095c6:	f7ff fe8d 	bl	80092e4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80095ca:	230a      	movs	r3, #10
 80095cc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80095ce:	f7ff fe89 	bl	80092e4 <SPI_RxByte>
 80095d2:	4603      	mov	r3, r0
 80095d4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80095d6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	da05      	bge.n	80095ea <SD_SendCmd+0x9a>
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	73bb      	strb	r3, [r7, #14]
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1f1      	bne.n	80095ce <SD_SendCmd+0x7e>
  
  return res;
 80095ea:	7b7b      	ldrb	r3, [r7, #13]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80095f4:	b590      	push	{r4, r7, lr}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8009604:	2301      	movs	r3, #1
 8009606:	e0d5      	b.n	80097b4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8009608:	4b6c      	ldr	r3, [pc, #432]	; (80097bc <SD_disk_initialize+0x1c8>)
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	b2db      	uxtb	r3, r3
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <SD_disk_initialize+0x2a>
    return Stat;        
 8009616:	4b69      	ldr	r3, [pc, #420]	; (80097bc <SD_disk_initialize+0x1c8>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	e0ca      	b.n	80097b4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800961e:	f7ff fea9 	bl	8009374 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8009622:	f7ff fe2d 	bl	8009280 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8009626:	2300      	movs	r3, #0
 8009628:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800962a:	2100      	movs	r1, #0
 800962c:	2040      	movs	r0, #64	; 0x40
 800962e:	f7ff ff8f 	bl	8009550 <SD_SendCmd>
 8009632:	4603      	mov	r3, r0
 8009634:	2b01      	cmp	r3, #1
 8009636:	f040 80a5 	bne.w	8009784 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800963a:	4b61      	ldr	r3, [pc, #388]	; (80097c0 <SD_disk_initialize+0x1cc>)
 800963c:	2264      	movs	r2, #100	; 0x64
 800963e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8009640:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009644:	2048      	movs	r0, #72	; 0x48
 8009646:	f7ff ff83 	bl	8009550 <SD_SendCmd>
 800964a:	4603      	mov	r3, r0
 800964c:	2b01      	cmp	r3, #1
 800964e:	d158      	bne.n	8009702 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
 8009654:	e00c      	b.n	8009670 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8009656:	7bfc      	ldrb	r4, [r7, #15]
 8009658:	f7ff fe44 	bl	80092e4 <SPI_RxByte>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	f107 0310 	add.w	r3, r7, #16
 8009664:	4423      	add	r3, r4
 8009666:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	3301      	adds	r3, #1
 800966e:	73fb      	strb	r3, [r7, #15]
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	2b03      	cmp	r3, #3
 8009674:	d9ef      	bls.n	8009656 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8009676:	7abb      	ldrb	r3, [r7, #10]
 8009678:	2b01      	cmp	r3, #1
 800967a:	f040 8083 	bne.w	8009784 <SD_disk_initialize+0x190>
 800967e:	7afb      	ldrb	r3, [r7, #11]
 8009680:	2baa      	cmp	r3, #170	; 0xaa
 8009682:	d17f      	bne.n	8009784 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8009684:	2100      	movs	r1, #0
 8009686:	2077      	movs	r0, #119	; 0x77
 8009688:	f7ff ff62 	bl	8009550 <SD_SendCmd>
 800968c:	4603      	mov	r3, r0
 800968e:	2b01      	cmp	r3, #1
 8009690:	d807      	bhi.n	80096a2 <SD_disk_initialize+0xae>
 8009692:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009696:	2069      	movs	r0, #105	; 0x69
 8009698:	f7ff ff5a 	bl	8009550 <SD_SendCmd>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80096a2:	4b47      	ldr	r3, [pc, #284]	; (80097c0 <SD_disk_initialize+0x1cc>)
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1eb      	bne.n	8009684 <SD_disk_initialize+0x90>
 80096ac:	e000      	b.n	80096b0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80096ae:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80096b0:	4b43      	ldr	r3, [pc, #268]	; (80097c0 <SD_disk_initialize+0x1cc>)
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d064      	beq.n	8009784 <SD_disk_initialize+0x190>
 80096ba:	2100      	movs	r1, #0
 80096bc:	207a      	movs	r0, #122	; 0x7a
 80096be:	f7ff ff47 	bl	8009550 <SD_SendCmd>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d15d      	bne.n	8009784 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80096c8:	2300      	movs	r3, #0
 80096ca:	73fb      	strb	r3, [r7, #15]
 80096cc:	e00c      	b.n	80096e8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80096ce:	7bfc      	ldrb	r4, [r7, #15]
 80096d0:	f7ff fe08 	bl	80092e4 <SPI_RxByte>
 80096d4:	4603      	mov	r3, r0
 80096d6:	461a      	mov	r2, r3
 80096d8:	f107 0310 	add.w	r3, r7, #16
 80096dc:	4423      	add	r3, r4
 80096de:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	3301      	adds	r3, #1
 80096e6:	73fb      	strb	r3, [r7, #15]
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d9ef      	bls.n	80096ce <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80096ee:	7a3b      	ldrb	r3, [r7, #8]
 80096f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <SD_disk_initialize+0x108>
 80096f8:	2306      	movs	r3, #6
 80096fa:	e000      	b.n	80096fe <SD_disk_initialize+0x10a>
 80096fc:	2302      	movs	r3, #2
 80096fe:	73bb      	strb	r3, [r7, #14]
 8009700:	e040      	b.n	8009784 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8009702:	2100      	movs	r1, #0
 8009704:	2077      	movs	r0, #119	; 0x77
 8009706:	f7ff ff23 	bl	8009550 <SD_SendCmd>
 800970a:	4603      	mov	r3, r0
 800970c:	2b01      	cmp	r3, #1
 800970e:	d808      	bhi.n	8009722 <SD_disk_initialize+0x12e>
 8009710:	2100      	movs	r1, #0
 8009712:	2069      	movs	r0, #105	; 0x69
 8009714:	f7ff ff1c 	bl	8009550 <SD_SendCmd>
 8009718:	4603      	mov	r3, r0
 800971a:	2b01      	cmp	r3, #1
 800971c:	d801      	bhi.n	8009722 <SD_disk_initialize+0x12e>
 800971e:	2302      	movs	r3, #2
 8009720:	e000      	b.n	8009724 <SD_disk_initialize+0x130>
 8009722:	2301      	movs	r3, #1
 8009724:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8009726:	7bbb      	ldrb	r3, [r7, #14]
 8009728:	2b02      	cmp	r3, #2
 800972a:	d10e      	bne.n	800974a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800972c:	2100      	movs	r1, #0
 800972e:	2077      	movs	r0, #119	; 0x77
 8009730:	f7ff ff0e 	bl	8009550 <SD_SendCmd>
 8009734:	4603      	mov	r3, r0
 8009736:	2b01      	cmp	r3, #1
 8009738:	d80e      	bhi.n	8009758 <SD_disk_initialize+0x164>
 800973a:	2100      	movs	r1, #0
 800973c:	2069      	movs	r0, #105	; 0x69
 800973e:	f7ff ff07 	bl	8009550 <SD_SendCmd>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d107      	bne.n	8009758 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8009748:	e00d      	b.n	8009766 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800974a:	2100      	movs	r1, #0
 800974c:	2041      	movs	r0, #65	; 0x41
 800974e:	f7ff feff 	bl	8009550 <SD_SendCmd>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8009758:	4b19      	ldr	r3, [pc, #100]	; (80097c0 <SD_disk_initialize+0x1cc>)
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e1      	bne.n	8009726 <SD_disk_initialize+0x132>
 8009762:	e000      	b.n	8009766 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8009764:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8009766:	4b16      	ldr	r3, [pc, #88]	; (80097c0 <SD_disk_initialize+0x1cc>)
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d007      	beq.n	8009780 <SD_disk_initialize+0x18c>
 8009770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009774:	2050      	movs	r0, #80	; 0x50
 8009776:	f7ff feeb 	bl	8009550 <SD_SendCmd>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8009780:	2300      	movs	r3, #0
 8009782:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8009784:	4a0f      	ldr	r2, [pc, #60]	; (80097c4 <SD_disk_initialize+0x1d0>)
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800978a:	f7ff fd85 	bl	8009298 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800978e:	f7ff fda9 	bl	80092e4 <SPI_RxByte>
  
  if (type) 
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d008      	beq.n	80097aa <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8009798:	4b08      	ldr	r3, [pc, #32]	; (80097bc <SD_disk_initialize+0x1c8>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f023 0301 	bic.w	r3, r3, #1
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	4b05      	ldr	r3, [pc, #20]	; (80097bc <SD_disk_initialize+0x1c8>)
 80097a6:	701a      	strb	r2, [r3, #0]
 80097a8:	e001      	b.n	80097ae <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80097aa:	f7ff fe2f 	bl	800940c <SD_PowerOff>
  }
  
  return Stat;
 80097ae:	4b03      	ldr	r3, [pc, #12]	; (80097bc <SD_disk_initialize+0x1c8>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b2db      	uxtb	r3, r3
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd90      	pop	{r4, r7, pc}
 80097bc:	20000005 	.word	0x20000005
 80097c0:	20001631 	.word	0x20001631
 80097c4:	20000241 	.word	0x20000241

080097c8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80097d2:	79fb      	ldrb	r3, [r7, #7]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d001      	beq.n	80097dc <SD_disk_status+0x14>
    return STA_NOINIT; 
 80097d8:	2301      	movs	r3, #1
 80097da:	e002      	b.n	80097e2 <SD_disk_status+0x1a>
  
  return Stat;
 80097dc:	4b04      	ldr	r3, [pc, #16]	; (80097f0 <SD_disk_status+0x28>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	b2db      	uxtb	r3, r3
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20000005 	.word	0x20000005

080097f4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	603b      	str	r3, [r7, #0]
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d102      	bne.n	8009810 <SD_disk_read+0x1c>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <SD_disk_read+0x20>
    return RES_PARERR;
 8009810:	2304      	movs	r3, #4
 8009812:	e051      	b.n	80098b8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8009814:	4b2a      	ldr	r3, [pc, #168]	; (80098c0 <SD_disk_read+0xcc>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d001      	beq.n	8009826 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8009822:	2303      	movs	r3, #3
 8009824:	e048      	b.n	80098b8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8009826:	4b27      	ldr	r3, [pc, #156]	; (80098c4 <SD_disk_read+0xd0>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	f003 0304 	and.w	r3, r3, #4
 800982e:	2b00      	cmp	r3, #0
 8009830:	d102      	bne.n	8009838 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	025b      	lsls	r3, r3, #9
 8009836:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8009838:	f7ff fd22 	bl	8009280 <SELECT>
  
  if (count == 1) 
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d111      	bne.n	8009866 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	2051      	movs	r0, #81	; 0x51
 8009846:	f7ff fe83 	bl	8009550 <SD_SendCmd>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d129      	bne.n	80098a4 <SD_disk_read+0xb0>
 8009850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009854:	68b8      	ldr	r0, [r7, #8]
 8009856:	f7ff fdf1 	bl	800943c <SD_RxDataBlock>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d021      	beq.n	80098a4 <SD_disk_read+0xb0>
      count = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	e01e      	b.n	80098a4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	2052      	movs	r0, #82	; 0x52
 800986a:	f7ff fe71 	bl	8009550 <SD_SendCmd>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d117      	bne.n	80098a4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8009874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f7ff fddf 	bl	800943c <SD_RxDataBlock>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00a      	beq.n	800989a <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800988a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	3b01      	subs	r3, #1
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1ed      	bne.n	8009874 <SD_disk_read+0x80>
 8009898:	e000      	b.n	800989c <SD_disk_read+0xa8>
          break;
 800989a:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 800989c:	2100      	movs	r1, #0
 800989e:	204c      	movs	r0, #76	; 0x4c
 80098a0:	f7ff fe56 	bl	8009550 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80098a4:	f7ff fcf8 	bl	8009298 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80098a8:	f7ff fd1c 	bl	80092e4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bf14      	ite	ne
 80098b2:	2301      	movne	r3, #1
 80098b4:	2300      	moveq	r3, #0
 80098b6:	b2db      	uxtb	r3, r3
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	20000005 	.word	0x20000005
 80098c4:	20000241 	.word	0x20000241

080098c8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d102      	bne.n	80098e4 <SD_disk_write+0x1c>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <SD_disk_write+0x20>
    return RES_PARERR;
 80098e4:	2304      	movs	r3, #4
 80098e6:	e06b      	b.n	80099c0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80098e8:	4b37      	ldr	r3, [pc, #220]	; (80099c8 <SD_disk_write+0x100>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <SD_disk_write+0x32>
    return RES_NOTRDY;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e062      	b.n	80099c0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80098fa:	4b33      	ldr	r3, [pc, #204]	; (80099c8 <SD_disk_write+0x100>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <SD_disk_write+0x44>
    return RES_WRPRT;
 8009908:	2302      	movs	r3, #2
 800990a:	e059      	b.n	80099c0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 800990c:	4b2f      	ldr	r3, [pc, #188]	; (80099cc <SD_disk_write+0x104>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	025b      	lsls	r3, r3, #9
 800991c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800991e:	f7ff fcaf 	bl	8009280 <SELECT>
  
  if (count == 1) 
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d110      	bne.n	800994a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8009928:	6879      	ldr	r1, [r7, #4]
 800992a:	2058      	movs	r0, #88	; 0x58
 800992c:	f7ff fe10 	bl	8009550 <SD_SendCmd>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d13a      	bne.n	80099ac <SD_disk_write+0xe4>
 8009936:	21fe      	movs	r1, #254	; 0xfe
 8009938:	68b8      	ldr	r0, [r7, #8]
 800993a:	f7ff fdb5 	bl	80094a8 <SD_TxDataBlock>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d033      	beq.n	80099ac <SD_disk_write+0xe4>
      count = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	e030      	b.n	80099ac <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800994a:	4b20      	ldr	r3, [pc, #128]	; (80099cc <SD_disk_write+0x104>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d007      	beq.n	8009966 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8009956:	2100      	movs	r1, #0
 8009958:	2077      	movs	r0, #119	; 0x77
 800995a:	f7ff fdf9 	bl	8009550 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	2057      	movs	r0, #87	; 0x57
 8009962:	f7ff fdf5 	bl	8009550 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8009966:	6879      	ldr	r1, [r7, #4]
 8009968:	2059      	movs	r0, #89	; 0x59
 800996a:	f7ff fdf1 	bl	8009550 <SD_SendCmd>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d11b      	bne.n	80099ac <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8009974:	21fc      	movs	r1, #252	; 0xfc
 8009976:	68b8      	ldr	r0, [r7, #8]
 8009978:	f7ff fd96 	bl	80094a8 <SD_TxDataBlock>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00a      	beq.n	8009998 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009988:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	3b01      	subs	r3, #1
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1ee      	bne.n	8009974 <SD_disk_write+0xac>
 8009996:	e000      	b.n	800999a <SD_disk_write+0xd2>
          break;
 8009998:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800999a:	21fd      	movs	r1, #253	; 0xfd
 800999c:	2000      	movs	r0, #0
 800999e:	f7ff fd83 	bl	80094a8 <SD_TxDataBlock>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <SD_disk_write+0xe4>
      {        
        count = 1;
 80099a8:	2301      	movs	r3, #1
 80099aa:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80099ac:	f7ff fc74 	bl	8009298 <DESELECT>
  SPI_RxByte();
 80099b0:	f7ff fc98 	bl	80092e4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	bf14      	ite	ne
 80099ba:	2301      	movne	r3, #1
 80099bc:	2300      	moveq	r3, #0
 80099be:	b2db      	uxtb	r3, r3
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	20000005 	.word	0x20000005
 80099cc:	20000241 	.word	0x20000241

080099d0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b08b      	sub	sp, #44	; 0x2c
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	603a      	str	r2, [r7, #0]
 80099da:	71fb      	strb	r3, [r7, #7]
 80099dc:	460b      	mov	r3, r1
 80099de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80099ea:	2304      	movs	r3, #4
 80099ec:	e117      	b.n	8009c1e <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80099f4:	79bb      	ldrb	r3, [r7, #6]
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	d126      	bne.n	8009a48 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d00e      	beq.n	8009a20 <SD_disk_ioctl+0x50>
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d012      	beq.n	8009a2c <SD_disk_ioctl+0x5c>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d11a      	bne.n	8009a40 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8009a0a:	f7ff fd0b 	bl	8009424 <SD_CheckPower>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8009a14:	f7ff fcfa 	bl	800940c <SD_PowerOff>
      res = RES_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009a1e:	e0fc      	b.n	8009c1a <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8009a20:	f7ff fca8 	bl	8009374 <SD_PowerOn>
      res = RES_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009a2a:	e0f6      	b.n	8009c1a <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	1c5c      	adds	r4, r3, #1
 8009a30:	f7ff fcf8 	bl	8009424 <SD_CheckPower>
 8009a34:	4603      	mov	r3, r0
 8009a36:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009a3e:	e0ec      	b.n	8009c1a <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8009a40:	2304      	movs	r3, #4
 8009a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a46:	e0e8      	b.n	8009c1a <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8009a48:	4b77      	ldr	r3, [pc, #476]	; (8009c28 <SD_disk_ioctl+0x258>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e0e1      	b.n	8009c1e <SD_disk_ioctl+0x24e>
    
    SELECT();
 8009a5a:	f7ff fc11 	bl	8009280 <SELECT>
    
    switch (ctrl) 
 8009a5e:	79bb      	ldrb	r3, [r7, #6]
 8009a60:	2b0d      	cmp	r3, #13
 8009a62:	f200 80cb 	bhi.w	8009bfc <SD_disk_ioctl+0x22c>
 8009a66:	a201      	add	r2, pc, #4	; (adr r2, 8009a6c <SD_disk_ioctl+0x9c>)
 8009a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6c:	08009b67 	.word	0x08009b67
 8009a70:	08009aa5 	.word	0x08009aa5
 8009a74:	08009b57 	.word	0x08009b57
 8009a78:	08009bfd 	.word	0x08009bfd
 8009a7c:	08009bfd 	.word	0x08009bfd
 8009a80:	08009bfd 	.word	0x08009bfd
 8009a84:	08009bfd 	.word	0x08009bfd
 8009a88:	08009bfd 	.word	0x08009bfd
 8009a8c:	08009bfd 	.word	0x08009bfd
 8009a90:	08009bfd 	.word	0x08009bfd
 8009a94:	08009bfd 	.word	0x08009bfd
 8009a98:	08009b79 	.word	0x08009b79
 8009a9c:	08009b9d 	.word	0x08009b9d
 8009aa0:	08009bc1 	.word	0x08009bc1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	2049      	movs	r0, #73	; 0x49
 8009aa8:	f7ff fd52 	bl	8009550 <SD_SendCmd>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f040 80a8 	bne.w	8009c04 <SD_disk_ioctl+0x234>
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	2110      	movs	r1, #16
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff fcbe 	bl	800943c <SD_RxDataBlock>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 809e 	beq.w	8009c04 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8009ac8:	7b3b      	ldrb	r3, [r7, #12]
 8009aca:	099b      	lsrs	r3, r3, #6
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d10e      	bne.n	8009af0 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8009ad2:	7d7b      	ldrb	r3, [r7, #21]
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	7d3b      	ldrb	r3, [r7, #20]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4413      	add	r3, r2
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8009ae6:	8bfb      	ldrh	r3, [r7, #30]
 8009ae8:	029a      	lsls	r2, r3, #10
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e02e      	b.n	8009b4e <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009af0:	7c7b      	ldrb	r3, [r7, #17]
 8009af2:	f003 030f 	and.w	r3, r3, #15
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	7dbb      	ldrb	r3, [r7, #22]
 8009afa:	09db      	lsrs	r3, r3, #7
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	4413      	add	r3, r2
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	7d7b      	ldrb	r3, [r7, #21]
 8009b04:	005b      	lsls	r3, r3, #1
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f003 0306 	and.w	r3, r3, #6
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	4413      	add	r3, r2
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	3302      	adds	r3, #2
 8009b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8009b18:	7d3b      	ldrb	r3, [r7, #20]
 8009b1a:	099b      	lsrs	r3, r3, #6
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	7cfb      	ldrb	r3, [r7, #19]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	4413      	add	r3, r2
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	7cbb      	ldrb	r3, [r7, #18]
 8009b2e:	029b      	lsls	r3, r3, #10
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	4413      	add	r3, r2
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8009b40:	8bfa      	ldrh	r2, [r7, #30]
 8009b42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b46:	3b09      	subs	r3, #9
 8009b48:	409a      	lsls	r2, r3
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8009b54:	e056      	b.n	8009c04 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b5c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009b64:	e055      	b.n	8009c12 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8009b66:	f7ff fbe9 	bl	800933c <SD_ReadyWait>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2bff      	cmp	r3, #255	; 0xff
 8009b6e:	d14b      	bne.n	8009c08 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009b76:	e047      	b.n	8009c08 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8009b78:	2100      	movs	r1, #0
 8009b7a:	2049      	movs	r0, #73	; 0x49
 8009b7c:	f7ff fce8 	bl	8009550 <SD_SendCmd>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d142      	bne.n	8009c0c <SD_disk_ioctl+0x23c>
 8009b86:	2110      	movs	r1, #16
 8009b88:	6a38      	ldr	r0, [r7, #32]
 8009b8a:	f7ff fc57 	bl	800943c <SD_RxDataBlock>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d03b      	beq.n	8009c0c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009b9a:	e037      	b.n	8009c0c <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	204a      	movs	r0, #74	; 0x4a
 8009ba0:	f7ff fcd6 	bl	8009550 <SD_SendCmd>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d132      	bne.n	8009c10 <SD_disk_ioctl+0x240>
 8009baa:	2110      	movs	r1, #16
 8009bac:	6a38      	ldr	r0, [r7, #32]
 8009bae:	f7ff fc45 	bl	800943c <SD_RxDataBlock>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d02b      	beq.n	8009c10 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8009bbe:	e027      	b.n	8009c10 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	207a      	movs	r0, #122	; 0x7a
 8009bc4:	f7ff fcc4 	bl	8009550 <SD_SendCmd>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d116      	bne.n	8009bfc <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009bd4:	e00b      	b.n	8009bee <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8009bd6:	6a3c      	ldr	r4, [r7, #32]
 8009bd8:	1c63      	adds	r3, r4, #1
 8009bda:	623b      	str	r3, [r7, #32]
 8009bdc:	f7ff fb82 	bl	80092e4 <SPI_RxByte>
 8009be0:	4603      	mov	r3, r0
 8009be2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8009be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009be8:	3301      	adds	r3, #1
 8009bea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d9ef      	bls.n	8009bd6 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c02:	e006      	b.n	8009c12 <SD_disk_ioctl+0x242>
      break;
 8009c04:	bf00      	nop
 8009c06:	e004      	b.n	8009c12 <SD_disk_ioctl+0x242>
      break;
 8009c08:	bf00      	nop
 8009c0a:	e002      	b.n	8009c12 <SD_disk_ioctl+0x242>
      break;
 8009c0c:	bf00      	nop
 8009c0e:	e000      	b.n	8009c12 <SD_disk_ioctl+0x242>
      break;
 8009c10:	bf00      	nop
    }
    
    DESELECT();
 8009c12:	f7ff fb41 	bl	8009298 <DESELECT>
    SPI_RxByte();
 8009c16:	f7ff fb65 	bl	80092e4 <SPI_RxByte>
  }
  
  return res;
 8009c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	372c      	adds	r7, #44	; 0x2c
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd90      	pop	{r4, r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000005 	.word	0x20000005

08009c2c <cardInit>:
struct Sensors{
	uint8_t value;	//1 -> na voljo je ESP8266, 2->DHT11, 4-> DHT22, 8-> Co2, 16 -> O2, 32 -> C2H4, 64 -> S1, 128 -> S2.
	uint8_t wifi_status; //0 ni povezave, 1 je povezava.
} sensor;

void cardInit(){
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
	char buff[1];
	if(Mount_SD("/") == 1){
 8009c32:	4835      	ldr	r0, [pc, #212]	; (8009d08 <cardInit+0xdc>)
 8009c34:	f7ff f8c8 	bl	8008dc8 <Mount_SD>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d15a      	bne.n	8009cf4 <cardInit+0xc8>

		uint8_t num = 0;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	71fb      	strb	r3, [r7, #7]
		uint8_t i = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	71bb      	strb	r3, [r7, #6]
		uint8_t zamik = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	717b      	strb	r3, [r7, #5]

		if(open_file("config") == 0){
 8009c4a:	4830      	ldr	r0, [pc, #192]	; (8009d0c <cardInit+0xe0>)
 8009c4c:	f7ff f8ec 	bl	8008e28 <open_file>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d14a      	bne.n	8009cec <cardInit+0xc0>
			while(Read_config_File("config", buff, 1, zamik) == 0){
 8009c56:	e03c      	b.n	8009cd2 <cardInit+0xa6>
				zamik++;
 8009c58:	797b      	ldrb	r3, [r7, #5]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	717b      	strb	r3, [r7, #5]
				if(buff[0] != ';'){
 8009c5e:	793b      	ldrb	r3, [r7, #4]
 8009c60:	2b3b      	cmp	r3, #59	; 0x3b
 8009c62:	d02e      	beq.n	8009cc2 <cardInit+0x96>
					switch(num){
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d833      	bhi.n	8009cd2 <cardInit+0xa6>
 8009c6a:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <cardInit+0x44>)
 8009c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c70:	08009c81 	.word	0x08009c81
 8009c74:	08009c91 	.word	0x08009c91
 8009c78:	08009ca1 	.word	0x08009ca1
 8009c7c:	08009cb1 	.word	0x08009cb1
						case 0:
							SSID[i++] = buff[0];
 8009c80:	79bb      	ldrb	r3, [r7, #6]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	71ba      	strb	r2, [r7, #6]
 8009c86:	461a      	mov	r2, r3
 8009c88:	7939      	ldrb	r1, [r7, #4]
 8009c8a:	4b21      	ldr	r3, [pc, #132]	; (8009d10 <cardInit+0xe4>)
 8009c8c:	5499      	strb	r1, [r3, r2]
							break;
 8009c8e:	e020      	b.n	8009cd2 <cardInit+0xa6>
						case 1:
							passwd[i++] = buff[0];
 8009c90:	79bb      	ldrb	r3, [r7, #6]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	71ba      	strb	r2, [r7, #6]
 8009c96:	461a      	mov	r2, r3
 8009c98:	7939      	ldrb	r1, [r7, #4]
 8009c9a:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <cardInit+0xe8>)
 8009c9c:	5499      	strb	r1, [r3, r2]
							break;
 8009c9e:	e018      	b.n	8009cd2 <cardInit+0xa6>
						case 2:
							Server[i++] = buff[0];
 8009ca0:	79bb      	ldrb	r3, [r7, #6]
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	71ba      	strb	r2, [r7, #6]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	7939      	ldrb	r1, [r7, #4]
 8009caa:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <cardInit+0xec>)
 8009cac:	5499      	strb	r1, [r3, r2]
							break;
 8009cae:	e010      	b.n	8009cd2 <cardInit+0xa6>
						case 3:
							Time[i++] = buff[0];
 8009cb0:	79bb      	ldrb	r3, [r7, #6]
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	71ba      	strb	r2, [r7, #6]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	7939      	ldrb	r1, [r7, #4]
 8009cba:	4b18      	ldr	r3, [pc, #96]	; (8009d1c <cardInit+0xf0>)
 8009cbc:	5499      	strb	r1, [r3, r2]
							break;
 8009cbe:	bf00      	nop
 8009cc0:	e007      	b.n	8009cd2 <cardInit+0xa6>
					}
				}else{
					num++;
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	71fb      	strb	r3, [r7, #7]
					i = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	71bb      	strb	r3, [r7, #6]
					if(num >= 4){
 8009ccc:	79fb      	ldrb	r3, [r7, #7]
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d809      	bhi.n	8009ce6 <cardInit+0xba>
			while(Read_config_File("config", buff, 1, zamik) == 0){
 8009cd2:	797b      	ldrb	r3, [r7, #5]
 8009cd4:	1d39      	adds	r1, r7, #4
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	480c      	ldr	r0, [pc, #48]	; (8009d0c <cardInit+0xe0>)
 8009cda:	f7ff f8f1 	bl	8008ec0 <Read_config_File>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0b9      	beq.n	8009c58 <cardInit+0x2c>
 8009ce4:	e000      	b.n	8009ce8 <cardInit+0xbc>
						break;
 8009ce6:	bf00      	nop
					}
				}
			}
			close_file();
 8009ce8:	f7ff f8cc 	bl	8008e84 <close_file>
		}
		//Format_SD();
		Unmount_SD("/");
 8009cec:	4806      	ldr	r0, [pc, #24]	; (8009d08 <cardInit+0xdc>)
 8009cee:	f7ff f887 	bl	8008e00 <Unmount_SD>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		for(;;){
			__NOP();
		}
	}
}
 8009cf2:	e006      	b.n	8009d02 <cardInit+0xd6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	2180      	movs	r1, #128	; 0x80
 8009cf8:	4809      	ldr	r0, [pc, #36]	; (8009d20 <cardInit+0xf4>)
 8009cfa:	f7f8 fb8f 	bl	800241c <HAL_GPIO_WritePin>
			__NOP();
 8009cfe:	bf00      	nop
 8009d00:	e7fd      	b.n	8009cfe <cardInit+0xd2>
}
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	0800d22c 	.word	0x0800d22c
 8009d0c:	0800d230 	.word	0x0800d230
 8009d10:	200015dc 	.word	0x200015dc
 8009d14:	20000dbc 	.word	0x20000dbc
 8009d18:	20000d04 	.word	0x20000d04
 8009d1c:	20000dd0 	.word	0x20000dd0
 8009d20:	48000400 	.word	0x48000400

08009d24 <alarmInit>:

void alarmInit(){
 8009d24:	b590      	push	{r4, r7, lr}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
	char minutes[2];
	int seconds;
	uint8_t j = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73fb      	strb	r3, [r7, #15]

	resetTime.Hours = 0;
 8009d2e:	4b42      	ldr	r3, [pc, #264]	; (8009e38 <alarmInit+0x114>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
	resetTime.Minutes = 0;
 8009d34:	4b40      	ldr	r3, [pc, #256]	; (8009e38 <alarmInit+0x114>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	705a      	strb	r2, [r3, #1]
	resetTime.Seconds = 0;
 8009d3a:	4b3f      	ldr	r3, [pc, #252]	; (8009e38 <alarmInit+0x114>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	709a      	strb	r2, [r3, #2]
	resetTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009d40:	4b3d      	ldr	r3, [pc, #244]	; (8009e38 <alarmInit+0x114>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	60da      	str	r2, [r3, #12]
	resetTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009d46:	4b3c      	ldr	r3, [pc, #240]	; (8009e38 <alarmInit+0x114>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	611a      	str	r2, [r3, #16]

	resetDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009d4c:	4b3b      	ldr	r3, [pc, #236]	; (8009e3c <alarmInit+0x118>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	701a      	strb	r2, [r3, #0]
	resetDate.Month = RTC_MONTH_JANUARY;
 8009d52:	4b3a      	ldr	r3, [pc, #232]	; (8009e3c <alarmInit+0x118>)
 8009d54:	2201      	movs	r2, #1
 8009d56:	705a      	strb	r2, [r3, #1]
	resetDate.Date = 1;
 8009d58:	4b38      	ldr	r3, [pc, #224]	; (8009e3c <alarmInit+0x118>)
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	709a      	strb	r2, [r3, #2]
	resetDate.Year = 0;
 8009d5e:	4b37      	ldr	r3, [pc, #220]	; (8009e3c <alarmInit+0x118>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	70da      	strb	r2, [r3, #3]

	seconds = (atoi(Time) * 60) + (atoi(Time) * 60)/5;
 8009d64:	4836      	ldr	r0, [pc, #216]	; (8009e40 <alarmInit+0x11c>)
 8009d66:	f001 f92a 	bl	800afbe <atoi>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	1a9b      	subs	r3, r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	461c      	mov	r4, r3
 8009d76:	4832      	ldr	r0, [pc, #200]	; (8009e40 <alarmInit+0x11c>)
 8009d78:	f001 f921 	bl	800afbe <atoi>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	4613      	mov	r3, r2
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	1a9b      	subs	r3, r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4a2f      	ldr	r2, [pc, #188]	; (8009e44 <alarmInit+0x120>)
 8009d88:	fb82 1203 	smull	r1, r2, r2, r3
 8009d8c:	1052      	asrs	r2, r2, #1
 8009d8e:	17db      	asrs	r3, r3, #31
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	4423      	add	r3, r4
 8009d94:	60bb      	str	r3, [r7, #8]

	sAlarm1.AlarmTime.Hours = seconds/3600;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	4a2b      	ldr	r2, [pc, #172]	; (8009e48 <alarmInit+0x124>)
 8009d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8009d9e:	441a      	add	r2, r3
 8009da0:	12d2      	asrs	r2, r2, #11
 8009da2:	17db      	asrs	r3, r3, #31
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	4b28      	ldr	r3, [pc, #160]	; (8009e4c <alarmInit+0x128>)
 8009daa:	701a      	strb	r2, [r3, #0]
	sAlarm1.AlarmTime.Minutes = (seconds - sAlarm1.AlarmTime.Hours*60*60)/60;
 8009dac:	4b27      	ldr	r3, [pc, #156]	; (8009e4c <alarmInit+0x128>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	4b27      	ldr	r3, [pc, #156]	; (8009e50 <alarmInit+0x12c>)
 8009db4:	fb03 f202 	mul.w	r2, r3, r2
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	4413      	add	r3, r2
 8009dbc:	4a25      	ldr	r2, [pc, #148]	; (8009e54 <alarmInit+0x130>)
 8009dbe:	fb82 1203 	smull	r1, r2, r2, r3
 8009dc2:	441a      	add	r2, r3
 8009dc4:	1152      	asrs	r2, r2, #5
 8009dc6:	17db      	asrs	r3, r3, #31
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	4b1f      	ldr	r3, [pc, #124]	; (8009e4c <alarmInit+0x128>)
 8009dce:	705a      	strb	r2, [r3, #1]
	sAlarm1.AlarmTime.Seconds = seconds - sAlarm1.AlarmTime.Hours*60*60 - sAlarm1.AlarmTime.Minutes*60;
 8009dd0:	4b1e      	ldr	r3, [pc, #120]	; (8009e4c <alarmInit+0x128>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	0112      	lsls	r2, r2, #4
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <alarmInit+0x128>)
 8009de0:	785b      	ldrb	r3, [r3, #1]
 8009de2:	4619      	mov	r1, r3
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	1acb      	subs	r3, r1, r3
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4413      	add	r3, r2
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	4413      	add	r3, r2
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	4b14      	ldr	r3, [pc, #80]	; (8009e4c <alarmInit+0x128>)
 8009dfa:	709a      	strb	r2, [r3, #2]
	sAlarm1.AlarmTime.SubSeconds = 0;
 8009dfc:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <alarmInit+0x128>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	605a      	str	r2, [r3, #4]
	sAlarm1.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009e02:	4b12      	ldr	r3, [pc, #72]	; (8009e4c <alarmInit+0x128>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	60da      	str	r2, [r3, #12]
	sAlarm1.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009e08:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <alarmInit+0x128>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	611a      	str	r2, [r3, #16]
	sAlarm1.AlarmMask = RTC_ALARMMASK_NONE;
 8009e0e:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <alarmInit+0x128>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	615a      	str	r2, [r3, #20]
	sAlarm1.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009e14:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <alarmInit+0x128>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	619a      	str	r2, [r3, #24]
	sAlarm1.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <alarmInit+0x128>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	61da      	str	r2, [r3, #28]
	sAlarm1.AlarmDateWeekDay = 1;
 8009e20:	4b0a      	ldr	r3, [pc, #40]	; (8009e4c <alarmInit+0x128>)
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2020 	strb.w	r2, [r3, #32]
	sAlarm1.Alarm = RTC_ALARM_A;
 8009e28:	4b08      	ldr	r3, [pc, #32]	; (8009e4c <alarmInit+0x128>)
 8009e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd90      	pop	{r4, r7, pc}
 8009e38:	20000b88 	.word	0x20000b88
 8009e3c:	20000d00 	.word	0x20000d00
 8009e40:	20000dd0 	.word	0x20000dd0
 8009e44:	66666667 	.word	0x66666667
 8009e48:	91a2b3c5 	.word	0x91a2b3c5
 8009e4c:	20000244 	.word	0x20000244
 8009e50:	fffff1f0 	.word	0xfffff1f0
 8009e54:	88888889 	.word	0x88888889

08009e58 <HAL_RTC_AlarmAEventCallback>:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		HAL_Delay(500);
	}
}

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	  //Branje senzorjev, ko bo možno.
	  branje=1;
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <HAL_RTC_AlarmAEventCallback+0x34>)
 8009e62:	2201      	movs	r2, #1
 8009e64:	601a      	str	r2, [r3, #0]
	  HAL_RTC_SetTime(hrtc,&resetTime,RTC_FORMAT_BIN);
 8009e66:	2200      	movs	r2, #0
 8009e68:	4909      	ldr	r1, [pc, #36]	; (8009e90 <HAL_RTC_AlarmAEventCallback+0x38>)
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7f9 fe15 	bl	8003a9a <HAL_RTC_SetTime>
	  HAL_RTC_SetDate(hrtc, &resetDate, RTC_FORMAT_BIN);
 8009e70:	2200      	movs	r2, #0
 8009e72:	4908      	ldr	r1, [pc, #32]	; (8009e94 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7f9 fecd 	bl	8003c14 <HAL_RTC_SetDate>
	  HAL_RTC_SetAlarm_IT(hrtc, &sAlarm1, RTC_FORMAT_BIN);
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	4906      	ldr	r1, [pc, #24]	; (8009e98 <HAL_RTC_AlarmAEventCallback+0x40>)
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7f9 ff70 	bl	8003d64 <HAL_RTC_SetAlarm_IT>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	2000026c 	.word	0x2000026c
 8009e90:	20000b88 	.word	0x20000b88
 8009e94:	20000d00 	.word	0x20000d00
 8009e98:	20000244 	.word	0x20000244

08009e9c <sendUART>:

void sendUART(char *text, uint16_t length, char *received, uint16_t rec_length, uint16_t delay){
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	607a      	str	r2, [r7, #4]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	817b      	strh	r3, [r7, #10]
 8009eac:	4613      	mov	r3, r2
 8009eae:	813b      	strh	r3, [r7, #8]
	  HAL_UART_Transmit(&huart1, text, length, delay);
 8009eb0:	8b3b      	ldrh	r3, [r7, #24]
 8009eb2:	897a      	ldrh	r2, [r7, #10]
 8009eb4:	68f9      	ldr	r1, [r7, #12]
 8009eb6:	4806      	ldr	r0, [pc, #24]	; (8009ed0 <sendUART+0x34>)
 8009eb8:	f7fb fae8 	bl	800548c <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, prejeto, rec_length, delay);
 8009ebc:	8b3b      	ldrh	r3, [r7, #24]
 8009ebe:	893a      	ldrh	r2, [r7, #8]
 8009ec0:	4904      	ldr	r1, [pc, #16]	; (8009ed4 <sendUART+0x38>)
 8009ec2:	4803      	ldr	r0, [pc, #12]	; (8009ed0 <sendUART+0x34>)
 8009ec4:	f7fb fb75 	bl	80055b2 <HAL_UART_Receive>
}
 8009ec8:	bf00      	nop
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20000bec 	.word	0x20000bec
 8009ed4:	20000ddc 	.word	0x20000ddc

08009ed8 <sendHTTP>:

void sendHTTP(char *addr, char *payload){
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b0bc      	sub	sp, #240	; 0xf0
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
	  char buff[200];
	  char buff2[20];
	  if(payload[0] != '\0')
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00d      	beq.n	8009f06 <sendHTTP+0x2e>
	  sprintf(buff,"POST %s HTTP/1.1\r\nHost: %s\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length:%d\r\n\r\n%s\r\n",addr,Server,strlen(payload),payload);
 8009eea:	6838      	ldr	r0, [r7, #0]
 8009eec:	f7f6 f970 	bl	80001d0 <strlen>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	f107 0020 	add.w	r0, r7, #32
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	9301      	str	r3, [sp, #4]
 8009efa:	9200      	str	r2, [sp, #0]
 8009efc:	4b2f      	ldr	r3, [pc, #188]	; (8009fbc <sendHTTP+0xe4>)
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	492f      	ldr	r1, [pc, #188]	; (8009fc0 <sendHTTP+0xe8>)
 8009f02:	f001 fcef 	bl	800b8e4 <siprintf>
	  sprintf(buff2,"AT+CIPSEND=%d\r\n",strlen(buff));
 8009f06:	f107 0320 	add.w	r3, r7, #32
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7f6 f960 	bl	80001d0 <strlen>
 8009f10:	4602      	mov	r2, r0
 8009f12:	f107 030c 	add.w	r3, r7, #12
 8009f16:	492b      	ldr	r1, [pc, #172]	; (8009fc4 <sendHTTP+0xec>)
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 fce3 	bl	800b8e4 <siprintf>
	  sprintf(payload,"AT+CIPSTART=\"TCP\",\"%s\",80\r\n",Server);
 8009f1e:	4a27      	ldr	r2, [pc, #156]	; (8009fbc <sendHTTP+0xe4>)
 8009f20:	4929      	ldr	r1, [pc, #164]	; (8009fc8 <sendHTTP+0xf0>)
 8009f22:	6838      	ldr	r0, [r7, #0]
 8009f24:	f001 fcde 	bl	800b8e4 <siprintf>
	  sendUART(payload, strlen(payload), prejeto, sizeof(prejeto), 1000);
 8009f28:	6838      	ldr	r0, [r7, #0]
 8009f2a:	f7f6 f951 	bl	80001d0 <strlen>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	b299      	uxth	r1, r3
 8009f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f3c:	4a23      	ldr	r2, [pc, #140]	; (8009fcc <sendHTTP+0xf4>)
 8009f3e:	6838      	ldr	r0, [r7, #0]
 8009f40:	f7ff ffac 	bl	8009e9c <sendUART>
	  HAL_Delay(1000);
 8009f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f48:	f7f6 fe64 	bl	8000c14 <HAL_Delay>
	  sendUART(buff2, strlen(buff2), prejeto, sizeof(prejeto), 1000);
 8009f4c:	f107 030c 	add.w	r3, r7, #12
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7f6 f93d 	bl	80001d0 <strlen>
 8009f56:	4603      	mov	r3, r0
 8009f58:	b299      	uxth	r1, r3
 8009f5a:	f107 000c 	add.w	r0, r7, #12
 8009f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f68:	4a18      	ldr	r2, [pc, #96]	; (8009fcc <sendHTTP+0xf4>)
 8009f6a:	f7ff ff97 	bl	8009e9c <sendUART>
	  HAL_Delay(1000);
 8009f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f72:	f7f6 fe4f 	bl	8000c14 <HAL_Delay>
	  sendUART(buff, strlen(buff), prejeto, sizeof(prejeto), 2000);
 8009f76:	f107 0320 	add.w	r3, r7, #32
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7f6 f928 	bl	80001d0 <strlen>
 8009f80:	4603      	mov	r3, r0
 8009f82:	b299      	uxth	r1, r3
 8009f84:	f107 0020 	add.w	r0, r7, #32
 8009f88:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f92:	4a0e      	ldr	r2, [pc, #56]	; (8009fcc <sendHTTP+0xf4>)
 8009f94:	f7ff ff82 	bl	8009e9c <sendUART>
	  HAL_Delay(1000);
 8009f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f9c:	f7f6 fe3a 	bl	8000c14 <HAL_Delay>
	  sendUART("AT+CIPCLOSE\r\n",13,prejeto, sizeof(prejeto),1000);
 8009fa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009faa:	4a08      	ldr	r2, [pc, #32]	; (8009fcc <sendHTTP+0xf4>)
 8009fac:	210d      	movs	r1, #13
 8009fae:	4808      	ldr	r0, [pc, #32]	; (8009fd0 <sendHTTP+0xf8>)
 8009fb0:	f7ff ff74 	bl	8009e9c <sendUART>
}
 8009fb4:	bf00      	nop
 8009fb6:	37e8      	adds	r7, #232	; 0xe8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20000d04 	.word	0x20000d04
 8009fc0:	0800d238 	.word	0x0800d238
 8009fc4:	0800d2a0 	.word	0x0800d2a0
 8009fc8:	0800d2b0 	.word	0x0800d2b0
 8009fcc:	20000ddc 	.word	0x20000ddc
 8009fd0:	0800d2cc 	.word	0x0800d2cc

08009fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd8:	b09e      	sub	sp, #120	; 0x78
 8009fda:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009fdc:	f7f6 fde4 	bl	8000ba8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009fe0:	f000 f9a6 	bl	800a330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009fe4:	f000 fbfa 	bl	800a7dc <MX_GPIO_Init>
  MX_DMA_Init();
 8009fe8:	f000 fbda 	bl	800a7a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8009fec:	f000 fba8 	bl	800a740 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8009ff0:	f000 fb58 	bl	800a6a4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8009ff4:	f000 fb18 	bl	800a628 <MX_SPI1_Init>
  MX_FATFS_Init();
 8009ff8:	f7ff f928 	bl	800924c <MX_FATFS_Init>
  MX_RTC_Init();
 8009ffc:	f000 fa88 	bl	800a510 <MX_RTC_Init>
  MX_ADC1_Init();
 800a000:	f000 f9f8 	bl	800a3f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800a004:	48b2      	ldr	r0, [pc, #712]	; (800a2d0 <main+0x2fc>)
 800a006:	f7fa fe01 	bl	8004c0c <HAL_TIM_Base_Start>

  DHT_Start (22);
 800a00a:	2016      	movs	r0, #22
 800a00c:	f7fe ffe4 	bl	8008fd8 <DHT_Start>
  if(DHT_Check_Response() != 1){
 800a010:	f7ff f80e 	bl	8009030 <DHT_Check_Response>
 800a014:	4603      	mov	r3, r0
 800a016:	2b01      	cmp	r3, #1
 800a018:	d00f      	beq.n	800a03a <main+0x66>
	  DHT_Start (11);
 800a01a:	200b      	movs	r0, #11
 800a01c:	f7fe ffdc 	bl	8008fd8 <DHT_Start>
	  if(DHT_Check_Response() == 1){
 800a020:	f7ff f806 	bl	8009030 <DHT_Check_Response>
 800a024:	4603      	mov	r3, r0
 800a026:	2b01      	cmp	r3, #1
 800a028:	d10e      	bne.n	800a048 <main+0x74>
		  sensor.value = (sensor.value | 2);
 800a02a:	4baa      	ldr	r3, [pc, #680]	; (800a2d4 <main+0x300>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	f043 0302 	orr.w	r3, r3, #2
 800a032:	b2da      	uxtb	r2, r3
 800a034:	4ba7      	ldr	r3, [pc, #668]	; (800a2d4 <main+0x300>)
 800a036:	701a      	strb	r2, [r3, #0]
 800a038:	e006      	b.n	800a048 <main+0x74>
	  }
  }else{
	  sensor.value = (sensor.value | 4);
 800a03a:	4ba6      	ldr	r3, [pc, #664]	; (800a2d4 <main+0x300>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	f043 0304 	orr.w	r3, r3, #4
 800a042:	b2da      	uxtb	r2, r3
 800a044:	4ba3      	ldr	r3, [pc, #652]	; (800a2d4 <main+0x300>)
 800a046:	701a      	strb	r2, [r3, #0]
  }


  cardInit();
 800a048:	f7ff fdf0 	bl	8009c2c <cardInit>

  alarmInit();
 800a04c:	f7ff fe6a 	bl	8009d24 <alarmInit>
  char payload[70];

  //Odziv senzorja
  sendUART("AT\r\n", 4, prejeto, sizeof(prejeto), 400);
 800a050:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a05a:	4a9f      	ldr	r2, [pc, #636]	; (800a2d8 <main+0x304>)
 800a05c:	2104      	movs	r1, #4
 800a05e:	489f      	ldr	r0, [pc, #636]	; (800a2dc <main+0x308>)
 800a060:	f7ff ff1c 	bl	8009e9c <sendUART>

  if(prejeto[6] == 'O' && prejeto[7] == 'K'){
 800a064:	4b9c      	ldr	r3, [pc, #624]	; (800a2d8 <main+0x304>)
 800a066:	799b      	ldrb	r3, [r3, #6]
 800a068:	2b4f      	cmp	r3, #79	; 0x4f
 800a06a:	f040 8087 	bne.w	800a17c <main+0x1a8>
 800a06e:	4b9a      	ldr	r3, [pc, #616]	; (800a2d8 <main+0x304>)
 800a070:	79db      	ldrb	r3, [r3, #7]
 800a072:	2b4b      	cmp	r3, #75	; 0x4b
 800a074:	f040 8082 	bne.w	800a17c <main+0x1a8>
	  //Če je esp8266 priključen pošljemo na bazo podatke.
	  sensor.value = (sensor.value | 1);
 800a078:	4b96      	ldr	r3, [pc, #600]	; (800a2d4 <main+0x300>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	f043 0301 	orr.w	r3, r3, #1
 800a080:	b2da      	uxtb	r2, r3
 800a082:	4b94      	ldr	r3, [pc, #592]	; (800a2d4 <main+0x300>)
 800a084:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(500);
 800a086:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a08a:	f7f6 fdc3 	bl	8000c14 <HAL_Delay>

	  sendUART("AT+CWMODE=1\r\n", 13, prejeto, sizeof(prejeto), 500);
 800a08e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a098:	4a8f      	ldr	r2, [pc, #572]	; (800a2d8 <main+0x304>)
 800a09a:	210d      	movs	r1, #13
 800a09c:	4890      	ldr	r0, [pc, #576]	; (800a2e0 <main+0x30c>)
 800a09e:	f7ff fefd 	bl	8009e9c <sendUART>
	  HAL_Delay(500);
 800a0a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a0a6:	f7f6 fdb5 	bl	8000c14 <HAL_Delay>

	  sprintf(payload,"AT+CWJAP=\"%s\",\"%s\"\r\n",SSID,passwd);
 800a0aa:	f107 0008 	add.w	r0, r7, #8
 800a0ae:	4b8d      	ldr	r3, [pc, #564]	; (800a2e4 <main+0x310>)
 800a0b0:	4a8d      	ldr	r2, [pc, #564]	; (800a2e8 <main+0x314>)
 800a0b2:	498e      	ldr	r1, [pc, #568]	; (800a2ec <main+0x318>)
 800a0b4:	f001 fc16 	bl	800b8e4 <siprintf>
	  sendUART(payload, strlen(payload), prejeto, sizeof(prejeto), 10000);
 800a0b8:	f107 0308 	add.w	r3, r7, #8
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7f6 f887 	bl	80001d0 <strlen>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	b299      	uxth	r1, r3
 800a0c6:	f107 0008 	add.w	r0, r7, #8
 800a0ca:	f242 7310 	movw	r3, #10000	; 0x2710
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0d4:	4a80      	ldr	r2, [pc, #512]	; (800a2d8 <main+0x304>)
 800a0d6:	f7ff fee1 	bl	8009e9c <sendUART>
	  int indeks = strlen(prejeto)-14;
 800a0da:	487f      	ldr	r0, [pc, #508]	; (800a2d8 <main+0x304>)
 800a0dc:	f7f6 f878 	bl	80001d0 <strlen>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	3b0e      	subs	r3, #14
 800a0e4:	653b      	str	r3, [r7, #80]	; 0x50
	  for(int i=0; i < strlen(prejeto); i++){
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0ea:	e018      	b.n	800a11e <main+0x14a>
		  if(prejeto[indeks] == 'G' && prejeto[indeks+1] == 'O' && prejeto[indeks+2] == 'T'){
 800a0ec:	4a7a      	ldr	r2, [pc, #488]	; (800a2d8 <main+0x304>)
 800a0ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f0:	4413      	add	r3, r2
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	2b47      	cmp	r3, #71	; 0x47
 800a0f6:	d10f      	bne.n	800a118 <main+0x144>
 800a0f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	4a76      	ldr	r2, [pc, #472]	; (800a2d8 <main+0x304>)
 800a0fe:	5cd3      	ldrb	r3, [r2, r3]
 800a100:	2b4f      	cmp	r3, #79	; 0x4f
 800a102:	d109      	bne.n	800a118 <main+0x144>
 800a104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a106:	3302      	adds	r3, #2
 800a108:	4a73      	ldr	r2, [pc, #460]	; (800a2d8 <main+0x304>)
 800a10a:	5cd3      	ldrb	r3, [r2, r3]
 800a10c:	2b54      	cmp	r3, #84	; 0x54
 800a10e:	d103      	bne.n	800a118 <main+0x144>
			  sensor.wifi_status = 1;
 800a110:	4b70      	ldr	r3, [pc, #448]	; (800a2d4 <main+0x300>)
 800a112:	2201      	movs	r2, #1
 800a114:	705a      	strb	r2, [r3, #1]
			  break;
 800a116:	e009      	b.n	800a12c <main+0x158>
	  for(int i=0; i < strlen(prejeto); i++){
 800a118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a11a:	3301      	adds	r3, #1
 800a11c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a11e:	486e      	ldr	r0, [pc, #440]	; (800a2d8 <main+0x304>)
 800a120:	f7f6 f856 	bl	80001d0 <strlen>
 800a124:	4602      	mov	r2, r0
 800a126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a128:	429a      	cmp	r2, r3
 800a12a:	d8df      	bhi.n	800a0ec <main+0x118>
		  }
	  }

	  HAL_Delay(500);
 800a12c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a130:	f7f6 fd70 	bl	8000c14 <HAL_Delay>
	  if(sensor.wifi_status == 1 && (sensor.value & 1) == 1){
 800a134:	4b67      	ldr	r3, [pc, #412]	; (800a2d4 <main+0x300>)
 800a136:	785b      	ldrb	r3, [r3, #1]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d114      	bne.n	800a166 <main+0x192>
 800a13c:	4b65      	ldr	r3, [pc, #404]	; (800a2d4 <main+0x300>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	f003 0301 	and.w	r3, r3, #1
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00e      	beq.n	800a166 <main+0x192>
		  sprintf(payload,"SerialNo=%s&sensors=%03d",SerialNo,sensor.value);
 800a148:	4b62      	ldr	r3, [pc, #392]	; (800a2d4 <main+0x300>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f107 0008 	add.w	r0, r7, #8
 800a150:	4a67      	ldr	r2, [pc, #412]	; (800a2f0 <main+0x31c>)
 800a152:	4968      	ldr	r1, [pc, #416]	; (800a2f4 <main+0x320>)
 800a154:	f001 fbc6 	bl	800b8e4 <siprintf>
		  sendHTTP("/register", payload);
 800a158:	f107 0308 	add.w	r3, r7, #8
 800a15c:	4619      	mov	r1, r3
 800a15e:	4866      	ldr	r0, [pc, #408]	; (800a2f8 <main+0x324>)
 800a160:	f7ff feba 	bl	8009ed8 <sendHTTP>
 800a164:	e00a      	b.n	800a17c <main+0x1a8>
	  }else if((sensor.value & 1) == 1){
 800a166:	4b5b      	ldr	r3, [pc, #364]	; (800a2d4 <main+0x300>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d004      	beq.n	800a17c <main+0x1a8>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800a172:	2201      	movs	r2, #1
 800a174:	2180      	movs	r1, #128	; 0x80
 800a176:	4861      	ldr	r0, [pc, #388]	; (800a2fc <main+0x328>)
 800a178:	f7f8 f950 	bl	800241c <HAL_GPIO_WritePin>
	  }
  }
  uint8_t aktiven = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  while(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK){
 800a182:	e005      	b.n	800a190 <main+0x1bc>
	  __NOP();
 800a184:	bf00      	nop
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800a186:	2201      	movs	r2, #1
 800a188:	2180      	movs	r1, #128	; 0x80
 800a18a:	485c      	ldr	r0, [pc, #368]	; (800a2fc <main+0x328>)
 800a18c:	f7f8 f946 	bl	800241c <HAL_GPIO_WritePin>
  while(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK){
 800a190:	2100      	movs	r1, #0
 800a192:	485b      	ldr	r0, [pc, #364]	; (800a300 <main+0x32c>)
 800a194:	f7f6 ffea 	bl	800116c <HAL_ADCEx_Calibration_Start>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1f2      	bne.n	800a184 <main+0x1b0>
  }
  HAL_Delay(200);
 800a19e:	20c8      	movs	r0, #200	; 0xc8
 800a1a0:	f7f6 fd38 	bl	8000c14 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2180      	movs	r1, #128	; 0x80
 800a1a8:	4854      	ldr	r0, [pc, #336]	; (800a2fc <main+0x328>)
 800a1aa:	f7f8 f937 	bl	800241c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(branje){
 800a1ae:	4b55      	ldr	r3, [pc, #340]	; (800a304 <main+0x330>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d046      	beq.n	800a244 <main+0x270>
		//Če je branje potem beri...
		HAL_ADC_Start_DMA(&hadc1, data, sizeof(data));
 800a1b6:	2206      	movs	r2, #6
 800a1b8:	4953      	ldr	r1, [pc, #332]	; (800a308 <main+0x334>)
 800a1ba:	4851      	ldr	r0, [pc, #324]	; (800a300 <main+0x32c>)
 800a1bc:	f7f6 fefc 	bl	8000fb8 <HAL_ADC_Start_DMA>
		DHT_Get_Data(&temp, &hum, sensor.value);
 800a1c0:	4b44      	ldr	r3, [pc, #272]	; (800a2d4 <main+0x300>)
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	4951      	ldr	r1, [pc, #324]	; (800a30c <main+0x338>)
 800a1c8:	4851      	ldr	r0, [pc, #324]	; (800a310 <main+0x33c>)
 800a1ca:	f7fe ffa9 	bl	8009120 <DHT_Get_Data>
		branje = 0;
 800a1ce:	4b4d      	ldr	r3, [pc, #308]	; (800a304 <main+0x330>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]
		HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm1, RTC_FORMAT_BIN);
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	494f      	ldr	r1, [pc, #316]	; (800a314 <main+0x340>)
 800a1d8:	484f      	ldr	r0, [pc, #316]	; (800a318 <main+0x344>)
 800a1da:	f7f9 fdc3 	bl	8003d64 <HAL_RTC_SetAlarm_IT>
		memset(payload,0,50);
 800a1de:	f107 0308 	add.w	r3, r7, #8
 800a1e2:	2232      	movs	r2, #50	; 0x32
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 ff18 	bl	800b01c <memset>
		sprintf(payload,"SerialNo=%s&S3=%d&S2=%d&S1=%d&RH=%5.2f&T=%5.2f",SerialNo,data[0],data[1],data[2],hum,temp);
 800a1ec:	4b46      	ldr	r3, [pc, #280]	; (800a308 <main+0x334>)
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	4698      	mov	r8, r3
 800a1f2:	4b45      	ldr	r3, [pc, #276]	; (800a308 <main+0x334>)
 800a1f4:	885b      	ldrh	r3, [r3, #2]
 800a1f6:	461e      	mov	r6, r3
 800a1f8:	4b43      	ldr	r3, [pc, #268]	; (800a308 <main+0x334>)
 800a1fa:	889b      	ldrh	r3, [r3, #4]
 800a1fc:	607b      	str	r3, [r7, #4]
 800a1fe:	4b43      	ldr	r3, [pc, #268]	; (800a30c <main+0x338>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4618      	mov	r0, r3
 800a204:	f7f6 f9a0 	bl	8000548 <__aeabi_f2d>
 800a208:	4604      	mov	r4, r0
 800a20a:	460d      	mov	r5, r1
 800a20c:	4b40      	ldr	r3, [pc, #256]	; (800a310 <main+0x33c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4618      	mov	r0, r3
 800a212:	f7f6 f999 	bl	8000548 <__aeabi_f2d>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	f107 0008 	add.w	r0, r7, #8
 800a21e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a222:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	9600      	str	r6, [sp, #0]
 800a22c:	4643      	mov	r3, r8
 800a22e:	4a30      	ldr	r2, [pc, #192]	; (800a2f0 <main+0x31c>)
 800a230:	493a      	ldr	r1, [pc, #232]	; (800a31c <main+0x348>)
 800a232:	f001 fb57 	bl	800b8e4 <siprintf>
		sendHTTP("/index",payload);
 800a236:	f107 0308 	add.w	r3, r7, #8
 800a23a:	4619      	mov	r1, r3
 800a23c:	4838      	ldr	r0, [pc, #224]	; (800a320 <main+0x34c>)
 800a23e:	f7ff fe4b 	bl	8009ed8 <sendHTTP>
 800a242:	e040      	b.n	800a2c6 <main+0x2f2>
	}else if(!aktiven){
 800a244:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d13c      	bne.n	800a2c6 <main+0x2f2>
		memset(payload,0,50);
 800a24c:	f107 0308 	add.w	r3, r7, #8
 800a250:	2232      	movs	r2, #50	; 0x32
 800a252:	2100      	movs	r1, #0
 800a254:	4618      	mov	r0, r3
 800a256:	f000 fee1 	bl	800b01c <memset>
		memset(prejeto,0,500);
 800a25a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a25e:	2100      	movs	r1, #0
 800a260:	481d      	ldr	r0, [pc, #116]	; (800a2d8 <main+0x304>)
 800a262:	f000 fedb 	bl	800b01c <memset>
		sprintf(payload,"SerialNo=%s",SerialNo);
 800a266:	f107 0308 	add.w	r3, r7, #8
 800a26a:	4a21      	ldr	r2, [pc, #132]	; (800a2f0 <main+0x31c>)
 800a26c:	492d      	ldr	r1, [pc, #180]	; (800a324 <main+0x350>)
 800a26e:	4618      	mov	r0, r3
 800a270:	f001 fb38 	bl	800b8e4 <siprintf>
		sendHTTP("/check",payload);
 800a274:	f107 0308 	add.w	r3, r7, #8
 800a278:	4619      	mov	r1, r3
 800a27a:	482b      	ldr	r0, [pc, #172]	; (800a328 <main+0x354>)
 800a27c:	f7ff fe2c 	bl	8009ed8 <sendHTTP>
		if(prejeto[219] == '/'){
 800a280:	4b15      	ldr	r3, [pc, #84]	; (800a2d8 <main+0x304>)
 800a282:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800a286:	2b2f      	cmp	r3, #47	; 0x2f
 800a288:	d119      	bne.n	800a2be <main+0x2ea>
			for(int i = 220; i < 225; i++){
 800a28a:	23dc      	movs	r3, #220	; 0xdc
 800a28c:	657b      	str	r3, [r7, #84]	; 0x54
 800a28e:	e00a      	b.n	800a2a6 <main+0x2d2>
				Time[i-220] = prejeto[i];
 800a290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a292:	3bdc      	subs	r3, #220	; 0xdc
 800a294:	4910      	ldr	r1, [pc, #64]	; (800a2d8 <main+0x304>)
 800a296:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a298:	440a      	add	r2, r1
 800a29a:	7811      	ldrb	r1, [r2, #0]
 800a29c:	4a23      	ldr	r2, [pc, #140]	; (800a32c <main+0x358>)
 800a29e:	54d1      	strb	r1, [r2, r3]
			for(int i = 220; i < 225; i++){
 800a2a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	657b      	str	r3, [r7, #84]	; 0x54
 800a2a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a8:	2be0      	cmp	r3, #224	; 0xe0
 800a2aa:	ddf1      	ble.n	800a290 <main+0x2bc>
			}
			aktiven = 1;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			branje = 1;
 800a2b2:	4b14      	ldr	r3, [pc, #80]	; (800a304 <main+0x330>)
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	601a      	str	r2, [r3, #0]
			alarmInit();
 800a2b8:	f7ff fd34 	bl	8009d24 <alarmInit>
 800a2bc:	e003      	b.n	800a2c6 <main+0x2f2>
		}else{
			//Med preverjanji.
			HAL_Delay(30000);
 800a2be:	f247 5030 	movw	r0, #30000	; 0x7530
 800a2c2:	f7f6 fca7 	bl	8000c14 <HAL_Delay>
		}
	}
	HAL_Delay(500);
 800a2c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a2ca:	f7f6 fca3 	bl	8000c14 <HAL_Delay>
	if(branje){
 800a2ce:	e76e      	b.n	800a1ae <main+0x1da>
 800a2d0:	20000d7c 	.word	0x20000d7c
 800a2d4:	20000d78 	.word	0x20000d78
 800a2d8:	20000ddc 	.word	0x20000ddc
 800a2dc:	0800d2dc 	.word	0x0800d2dc
 800a2e0:	0800d2e4 	.word	0x0800d2e4
 800a2e4:	20000dbc 	.word	0x20000dbc
 800a2e8:	200015dc 	.word	0x200015dc
 800a2ec:	0800d2f4 	.word	0x0800d2f4
 800a2f0:	20000008 	.word	0x20000008
 800a2f4:	0800d30c 	.word	0x0800d30c
 800a2f8:	0800d328 	.word	0x0800d328
 800a2fc:	48000400 	.word	0x48000400
 800a300:	20000b9c 	.word	0x20000b9c
 800a304:	2000026c 	.word	0x2000026c
 800a308:	20000cd0 	.word	0x20000cd0
 800a30c:	20000274 	.word	0x20000274
 800a310:	20000270 	.word	0x20000270
 800a314:	20000244 	.word	0x20000244
 800a318:	20000cb0 	.word	0x20000cb0
 800a31c:	0800d334 	.word	0x0800d334
 800a320:	0800d364 	.word	0x0800d364
 800a324:	0800d36c 	.word	0x0800d36c
 800a328:	0800d378 	.word	0x0800d378
 800a32c:	20000dd0 	.word	0x20000dd0

0800a330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b096      	sub	sp, #88	; 0x58
 800a334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a33a:	2228      	movs	r2, #40	; 0x28
 800a33c:	2100      	movs	r1, #0
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fe6c 	bl	800b01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a344:	f107 031c 	add.w	r3, r7, #28
 800a348:	2200      	movs	r2, #0
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	605a      	str	r2, [r3, #4]
 800a34e:	609a      	str	r2, [r3, #8]
 800a350:	60da      	str	r2, [r3, #12]
 800a352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a354:	1d3b      	adds	r3, r7, #4
 800a356:	2200      	movs	r2, #0
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	605a      	str	r2, [r3, #4]
 800a35c:	609a      	str	r2, [r3, #8]
 800a35e:	60da      	str	r2, [r3, #12]
 800a360:	611a      	str	r2, [r3, #16]
 800a362:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800a364:	230a      	movs	r3, #10
 800a366:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a368:	2301      	movs	r3, #1
 800a36a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a36c:	2310      	movs	r3, #16
 800a36e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a370:	2301      	movs	r3, #1
 800a372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a374:	2302      	movs	r3, #2
 800a376:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a378:	2300      	movs	r3, #0
 800a37a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800a37c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800a380:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a382:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a386:	4618      	mov	r0, r3
 800a388:	f7f8 f860 	bl	800244c <HAL_RCC_OscConfig>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800a392:	f000 faad 	bl	800a8f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a396:	230f      	movs	r3, #15
 800a398:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a39a:	2302      	movs	r3, #2
 800a39c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a3ac:	f107 031c 	add.w	r3, r7, #28
 800a3b0:	2102      	movs	r1, #2
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7f8 ff52 	bl	800325c <HAL_RCC_ClockConfig>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800a3be:	f000 fa97 	bl	800a8f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <SystemClock_Config+0xc0>)
 800a3c4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800a3ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3ce:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a3d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3d4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a3d6:	1d3b      	adds	r3, r7, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7f9 f9a7 	bl	800372c <HAL_RCCEx_PeriphCLKConfig>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800a3e4:	f000 fa84 	bl	800a8f0 <Error_Handler>
  }
}
 800a3e8:	bf00      	nop
 800a3ea:	3758      	adds	r7, #88	; 0x58
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	00010081 	.word	0x00010081

0800a3f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08a      	sub	sp, #40	; 0x28
 800a3f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800a3fa:	f107 031c 	add.w	r3, r7, #28
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	605a      	str	r2, [r3, #4]
 800a404:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800a406:	1d3b      	adds	r3, r7, #4
 800a408:	2200      	movs	r2, #0
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	605a      	str	r2, [r3, #4]
 800a40e:	609a      	str	r2, [r3, #8]
 800a410:	60da      	str	r2, [r3, #12]
 800a412:	611a      	str	r2, [r3, #16]
 800a414:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800a416:	4b3d      	ldr	r3, [pc, #244]	; (800a50c <MX_ADC1_Init+0x118>)
 800a418:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a41c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a41e:	4b3b      	ldr	r3, [pc, #236]	; (800a50c <MX_ADC1_Init+0x118>)
 800a420:	2200      	movs	r2, #0
 800a422:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a424:	4b39      	ldr	r3, [pc, #228]	; (800a50c <MX_ADC1_Init+0x118>)
 800a426:	2200      	movs	r2, #0
 800a428:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a42a:	4b38      	ldr	r3, [pc, #224]	; (800a50c <MX_ADC1_Init+0x118>)
 800a42c:	2201      	movs	r2, #1
 800a42e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a430:	4b36      	ldr	r3, [pc, #216]	; (800a50c <MX_ADC1_Init+0x118>)
 800a432:	2200      	movs	r2, #0
 800a434:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a436:	4b35      	ldr	r3, [pc, #212]	; (800a50c <MX_ADC1_Init+0x118>)
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a43e:	4b33      	ldr	r3, [pc, #204]	; (800a50c <MX_ADC1_Init+0x118>)
 800a440:	2200      	movs	r2, #0
 800a442:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a444:	4b31      	ldr	r3, [pc, #196]	; (800a50c <MX_ADC1_Init+0x118>)
 800a446:	2201      	movs	r2, #1
 800a448:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a44a:	4b30      	ldr	r3, [pc, #192]	; (800a50c <MX_ADC1_Init+0x118>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800a450:	4b2e      	ldr	r3, [pc, #184]	; (800a50c <MX_ADC1_Init+0x118>)
 800a452:	2203      	movs	r2, #3
 800a454:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a456:	4b2d      	ldr	r3, [pc, #180]	; (800a50c <MX_ADC1_Init+0x118>)
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a45e:	4b2b      	ldr	r3, [pc, #172]	; (800a50c <MX_ADC1_Init+0x118>)
 800a460:	2204      	movs	r2, #4
 800a462:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a464:	4b29      	ldr	r3, [pc, #164]	; (800a50c <MX_ADC1_Init+0x118>)
 800a466:	2200      	movs	r2, #0
 800a468:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a46a:	4b28      	ldr	r3, [pc, #160]	; (800a50c <MX_ADC1_Init+0x118>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a470:	4826      	ldr	r0, [pc, #152]	; (800a50c <MX_ADC1_Init+0x118>)
 800a472:	f7f6 fc0f 	bl	8000c94 <HAL_ADC_Init>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800a47c:	f000 fa38 	bl	800a8f0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800a480:	2300      	movs	r3, #0
 800a482:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a484:	f107 031c 	add.w	r3, r7, #28
 800a488:	4619      	mov	r1, r3
 800a48a:	4820      	ldr	r0, [pc, #128]	; (800a50c <MX_ADC1_Init+0x118>)
 800a48c:	f7f7 f99a 	bl	80017c4 <HAL_ADCEx_MultiModeConfigChannel>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800a496:	f000 fa2b 	bl	800a8f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a49a:	2301      	movs	r3, #1
 800a49c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800a4a6:	2304      	movs	r3, #4
 800a4a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a4b2:	1d3b      	adds	r3, r7, #4
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4815      	ldr	r0, [pc, #84]	; (800a50c <MX_ADC1_Init+0x118>)
 800a4b8:	f7f6 fec2 	bl	8001240 <HAL_ADC_ConfigChannel>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800a4c2:	f000 fa15 	bl	800a8f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a4ce:	1d3b      	adds	r3, r7, #4
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	480e      	ldr	r0, [pc, #56]	; (800a50c <MX_ADC1_Init+0x118>)
 800a4d4:	f7f6 feb4 	bl	8001240 <HAL_ADC_ConfigChannel>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800a4de:	f000 fa07 	bl	800a8f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a4ee:	1d3b      	adds	r3, r7, #4
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4806      	ldr	r0, [pc, #24]	; (800a50c <MX_ADC1_Init+0x118>)
 800a4f4:	f7f6 fea4 	bl	8001240 <HAL_ADC_ConfigChannel>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 800a4fe:	f000 f9f7 	bl	800a8f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a502:	bf00      	nop
 800a504:	3728      	adds	r7, #40	; 0x28
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20000b9c 	.word	0x20000b9c

0800a510 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b090      	sub	sp, #64	; 0x40
 800a514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a51a:	2200      	movs	r2, #0
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	605a      	str	r2, [r3, #4]
 800a520:	609a      	str	r2, [r3, #8]
 800a522:	60da      	str	r2, [r3, #12]
 800a524:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800a526:	2300      	movs	r3, #0
 800a528:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800a52a:	463b      	mov	r3, r7
 800a52c:	2228      	movs	r2, #40	; 0x28
 800a52e:	2100      	movs	r1, #0
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fd73 	bl	800b01c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a536:	4b3a      	ldr	r3, [pc, #232]	; (800a620 <MX_RTC_Init+0x110>)
 800a538:	4a3a      	ldr	r2, [pc, #232]	; (800a624 <MX_RTC_Init+0x114>)
 800a53a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a53c:	4b38      	ldr	r3, [pc, #224]	; (800a620 <MX_RTC_Init+0x110>)
 800a53e:	2200      	movs	r2, #0
 800a540:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a542:	4b37      	ldr	r3, [pc, #220]	; (800a620 <MX_RTC_Init+0x110>)
 800a544:	227f      	movs	r2, #127	; 0x7f
 800a546:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a548:	4b35      	ldr	r3, [pc, #212]	; (800a620 <MX_RTC_Init+0x110>)
 800a54a:	22ff      	movs	r2, #255	; 0xff
 800a54c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a54e:	4b34      	ldr	r3, [pc, #208]	; (800a620 <MX_RTC_Init+0x110>)
 800a550:	2200      	movs	r2, #0
 800a552:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a554:	4b32      	ldr	r3, [pc, #200]	; (800a620 <MX_RTC_Init+0x110>)
 800a556:	2200      	movs	r2, #0
 800a558:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a55a:	4b31      	ldr	r3, [pc, #196]	; (800a620 <MX_RTC_Init+0x110>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a560:	482f      	ldr	r0, [pc, #188]	; (800a620 <MX_RTC_Init+0x110>)
 800a562:	f7f9 fa09 	bl	8003978 <HAL_RTC_Init>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800a56c:	f000 f9c0 	bl	800a8f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800a570:	2300      	movs	r3, #0
 800a572:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a582:	2300      	movs	r3, #0
 800a584:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a586:	2300      	movs	r3, #0
 800a588:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800a58a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a58e:	2200      	movs	r2, #0
 800a590:	4619      	mov	r1, r3
 800a592:	4823      	ldr	r0, [pc, #140]	; (800a620 <MX_RTC_Init+0x110>)
 800a594:	f7f9 fa81 	bl	8003a9a <HAL_RTC_SetTime>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800a59e:	f000 f9a7 	bl	800a8f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800a5ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	4817      	ldr	r0, [pc, #92]	; (800a620 <MX_RTC_Init+0x110>)
 800a5c4:	f7f9 fb26 	bl	8003c14 <HAL_RTC_SetDate>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800a5ce:	f000 f98f 	bl	800a8f0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800a5fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a600:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a602:	463b      	mov	r3, r7
 800a604:	2200      	movs	r2, #0
 800a606:	4619      	mov	r1, r3
 800a608:	4805      	ldr	r0, [pc, #20]	; (800a620 <MX_RTC_Init+0x110>)
 800a60a:	f7f9 fbab 	bl	8003d64 <HAL_RTC_SetAlarm_IT>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800a614:	f000 f96c 	bl	800a8f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a618:	bf00      	nop
 800a61a:	3740      	adds	r7, #64	; 0x40
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20000cb0 	.word	0x20000cb0
 800a624:	40002800 	.word	0x40002800

0800a628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a62c:	4b1b      	ldr	r3, [pc, #108]	; (800a69c <MX_SPI1_Init+0x74>)
 800a62e:	4a1c      	ldr	r2, [pc, #112]	; (800a6a0 <MX_SPI1_Init+0x78>)
 800a630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a632:	4b1a      	ldr	r3, [pc, #104]	; (800a69c <MX_SPI1_Init+0x74>)
 800a634:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a63a:	4b18      	ldr	r3, [pc, #96]	; (800a69c <MX_SPI1_Init+0x74>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a640:	4b16      	ldr	r3, [pc, #88]	; (800a69c <MX_SPI1_Init+0x74>)
 800a642:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a646:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a648:	4b14      	ldr	r3, [pc, #80]	; (800a69c <MX_SPI1_Init+0x74>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a64e:	4b13      	ldr	r3, [pc, #76]	; (800a69c <MX_SPI1_Init+0x74>)
 800a650:	2200      	movs	r2, #0
 800a652:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a654:	4b11      	ldr	r3, [pc, #68]	; (800a69c <MX_SPI1_Init+0x74>)
 800a656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a65a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a65c:	4b0f      	ldr	r3, [pc, #60]	; (800a69c <MX_SPI1_Init+0x74>)
 800a65e:	2220      	movs	r2, #32
 800a660:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a662:	4b0e      	ldr	r3, [pc, #56]	; (800a69c <MX_SPI1_Init+0x74>)
 800a664:	2200      	movs	r2, #0
 800a666:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a668:	4b0c      	ldr	r3, [pc, #48]	; (800a69c <MX_SPI1_Init+0x74>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a66e:	4b0b      	ldr	r3, [pc, #44]	; (800a69c <MX_SPI1_Init+0x74>)
 800a670:	2200      	movs	r2, #0
 800a672:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a674:	4b09      	ldr	r3, [pc, #36]	; (800a69c <MX_SPI1_Init+0x74>)
 800a676:	2207      	movs	r2, #7
 800a678:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a67a:	4b08      	ldr	r3, [pc, #32]	; (800a69c <MX_SPI1_Init+0x74>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a680:	4b06      	ldr	r3, [pc, #24]	; (800a69c <MX_SPI1_Init+0x74>)
 800a682:	2200      	movs	r2, #0
 800a684:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a686:	4805      	ldr	r0, [pc, #20]	; (800a69c <MX_SPI1_Init+0x74>)
 800a688:	f7f9 fd66 	bl	8004158 <HAL_SPI_Init>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a692:	f000 f92d 	bl	800a8f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a696:	bf00      	nop
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20000d14 	.word	0x20000d14
 800a6a0:	40013000 	.word	0x40013000

0800a6a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a6aa:	f107 0310 	add.w	r3, r7, #16
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	601a      	str	r2, [r3, #0]
 800a6b2:	605a      	str	r2, [r3, #4]
 800a6b4:	609a      	str	r2, [r3, #8]
 800a6b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a6b8:	1d3b      	adds	r3, r7, #4
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	605a      	str	r2, [r3, #4]
 800a6c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a6c2:	4b1e      	ldr	r3, [pc, #120]	; (800a73c <MX_TIM2_Init+0x98>)
 800a6c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a6c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800a6ca:	4b1c      	ldr	r3, [pc, #112]	; (800a73c <MX_TIM2_Init+0x98>)
 800a6cc:	223f      	movs	r2, #63	; 0x3f
 800a6ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6d0:	4b1a      	ldr	r3, [pc, #104]	; (800a73c <MX_TIM2_Init+0x98>)
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 800a6d6:	4b19      	ldr	r3, [pc, #100]	; (800a73c <MX_TIM2_Init+0x98>)
 800a6d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a6dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a6de:	4b17      	ldr	r3, [pc, #92]	; (800a73c <MX_TIM2_Init+0x98>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a6e4:	4b15      	ldr	r3, [pc, #84]	; (800a73c <MX_TIM2_Init+0x98>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a6ea:	4814      	ldr	r0, [pc, #80]	; (800a73c <MX_TIM2_Init+0x98>)
 800a6ec:	f7fa fa62 	bl	8004bb4 <HAL_TIM_Base_Init>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a6f6:	f000 f8fb 	bl	800a8f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a6fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a700:	f107 0310 	add.w	r3, r7, #16
 800a704:	4619      	mov	r1, r3
 800a706:	480d      	ldr	r0, [pc, #52]	; (800a73c <MX_TIM2_Init+0x98>)
 800a708:	f7fa fbf3 	bl	8004ef2 <HAL_TIM_ConfigClockSource>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d001      	beq.n	800a716 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a712:	f000 f8ed 	bl	800a8f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a716:	2300      	movs	r3, #0
 800a718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a71e:	1d3b      	adds	r3, r7, #4
 800a720:	4619      	mov	r1, r3
 800a722:	4806      	ldr	r0, [pc, #24]	; (800a73c <MX_TIM2_Init+0x98>)
 800a724:	f7fa fdd8 	bl	80052d8 <HAL_TIMEx_MasterConfigSynchronization>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a72e:	f000 f8df 	bl	800a8f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a732:	bf00      	nop
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000d7c 	.word	0x20000d7c

0800a740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a744:	4b14      	ldr	r3, [pc, #80]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a746:	4a15      	ldr	r2, [pc, #84]	; (800a79c <MX_USART1_UART_Init+0x5c>)
 800a748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a74a:	4b13      	ldr	r3, [pc, #76]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a74c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a752:	4b11      	ldr	r3, [pc, #68]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a754:	2200      	movs	r2, #0
 800a756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a758:	4b0f      	ldr	r3, [pc, #60]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a75e:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a760:	2200      	movs	r2, #0
 800a762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a766:	220c      	movs	r2, #12
 800a768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a76a:	4b0b      	ldr	r3, [pc, #44]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a770:	4b09      	ldr	r3, [pc, #36]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a772:	2200      	movs	r2, #0
 800a774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a776:	4b08      	ldr	r3, [pc, #32]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a778:	2200      	movs	r2, #0
 800a77a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a77c:	4b06      	ldr	r3, [pc, #24]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a77e:	2200      	movs	r2, #0
 800a780:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a782:	4805      	ldr	r0, [pc, #20]	; (800a798 <MX_USART1_UART_Init+0x58>)
 800a784:	f7fa fe34 	bl	80053f0 <HAL_UART_Init>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a78e:	f000 f8af 	bl	800a8f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a792:	bf00      	nop
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20000bec 	.word	0x20000bec
 800a79c:	40013800 	.word	0x40013800

0800a7a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a7a6:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <MX_DMA_Init+0x38>)
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	4a0b      	ldr	r2, [pc, #44]	; (800a7d8 <MX_DMA_Init+0x38>)
 800a7ac:	f043 0301 	orr.w	r3, r3, #1
 800a7b0:	6153      	str	r3, [r2, #20]
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <MX_DMA_Init+0x38>)
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	607b      	str	r3, [r7, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	200b      	movs	r0, #11
 800a7c4:	f7f7 faa0 	bl	8001d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a7c8:	200b      	movs	r0, #11
 800a7ca:	f7f7 fab9 	bl	8001d40 <HAL_NVIC_EnableIRQ>

}
 800a7ce:	bf00      	nop
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	40021000 	.word	0x40021000

0800a7dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e2:	f107 030c 	add.w	r3, r7, #12
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	605a      	str	r2, [r3, #4]
 800a7ec:	609a      	str	r2, [r3, #8]
 800a7ee:	60da      	str	r2, [r3, #12]
 800a7f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a7f2:	4b33      	ldr	r3, [pc, #204]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	4a32      	ldr	r2, [pc, #200]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a7f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7fc:	6153      	str	r3, [r2, #20]
 800a7fe:	4b30      	ldr	r3, [pc, #192]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a800:	695b      	ldr	r3, [r3, #20]
 800a802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a806:	60bb      	str	r3, [r7, #8]
 800a808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a80a:	4b2d      	ldr	r3, [pc, #180]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	4a2c      	ldr	r2, [pc, #176]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a814:	6153      	str	r3, [r2, #20]
 800a816:	4b2a      	ldr	r3, [pc, #168]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a81e:	607b      	str	r3, [r7, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a822:	4b27      	ldr	r3, [pc, #156]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	4a26      	ldr	r2, [pc, #152]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a82c:	6153      	str	r3, [r2, #20]
 800a82e:	4b24      	ldr	r3, [pc, #144]	; (800a8c0 <MX_GPIO_Init+0xe4>)
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800a83a:	2200      	movs	r2, #0
 800a83c:	2102      	movs	r1, #2
 800a83e:	4821      	ldr	r0, [pc, #132]	; (800a8c4 <MX_GPIO_Init+0xe8>)
 800a840:	f7f7 fdec 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800a844:	2200      	movs	r2, #0
 800a846:	21a0      	movs	r1, #160	; 0xa0
 800a848:	481f      	ldr	r0, [pc, #124]	; (800a8c8 <MX_GPIO_Init+0xec>)
 800a84a:	f7f7 fde7 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 800a84e:	2301      	movs	r3, #1
 800a850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a852:	2300      	movs	r3, #0
 800a854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 800a85a:	f107 030c 	add.w	r3, r7, #12
 800a85e:	4619      	mov	r1, r3
 800a860:	4818      	ldr	r0, [pc, #96]	; (800a8c4 <MX_GPIO_Init+0xe8>)
 800a862:	f7f7 fc51 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a866:	2302      	movs	r3, #2
 800a868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a86a:	2301      	movs	r3, #1
 800a86c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a872:	2300      	movs	r3, #0
 800a874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a876:	f107 030c 	add.w	r3, r7, #12
 800a87a:	4619      	mov	r1, r3
 800a87c:	4811      	ldr	r0, [pc, #68]	; (800a8c4 <MX_GPIO_Init+0xe8>)
 800a87e:	f7f7 fc43 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 800a882:	2342      	movs	r3, #66	; 0x42
 800a884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a886:	2300      	movs	r3, #0
 800a888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a88e:	f107 030c 	add.w	r3, r7, #12
 800a892:	4619      	mov	r1, r3
 800a894:	480c      	ldr	r0, [pc, #48]	; (800a8c8 <MX_GPIO_Init+0xec>)
 800a896:	f7f7 fc37 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800a89a:	23a0      	movs	r3, #160	; 0xa0
 800a89c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8aa:	f107 030c 	add.w	r3, r7, #12
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4805      	ldr	r0, [pc, #20]	; (800a8c8 <MX_GPIO_Init+0xec>)
 800a8b2:	f7f7 fc29 	bl	8002108 <HAL_GPIO_Init>

}
 800a8b6:	bf00      	nop
 800a8b8:	3720      	adds	r7, #32
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	40021000 	.word	0x40021000
 800a8c4:	48001400 	.word	0x48001400
 800a8c8:	48000400 	.word	0x48000400

0800a8cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a04      	ldr	r2, [pc, #16]	; (800a8ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d101      	bne.n	800a8e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a8de:	f7f6 f979 	bl	8000bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a8e2:	bf00      	nop
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	40012c00 	.word	0x40012c00

0800a8f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a8f4:	bf00      	nop
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
	...

0800a900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a906:	4b11      	ldr	r3, [pc, #68]	; (800a94c <HAL_MspInit+0x4c>)
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	4a10      	ldr	r2, [pc, #64]	; (800a94c <HAL_MspInit+0x4c>)
 800a90c:	f043 0301 	orr.w	r3, r3, #1
 800a910:	6193      	str	r3, [r2, #24]
 800a912:	4b0e      	ldr	r3, [pc, #56]	; (800a94c <HAL_MspInit+0x4c>)
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	607b      	str	r3, [r7, #4]
 800a91c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a91e:	4b0b      	ldr	r3, [pc, #44]	; (800a94c <HAL_MspInit+0x4c>)
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	4a0a      	ldr	r2, [pc, #40]	; (800a94c <HAL_MspInit+0x4c>)
 800a924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a928:	61d3      	str	r3, [r2, #28]
 800a92a:	4b08      	ldr	r3, [pc, #32]	; (800a94c <HAL_MspInit+0x4c>)
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a932:	603b      	str	r3, [r7, #0]
 800a934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a936:	2200      	movs	r2, #0
 800a938:	210f      	movs	r1, #15
 800a93a:	f06f 0001 	mvn.w	r0, #1
 800a93e:	f7f7 f9e3 	bl	8001d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a942:	bf00      	nop
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	40021000 	.word	0x40021000

0800a950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08a      	sub	sp, #40	; 0x28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a958:	f107 0314 	add.w	r3, r7, #20
 800a95c:	2200      	movs	r2, #0
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	605a      	str	r2, [r3, #4]
 800a962:	609a      	str	r2, [r3, #8]
 800a964:	60da      	str	r2, [r3, #12]
 800a966:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a970:	d14c      	bne.n	800aa0c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800a972:	4b28      	ldr	r3, [pc, #160]	; (800aa14 <HAL_ADC_MspInit+0xc4>)
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	4a27      	ldr	r2, [pc, #156]	; (800aa14 <HAL_ADC_MspInit+0xc4>)
 800a978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a97c:	6153      	str	r3, [r2, #20]
 800a97e:	4b25      	ldr	r3, [pc, #148]	; (800aa14 <HAL_ADC_MspInit+0xc4>)
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a986:	613b      	str	r3, [r7, #16]
 800a988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a98a:	4b22      	ldr	r3, [pc, #136]	; (800aa14 <HAL_ADC_MspInit+0xc4>)
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	4a21      	ldr	r2, [pc, #132]	; (800aa14 <HAL_ADC_MspInit+0xc4>)
 800a990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a994:	6153      	str	r3, [r2, #20]
 800a996:	4b1f      	ldr	r3, [pc, #124]	; (800aa14 <HAL_ADC_MspInit+0xc4>)
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800a9a2:	2307      	movs	r3, #7
 800a9a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9ae:	f107 0314 	add.w	r3, r7, #20
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9b8:	f7f7 fba6 	bl	8002108 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800a9bc:	4b16      	ldr	r3, [pc, #88]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9be:	4a17      	ldr	r2, [pc, #92]	; (800aa1c <HAL_ADC_MspInit+0xcc>)
 800a9c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a9c2:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9c8:	4b13      	ldr	r3, [pc, #76]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a9ce:	4b12      	ldr	r3, [pc, #72]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9d0:	2280      	movs	r2, #128	; 0x80
 800a9d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a9d4:	4b10      	ldr	r3, [pc, #64]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a9dc:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a9f0:	4809      	ldr	r0, [pc, #36]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800a9f2:	f7f7 f9b3 	bl	8001d5c <HAL_DMA_Init>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800a9fc:	f7ff ff78 	bl	800a8f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a05      	ldr	r2, [pc, #20]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800aa04:	639a      	str	r2, [r3, #56]	; 0x38
 800aa06:	4a04      	ldr	r2, [pc, #16]	; (800aa18 <HAL_ADC_MspInit+0xc8>)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800aa0c:	bf00      	nop
 800aa0e:	3728      	adds	r7, #40	; 0x28
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40021000 	.word	0x40021000
 800aa18:	20000c6c 	.word	0x20000c6c
 800aa1c:	40020008 	.word	0x40020008

0800aa20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a10      	ldr	r2, [pc, #64]	; (800aa70 <HAL_RTC_MspInit+0x50>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d119      	bne.n	800aa66 <HAL_RTC_MspInit+0x46>
 800aa32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	fa93 f3a3 	rbit	r3, r3
 800aa3e:	60bb      	str	r3, [r7, #8]
  return result;
 800aa40:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800aa42:	fab3 f383 	clz	r3, r3
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <HAL_RTC_MspInit+0x54>)
 800aa4c:	4413      	add	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	461a      	mov	r2, r3
 800aa52:	2301      	movs	r3, #1
 800aa54:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800aa56:	2200      	movs	r2, #0
 800aa58:	2100      	movs	r1, #0
 800aa5a:	2029      	movs	r0, #41	; 0x29
 800aa5c:	f7f7 f954 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800aa60:	2029      	movs	r0, #41	; 0x29
 800aa62:	f7f7 f96d 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800aa66:	bf00      	nop
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	40002800 	.word	0x40002800
 800aa74:	10908100 	.word	0x10908100

0800aa78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08a      	sub	sp, #40	; 0x28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa80:	f107 0314 	add.w	r3, r7, #20
 800aa84:	2200      	movs	r2, #0
 800aa86:	601a      	str	r2, [r3, #0]
 800aa88:	605a      	str	r2, [r3, #4]
 800aa8a:	609a      	str	r2, [r3, #8]
 800aa8c:	60da      	str	r2, [r3, #12]
 800aa8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a25      	ldr	r2, [pc, #148]	; (800ab2c <HAL_SPI_MspInit+0xb4>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d144      	bne.n	800ab24 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800aa9a:	4b25      	ldr	r3, [pc, #148]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	4a24      	ldr	r2, [pc, #144]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aaa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaa4:	6193      	str	r3, [r2, #24]
 800aaa6:	4b22      	ldr	r3, [pc, #136]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aaae:	613b      	str	r3, [r7, #16]
 800aab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aab2:	4b1f      	ldr	r3, [pc, #124]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aab4:	695b      	ldr	r3, [r3, #20]
 800aab6:	4a1e      	ldr	r2, [pc, #120]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aabc:	6153      	str	r3, [r2, #20]
 800aabe:	4b1c      	ldr	r3, [pc, #112]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aaca:	4b19      	ldr	r3, [pc, #100]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	4a18      	ldr	r2, [pc, #96]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aad4:	6153      	str	r3, [r2, #20]
 800aad6:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <HAL_SPI_MspInit+0xb8>)
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aade:	60bb      	str	r3, [r7, #8]
 800aae0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800aae2:	2380      	movs	r3, #128	; 0x80
 800aae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aae6:	2302      	movs	r3, #2
 800aae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800aaf2:	2305      	movs	r3, #5
 800aaf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaf6:	f107 0314 	add.w	r3, r7, #20
 800aafa:	4619      	mov	r1, r3
 800aafc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab00:	f7f7 fb02 	bl	8002108 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800ab04:	2318      	movs	r3, #24
 800ab06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab08:	2302      	movs	r3, #2
 800ab0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ab10:	2303      	movs	r3, #3
 800ab12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ab14:	2305      	movs	r3, #5
 800ab16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab18:	f107 0314 	add.w	r3, r7, #20
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4805      	ldr	r0, [pc, #20]	; (800ab34 <HAL_SPI_MspInit+0xbc>)
 800ab20:	f7f7 faf2 	bl	8002108 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800ab24:	bf00      	nop
 800ab26:	3728      	adds	r7, #40	; 0x28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	40013000 	.word	0x40013000
 800ab30:	40021000 	.word	0x40021000
 800ab34:	48000400 	.word	0x48000400

0800ab38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab48:	d10b      	bne.n	800ab62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ab4a:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <HAL_TIM_Base_MspInit+0x38>)
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	4a08      	ldr	r2, [pc, #32]	; (800ab70 <HAL_TIM_Base_MspInit+0x38>)
 800ab50:	f043 0301 	orr.w	r3, r3, #1
 800ab54:	61d3      	str	r3, [r2, #28]
 800ab56:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <HAL_TIM_Base_MspInit+0x38>)
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800ab62:	bf00      	nop
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	40021000 	.word	0x40021000

0800ab74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	; 0x28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab7c:	f107 0314 	add.w	r3, r7, #20
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	605a      	str	r2, [r3, #4]
 800ab86:	609a      	str	r2, [r3, #8]
 800ab88:	60da      	str	r2, [r3, #12]
 800ab8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a1c      	ldr	r2, [pc, #112]	; (800ac04 <HAL_UART_MspInit+0x90>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d131      	bne.n	800abfa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ab96:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <HAL_UART_MspInit+0x94>)
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	4a1b      	ldr	r2, [pc, #108]	; (800ac08 <HAL_UART_MspInit+0x94>)
 800ab9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aba0:	6193      	str	r3, [r2, #24]
 800aba2:	4b19      	ldr	r3, [pc, #100]	; (800ac08 <HAL_UART_MspInit+0x94>)
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abaa:	613b      	str	r3, [r7, #16]
 800abac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abae:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <HAL_UART_MspInit+0x94>)
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	4a15      	ldr	r2, [pc, #84]	; (800ac08 <HAL_UART_MspInit+0x94>)
 800abb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb8:	6153      	str	r3, [r2, #20]
 800abba:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <HAL_UART_MspInit+0x94>)
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abc2:	60fb      	str	r3, [r7, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800abc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800abca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abcc:	2302      	movs	r3, #2
 800abce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd0:	2300      	movs	r3, #0
 800abd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800abd4:	2303      	movs	r3, #3
 800abd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800abd8:	2307      	movs	r3, #7
 800abda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abdc:	f107 0314 	add.w	r3, r7, #20
 800abe0:	4619      	mov	r1, r3
 800abe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800abe6:	f7f7 fa8f 	bl	8002108 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800abea:	2200      	movs	r2, #0
 800abec:	2100      	movs	r1, #0
 800abee:	2025      	movs	r0, #37	; 0x25
 800abf0:	f7f7 f88a 	bl	8001d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800abf4:	2025      	movs	r0, #37	; 0x25
 800abf6:	f7f7 f8a3 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800abfa:	bf00      	nop
 800abfc:	3728      	adds	r7, #40	; 0x28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	40013800 	.word	0x40013800
 800ac08:	40021000 	.word	0x40021000

0800ac0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08c      	sub	sp, #48	; 0x30
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	2019      	movs	r0, #25
 800ac22:	f7f7 f871 	bl	8001d08 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800ac26:	2019      	movs	r0, #25
 800ac28:	f7f7 f88a 	bl	8001d40 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800ac2c:	4b1e      	ldr	r3, [pc, #120]	; (800aca8 <HAL_InitTick+0x9c>)
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	4a1d      	ldr	r2, [pc, #116]	; (800aca8 <HAL_InitTick+0x9c>)
 800ac32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac36:	6193      	str	r3, [r2, #24]
 800ac38:	4b1b      	ldr	r3, [pc, #108]	; (800aca8 <HAL_InitTick+0x9c>)
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac40:	60fb      	str	r3, [r7, #12]
 800ac42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ac44:	f107 0210 	add.w	r2, r7, #16
 800ac48:	f107 0314 	add.w	r3, r7, #20
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f8 fd3a 	bl	80036c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800ac54:	f7f8 fd16 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 800ac58:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5c:	4a13      	ldr	r2, [pc, #76]	; (800acac <HAL_InitTick+0xa0>)
 800ac5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac62:	0c9b      	lsrs	r3, r3, #18
 800ac64:	3b01      	subs	r3, #1
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800ac68:	4b11      	ldr	r3, [pc, #68]	; (800acb0 <HAL_InitTick+0xa4>)
 800ac6a:	4a12      	ldr	r2, [pc, #72]	; (800acb4 <HAL_InitTick+0xa8>)
 800ac6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800ac6e:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <HAL_InitTick+0xa4>)
 800ac70:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ac74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800ac76:	4a0e      	ldr	r2, [pc, #56]	; (800acb0 <HAL_InitTick+0xa4>)
 800ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800ac7c:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <HAL_InitTick+0xa4>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac82:	4b0b      	ldr	r3, [pc, #44]	; (800acb0 <HAL_InitTick+0xa4>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800ac88:	4809      	ldr	r0, [pc, #36]	; (800acb0 <HAL_InitTick+0xa4>)
 800ac8a:	f7f9 ff93 	bl	8004bb4 <HAL_TIM_Base_Init>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d104      	bne.n	800ac9e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800ac94:	4806      	ldr	r0, [pc, #24]	; (800acb0 <HAL_InitTick+0xa4>)
 800ac96:	f7f9 ffe3 	bl	8004c60 <HAL_TIM_Base_Start_IT>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	e000      	b.n	800aca0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3730      	adds	r7, #48	; 0x30
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	40021000 	.word	0x40021000
 800acac:	431bde83 	.word	0x431bde83
 800acb0:	200015f0 	.word	0x200015f0
 800acb4:	40012c00 	.word	0x40012c00

0800acb8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800acbc:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <SDTimer_Handler+0x40>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d006      	beq.n	800acd4 <SDTimer_Handler+0x1c>
    Timer1--;
 800acc6:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <SDTimer_Handler+0x40>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	b2db      	uxtb	r3, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <SDTimer_Handler+0x40>)
 800acd2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800acd4:	4b09      	ldr	r3, [pc, #36]	; (800acfc <SDTimer_Handler+0x44>)
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d006      	beq.n	800acec <SDTimer_Handler+0x34>
    Timer2--;
 800acde:	4b07      	ldr	r3, [pc, #28]	; (800acfc <SDTimer_Handler+0x44>)
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	4b04      	ldr	r3, [pc, #16]	; (800acfc <SDTimer_Handler+0x44>)
 800acea:	701a      	strb	r2, [r3, #0]
}
 800acec:	bf00      	nop
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	20001631 	.word	0x20001631
 800acfc:	20001630 	.word	0x20001630

0800ad00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ad00:	b480      	push	{r7}
 800ad02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ad04:	bf00      	nop
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad12:	e7fe      	b.n	800ad12 <HardFault_Handler+0x4>

0800ad14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ad14:	b480      	push	{r7}
 800ad16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ad18:	e7fe      	b.n	800ad18 <MemManage_Handler+0x4>

0800ad1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ad1e:	e7fe      	b.n	800ad1e <BusFault_Handler+0x4>

0800ad20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ad20:	b480      	push	{r7}
 800ad22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ad24:	e7fe      	b.n	800ad24 <UsageFault_Handler+0x4>

0800ad26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ad26:	b480      	push	{r7}
 800ad28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ad2a:	bf00      	nop
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ad34:	b480      	push	{r7}
 800ad36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ad38:	bf00      	nop
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ad42:	b480      	push	{r7}
 800ad44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ad46:	bf00      	nop
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ad50:	b480      	push	{r7}
 800ad52:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ad54:	bf00      	nop
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
	...

0800ad60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ad64:	4802      	ldr	r0, [pc, #8]	; (800ad70 <DMA1_Channel1_IRQHandler+0x10>)
 800ad66:	f7f7 f8dd 	bl	8001f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800ad6a:	bf00      	nop
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000c6c 	.word	0x20000c6c

0800ad74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	FatFsCnt++;
 800ad78:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	3301      	adds	r3, #1
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	4b08      	ldr	r3, [pc, #32]	; (800ada4 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800ad84:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800ad86:	4b07      	ldr	r3, [pc, #28]	; (800ada4 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b09      	cmp	r3, #9
 800ad8e:	d904      	bls.n	800ad9a <TIM1_UP_TIM16_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 800ad90:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <TIM1_UP_TIM16_IRQHandler+0x30>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800ad96:	f7ff ff8f 	bl	800acb8 <SDTimer_Handler>
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ad9a:	4803      	ldr	r0, [pc, #12]	; (800ada8 <TIM1_UP_TIM16_IRQHandler+0x34>)
 800ad9c:	f7f9 ff8a 	bl	8004cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800ada0:	bf00      	nop
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	20000278 	.word	0x20000278
 800ada8:	200015f0 	.word	0x200015f0

0800adac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800adb0:	4802      	ldr	r0, [pc, #8]	; (800adbc <USART1_IRQHandler+0x10>)
 800adb2:	f7fa fccb 	bl	800574c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800adb6:	bf00      	nop
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	20000bec 	.word	0x20000bec

0800adc0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800adc4:	4802      	ldr	r0, [pc, #8]	; (800add0 <RTC_Alarm_IRQHandler+0x10>)
 800adc6:	f7f9 f905 	bl	8003fd4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800adca:	bf00      	nop
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20000cb0 	.word	0x20000cb0

0800add4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800addc:	4b11      	ldr	r3, [pc, #68]	; (800ae24 <_sbrk+0x50>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d102      	bne.n	800adea <_sbrk+0x16>
		heap_end = &end;
 800ade4:	4b0f      	ldr	r3, [pc, #60]	; (800ae24 <_sbrk+0x50>)
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <_sbrk+0x54>)
 800ade8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800adea:	4b0e      	ldr	r3, [pc, #56]	; (800ae24 <_sbrk+0x50>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800adf0:	4b0c      	ldr	r3, [pc, #48]	; (800ae24 <_sbrk+0x50>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4413      	add	r3, r2
 800adf8:	466a      	mov	r2, sp
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d907      	bls.n	800ae0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800adfe:	f000 f8e3 	bl	800afc8 <__errno>
 800ae02:	4602      	mov	r2, r0
 800ae04:	230c      	movs	r3, #12
 800ae06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ae08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae0c:	e006      	b.n	800ae1c <_sbrk+0x48>
	}

	heap_end += incr;
 800ae0e:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <_sbrk+0x50>)
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4413      	add	r3, r2
 800ae16:	4a03      	ldr	r2, [pc, #12]	; (800ae24 <_sbrk+0x50>)
 800ae18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	2000027c 	.word	0x2000027c
 800ae28:	20001638 	.word	0x20001638

0800ae2c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ae30:	4b1f      	ldr	r3, [pc, #124]	; (800aeb0 <SystemInit+0x84>)
 800ae32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae36:	4a1e      	ldr	r2, [pc, #120]	; (800aeb0 <SystemInit+0x84>)
 800ae38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800ae40:	4b1c      	ldr	r3, [pc, #112]	; (800aeb4 <SystemInit+0x88>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a1b      	ldr	r2, [pc, #108]	; (800aeb4 <SystemInit+0x88>)
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800ae4c:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <SystemInit+0x88>)
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	4918      	ldr	r1, [pc, #96]	; (800aeb4 <SystemInit+0x88>)
 800ae52:	4b19      	ldr	r3, [pc, #100]	; (800aeb8 <SystemInit+0x8c>)
 800ae54:	4013      	ands	r3, r2
 800ae56:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800ae58:	4b16      	ldr	r3, [pc, #88]	; (800aeb4 <SystemInit+0x88>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a15      	ldr	r2, [pc, #84]	; (800aeb4 <SystemInit+0x88>)
 800ae5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ae62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae66:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <SystemInit+0x88>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a11      	ldr	r2, [pc, #68]	; (800aeb4 <SystemInit+0x88>)
 800ae6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae72:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800ae74:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <SystemInit+0x88>)
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	4a0e      	ldr	r2, [pc, #56]	; (800aeb4 <SystemInit+0x88>)
 800ae7a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800ae7e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800ae80:	4b0c      	ldr	r3, [pc, #48]	; (800aeb4 <SystemInit+0x88>)
 800ae82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae84:	4a0b      	ldr	r2, [pc, #44]	; (800aeb4 <SystemInit+0x88>)
 800ae86:	f023 030f 	bic.w	r3, r3, #15
 800ae8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800ae8c:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <SystemInit+0x88>)
 800ae8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae90:	4908      	ldr	r1, [pc, #32]	; (800aeb4 <SystemInit+0x88>)
 800ae92:	4b0a      	ldr	r3, [pc, #40]	; (800aebc <SystemInit+0x90>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800ae98:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <SystemInit+0x88>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ae9e:	4b04      	ldr	r3, [pc, #16]	; (800aeb0 <SystemInit+0x84>)
 800aea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aea4:	609a      	str	r2, [r3, #8]
#endif
}
 800aea6:	bf00      	nop
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	e000ed00 	.word	0xe000ed00
 800aeb4:	40021000 	.word	0x40021000
 800aeb8:	f87fc00c 	.word	0xf87fc00c
 800aebc:	ff00fccc 	.word	0xff00fccc

0800aec0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	4603      	mov	r3, r0
 800aec8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800aeca:	79fb      	ldrb	r3, [r7, #7]
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fb91 	bl	80095f4 <SD_disk_initialize>
 800aed2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return SD_disk_status(pdrv);
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe fc6d 	bl	80097c8 <SD_disk_status>
 800aeee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800af08:	7bf8      	ldrb	r0, [r7, #15]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	68b9      	ldr	r1, [r7, #8]
 800af10:	f7fe fc70 	bl	80097f4 <SD_disk_read>
 800af14:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800af2e:	7bf8      	ldrb	r0, [r7, #15]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	68b9      	ldr	r1, [r7, #8]
 800af36:	f7fe fcc7 	bl	80098c8 <SD_disk_write>
 800af3a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	603a      	str	r2, [r7, #0]
 800af4e:	71fb      	strb	r3, [r7, #7]
 800af50:	460b      	mov	r3, r1
 800af52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800af54:	79b9      	ldrb	r1, [r7, #6]
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fe fd38 	bl	80099d0 <SD_disk_ioctl>
 800af60:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800af6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800afa4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800af70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800af72:	e003      	b.n	800af7c <LoopCopyDataInit>

0800af74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800af74:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800af76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800af78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800af7a:	3104      	adds	r1, #4

0800af7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800af7c:	480b      	ldr	r0, [pc, #44]	; (800afac <LoopForever+0xa>)
	ldr	r3, =_edata
 800af7e:	4b0c      	ldr	r3, [pc, #48]	; (800afb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 800af80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800af82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800af84:	d3f6      	bcc.n	800af74 <CopyDataInit>
	ldr	r2, =_sbss
 800af86:	4a0b      	ldr	r2, [pc, #44]	; (800afb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800af88:	e002      	b.n	800af90 <LoopFillZerobss>

0800af8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800af8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800af8c:	f842 3b04 	str.w	r3, [r2], #4

0800af90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800af90:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <LoopForever+0x16>)
	cmp	r2, r3
 800af92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800af94:	d3f9      	bcc.n	800af8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800af96:	f7ff ff49 	bl	800ae2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800af9a:	f000 f81b 	bl	800afd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800af9e:	f7ff f819 	bl	8009fd4 <main>

0800afa2 <LoopForever>:

LoopForever:
    b LoopForever
 800afa2:	e7fe      	b.n	800afa2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800afa4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800afa8:	0800d6a0 	.word	0x0800d6a0
	ldr	r0, =_sdata
 800afac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800afb0:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 800afb4:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 800afb8:	20001638 	.word	0x20001638

0800afbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800afbc:	e7fe      	b.n	800afbc <ADC1_2_IRQHandler>

0800afbe <atoi>:
 800afbe:	220a      	movs	r2, #10
 800afc0:	2100      	movs	r1, #0
 800afc2:	f000 bd2b 	b.w	800ba1c <strtol>
	...

0800afc8 <__errno>:
 800afc8:	4b01      	ldr	r3, [pc, #4]	; (800afd0 <__errno+0x8>)
 800afca:	6818      	ldr	r0, [r3, #0]
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	20000028 	.word	0x20000028

0800afd4 <__libc_init_array>:
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	4e0d      	ldr	r6, [pc, #52]	; (800b00c <__libc_init_array+0x38>)
 800afd8:	4c0d      	ldr	r4, [pc, #52]	; (800b010 <__libc_init_array+0x3c>)
 800afda:	1ba4      	subs	r4, r4, r6
 800afdc:	10a4      	asrs	r4, r4, #2
 800afde:	2500      	movs	r5, #0
 800afe0:	42a5      	cmp	r5, r4
 800afe2:	d109      	bne.n	800aff8 <__libc_init_array+0x24>
 800afe4:	4e0b      	ldr	r6, [pc, #44]	; (800b014 <__libc_init_array+0x40>)
 800afe6:	4c0c      	ldr	r4, [pc, #48]	; (800b018 <__libc_init_array+0x44>)
 800afe8:	f002 f8f2 	bl	800d1d0 <_init>
 800afec:	1ba4      	subs	r4, r4, r6
 800afee:	10a4      	asrs	r4, r4, #2
 800aff0:	2500      	movs	r5, #0
 800aff2:	42a5      	cmp	r5, r4
 800aff4:	d105      	bne.n	800b002 <__libc_init_array+0x2e>
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800affc:	4798      	blx	r3
 800affe:	3501      	adds	r5, #1
 800b000:	e7ee      	b.n	800afe0 <__libc_init_array+0xc>
 800b002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b006:	4798      	blx	r3
 800b008:	3501      	adds	r5, #1
 800b00a:	e7f2      	b.n	800aff2 <__libc_init_array+0x1e>
 800b00c:	0800d698 	.word	0x0800d698
 800b010:	0800d698 	.word	0x0800d698
 800b014:	0800d698 	.word	0x0800d698
 800b018:	0800d69c 	.word	0x0800d69c

0800b01c <memset>:
 800b01c:	4402      	add	r2, r0
 800b01e:	4603      	mov	r3, r0
 800b020:	4293      	cmp	r3, r2
 800b022:	d100      	bne.n	800b026 <memset+0xa>
 800b024:	4770      	bx	lr
 800b026:	f803 1b01 	strb.w	r1, [r3], #1
 800b02a:	e7f9      	b.n	800b020 <memset+0x4>

0800b02c <__cvt>:
 800b02c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	ec55 4b10 	vmov	r4, r5, d0
 800b034:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b036:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b03a:	2d00      	cmp	r5, #0
 800b03c:	460e      	mov	r6, r1
 800b03e:	4691      	mov	r9, r2
 800b040:	4619      	mov	r1, r3
 800b042:	bfb8      	it	lt
 800b044:	4622      	movlt	r2, r4
 800b046:	462b      	mov	r3, r5
 800b048:	f027 0720 	bic.w	r7, r7, #32
 800b04c:	bfbb      	ittet	lt
 800b04e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b052:	461d      	movlt	r5, r3
 800b054:	2300      	movge	r3, #0
 800b056:	232d      	movlt	r3, #45	; 0x2d
 800b058:	bfb8      	it	lt
 800b05a:	4614      	movlt	r4, r2
 800b05c:	2f46      	cmp	r7, #70	; 0x46
 800b05e:	700b      	strb	r3, [r1, #0]
 800b060:	d004      	beq.n	800b06c <__cvt+0x40>
 800b062:	2f45      	cmp	r7, #69	; 0x45
 800b064:	d100      	bne.n	800b068 <__cvt+0x3c>
 800b066:	3601      	adds	r6, #1
 800b068:	2102      	movs	r1, #2
 800b06a:	e000      	b.n	800b06e <__cvt+0x42>
 800b06c:	2103      	movs	r1, #3
 800b06e:	ab03      	add	r3, sp, #12
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	ab02      	add	r3, sp, #8
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	4632      	mov	r2, r6
 800b078:	4653      	mov	r3, sl
 800b07a:	ec45 4b10 	vmov	d0, r4, r5
 800b07e:	f000 fd6f 	bl	800bb60 <_dtoa_r>
 800b082:	2f47      	cmp	r7, #71	; 0x47
 800b084:	4680      	mov	r8, r0
 800b086:	d102      	bne.n	800b08e <__cvt+0x62>
 800b088:	f019 0f01 	tst.w	r9, #1
 800b08c:	d026      	beq.n	800b0dc <__cvt+0xb0>
 800b08e:	2f46      	cmp	r7, #70	; 0x46
 800b090:	eb08 0906 	add.w	r9, r8, r6
 800b094:	d111      	bne.n	800b0ba <__cvt+0x8e>
 800b096:	f898 3000 	ldrb.w	r3, [r8]
 800b09a:	2b30      	cmp	r3, #48	; 0x30
 800b09c:	d10a      	bne.n	800b0b4 <__cvt+0x88>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	f7f5 fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0aa:	b918      	cbnz	r0, 800b0b4 <__cvt+0x88>
 800b0ac:	f1c6 0601 	rsb	r6, r6, #1
 800b0b0:	f8ca 6000 	str.w	r6, [sl]
 800b0b4:	f8da 3000 	ldr.w	r3, [sl]
 800b0b8:	4499      	add	r9, r3
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	4620      	mov	r0, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7f5 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c6:	b938      	cbnz	r0, 800b0d8 <__cvt+0xac>
 800b0c8:	2230      	movs	r2, #48	; 0x30
 800b0ca:	9b03      	ldr	r3, [sp, #12]
 800b0cc:	454b      	cmp	r3, r9
 800b0ce:	d205      	bcs.n	800b0dc <__cvt+0xb0>
 800b0d0:	1c59      	adds	r1, r3, #1
 800b0d2:	9103      	str	r1, [sp, #12]
 800b0d4:	701a      	strb	r2, [r3, #0]
 800b0d6:	e7f8      	b.n	800b0ca <__cvt+0x9e>
 800b0d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0e0:	eba3 0308 	sub.w	r3, r3, r8
 800b0e4:	4640      	mov	r0, r8
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	b004      	add	sp, #16
 800b0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b0ee <__exponent>:
 800b0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0f0:	2900      	cmp	r1, #0
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	bfba      	itte	lt
 800b0f6:	4249      	neglt	r1, r1
 800b0f8:	232d      	movlt	r3, #45	; 0x2d
 800b0fa:	232b      	movge	r3, #43	; 0x2b
 800b0fc:	2909      	cmp	r1, #9
 800b0fe:	f804 2b02 	strb.w	r2, [r4], #2
 800b102:	7043      	strb	r3, [r0, #1]
 800b104:	dd20      	ble.n	800b148 <__exponent+0x5a>
 800b106:	f10d 0307 	add.w	r3, sp, #7
 800b10a:	461f      	mov	r7, r3
 800b10c:	260a      	movs	r6, #10
 800b10e:	fb91 f5f6 	sdiv	r5, r1, r6
 800b112:	fb06 1115 	mls	r1, r6, r5, r1
 800b116:	3130      	adds	r1, #48	; 0x30
 800b118:	2d09      	cmp	r5, #9
 800b11a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b11e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b122:	4629      	mov	r1, r5
 800b124:	dc09      	bgt.n	800b13a <__exponent+0x4c>
 800b126:	3130      	adds	r1, #48	; 0x30
 800b128:	3b02      	subs	r3, #2
 800b12a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b12e:	42bb      	cmp	r3, r7
 800b130:	4622      	mov	r2, r4
 800b132:	d304      	bcc.n	800b13e <__exponent+0x50>
 800b134:	1a10      	subs	r0, r2, r0
 800b136:	b003      	add	sp, #12
 800b138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b13a:	4613      	mov	r3, r2
 800b13c:	e7e7      	b.n	800b10e <__exponent+0x20>
 800b13e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b142:	f804 2b01 	strb.w	r2, [r4], #1
 800b146:	e7f2      	b.n	800b12e <__exponent+0x40>
 800b148:	2330      	movs	r3, #48	; 0x30
 800b14a:	4419      	add	r1, r3
 800b14c:	7083      	strb	r3, [r0, #2]
 800b14e:	1d02      	adds	r2, r0, #4
 800b150:	70c1      	strb	r1, [r0, #3]
 800b152:	e7ef      	b.n	800b134 <__exponent+0x46>

0800b154 <_printf_float>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	b08d      	sub	sp, #52	; 0x34
 800b15a:	460c      	mov	r4, r1
 800b15c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b160:	4616      	mov	r6, r2
 800b162:	461f      	mov	r7, r3
 800b164:	4605      	mov	r5, r0
 800b166:	f001 fab7 	bl	800c6d8 <_localeconv_r>
 800b16a:	6803      	ldr	r3, [r0, #0]
 800b16c:	9304      	str	r3, [sp, #16]
 800b16e:	4618      	mov	r0, r3
 800b170:	f7f5 f82e 	bl	80001d0 <strlen>
 800b174:	2300      	movs	r3, #0
 800b176:	930a      	str	r3, [sp, #40]	; 0x28
 800b178:	f8d8 3000 	ldr.w	r3, [r8]
 800b17c:	9005      	str	r0, [sp, #20]
 800b17e:	3307      	adds	r3, #7
 800b180:	f023 0307 	bic.w	r3, r3, #7
 800b184:	f103 0208 	add.w	r2, r3, #8
 800b188:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b18c:	f8d4 b000 	ldr.w	fp, [r4]
 800b190:	f8c8 2000 	str.w	r2, [r8]
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b19c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1a4:	9307      	str	r3, [sp, #28]
 800b1a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1ae:	4ba7      	ldr	r3, [pc, #668]	; (800b44c <_printf_float+0x2f8>)
 800b1b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1b4:	f7f5 fcba 	bl	8000b2c <__aeabi_dcmpun>
 800b1b8:	bb70      	cbnz	r0, 800b218 <_printf_float+0xc4>
 800b1ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1be:	4ba3      	ldr	r3, [pc, #652]	; (800b44c <_printf_float+0x2f8>)
 800b1c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1c4:	f7f5 fc94 	bl	8000af0 <__aeabi_dcmple>
 800b1c8:	bb30      	cbnz	r0, 800b218 <_printf_float+0xc4>
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4640      	mov	r0, r8
 800b1d0:	4649      	mov	r1, r9
 800b1d2:	f7f5 fc83 	bl	8000adc <__aeabi_dcmplt>
 800b1d6:	b110      	cbz	r0, 800b1de <_printf_float+0x8a>
 800b1d8:	232d      	movs	r3, #45	; 0x2d
 800b1da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1de:	4a9c      	ldr	r2, [pc, #624]	; (800b450 <_printf_float+0x2fc>)
 800b1e0:	4b9c      	ldr	r3, [pc, #624]	; (800b454 <_printf_float+0x300>)
 800b1e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b1e6:	bf8c      	ite	hi
 800b1e8:	4690      	movhi	r8, r2
 800b1ea:	4698      	movls	r8, r3
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	f02b 0204 	bic.w	r2, fp, #4
 800b1f2:	6123      	str	r3, [r4, #16]
 800b1f4:	6022      	str	r2, [r4, #0]
 800b1f6:	f04f 0900 	mov.w	r9, #0
 800b1fa:	9700      	str	r7, [sp, #0]
 800b1fc:	4633      	mov	r3, r6
 800b1fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800b200:	4621      	mov	r1, r4
 800b202:	4628      	mov	r0, r5
 800b204:	f000 f9e6 	bl	800b5d4 <_printf_common>
 800b208:	3001      	adds	r0, #1
 800b20a:	f040 808d 	bne.w	800b328 <_printf_float+0x1d4>
 800b20e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b212:	b00d      	add	sp, #52	; 0x34
 800b214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b218:	4642      	mov	r2, r8
 800b21a:	464b      	mov	r3, r9
 800b21c:	4640      	mov	r0, r8
 800b21e:	4649      	mov	r1, r9
 800b220:	f7f5 fc84 	bl	8000b2c <__aeabi_dcmpun>
 800b224:	b110      	cbz	r0, 800b22c <_printf_float+0xd8>
 800b226:	4a8c      	ldr	r2, [pc, #560]	; (800b458 <_printf_float+0x304>)
 800b228:	4b8c      	ldr	r3, [pc, #560]	; (800b45c <_printf_float+0x308>)
 800b22a:	e7da      	b.n	800b1e2 <_printf_float+0x8e>
 800b22c:	6861      	ldr	r1, [r4, #4]
 800b22e:	1c4b      	adds	r3, r1, #1
 800b230:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b234:	a80a      	add	r0, sp, #40	; 0x28
 800b236:	d13e      	bne.n	800b2b6 <_printf_float+0x162>
 800b238:	2306      	movs	r3, #6
 800b23a:	6063      	str	r3, [r4, #4]
 800b23c:	2300      	movs	r3, #0
 800b23e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b242:	ab09      	add	r3, sp, #36	; 0x24
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	ec49 8b10 	vmov	d0, r8, r9
 800b24a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b24e:	6022      	str	r2, [r4, #0]
 800b250:	f8cd a004 	str.w	sl, [sp, #4]
 800b254:	6861      	ldr	r1, [r4, #4]
 800b256:	4628      	mov	r0, r5
 800b258:	f7ff fee8 	bl	800b02c <__cvt>
 800b25c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b260:	2b47      	cmp	r3, #71	; 0x47
 800b262:	4680      	mov	r8, r0
 800b264:	d109      	bne.n	800b27a <_printf_float+0x126>
 800b266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b268:	1cd8      	adds	r0, r3, #3
 800b26a:	db02      	blt.n	800b272 <_printf_float+0x11e>
 800b26c:	6862      	ldr	r2, [r4, #4]
 800b26e:	4293      	cmp	r3, r2
 800b270:	dd47      	ble.n	800b302 <_printf_float+0x1ae>
 800b272:	f1aa 0a02 	sub.w	sl, sl, #2
 800b276:	fa5f fa8a 	uxtb.w	sl, sl
 800b27a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b27e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b280:	d824      	bhi.n	800b2cc <_printf_float+0x178>
 800b282:	3901      	subs	r1, #1
 800b284:	4652      	mov	r2, sl
 800b286:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b28a:	9109      	str	r1, [sp, #36]	; 0x24
 800b28c:	f7ff ff2f 	bl	800b0ee <__exponent>
 800b290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b292:	1813      	adds	r3, r2, r0
 800b294:	2a01      	cmp	r2, #1
 800b296:	4681      	mov	r9, r0
 800b298:	6123      	str	r3, [r4, #16]
 800b29a:	dc02      	bgt.n	800b2a2 <_printf_float+0x14e>
 800b29c:	6822      	ldr	r2, [r4, #0]
 800b29e:	07d1      	lsls	r1, r2, #31
 800b2a0:	d501      	bpl.n	800b2a6 <_printf_float+0x152>
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	6123      	str	r3, [r4, #16]
 800b2a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0a5      	beq.n	800b1fa <_printf_float+0xa6>
 800b2ae:	232d      	movs	r3, #45	; 0x2d
 800b2b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b4:	e7a1      	b.n	800b1fa <_printf_float+0xa6>
 800b2b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b2ba:	f000 8177 	beq.w	800b5ac <_printf_float+0x458>
 800b2be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b2c2:	d1bb      	bne.n	800b23c <_printf_float+0xe8>
 800b2c4:	2900      	cmp	r1, #0
 800b2c6:	d1b9      	bne.n	800b23c <_printf_float+0xe8>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e7b6      	b.n	800b23a <_printf_float+0xe6>
 800b2cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b2d0:	d119      	bne.n	800b306 <_printf_float+0x1b2>
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	6863      	ldr	r3, [r4, #4]
 800b2d6:	dd0c      	ble.n	800b2f2 <_printf_float+0x19e>
 800b2d8:	6121      	str	r1, [r4, #16]
 800b2da:	b913      	cbnz	r3, 800b2e2 <_printf_float+0x18e>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	07d2      	lsls	r2, r2, #31
 800b2e0:	d502      	bpl.n	800b2e8 <_printf_float+0x194>
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	440b      	add	r3, r1
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ea:	65a3      	str	r3, [r4, #88]	; 0x58
 800b2ec:	f04f 0900 	mov.w	r9, #0
 800b2f0:	e7d9      	b.n	800b2a6 <_printf_float+0x152>
 800b2f2:	b913      	cbnz	r3, 800b2fa <_printf_float+0x1a6>
 800b2f4:	6822      	ldr	r2, [r4, #0]
 800b2f6:	07d0      	lsls	r0, r2, #31
 800b2f8:	d501      	bpl.n	800b2fe <_printf_float+0x1aa>
 800b2fa:	3302      	adds	r3, #2
 800b2fc:	e7f3      	b.n	800b2e6 <_printf_float+0x192>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e7f1      	b.n	800b2e6 <_printf_float+0x192>
 800b302:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b306:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b30a:	4293      	cmp	r3, r2
 800b30c:	db05      	blt.n	800b31a <_printf_float+0x1c6>
 800b30e:	6822      	ldr	r2, [r4, #0]
 800b310:	6123      	str	r3, [r4, #16]
 800b312:	07d1      	lsls	r1, r2, #31
 800b314:	d5e8      	bpl.n	800b2e8 <_printf_float+0x194>
 800b316:	3301      	adds	r3, #1
 800b318:	e7e5      	b.n	800b2e6 <_printf_float+0x192>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfd4      	ite	le
 800b31e:	f1c3 0302 	rsble	r3, r3, #2
 800b322:	2301      	movgt	r3, #1
 800b324:	4413      	add	r3, r2
 800b326:	e7de      	b.n	800b2e6 <_printf_float+0x192>
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	055a      	lsls	r2, r3, #21
 800b32c:	d407      	bmi.n	800b33e <_printf_float+0x1ea>
 800b32e:	6923      	ldr	r3, [r4, #16]
 800b330:	4642      	mov	r2, r8
 800b332:	4631      	mov	r1, r6
 800b334:	4628      	mov	r0, r5
 800b336:	47b8      	blx	r7
 800b338:	3001      	adds	r0, #1
 800b33a:	d12b      	bne.n	800b394 <_printf_float+0x240>
 800b33c:	e767      	b.n	800b20e <_printf_float+0xba>
 800b33e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b342:	f240 80dc 	bls.w	800b4fe <_printf_float+0x3aa>
 800b346:	2200      	movs	r2, #0
 800b348:	2300      	movs	r3, #0
 800b34a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b34e:	f7f5 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b352:	2800      	cmp	r0, #0
 800b354:	d033      	beq.n	800b3be <_printf_float+0x26a>
 800b356:	2301      	movs	r3, #1
 800b358:	4a41      	ldr	r2, [pc, #260]	; (800b460 <_printf_float+0x30c>)
 800b35a:	4631      	mov	r1, r6
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b8      	blx	r7
 800b360:	3001      	adds	r0, #1
 800b362:	f43f af54 	beq.w	800b20e <_printf_float+0xba>
 800b366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b36a:	429a      	cmp	r2, r3
 800b36c:	db02      	blt.n	800b374 <_printf_float+0x220>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	07d8      	lsls	r0, r3, #31
 800b372:	d50f      	bpl.n	800b394 <_printf_float+0x240>
 800b374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b378:	4631      	mov	r1, r6
 800b37a:	4628      	mov	r0, r5
 800b37c:	47b8      	blx	r7
 800b37e:	3001      	adds	r0, #1
 800b380:	f43f af45 	beq.w	800b20e <_printf_float+0xba>
 800b384:	f04f 0800 	mov.w	r8, #0
 800b388:	f104 091a 	add.w	r9, r4, #26
 800b38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b38e:	3b01      	subs	r3, #1
 800b390:	4543      	cmp	r3, r8
 800b392:	dc09      	bgt.n	800b3a8 <_printf_float+0x254>
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	079b      	lsls	r3, r3, #30
 800b398:	f100 8103 	bmi.w	800b5a2 <_printf_float+0x44e>
 800b39c:	68e0      	ldr	r0, [r4, #12]
 800b39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a0:	4298      	cmp	r0, r3
 800b3a2:	bfb8      	it	lt
 800b3a4:	4618      	movlt	r0, r3
 800b3a6:	e734      	b.n	800b212 <_printf_float+0xbe>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	464a      	mov	r2, r9
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	47b8      	blx	r7
 800b3b2:	3001      	adds	r0, #1
 800b3b4:	f43f af2b 	beq.w	800b20e <_printf_float+0xba>
 800b3b8:	f108 0801 	add.w	r8, r8, #1
 800b3bc:	e7e6      	b.n	800b38c <_printf_float+0x238>
 800b3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	dc2b      	bgt.n	800b41c <_printf_float+0x2c8>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	4a26      	ldr	r2, [pc, #152]	; (800b460 <_printf_float+0x30c>)
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	47b8      	blx	r7
 800b3ce:	3001      	adds	r0, #1
 800b3d0:	f43f af1d 	beq.w	800b20e <_printf_float+0xba>
 800b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d6:	b923      	cbnz	r3, 800b3e2 <_printf_float+0x28e>
 800b3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3da:	b913      	cbnz	r3, 800b3e2 <_printf_float+0x28e>
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	07d9      	lsls	r1, r3, #31
 800b3e0:	d5d8      	bpl.n	800b394 <_printf_float+0x240>
 800b3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b8      	blx	r7
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	f43f af0e 	beq.w	800b20e <_printf_float+0xba>
 800b3f2:	f04f 0900 	mov.w	r9, #0
 800b3f6:	f104 0a1a 	add.w	sl, r4, #26
 800b3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3fc:	425b      	negs	r3, r3
 800b3fe:	454b      	cmp	r3, r9
 800b400:	dc01      	bgt.n	800b406 <_printf_float+0x2b2>
 800b402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b404:	e794      	b.n	800b330 <_printf_float+0x1dc>
 800b406:	2301      	movs	r3, #1
 800b408:	4652      	mov	r2, sl
 800b40a:	4631      	mov	r1, r6
 800b40c:	4628      	mov	r0, r5
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	f43f aefc 	beq.w	800b20e <_printf_float+0xba>
 800b416:	f109 0901 	add.w	r9, r9, #1
 800b41a:	e7ee      	b.n	800b3fa <_printf_float+0x2a6>
 800b41c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b41e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b420:	429a      	cmp	r2, r3
 800b422:	bfa8      	it	ge
 800b424:	461a      	movge	r2, r3
 800b426:	2a00      	cmp	r2, #0
 800b428:	4691      	mov	r9, r2
 800b42a:	dd07      	ble.n	800b43c <_printf_float+0x2e8>
 800b42c:	4613      	mov	r3, r2
 800b42e:	4631      	mov	r1, r6
 800b430:	4642      	mov	r2, r8
 800b432:	4628      	mov	r0, r5
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	f43f aee9 	beq.w	800b20e <_printf_float+0xba>
 800b43c:	f104 031a 	add.w	r3, r4, #26
 800b440:	f04f 0b00 	mov.w	fp, #0
 800b444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b448:	9306      	str	r3, [sp, #24]
 800b44a:	e015      	b.n	800b478 <_printf_float+0x324>
 800b44c:	7fefffff 	.word	0x7fefffff
 800b450:	0800d43c 	.word	0x0800d43c
 800b454:	0800d438 	.word	0x0800d438
 800b458:	0800d444 	.word	0x0800d444
 800b45c:	0800d440 	.word	0x0800d440
 800b460:	0800d448 	.word	0x0800d448
 800b464:	2301      	movs	r3, #1
 800b466:	9a06      	ldr	r2, [sp, #24]
 800b468:	4631      	mov	r1, r6
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b8      	blx	r7
 800b46e:	3001      	adds	r0, #1
 800b470:	f43f aecd 	beq.w	800b20e <_printf_float+0xba>
 800b474:	f10b 0b01 	add.w	fp, fp, #1
 800b478:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b47c:	ebaa 0309 	sub.w	r3, sl, r9
 800b480:	455b      	cmp	r3, fp
 800b482:	dcef      	bgt.n	800b464 <_printf_float+0x310>
 800b484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b488:	429a      	cmp	r2, r3
 800b48a:	44d0      	add	r8, sl
 800b48c:	db15      	blt.n	800b4ba <_printf_float+0x366>
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	07da      	lsls	r2, r3, #31
 800b492:	d412      	bmi.n	800b4ba <_printf_float+0x366>
 800b494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b496:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b498:	eba3 020a 	sub.w	r2, r3, sl
 800b49c:	eba3 0a01 	sub.w	sl, r3, r1
 800b4a0:	4592      	cmp	sl, r2
 800b4a2:	bfa8      	it	ge
 800b4a4:	4692      	movge	sl, r2
 800b4a6:	f1ba 0f00 	cmp.w	sl, #0
 800b4aa:	dc0e      	bgt.n	800b4ca <_printf_float+0x376>
 800b4ac:	f04f 0800 	mov.w	r8, #0
 800b4b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4b4:	f104 091a 	add.w	r9, r4, #26
 800b4b8:	e019      	b.n	800b4ee <_printf_float+0x39a>
 800b4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	47b8      	blx	r7
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d1e5      	bne.n	800b494 <_printf_float+0x340>
 800b4c8:	e6a1      	b.n	800b20e <_printf_float+0xba>
 800b4ca:	4653      	mov	r3, sl
 800b4cc:	4642      	mov	r2, r8
 800b4ce:	4631      	mov	r1, r6
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	47b8      	blx	r7
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d1e9      	bne.n	800b4ac <_printf_float+0x358>
 800b4d8:	e699      	b.n	800b20e <_printf_float+0xba>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	464a      	mov	r2, r9
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	f43f ae92 	beq.w	800b20e <_printf_float+0xba>
 800b4ea:	f108 0801 	add.w	r8, r8, #1
 800b4ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	eba3 030a 	sub.w	r3, r3, sl
 800b4f8:	4543      	cmp	r3, r8
 800b4fa:	dcee      	bgt.n	800b4da <_printf_float+0x386>
 800b4fc:	e74a      	b.n	800b394 <_printf_float+0x240>
 800b4fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b500:	2a01      	cmp	r2, #1
 800b502:	dc01      	bgt.n	800b508 <_printf_float+0x3b4>
 800b504:	07db      	lsls	r3, r3, #31
 800b506:	d53a      	bpl.n	800b57e <_printf_float+0x42a>
 800b508:	2301      	movs	r3, #1
 800b50a:	4642      	mov	r2, r8
 800b50c:	4631      	mov	r1, r6
 800b50e:	4628      	mov	r0, r5
 800b510:	47b8      	blx	r7
 800b512:	3001      	adds	r0, #1
 800b514:	f43f ae7b 	beq.w	800b20e <_printf_float+0xba>
 800b518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b51c:	4631      	mov	r1, r6
 800b51e:	4628      	mov	r0, r5
 800b520:	47b8      	blx	r7
 800b522:	3001      	adds	r0, #1
 800b524:	f108 0801 	add.w	r8, r8, #1
 800b528:	f43f ae71 	beq.w	800b20e <_printf_float+0xba>
 800b52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b52e:	2200      	movs	r2, #0
 800b530:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800b534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b538:	2300      	movs	r3, #0
 800b53a:	f7f5 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b53e:	b9c8      	cbnz	r0, 800b574 <_printf_float+0x420>
 800b540:	4653      	mov	r3, sl
 800b542:	4642      	mov	r2, r8
 800b544:	4631      	mov	r1, r6
 800b546:	4628      	mov	r0, r5
 800b548:	47b8      	blx	r7
 800b54a:	3001      	adds	r0, #1
 800b54c:	d10e      	bne.n	800b56c <_printf_float+0x418>
 800b54e:	e65e      	b.n	800b20e <_printf_float+0xba>
 800b550:	2301      	movs	r3, #1
 800b552:	4652      	mov	r2, sl
 800b554:	4631      	mov	r1, r6
 800b556:	4628      	mov	r0, r5
 800b558:	47b8      	blx	r7
 800b55a:	3001      	adds	r0, #1
 800b55c:	f43f ae57 	beq.w	800b20e <_printf_float+0xba>
 800b560:	f108 0801 	add.w	r8, r8, #1
 800b564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b566:	3b01      	subs	r3, #1
 800b568:	4543      	cmp	r3, r8
 800b56a:	dcf1      	bgt.n	800b550 <_printf_float+0x3fc>
 800b56c:	464b      	mov	r3, r9
 800b56e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b572:	e6de      	b.n	800b332 <_printf_float+0x1de>
 800b574:	f04f 0800 	mov.w	r8, #0
 800b578:	f104 0a1a 	add.w	sl, r4, #26
 800b57c:	e7f2      	b.n	800b564 <_printf_float+0x410>
 800b57e:	2301      	movs	r3, #1
 800b580:	e7df      	b.n	800b542 <_printf_float+0x3ee>
 800b582:	2301      	movs	r3, #1
 800b584:	464a      	mov	r2, r9
 800b586:	4631      	mov	r1, r6
 800b588:	4628      	mov	r0, r5
 800b58a:	47b8      	blx	r7
 800b58c:	3001      	adds	r0, #1
 800b58e:	f43f ae3e 	beq.w	800b20e <_printf_float+0xba>
 800b592:	f108 0801 	add.w	r8, r8, #1
 800b596:	68e3      	ldr	r3, [r4, #12]
 800b598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b59a:	1a9b      	subs	r3, r3, r2
 800b59c:	4543      	cmp	r3, r8
 800b59e:	dcf0      	bgt.n	800b582 <_printf_float+0x42e>
 800b5a0:	e6fc      	b.n	800b39c <_printf_float+0x248>
 800b5a2:	f04f 0800 	mov.w	r8, #0
 800b5a6:	f104 0919 	add.w	r9, r4, #25
 800b5aa:	e7f4      	b.n	800b596 <_printf_float+0x442>
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	f43f ae8b 	beq.w	800b2c8 <_printf_float+0x174>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b5b8:	ab09      	add	r3, sp, #36	; 0x24
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	ec49 8b10 	vmov	d0, r8, r9
 800b5c0:	6022      	str	r2, [r4, #0]
 800b5c2:	f8cd a004 	str.w	sl, [sp, #4]
 800b5c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f7ff fd2e 	bl	800b02c <__cvt>
 800b5d0:	4680      	mov	r8, r0
 800b5d2:	e648      	b.n	800b266 <_printf_float+0x112>

0800b5d4 <_printf_common>:
 800b5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5d8:	4691      	mov	r9, r2
 800b5da:	461f      	mov	r7, r3
 800b5dc:	688a      	ldr	r2, [r1, #8]
 800b5de:	690b      	ldr	r3, [r1, #16]
 800b5e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	bfb8      	it	lt
 800b5e8:	4613      	movlt	r3, r2
 800b5ea:	f8c9 3000 	str.w	r3, [r9]
 800b5ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	b112      	cbz	r2, 800b5fe <_printf_common+0x2a>
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	f8c9 3000 	str.w	r3, [r9]
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	0699      	lsls	r1, r3, #26
 800b602:	bf42      	ittt	mi
 800b604:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b608:	3302      	addmi	r3, #2
 800b60a:	f8c9 3000 	strmi.w	r3, [r9]
 800b60e:	6825      	ldr	r5, [r4, #0]
 800b610:	f015 0506 	ands.w	r5, r5, #6
 800b614:	d107      	bne.n	800b626 <_printf_common+0x52>
 800b616:	f104 0a19 	add.w	sl, r4, #25
 800b61a:	68e3      	ldr	r3, [r4, #12]
 800b61c:	f8d9 2000 	ldr.w	r2, [r9]
 800b620:	1a9b      	subs	r3, r3, r2
 800b622:	42ab      	cmp	r3, r5
 800b624:	dc28      	bgt.n	800b678 <_printf_common+0xa4>
 800b626:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b62a:	6822      	ldr	r2, [r4, #0]
 800b62c:	3300      	adds	r3, #0
 800b62e:	bf18      	it	ne
 800b630:	2301      	movne	r3, #1
 800b632:	0692      	lsls	r2, r2, #26
 800b634:	d42d      	bmi.n	800b692 <_printf_common+0xbe>
 800b636:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b63a:	4639      	mov	r1, r7
 800b63c:	4630      	mov	r0, r6
 800b63e:	47c0      	blx	r8
 800b640:	3001      	adds	r0, #1
 800b642:	d020      	beq.n	800b686 <_printf_common+0xb2>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	68e5      	ldr	r5, [r4, #12]
 800b648:	f8d9 2000 	ldr.w	r2, [r9]
 800b64c:	f003 0306 	and.w	r3, r3, #6
 800b650:	2b04      	cmp	r3, #4
 800b652:	bf08      	it	eq
 800b654:	1aad      	subeq	r5, r5, r2
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	6922      	ldr	r2, [r4, #16]
 800b65a:	bf0c      	ite	eq
 800b65c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b660:	2500      	movne	r5, #0
 800b662:	4293      	cmp	r3, r2
 800b664:	bfc4      	itt	gt
 800b666:	1a9b      	subgt	r3, r3, r2
 800b668:	18ed      	addgt	r5, r5, r3
 800b66a:	f04f 0900 	mov.w	r9, #0
 800b66e:	341a      	adds	r4, #26
 800b670:	454d      	cmp	r5, r9
 800b672:	d11a      	bne.n	800b6aa <_printf_common+0xd6>
 800b674:	2000      	movs	r0, #0
 800b676:	e008      	b.n	800b68a <_printf_common+0xb6>
 800b678:	2301      	movs	r3, #1
 800b67a:	4652      	mov	r2, sl
 800b67c:	4639      	mov	r1, r7
 800b67e:	4630      	mov	r0, r6
 800b680:	47c0      	blx	r8
 800b682:	3001      	adds	r0, #1
 800b684:	d103      	bne.n	800b68e <_printf_common+0xba>
 800b686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68e:	3501      	adds	r5, #1
 800b690:	e7c3      	b.n	800b61a <_printf_common+0x46>
 800b692:	18e1      	adds	r1, r4, r3
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	2030      	movs	r0, #48	; 0x30
 800b698:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b69c:	4422      	add	r2, r4
 800b69e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6a6:	3302      	adds	r3, #2
 800b6a8:	e7c5      	b.n	800b636 <_printf_common+0x62>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	4622      	mov	r2, r4
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	47c0      	blx	r8
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d0e6      	beq.n	800b686 <_printf_common+0xb2>
 800b6b8:	f109 0901 	add.w	r9, r9, #1
 800b6bc:	e7d8      	b.n	800b670 <_printf_common+0x9c>
	...

0800b6c0 <_printf_i>:
 800b6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	7e09      	ldrb	r1, [r1, #24]
 800b6cc:	b085      	sub	sp, #20
 800b6ce:	296e      	cmp	r1, #110	; 0x6e
 800b6d0:	4617      	mov	r7, r2
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	4698      	mov	r8, r3
 800b6d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6d8:	f000 80b3 	beq.w	800b842 <_printf_i+0x182>
 800b6dc:	d822      	bhi.n	800b724 <_printf_i+0x64>
 800b6de:	2963      	cmp	r1, #99	; 0x63
 800b6e0:	d036      	beq.n	800b750 <_printf_i+0x90>
 800b6e2:	d80a      	bhi.n	800b6fa <_printf_i+0x3a>
 800b6e4:	2900      	cmp	r1, #0
 800b6e6:	f000 80b9 	beq.w	800b85c <_printf_i+0x19c>
 800b6ea:	2958      	cmp	r1, #88	; 0x58
 800b6ec:	f000 8083 	beq.w	800b7f6 <_printf_i+0x136>
 800b6f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b6f8:	e032      	b.n	800b760 <_printf_i+0xa0>
 800b6fa:	2964      	cmp	r1, #100	; 0x64
 800b6fc:	d001      	beq.n	800b702 <_printf_i+0x42>
 800b6fe:	2969      	cmp	r1, #105	; 0x69
 800b700:	d1f6      	bne.n	800b6f0 <_printf_i+0x30>
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	6813      	ldr	r3, [r2, #0]
 800b706:	0605      	lsls	r5, r0, #24
 800b708:	f103 0104 	add.w	r1, r3, #4
 800b70c:	d52a      	bpl.n	800b764 <_printf_i+0xa4>
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6011      	str	r1, [r2, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	da03      	bge.n	800b71e <_printf_i+0x5e>
 800b716:	222d      	movs	r2, #45	; 0x2d
 800b718:	425b      	negs	r3, r3
 800b71a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b71e:	486f      	ldr	r0, [pc, #444]	; (800b8dc <_printf_i+0x21c>)
 800b720:	220a      	movs	r2, #10
 800b722:	e039      	b.n	800b798 <_printf_i+0xd8>
 800b724:	2973      	cmp	r1, #115	; 0x73
 800b726:	f000 809d 	beq.w	800b864 <_printf_i+0x1a4>
 800b72a:	d808      	bhi.n	800b73e <_printf_i+0x7e>
 800b72c:	296f      	cmp	r1, #111	; 0x6f
 800b72e:	d020      	beq.n	800b772 <_printf_i+0xb2>
 800b730:	2970      	cmp	r1, #112	; 0x70
 800b732:	d1dd      	bne.n	800b6f0 <_printf_i+0x30>
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	f043 0320 	orr.w	r3, r3, #32
 800b73a:	6023      	str	r3, [r4, #0]
 800b73c:	e003      	b.n	800b746 <_printf_i+0x86>
 800b73e:	2975      	cmp	r1, #117	; 0x75
 800b740:	d017      	beq.n	800b772 <_printf_i+0xb2>
 800b742:	2978      	cmp	r1, #120	; 0x78
 800b744:	d1d4      	bne.n	800b6f0 <_printf_i+0x30>
 800b746:	2378      	movs	r3, #120	; 0x78
 800b748:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b74c:	4864      	ldr	r0, [pc, #400]	; (800b8e0 <_printf_i+0x220>)
 800b74e:	e055      	b.n	800b7fc <_printf_i+0x13c>
 800b750:	6813      	ldr	r3, [r2, #0]
 800b752:	1d19      	adds	r1, r3, #4
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6011      	str	r1, [r2, #0]
 800b758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b75c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b760:	2301      	movs	r3, #1
 800b762:	e08c      	b.n	800b87e <_printf_i+0x1be>
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6011      	str	r1, [r2, #0]
 800b768:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b76c:	bf18      	it	ne
 800b76e:	b21b      	sxthne	r3, r3
 800b770:	e7cf      	b.n	800b712 <_printf_i+0x52>
 800b772:	6813      	ldr	r3, [r2, #0]
 800b774:	6825      	ldr	r5, [r4, #0]
 800b776:	1d18      	adds	r0, r3, #4
 800b778:	6010      	str	r0, [r2, #0]
 800b77a:	0628      	lsls	r0, r5, #24
 800b77c:	d501      	bpl.n	800b782 <_printf_i+0xc2>
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	e002      	b.n	800b788 <_printf_i+0xc8>
 800b782:	0668      	lsls	r0, r5, #25
 800b784:	d5fb      	bpl.n	800b77e <_printf_i+0xbe>
 800b786:	881b      	ldrh	r3, [r3, #0]
 800b788:	4854      	ldr	r0, [pc, #336]	; (800b8dc <_printf_i+0x21c>)
 800b78a:	296f      	cmp	r1, #111	; 0x6f
 800b78c:	bf14      	ite	ne
 800b78e:	220a      	movne	r2, #10
 800b790:	2208      	moveq	r2, #8
 800b792:	2100      	movs	r1, #0
 800b794:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b798:	6865      	ldr	r5, [r4, #4]
 800b79a:	60a5      	str	r5, [r4, #8]
 800b79c:	2d00      	cmp	r5, #0
 800b79e:	f2c0 8095 	blt.w	800b8cc <_printf_i+0x20c>
 800b7a2:	6821      	ldr	r1, [r4, #0]
 800b7a4:	f021 0104 	bic.w	r1, r1, #4
 800b7a8:	6021      	str	r1, [r4, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d13d      	bne.n	800b82a <_printf_i+0x16a>
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	f040 808e 	bne.w	800b8d0 <_printf_i+0x210>
 800b7b4:	4665      	mov	r5, ip
 800b7b6:	2a08      	cmp	r2, #8
 800b7b8:	d10b      	bne.n	800b7d2 <_printf_i+0x112>
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	07db      	lsls	r3, r3, #31
 800b7be:	d508      	bpl.n	800b7d2 <_printf_i+0x112>
 800b7c0:	6923      	ldr	r3, [r4, #16]
 800b7c2:	6862      	ldr	r2, [r4, #4]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	bfde      	ittt	le
 800b7c8:	2330      	movle	r3, #48	; 0x30
 800b7ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b7d2:	ebac 0305 	sub.w	r3, ip, r5
 800b7d6:	6123      	str	r3, [r4, #16]
 800b7d8:	f8cd 8000 	str.w	r8, [sp]
 800b7dc:	463b      	mov	r3, r7
 800b7de:	aa03      	add	r2, sp, #12
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f7ff fef6 	bl	800b5d4 <_printf_common>
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	d14d      	bne.n	800b888 <_printf_i+0x1c8>
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7f0:	b005      	add	sp, #20
 800b7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7f6:	4839      	ldr	r0, [pc, #228]	; (800b8dc <_printf_i+0x21c>)
 800b7f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b7fc:	6813      	ldr	r3, [r2, #0]
 800b7fe:	6821      	ldr	r1, [r4, #0]
 800b800:	1d1d      	adds	r5, r3, #4
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6015      	str	r5, [r2, #0]
 800b806:	060a      	lsls	r2, r1, #24
 800b808:	d50b      	bpl.n	800b822 <_printf_i+0x162>
 800b80a:	07ca      	lsls	r2, r1, #31
 800b80c:	bf44      	itt	mi
 800b80e:	f041 0120 	orrmi.w	r1, r1, #32
 800b812:	6021      	strmi	r1, [r4, #0]
 800b814:	b91b      	cbnz	r3, 800b81e <_printf_i+0x15e>
 800b816:	6822      	ldr	r2, [r4, #0]
 800b818:	f022 0220 	bic.w	r2, r2, #32
 800b81c:	6022      	str	r2, [r4, #0]
 800b81e:	2210      	movs	r2, #16
 800b820:	e7b7      	b.n	800b792 <_printf_i+0xd2>
 800b822:	064d      	lsls	r5, r1, #25
 800b824:	bf48      	it	mi
 800b826:	b29b      	uxthmi	r3, r3
 800b828:	e7ef      	b.n	800b80a <_printf_i+0x14a>
 800b82a:	4665      	mov	r5, ip
 800b82c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b830:	fb02 3311 	mls	r3, r2, r1, r3
 800b834:	5cc3      	ldrb	r3, [r0, r3]
 800b836:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b83a:	460b      	mov	r3, r1
 800b83c:	2900      	cmp	r1, #0
 800b83e:	d1f5      	bne.n	800b82c <_printf_i+0x16c>
 800b840:	e7b9      	b.n	800b7b6 <_printf_i+0xf6>
 800b842:	6813      	ldr	r3, [r2, #0]
 800b844:	6825      	ldr	r5, [r4, #0]
 800b846:	6961      	ldr	r1, [r4, #20]
 800b848:	1d18      	adds	r0, r3, #4
 800b84a:	6010      	str	r0, [r2, #0]
 800b84c:	0628      	lsls	r0, r5, #24
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	d501      	bpl.n	800b856 <_printf_i+0x196>
 800b852:	6019      	str	r1, [r3, #0]
 800b854:	e002      	b.n	800b85c <_printf_i+0x19c>
 800b856:	066a      	lsls	r2, r5, #25
 800b858:	d5fb      	bpl.n	800b852 <_printf_i+0x192>
 800b85a:	8019      	strh	r1, [r3, #0]
 800b85c:	2300      	movs	r3, #0
 800b85e:	6123      	str	r3, [r4, #16]
 800b860:	4665      	mov	r5, ip
 800b862:	e7b9      	b.n	800b7d8 <_printf_i+0x118>
 800b864:	6813      	ldr	r3, [r2, #0]
 800b866:	1d19      	adds	r1, r3, #4
 800b868:	6011      	str	r1, [r2, #0]
 800b86a:	681d      	ldr	r5, [r3, #0]
 800b86c:	6862      	ldr	r2, [r4, #4]
 800b86e:	2100      	movs	r1, #0
 800b870:	4628      	mov	r0, r5
 800b872:	f7f4 fcb5 	bl	80001e0 <memchr>
 800b876:	b108      	cbz	r0, 800b87c <_printf_i+0x1bc>
 800b878:	1b40      	subs	r0, r0, r5
 800b87a:	6060      	str	r0, [r4, #4]
 800b87c:	6863      	ldr	r3, [r4, #4]
 800b87e:	6123      	str	r3, [r4, #16]
 800b880:	2300      	movs	r3, #0
 800b882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b886:	e7a7      	b.n	800b7d8 <_printf_i+0x118>
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	462a      	mov	r2, r5
 800b88c:	4639      	mov	r1, r7
 800b88e:	4630      	mov	r0, r6
 800b890:	47c0      	blx	r8
 800b892:	3001      	adds	r0, #1
 800b894:	d0aa      	beq.n	800b7ec <_printf_i+0x12c>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	079b      	lsls	r3, r3, #30
 800b89a:	d413      	bmi.n	800b8c4 <_printf_i+0x204>
 800b89c:	68e0      	ldr	r0, [r4, #12]
 800b89e:	9b03      	ldr	r3, [sp, #12]
 800b8a0:	4298      	cmp	r0, r3
 800b8a2:	bfb8      	it	lt
 800b8a4:	4618      	movlt	r0, r3
 800b8a6:	e7a3      	b.n	800b7f0 <_printf_i+0x130>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	464a      	mov	r2, r9
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	47c0      	blx	r8
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	d09a      	beq.n	800b7ec <_printf_i+0x12c>
 800b8b6:	3501      	adds	r5, #1
 800b8b8:	68e3      	ldr	r3, [r4, #12]
 800b8ba:	9a03      	ldr	r2, [sp, #12]
 800b8bc:	1a9b      	subs	r3, r3, r2
 800b8be:	42ab      	cmp	r3, r5
 800b8c0:	dcf2      	bgt.n	800b8a8 <_printf_i+0x1e8>
 800b8c2:	e7eb      	b.n	800b89c <_printf_i+0x1dc>
 800b8c4:	2500      	movs	r5, #0
 800b8c6:	f104 0919 	add.w	r9, r4, #25
 800b8ca:	e7f5      	b.n	800b8b8 <_printf_i+0x1f8>
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1ac      	bne.n	800b82a <_printf_i+0x16a>
 800b8d0:	7803      	ldrb	r3, [r0, #0]
 800b8d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8da:	e76c      	b.n	800b7b6 <_printf_i+0xf6>
 800b8dc:	0800d44a 	.word	0x0800d44a
 800b8e0:	0800d45b 	.word	0x0800d45b

0800b8e4 <siprintf>:
 800b8e4:	b40e      	push	{r1, r2, r3}
 800b8e6:	b500      	push	{lr}
 800b8e8:	b09c      	sub	sp, #112	; 0x70
 800b8ea:	ab1d      	add	r3, sp, #116	; 0x74
 800b8ec:	9002      	str	r0, [sp, #8]
 800b8ee:	9006      	str	r0, [sp, #24]
 800b8f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8f4:	4809      	ldr	r0, [pc, #36]	; (800b91c <siprintf+0x38>)
 800b8f6:	9107      	str	r1, [sp, #28]
 800b8f8:	9104      	str	r1, [sp, #16]
 800b8fa:	4909      	ldr	r1, [pc, #36]	; (800b920 <siprintf+0x3c>)
 800b8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b900:	9105      	str	r1, [sp, #20]
 800b902:	6800      	ldr	r0, [r0, #0]
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	a902      	add	r1, sp, #8
 800b908:	f001 fb04 	bl	800cf14 <_svfiprintf_r>
 800b90c:	9b02      	ldr	r3, [sp, #8]
 800b90e:	2200      	movs	r2, #0
 800b910:	701a      	strb	r2, [r3, #0]
 800b912:	b01c      	add	sp, #112	; 0x70
 800b914:	f85d eb04 	ldr.w	lr, [sp], #4
 800b918:	b003      	add	sp, #12
 800b91a:	4770      	bx	lr
 800b91c:	20000028 	.word	0x20000028
 800b920:	ffff0208 	.word	0xffff0208

0800b924 <_strtol_l.isra.0>:
 800b924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b928:	4680      	mov	r8, r0
 800b92a:	4689      	mov	r9, r1
 800b92c:	4692      	mov	sl, r2
 800b92e:	461e      	mov	r6, r3
 800b930:	460f      	mov	r7, r1
 800b932:	463d      	mov	r5, r7
 800b934:	9808      	ldr	r0, [sp, #32]
 800b936:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b93a:	f000 fec9 	bl	800c6d0 <__locale_ctype_ptr_l>
 800b93e:	4420      	add	r0, r4
 800b940:	7843      	ldrb	r3, [r0, #1]
 800b942:	f013 0308 	ands.w	r3, r3, #8
 800b946:	d132      	bne.n	800b9ae <_strtol_l.isra.0+0x8a>
 800b948:	2c2d      	cmp	r4, #45	; 0x2d
 800b94a:	d132      	bne.n	800b9b2 <_strtol_l.isra.0+0x8e>
 800b94c:	787c      	ldrb	r4, [r7, #1]
 800b94e:	1cbd      	adds	r5, r7, #2
 800b950:	2201      	movs	r2, #1
 800b952:	2e00      	cmp	r6, #0
 800b954:	d05d      	beq.n	800ba12 <_strtol_l.isra.0+0xee>
 800b956:	2e10      	cmp	r6, #16
 800b958:	d109      	bne.n	800b96e <_strtol_l.isra.0+0x4a>
 800b95a:	2c30      	cmp	r4, #48	; 0x30
 800b95c:	d107      	bne.n	800b96e <_strtol_l.isra.0+0x4a>
 800b95e:	782b      	ldrb	r3, [r5, #0]
 800b960:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b964:	2b58      	cmp	r3, #88	; 0x58
 800b966:	d14f      	bne.n	800ba08 <_strtol_l.isra.0+0xe4>
 800b968:	786c      	ldrb	r4, [r5, #1]
 800b96a:	2610      	movs	r6, #16
 800b96c:	3502      	adds	r5, #2
 800b96e:	2a00      	cmp	r2, #0
 800b970:	bf14      	ite	ne
 800b972:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b976:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b97a:	2700      	movs	r7, #0
 800b97c:	fbb1 fcf6 	udiv	ip, r1, r6
 800b980:	4638      	mov	r0, r7
 800b982:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b986:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b98a:	2b09      	cmp	r3, #9
 800b98c:	d817      	bhi.n	800b9be <_strtol_l.isra.0+0x9a>
 800b98e:	461c      	mov	r4, r3
 800b990:	42a6      	cmp	r6, r4
 800b992:	dd23      	ble.n	800b9dc <_strtol_l.isra.0+0xb8>
 800b994:	1c7b      	adds	r3, r7, #1
 800b996:	d007      	beq.n	800b9a8 <_strtol_l.isra.0+0x84>
 800b998:	4584      	cmp	ip, r0
 800b99a:	d31c      	bcc.n	800b9d6 <_strtol_l.isra.0+0xb2>
 800b99c:	d101      	bne.n	800b9a2 <_strtol_l.isra.0+0x7e>
 800b99e:	45a6      	cmp	lr, r4
 800b9a0:	db19      	blt.n	800b9d6 <_strtol_l.isra.0+0xb2>
 800b9a2:	fb00 4006 	mla	r0, r0, r6, r4
 800b9a6:	2701      	movs	r7, #1
 800b9a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9ac:	e7eb      	b.n	800b986 <_strtol_l.isra.0+0x62>
 800b9ae:	462f      	mov	r7, r5
 800b9b0:	e7bf      	b.n	800b932 <_strtol_l.isra.0+0xe>
 800b9b2:	2c2b      	cmp	r4, #43	; 0x2b
 800b9b4:	bf04      	itt	eq
 800b9b6:	1cbd      	addeq	r5, r7, #2
 800b9b8:	787c      	ldrbeq	r4, [r7, #1]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	e7c9      	b.n	800b952 <_strtol_l.isra.0+0x2e>
 800b9be:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b9c2:	2b19      	cmp	r3, #25
 800b9c4:	d801      	bhi.n	800b9ca <_strtol_l.isra.0+0xa6>
 800b9c6:	3c37      	subs	r4, #55	; 0x37
 800b9c8:	e7e2      	b.n	800b990 <_strtol_l.isra.0+0x6c>
 800b9ca:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b9ce:	2b19      	cmp	r3, #25
 800b9d0:	d804      	bhi.n	800b9dc <_strtol_l.isra.0+0xb8>
 800b9d2:	3c57      	subs	r4, #87	; 0x57
 800b9d4:	e7dc      	b.n	800b990 <_strtol_l.isra.0+0x6c>
 800b9d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b9da:	e7e5      	b.n	800b9a8 <_strtol_l.isra.0+0x84>
 800b9dc:	1c7b      	adds	r3, r7, #1
 800b9de:	d108      	bne.n	800b9f2 <_strtol_l.isra.0+0xce>
 800b9e0:	2322      	movs	r3, #34	; 0x22
 800b9e2:	f8c8 3000 	str.w	r3, [r8]
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ec:	d107      	bne.n	800b9fe <_strtol_l.isra.0+0xda>
 800b9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f2:	b102      	cbz	r2, 800b9f6 <_strtol_l.isra.0+0xd2>
 800b9f4:	4240      	negs	r0, r0
 800b9f6:	f1ba 0f00 	cmp.w	sl, #0
 800b9fa:	d0f8      	beq.n	800b9ee <_strtol_l.isra.0+0xca>
 800b9fc:	b10f      	cbz	r7, 800ba02 <_strtol_l.isra.0+0xde>
 800b9fe:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ba02:	f8ca 9000 	str.w	r9, [sl]
 800ba06:	e7f2      	b.n	800b9ee <_strtol_l.isra.0+0xca>
 800ba08:	2430      	movs	r4, #48	; 0x30
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	d1af      	bne.n	800b96e <_strtol_l.isra.0+0x4a>
 800ba0e:	2608      	movs	r6, #8
 800ba10:	e7ad      	b.n	800b96e <_strtol_l.isra.0+0x4a>
 800ba12:	2c30      	cmp	r4, #48	; 0x30
 800ba14:	d0a3      	beq.n	800b95e <_strtol_l.isra.0+0x3a>
 800ba16:	260a      	movs	r6, #10
 800ba18:	e7a9      	b.n	800b96e <_strtol_l.isra.0+0x4a>
	...

0800ba1c <strtol>:
 800ba1c:	4b08      	ldr	r3, [pc, #32]	; (800ba40 <strtol+0x24>)
 800ba1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba20:	681c      	ldr	r4, [r3, #0]
 800ba22:	4d08      	ldr	r5, [pc, #32]	; (800ba44 <strtol+0x28>)
 800ba24:	6a23      	ldr	r3, [r4, #32]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bf08      	it	eq
 800ba2a:	462b      	moveq	r3, r5
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	460a      	mov	r2, r1
 800ba32:	4601      	mov	r1, r0
 800ba34:	4620      	mov	r0, r4
 800ba36:	f7ff ff75 	bl	800b924 <_strtol_l.isra.0>
 800ba3a:	b003      	add	sp, #12
 800ba3c:	bd30      	pop	{r4, r5, pc}
 800ba3e:	bf00      	nop
 800ba40:	20000028 	.word	0x20000028
 800ba44:	2000008c 	.word	0x2000008c

0800ba48 <quorem>:
 800ba48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	6903      	ldr	r3, [r0, #16]
 800ba4e:	690c      	ldr	r4, [r1, #16]
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	4680      	mov	r8, r0
 800ba54:	f2c0 8082 	blt.w	800bb5c <quorem+0x114>
 800ba58:	3c01      	subs	r4, #1
 800ba5a:	f101 0714 	add.w	r7, r1, #20
 800ba5e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ba62:	f100 0614 	add.w	r6, r0, #20
 800ba66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ba6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ba6e:	eb06 030c 	add.w	r3, r6, ip
 800ba72:	3501      	adds	r5, #1
 800ba74:	eb07 090c 	add.w	r9, r7, ip
 800ba78:	9301      	str	r3, [sp, #4]
 800ba7a:	fbb0 f5f5 	udiv	r5, r0, r5
 800ba7e:	b395      	cbz	r5, 800bae6 <quorem+0x9e>
 800ba80:	f04f 0a00 	mov.w	sl, #0
 800ba84:	4638      	mov	r0, r7
 800ba86:	46b6      	mov	lr, r6
 800ba88:	46d3      	mov	fp, sl
 800ba8a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba8e:	b293      	uxth	r3, r2
 800ba90:	fb05 a303 	mla	r3, r5, r3, sl
 800ba94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	ebab 0303 	sub.w	r3, fp, r3
 800ba9e:	0c12      	lsrs	r2, r2, #16
 800baa0:	f8de b000 	ldr.w	fp, [lr]
 800baa4:	fb05 a202 	mla	r2, r5, r2, sl
 800baa8:	fa13 f38b 	uxtah	r3, r3, fp
 800baac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bab0:	fa1f fb82 	uxth.w	fp, r2
 800bab4:	f8de 2000 	ldr.w	r2, [lr]
 800bab8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800babc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bac6:	4581      	cmp	r9, r0
 800bac8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bacc:	f84e 3b04 	str.w	r3, [lr], #4
 800bad0:	d2db      	bcs.n	800ba8a <quorem+0x42>
 800bad2:	f856 300c 	ldr.w	r3, [r6, ip]
 800bad6:	b933      	cbnz	r3, 800bae6 <quorem+0x9e>
 800bad8:	9b01      	ldr	r3, [sp, #4]
 800bada:	3b04      	subs	r3, #4
 800badc:	429e      	cmp	r6, r3
 800bade:	461a      	mov	r2, r3
 800bae0:	d330      	bcc.n	800bb44 <quorem+0xfc>
 800bae2:	f8c8 4010 	str.w	r4, [r8, #16]
 800bae6:	4640      	mov	r0, r8
 800bae8:	f001 f83e 	bl	800cb68 <__mcmp>
 800baec:	2800      	cmp	r0, #0
 800baee:	db25      	blt.n	800bb3c <quorem+0xf4>
 800baf0:	3501      	adds	r5, #1
 800baf2:	4630      	mov	r0, r6
 800baf4:	f04f 0c00 	mov.w	ip, #0
 800baf8:	f857 2b04 	ldr.w	r2, [r7], #4
 800bafc:	f8d0 e000 	ldr.w	lr, [r0]
 800bb00:	b293      	uxth	r3, r2
 800bb02:	ebac 0303 	sub.w	r3, ip, r3
 800bb06:	0c12      	lsrs	r2, r2, #16
 800bb08:	fa13 f38e 	uxtah	r3, r3, lr
 800bb0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb1a:	45b9      	cmp	r9, r7
 800bb1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb20:	f840 3b04 	str.w	r3, [r0], #4
 800bb24:	d2e8      	bcs.n	800baf8 <quorem+0xb0>
 800bb26:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bb2a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bb2e:	b92a      	cbnz	r2, 800bb3c <quorem+0xf4>
 800bb30:	3b04      	subs	r3, #4
 800bb32:	429e      	cmp	r6, r3
 800bb34:	461a      	mov	r2, r3
 800bb36:	d30b      	bcc.n	800bb50 <quorem+0x108>
 800bb38:	f8c8 4010 	str.w	r4, [r8, #16]
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	b003      	add	sp, #12
 800bb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb44:	6812      	ldr	r2, [r2, #0]
 800bb46:	3b04      	subs	r3, #4
 800bb48:	2a00      	cmp	r2, #0
 800bb4a:	d1ca      	bne.n	800bae2 <quorem+0x9a>
 800bb4c:	3c01      	subs	r4, #1
 800bb4e:	e7c5      	b.n	800badc <quorem+0x94>
 800bb50:	6812      	ldr	r2, [r2, #0]
 800bb52:	3b04      	subs	r3, #4
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	d1ef      	bne.n	800bb38 <quorem+0xf0>
 800bb58:	3c01      	subs	r4, #1
 800bb5a:	e7ea      	b.n	800bb32 <quorem+0xea>
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	e7ee      	b.n	800bb3e <quorem+0xf6>

0800bb60 <_dtoa_r>:
 800bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb64:	ec57 6b10 	vmov	r6, r7, d0
 800bb68:	b097      	sub	sp, #92	; 0x5c
 800bb6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb6c:	9106      	str	r1, [sp, #24]
 800bb6e:	4604      	mov	r4, r0
 800bb70:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb72:	9312      	str	r3, [sp, #72]	; 0x48
 800bb74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bb78:	e9cd 6700 	strd	r6, r7, [sp]
 800bb7c:	b93d      	cbnz	r5, 800bb8e <_dtoa_r+0x2e>
 800bb7e:	2010      	movs	r0, #16
 800bb80:	f000 fdb8 	bl	800c6f4 <malloc>
 800bb84:	6260      	str	r0, [r4, #36]	; 0x24
 800bb86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb8a:	6005      	str	r5, [r0, #0]
 800bb8c:	60c5      	str	r5, [r0, #12]
 800bb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb90:	6819      	ldr	r1, [r3, #0]
 800bb92:	b151      	cbz	r1, 800bbaa <_dtoa_r+0x4a>
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	604a      	str	r2, [r1, #4]
 800bb98:	2301      	movs	r3, #1
 800bb9a:	4093      	lsls	r3, r2
 800bb9c:	608b      	str	r3, [r1, #8]
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 fe01 	bl	800c7a6 <_Bfree>
 800bba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bba6:	2200      	movs	r2, #0
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	1e3b      	subs	r3, r7, #0
 800bbac:	bfbb      	ittet	lt
 800bbae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bbb2:	9301      	strlt	r3, [sp, #4]
 800bbb4:	2300      	movge	r3, #0
 800bbb6:	2201      	movlt	r2, #1
 800bbb8:	bfac      	ite	ge
 800bbba:	f8c8 3000 	strge.w	r3, [r8]
 800bbbe:	f8c8 2000 	strlt.w	r2, [r8]
 800bbc2:	4baf      	ldr	r3, [pc, #700]	; (800be80 <_dtoa_r+0x320>)
 800bbc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bbc8:	ea33 0308 	bics.w	r3, r3, r8
 800bbcc:	d114      	bne.n	800bbf8 <_dtoa_r+0x98>
 800bbce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bbd0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	9b00      	ldr	r3, [sp, #0]
 800bbd8:	b923      	cbnz	r3, 800bbe4 <_dtoa_r+0x84>
 800bbda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	f000 8542 	beq.w	800c668 <_dtoa_r+0xb08>
 800bbe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbe6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800be94 <_dtoa_r+0x334>
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 8544 	beq.w	800c678 <_dtoa_r+0xb18>
 800bbf0:	f10b 0303 	add.w	r3, fp, #3
 800bbf4:	f000 bd3e 	b.w	800c674 <_dtoa_r+0xb14>
 800bbf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc08:	4681      	mov	r9, r0
 800bc0a:	b168      	cbz	r0, 800bc28 <_dtoa_r+0xc8>
 800bc0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bc0e:	2301      	movs	r3, #1
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 8524 	beq.w	800c662 <_dtoa_r+0xb02>
 800bc1a:	4b9a      	ldr	r3, [pc, #616]	; (800be84 <_dtoa_r+0x324>)
 800bc1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc1e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	f000 bd28 	b.w	800c678 <_dtoa_r+0xb18>
 800bc28:	aa14      	add	r2, sp, #80	; 0x50
 800bc2a:	a915      	add	r1, sp, #84	; 0x54
 800bc2c:	ec47 6b10 	vmov	d0, r6, r7
 800bc30:	4620      	mov	r0, r4
 800bc32:	f001 f810 	bl	800cc56 <__d2b>
 800bc36:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bc3a:	9004      	str	r0, [sp, #16]
 800bc3c:	2d00      	cmp	r5, #0
 800bc3e:	d07c      	beq.n	800bd3a <_dtoa_r+0x1da>
 800bc40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc44:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bc48:	46b2      	mov	sl, r6
 800bc4a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bc4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bc56:	2200      	movs	r2, #0
 800bc58:	4b8b      	ldr	r3, [pc, #556]	; (800be88 <_dtoa_r+0x328>)
 800bc5a:	4650      	mov	r0, sl
 800bc5c:	4659      	mov	r1, fp
 800bc5e:	f7f4 fb13 	bl	8000288 <__aeabi_dsub>
 800bc62:	a381      	add	r3, pc, #516	; (adr r3, 800be68 <_dtoa_r+0x308>)
 800bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc68:	f7f4 fcc6 	bl	80005f8 <__aeabi_dmul>
 800bc6c:	a380      	add	r3, pc, #512	; (adr r3, 800be70 <_dtoa_r+0x310>)
 800bc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc72:	f7f4 fb0b 	bl	800028c <__adddf3>
 800bc76:	4606      	mov	r6, r0
 800bc78:	4628      	mov	r0, r5
 800bc7a:	460f      	mov	r7, r1
 800bc7c:	f7f4 fc52 	bl	8000524 <__aeabi_i2d>
 800bc80:	a37d      	add	r3, pc, #500	; (adr r3, 800be78 <_dtoa_r+0x318>)
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	f7f4 fcb7 	bl	80005f8 <__aeabi_dmul>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	4630      	mov	r0, r6
 800bc90:	4639      	mov	r1, r7
 800bc92:	f7f4 fafb 	bl	800028c <__adddf3>
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	f7f4 ff5d 	bl	8000b58 <__aeabi_d2iz>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	4682      	mov	sl, r0
 800bca2:	2300      	movs	r3, #0
 800bca4:	4630      	mov	r0, r6
 800bca6:	4639      	mov	r1, r7
 800bca8:	f7f4 ff18 	bl	8000adc <__aeabi_dcmplt>
 800bcac:	b148      	cbz	r0, 800bcc2 <_dtoa_r+0x162>
 800bcae:	4650      	mov	r0, sl
 800bcb0:	f7f4 fc38 	bl	8000524 <__aeabi_i2d>
 800bcb4:	4632      	mov	r2, r6
 800bcb6:	463b      	mov	r3, r7
 800bcb8:	f7f4 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcbc:	b908      	cbnz	r0, 800bcc2 <_dtoa_r+0x162>
 800bcbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bcc2:	f1ba 0f16 	cmp.w	sl, #22
 800bcc6:	d859      	bhi.n	800bd7c <_dtoa_r+0x21c>
 800bcc8:	4970      	ldr	r1, [pc, #448]	; (800be8c <_dtoa_r+0x32c>)
 800bcca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bcce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd6:	f7f4 ff1f 	bl	8000b18 <__aeabi_dcmpgt>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d050      	beq.n	800bd80 <_dtoa_r+0x220>
 800bcde:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bce2:	2300      	movs	r3, #0
 800bce4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bce8:	1b5d      	subs	r5, r3, r5
 800bcea:	f1b5 0801 	subs.w	r8, r5, #1
 800bcee:	bf49      	itett	mi
 800bcf0:	f1c5 0301 	rsbmi	r3, r5, #1
 800bcf4:	2300      	movpl	r3, #0
 800bcf6:	9305      	strmi	r3, [sp, #20]
 800bcf8:	f04f 0800 	movmi.w	r8, #0
 800bcfc:	bf58      	it	pl
 800bcfe:	9305      	strpl	r3, [sp, #20]
 800bd00:	f1ba 0f00 	cmp.w	sl, #0
 800bd04:	db3e      	blt.n	800bd84 <_dtoa_r+0x224>
 800bd06:	2300      	movs	r3, #0
 800bd08:	44d0      	add	r8, sl
 800bd0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	9b06      	ldr	r3, [sp, #24]
 800bd12:	2b09      	cmp	r3, #9
 800bd14:	f200 8090 	bhi.w	800be38 <_dtoa_r+0x2d8>
 800bd18:	2b05      	cmp	r3, #5
 800bd1a:	bfc4      	itt	gt
 800bd1c:	3b04      	subgt	r3, #4
 800bd1e:	9306      	strgt	r3, [sp, #24]
 800bd20:	9b06      	ldr	r3, [sp, #24]
 800bd22:	f1a3 0302 	sub.w	r3, r3, #2
 800bd26:	bfcc      	ite	gt
 800bd28:	2500      	movgt	r5, #0
 800bd2a:	2501      	movle	r5, #1
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	f200 808f 	bhi.w	800be50 <_dtoa_r+0x2f0>
 800bd32:	e8df f003 	tbb	[pc, r3]
 800bd36:	7f7d      	.short	0x7f7d
 800bd38:	7131      	.short	0x7131
 800bd3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bd3e:	441d      	add	r5, r3
 800bd40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bd44:	2820      	cmp	r0, #32
 800bd46:	dd13      	ble.n	800bd70 <_dtoa_r+0x210>
 800bd48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bd4c:	9b00      	ldr	r3, [sp, #0]
 800bd4e:	fa08 f800 	lsl.w	r8, r8, r0
 800bd52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bd56:	fa23 f000 	lsr.w	r0, r3, r0
 800bd5a:	ea48 0000 	orr.w	r0, r8, r0
 800bd5e:	f7f4 fbd1 	bl	8000504 <__aeabi_ui2d>
 800bd62:	2301      	movs	r3, #1
 800bd64:	4682      	mov	sl, r0
 800bd66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bd6a:	3d01      	subs	r5, #1
 800bd6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd6e:	e772      	b.n	800bc56 <_dtoa_r+0xf6>
 800bd70:	9b00      	ldr	r3, [sp, #0]
 800bd72:	f1c0 0020 	rsb	r0, r0, #32
 800bd76:	fa03 f000 	lsl.w	r0, r3, r0
 800bd7a:	e7f0      	b.n	800bd5e <_dtoa_r+0x1fe>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e7b1      	b.n	800bce4 <_dtoa_r+0x184>
 800bd80:	900f      	str	r0, [sp, #60]	; 0x3c
 800bd82:	e7b0      	b.n	800bce6 <_dtoa_r+0x186>
 800bd84:	9b05      	ldr	r3, [sp, #20]
 800bd86:	eba3 030a 	sub.w	r3, r3, sl
 800bd8a:	9305      	str	r3, [sp, #20]
 800bd8c:	f1ca 0300 	rsb	r3, sl, #0
 800bd90:	9307      	str	r3, [sp, #28]
 800bd92:	2300      	movs	r3, #0
 800bd94:	930e      	str	r3, [sp, #56]	; 0x38
 800bd96:	e7bb      	b.n	800bd10 <_dtoa_r+0x1b0>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	dd59      	ble.n	800be56 <_dtoa_r+0x2f6>
 800bda2:	9302      	str	r3, [sp, #8]
 800bda4:	4699      	mov	r9, r3
 800bda6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bda8:	2200      	movs	r2, #0
 800bdaa:	6072      	str	r2, [r6, #4]
 800bdac:	2204      	movs	r2, #4
 800bdae:	f102 0014 	add.w	r0, r2, #20
 800bdb2:	4298      	cmp	r0, r3
 800bdb4:	6871      	ldr	r1, [r6, #4]
 800bdb6:	d953      	bls.n	800be60 <_dtoa_r+0x300>
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 fcc0 	bl	800c73e <_Balloc>
 800bdbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdc0:	6030      	str	r0, [r6, #0]
 800bdc2:	f1b9 0f0e 	cmp.w	r9, #14
 800bdc6:	f8d3 b000 	ldr.w	fp, [r3]
 800bdca:	f200 80e6 	bhi.w	800bf9a <_dtoa_r+0x43a>
 800bdce:	2d00      	cmp	r5, #0
 800bdd0:	f000 80e3 	beq.w	800bf9a <_dtoa_r+0x43a>
 800bdd4:	ed9d 7b00 	vldr	d7, [sp]
 800bdd8:	f1ba 0f00 	cmp.w	sl, #0
 800bddc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bde0:	dd74      	ble.n	800becc <_dtoa_r+0x36c>
 800bde2:	4a2a      	ldr	r2, [pc, #168]	; (800be8c <_dtoa_r+0x32c>)
 800bde4:	f00a 030f 	and.w	r3, sl, #15
 800bde8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bdec:	ed93 7b00 	vldr	d7, [r3]
 800bdf0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bdf4:	06f0      	lsls	r0, r6, #27
 800bdf6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bdfa:	d565      	bpl.n	800bec8 <_dtoa_r+0x368>
 800bdfc:	4b24      	ldr	r3, [pc, #144]	; (800be90 <_dtoa_r+0x330>)
 800bdfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be06:	f7f4 fd21 	bl	800084c <__aeabi_ddiv>
 800be0a:	e9cd 0100 	strd	r0, r1, [sp]
 800be0e:	f006 060f 	and.w	r6, r6, #15
 800be12:	2503      	movs	r5, #3
 800be14:	4f1e      	ldr	r7, [pc, #120]	; (800be90 <_dtoa_r+0x330>)
 800be16:	e04c      	b.n	800beb2 <_dtoa_r+0x352>
 800be18:	2301      	movs	r3, #1
 800be1a:	930a      	str	r3, [sp, #40]	; 0x28
 800be1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be1e:	4453      	add	r3, sl
 800be20:	f103 0901 	add.w	r9, r3, #1
 800be24:	9302      	str	r3, [sp, #8]
 800be26:	464b      	mov	r3, r9
 800be28:	2b01      	cmp	r3, #1
 800be2a:	bfb8      	it	lt
 800be2c:	2301      	movlt	r3, #1
 800be2e:	e7ba      	b.n	800bda6 <_dtoa_r+0x246>
 800be30:	2300      	movs	r3, #0
 800be32:	e7b2      	b.n	800bd9a <_dtoa_r+0x23a>
 800be34:	2300      	movs	r3, #0
 800be36:	e7f0      	b.n	800be1a <_dtoa_r+0x2ba>
 800be38:	2501      	movs	r5, #1
 800be3a:	2300      	movs	r3, #0
 800be3c:	9306      	str	r3, [sp, #24]
 800be3e:	950a      	str	r5, [sp, #40]	; 0x28
 800be40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be44:	9302      	str	r3, [sp, #8]
 800be46:	4699      	mov	r9, r3
 800be48:	2200      	movs	r2, #0
 800be4a:	2312      	movs	r3, #18
 800be4c:	920b      	str	r2, [sp, #44]	; 0x2c
 800be4e:	e7aa      	b.n	800bda6 <_dtoa_r+0x246>
 800be50:	2301      	movs	r3, #1
 800be52:	930a      	str	r3, [sp, #40]	; 0x28
 800be54:	e7f4      	b.n	800be40 <_dtoa_r+0x2e0>
 800be56:	2301      	movs	r3, #1
 800be58:	9302      	str	r3, [sp, #8]
 800be5a:	4699      	mov	r9, r3
 800be5c:	461a      	mov	r2, r3
 800be5e:	e7f5      	b.n	800be4c <_dtoa_r+0x2ec>
 800be60:	3101      	adds	r1, #1
 800be62:	6071      	str	r1, [r6, #4]
 800be64:	0052      	lsls	r2, r2, #1
 800be66:	e7a2      	b.n	800bdae <_dtoa_r+0x24e>
 800be68:	636f4361 	.word	0x636f4361
 800be6c:	3fd287a7 	.word	0x3fd287a7
 800be70:	8b60c8b3 	.word	0x8b60c8b3
 800be74:	3fc68a28 	.word	0x3fc68a28
 800be78:	509f79fb 	.word	0x509f79fb
 800be7c:	3fd34413 	.word	0x3fd34413
 800be80:	7ff00000 	.word	0x7ff00000
 800be84:	0800d449 	.word	0x0800d449
 800be88:	3ff80000 	.word	0x3ff80000
 800be8c:	0800d4b0 	.word	0x0800d4b0
 800be90:	0800d488 	.word	0x0800d488
 800be94:	0800d475 	.word	0x0800d475
 800be98:	07f1      	lsls	r1, r6, #31
 800be9a:	d508      	bpl.n	800beae <_dtoa_r+0x34e>
 800be9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bea4:	f7f4 fba8 	bl	80005f8 <__aeabi_dmul>
 800bea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800beac:	3501      	adds	r5, #1
 800beae:	1076      	asrs	r6, r6, #1
 800beb0:	3708      	adds	r7, #8
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	d1f0      	bne.n	800be98 <_dtoa_r+0x338>
 800beb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800beba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bebe:	f7f4 fcc5 	bl	800084c <__aeabi_ddiv>
 800bec2:	e9cd 0100 	strd	r0, r1, [sp]
 800bec6:	e01a      	b.n	800befe <_dtoa_r+0x39e>
 800bec8:	2502      	movs	r5, #2
 800beca:	e7a3      	b.n	800be14 <_dtoa_r+0x2b4>
 800becc:	f000 80a0 	beq.w	800c010 <_dtoa_r+0x4b0>
 800bed0:	f1ca 0600 	rsb	r6, sl, #0
 800bed4:	4b9f      	ldr	r3, [pc, #636]	; (800c154 <_dtoa_r+0x5f4>)
 800bed6:	4fa0      	ldr	r7, [pc, #640]	; (800c158 <_dtoa_r+0x5f8>)
 800bed8:	f006 020f 	and.w	r2, r6, #15
 800bedc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bee8:	f7f4 fb86 	bl	80005f8 <__aeabi_dmul>
 800beec:	e9cd 0100 	strd	r0, r1, [sp]
 800bef0:	1136      	asrs	r6, r6, #4
 800bef2:	2300      	movs	r3, #0
 800bef4:	2502      	movs	r5, #2
 800bef6:	2e00      	cmp	r6, #0
 800bef8:	d17f      	bne.n	800bffa <_dtoa_r+0x49a>
 800befa:	2b00      	cmp	r3, #0
 800befc:	d1e1      	bne.n	800bec2 <_dtoa_r+0x362>
 800befe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 8087 	beq.w	800c014 <_dtoa_r+0x4b4>
 800bf06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	4b93      	ldr	r3, [pc, #588]	; (800c15c <_dtoa_r+0x5fc>)
 800bf0e:	4630      	mov	r0, r6
 800bf10:	4639      	mov	r1, r7
 800bf12:	f7f4 fde3 	bl	8000adc <__aeabi_dcmplt>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d07c      	beq.n	800c014 <_dtoa_r+0x4b4>
 800bf1a:	f1b9 0f00 	cmp.w	r9, #0
 800bf1e:	d079      	beq.n	800c014 <_dtoa_r+0x4b4>
 800bf20:	9b02      	ldr	r3, [sp, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	dd35      	ble.n	800bf92 <_dtoa_r+0x432>
 800bf26:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bf2a:	9308      	str	r3, [sp, #32]
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	2200      	movs	r2, #0
 800bf30:	4b8b      	ldr	r3, [pc, #556]	; (800c160 <_dtoa_r+0x600>)
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7f4 fb60 	bl	80005f8 <__aeabi_dmul>
 800bf38:	e9cd 0100 	strd	r0, r1, [sp]
 800bf3c:	9f02      	ldr	r7, [sp, #8]
 800bf3e:	3501      	adds	r5, #1
 800bf40:	4628      	mov	r0, r5
 800bf42:	f7f4 faef 	bl	8000524 <__aeabi_i2d>
 800bf46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf4a:	f7f4 fb55 	bl	80005f8 <__aeabi_dmul>
 800bf4e:	2200      	movs	r2, #0
 800bf50:	4b84      	ldr	r3, [pc, #528]	; (800c164 <_dtoa_r+0x604>)
 800bf52:	f7f4 f99b 	bl	800028c <__adddf3>
 800bf56:	4605      	mov	r5, r0
 800bf58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bf5c:	2f00      	cmp	r7, #0
 800bf5e:	d15d      	bne.n	800c01c <_dtoa_r+0x4bc>
 800bf60:	2200      	movs	r2, #0
 800bf62:	4b81      	ldr	r3, [pc, #516]	; (800c168 <_dtoa_r+0x608>)
 800bf64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf68:	f7f4 f98e 	bl	8000288 <__aeabi_dsub>
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	4633      	mov	r3, r6
 800bf70:	e9cd 0100 	strd	r0, r1, [sp]
 800bf74:	f7f4 fdd0 	bl	8000b18 <__aeabi_dcmpgt>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	f040 8288 	bne.w	800c48e <_dtoa_r+0x92e>
 800bf7e:	462a      	mov	r2, r5
 800bf80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bf84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf88:	f7f4 fda8 	bl	8000adc <__aeabi_dcmplt>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f040 827c 	bne.w	800c48a <_dtoa_r+0x92a>
 800bf92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf96:	e9cd 2300 	strd	r2, r3, [sp]
 800bf9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f2c0 8150 	blt.w	800c242 <_dtoa_r+0x6e2>
 800bfa2:	f1ba 0f0e 	cmp.w	sl, #14
 800bfa6:	f300 814c 	bgt.w	800c242 <_dtoa_r+0x6e2>
 800bfaa:	4b6a      	ldr	r3, [pc, #424]	; (800c154 <_dtoa_r+0x5f4>)
 800bfac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bfb0:	ed93 7b00 	vldr	d7, [r3]
 800bfb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bfbc:	f280 80d8 	bge.w	800c170 <_dtoa_r+0x610>
 800bfc0:	f1b9 0f00 	cmp.w	r9, #0
 800bfc4:	f300 80d4 	bgt.w	800c170 <_dtoa_r+0x610>
 800bfc8:	f040 825e 	bne.w	800c488 <_dtoa_r+0x928>
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4b66      	ldr	r3, [pc, #408]	; (800c168 <_dtoa_r+0x608>)
 800bfd0:	ec51 0b17 	vmov	r0, r1, d7
 800bfd4:	f7f4 fb10 	bl	80005f8 <__aeabi_dmul>
 800bfd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfdc:	f7f4 fd92 	bl	8000b04 <__aeabi_dcmpge>
 800bfe0:	464f      	mov	r7, r9
 800bfe2:	464e      	mov	r6, r9
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	f040 8234 	bne.w	800c452 <_dtoa_r+0x8f2>
 800bfea:	2331      	movs	r3, #49	; 0x31
 800bfec:	f10b 0501 	add.w	r5, fp, #1
 800bff0:	f88b 3000 	strb.w	r3, [fp]
 800bff4:	f10a 0a01 	add.w	sl, sl, #1
 800bff8:	e22f      	b.n	800c45a <_dtoa_r+0x8fa>
 800bffa:	07f2      	lsls	r2, r6, #31
 800bffc:	d505      	bpl.n	800c00a <_dtoa_r+0x4aa>
 800bffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c002:	f7f4 faf9 	bl	80005f8 <__aeabi_dmul>
 800c006:	3501      	adds	r5, #1
 800c008:	2301      	movs	r3, #1
 800c00a:	1076      	asrs	r6, r6, #1
 800c00c:	3708      	adds	r7, #8
 800c00e:	e772      	b.n	800bef6 <_dtoa_r+0x396>
 800c010:	2502      	movs	r5, #2
 800c012:	e774      	b.n	800befe <_dtoa_r+0x39e>
 800c014:	f8cd a020 	str.w	sl, [sp, #32]
 800c018:	464f      	mov	r7, r9
 800c01a:	e791      	b.n	800bf40 <_dtoa_r+0x3e0>
 800c01c:	4b4d      	ldr	r3, [pc, #308]	; (800c154 <_dtoa_r+0x5f4>)
 800c01e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c022:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d047      	beq.n	800c0bc <_dtoa_r+0x55c>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	2000      	movs	r0, #0
 800c032:	494e      	ldr	r1, [pc, #312]	; (800c16c <_dtoa_r+0x60c>)
 800c034:	f7f4 fc0a 	bl	800084c <__aeabi_ddiv>
 800c038:	462a      	mov	r2, r5
 800c03a:	4633      	mov	r3, r6
 800c03c:	f7f4 f924 	bl	8000288 <__aeabi_dsub>
 800c040:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c044:	465d      	mov	r5, fp
 800c046:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c04a:	f7f4 fd85 	bl	8000b58 <__aeabi_d2iz>
 800c04e:	4606      	mov	r6, r0
 800c050:	f7f4 fa68 	bl	8000524 <__aeabi_i2d>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c05c:	f7f4 f914 	bl	8000288 <__aeabi_dsub>
 800c060:	3630      	adds	r6, #48	; 0x30
 800c062:	f805 6b01 	strb.w	r6, [r5], #1
 800c066:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c06a:	e9cd 0100 	strd	r0, r1, [sp]
 800c06e:	f7f4 fd35 	bl	8000adc <__aeabi_dcmplt>
 800c072:	2800      	cmp	r0, #0
 800c074:	d163      	bne.n	800c13e <_dtoa_r+0x5de>
 800c076:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c07a:	2000      	movs	r0, #0
 800c07c:	4937      	ldr	r1, [pc, #220]	; (800c15c <_dtoa_r+0x5fc>)
 800c07e:	f7f4 f903 	bl	8000288 <__aeabi_dsub>
 800c082:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c086:	f7f4 fd29 	bl	8000adc <__aeabi_dcmplt>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	f040 80b7 	bne.w	800c1fe <_dtoa_r+0x69e>
 800c090:	eba5 030b 	sub.w	r3, r5, fp
 800c094:	429f      	cmp	r7, r3
 800c096:	f77f af7c 	ble.w	800bf92 <_dtoa_r+0x432>
 800c09a:	2200      	movs	r2, #0
 800c09c:	4b30      	ldr	r3, [pc, #192]	; (800c160 <_dtoa_r+0x600>)
 800c09e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c0a2:	f7f4 faa9 	bl	80005f8 <__aeabi_dmul>
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c0ac:	4b2c      	ldr	r3, [pc, #176]	; (800c160 <_dtoa_r+0x600>)
 800c0ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0b2:	f7f4 faa1 	bl	80005f8 <__aeabi_dmul>
 800c0b6:	e9cd 0100 	strd	r0, r1, [sp]
 800c0ba:	e7c4      	b.n	800c046 <_dtoa_r+0x4e6>
 800c0bc:	462a      	mov	r2, r5
 800c0be:	4633      	mov	r3, r6
 800c0c0:	f7f4 fa9a 	bl	80005f8 <__aeabi_dmul>
 800c0c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c0c8:	eb0b 0507 	add.w	r5, fp, r7
 800c0cc:	465e      	mov	r6, fp
 800c0ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0d2:	f7f4 fd41 	bl	8000b58 <__aeabi_d2iz>
 800c0d6:	4607      	mov	r7, r0
 800c0d8:	f7f4 fa24 	bl	8000524 <__aeabi_i2d>
 800c0dc:	3730      	adds	r7, #48	; 0x30
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0e6:	f7f4 f8cf 	bl	8000288 <__aeabi_dsub>
 800c0ea:	f806 7b01 	strb.w	r7, [r6], #1
 800c0ee:	42ae      	cmp	r6, r5
 800c0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	d126      	bne.n	800c148 <_dtoa_r+0x5e8>
 800c0fa:	4b1c      	ldr	r3, [pc, #112]	; (800c16c <_dtoa_r+0x60c>)
 800c0fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c100:	f7f4 f8c4 	bl	800028c <__adddf3>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c10c:	f7f4 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 800c110:	2800      	cmp	r0, #0
 800c112:	d174      	bne.n	800c1fe <_dtoa_r+0x69e>
 800c114:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c118:	2000      	movs	r0, #0
 800c11a:	4914      	ldr	r1, [pc, #80]	; (800c16c <_dtoa_r+0x60c>)
 800c11c:	f7f4 f8b4 	bl	8000288 <__aeabi_dsub>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c128:	f7f4 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	f43f af30 	beq.w	800bf92 <_dtoa_r+0x432>
 800c132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c136:	2b30      	cmp	r3, #48	; 0x30
 800c138:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c13c:	d002      	beq.n	800c144 <_dtoa_r+0x5e4>
 800c13e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c142:	e04a      	b.n	800c1da <_dtoa_r+0x67a>
 800c144:	4615      	mov	r5, r2
 800c146:	e7f4      	b.n	800c132 <_dtoa_r+0x5d2>
 800c148:	4b05      	ldr	r3, [pc, #20]	; (800c160 <_dtoa_r+0x600>)
 800c14a:	f7f4 fa55 	bl	80005f8 <__aeabi_dmul>
 800c14e:	e9cd 0100 	strd	r0, r1, [sp]
 800c152:	e7bc      	b.n	800c0ce <_dtoa_r+0x56e>
 800c154:	0800d4b0 	.word	0x0800d4b0
 800c158:	0800d488 	.word	0x0800d488
 800c15c:	3ff00000 	.word	0x3ff00000
 800c160:	40240000 	.word	0x40240000
 800c164:	401c0000 	.word	0x401c0000
 800c168:	40140000 	.word	0x40140000
 800c16c:	3fe00000 	.word	0x3fe00000
 800c170:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c174:	465d      	mov	r5, fp
 800c176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c17a:	4630      	mov	r0, r6
 800c17c:	4639      	mov	r1, r7
 800c17e:	f7f4 fb65 	bl	800084c <__aeabi_ddiv>
 800c182:	f7f4 fce9 	bl	8000b58 <__aeabi_d2iz>
 800c186:	4680      	mov	r8, r0
 800c188:	f7f4 f9cc 	bl	8000524 <__aeabi_i2d>
 800c18c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c190:	f7f4 fa32 	bl	80005f8 <__aeabi_dmul>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4630      	mov	r0, r6
 800c19a:	4639      	mov	r1, r7
 800c19c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c1a0:	f7f4 f872 	bl	8000288 <__aeabi_dsub>
 800c1a4:	f805 6b01 	strb.w	r6, [r5], #1
 800c1a8:	eba5 060b 	sub.w	r6, r5, fp
 800c1ac:	45b1      	cmp	r9, r6
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	d139      	bne.n	800c228 <_dtoa_r+0x6c8>
 800c1b4:	f7f4 f86a 	bl	800028c <__adddf3>
 800c1b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1bc:	4606      	mov	r6, r0
 800c1be:	460f      	mov	r7, r1
 800c1c0:	f7f4 fcaa 	bl	8000b18 <__aeabi_dcmpgt>
 800c1c4:	b9c8      	cbnz	r0, 800c1fa <_dtoa_r+0x69a>
 800c1c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	4639      	mov	r1, r7
 800c1ce:	f7f4 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1d2:	b110      	cbz	r0, 800c1da <_dtoa_r+0x67a>
 800c1d4:	f018 0f01 	tst.w	r8, #1
 800c1d8:	d10f      	bne.n	800c1fa <_dtoa_r+0x69a>
 800c1da:	9904      	ldr	r1, [sp, #16]
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f000 fae2 	bl	800c7a6 <_Bfree>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1e6:	702b      	strb	r3, [r5, #0]
 800c1e8:	f10a 0301 	add.w	r3, sl, #1
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 8241 	beq.w	800c678 <_dtoa_r+0xb18>
 800c1f6:	601d      	str	r5, [r3, #0]
 800c1f8:	e23e      	b.n	800c678 <_dtoa_r+0xb18>
 800c1fa:	f8cd a020 	str.w	sl, [sp, #32]
 800c1fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c202:	2a39      	cmp	r2, #57	; 0x39
 800c204:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c208:	d108      	bne.n	800c21c <_dtoa_r+0x6bc>
 800c20a:	459b      	cmp	fp, r3
 800c20c:	d10a      	bne.n	800c224 <_dtoa_r+0x6c4>
 800c20e:	9b08      	ldr	r3, [sp, #32]
 800c210:	3301      	adds	r3, #1
 800c212:	9308      	str	r3, [sp, #32]
 800c214:	2330      	movs	r3, #48	; 0x30
 800c216:	f88b 3000 	strb.w	r3, [fp]
 800c21a:	465b      	mov	r3, fp
 800c21c:	781a      	ldrb	r2, [r3, #0]
 800c21e:	3201      	adds	r2, #1
 800c220:	701a      	strb	r2, [r3, #0]
 800c222:	e78c      	b.n	800c13e <_dtoa_r+0x5de>
 800c224:	461d      	mov	r5, r3
 800c226:	e7ea      	b.n	800c1fe <_dtoa_r+0x69e>
 800c228:	2200      	movs	r2, #0
 800c22a:	4b9b      	ldr	r3, [pc, #620]	; (800c498 <_dtoa_r+0x938>)
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	2200      	movs	r2, #0
 800c232:	2300      	movs	r3, #0
 800c234:	4606      	mov	r6, r0
 800c236:	460f      	mov	r7, r1
 800c238:	f7f4 fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d09a      	beq.n	800c176 <_dtoa_r+0x616>
 800c240:	e7cb      	b.n	800c1da <_dtoa_r+0x67a>
 800c242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c244:	2a00      	cmp	r2, #0
 800c246:	f000 808b 	beq.w	800c360 <_dtoa_r+0x800>
 800c24a:	9a06      	ldr	r2, [sp, #24]
 800c24c:	2a01      	cmp	r2, #1
 800c24e:	dc6e      	bgt.n	800c32e <_dtoa_r+0x7ce>
 800c250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c252:	2a00      	cmp	r2, #0
 800c254:	d067      	beq.n	800c326 <_dtoa_r+0x7c6>
 800c256:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c25a:	9f07      	ldr	r7, [sp, #28]
 800c25c:	9d05      	ldr	r5, [sp, #20]
 800c25e:	9a05      	ldr	r2, [sp, #20]
 800c260:	2101      	movs	r1, #1
 800c262:	441a      	add	r2, r3
 800c264:	4620      	mov	r0, r4
 800c266:	9205      	str	r2, [sp, #20]
 800c268:	4498      	add	r8, r3
 800c26a:	f000 fb3c 	bl	800c8e6 <__i2b>
 800c26e:	4606      	mov	r6, r0
 800c270:	2d00      	cmp	r5, #0
 800c272:	dd0c      	ble.n	800c28e <_dtoa_r+0x72e>
 800c274:	f1b8 0f00 	cmp.w	r8, #0
 800c278:	dd09      	ble.n	800c28e <_dtoa_r+0x72e>
 800c27a:	4545      	cmp	r5, r8
 800c27c:	9a05      	ldr	r2, [sp, #20]
 800c27e:	462b      	mov	r3, r5
 800c280:	bfa8      	it	ge
 800c282:	4643      	movge	r3, r8
 800c284:	1ad2      	subs	r2, r2, r3
 800c286:	9205      	str	r2, [sp, #20]
 800c288:	1aed      	subs	r5, r5, r3
 800c28a:	eba8 0803 	sub.w	r8, r8, r3
 800c28e:	9b07      	ldr	r3, [sp, #28]
 800c290:	b1eb      	cbz	r3, 800c2ce <_dtoa_r+0x76e>
 800c292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c294:	2b00      	cmp	r3, #0
 800c296:	d067      	beq.n	800c368 <_dtoa_r+0x808>
 800c298:	b18f      	cbz	r7, 800c2be <_dtoa_r+0x75e>
 800c29a:	4631      	mov	r1, r6
 800c29c:	463a      	mov	r2, r7
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 fbc0 	bl	800ca24 <__pow5mult>
 800c2a4:	9a04      	ldr	r2, [sp, #16]
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fb24 	bl	800c8f8 <__multiply>
 800c2b0:	9904      	ldr	r1, [sp, #16]
 800c2b2:	9008      	str	r0, [sp, #32]
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f000 fa76 	bl	800c7a6 <_Bfree>
 800c2ba:	9b08      	ldr	r3, [sp, #32]
 800c2bc:	9304      	str	r3, [sp, #16]
 800c2be:	9b07      	ldr	r3, [sp, #28]
 800c2c0:	1bda      	subs	r2, r3, r7
 800c2c2:	d004      	beq.n	800c2ce <_dtoa_r+0x76e>
 800c2c4:	9904      	ldr	r1, [sp, #16]
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f000 fbac 	bl	800ca24 <__pow5mult>
 800c2cc:	9004      	str	r0, [sp, #16]
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 fb08 	bl	800c8e6 <__i2b>
 800c2d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2d8:	4607      	mov	r7, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 81d0 	beq.w	800c680 <_dtoa_r+0xb20>
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 fb9d 	bl	800ca24 <__pow5mult>
 800c2ea:	9b06      	ldr	r3, [sp, #24]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	4607      	mov	r7, r0
 800c2f0:	dc40      	bgt.n	800c374 <_dtoa_r+0x814>
 800c2f2:	9b00      	ldr	r3, [sp, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d139      	bne.n	800c36c <_dtoa_r+0x80c>
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d136      	bne.n	800c370 <_dtoa_r+0x810>
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c308:	0d1b      	lsrs	r3, r3, #20
 800c30a:	051b      	lsls	r3, r3, #20
 800c30c:	b12b      	cbz	r3, 800c31a <_dtoa_r+0x7ba>
 800c30e:	9b05      	ldr	r3, [sp, #20]
 800c310:	3301      	adds	r3, #1
 800c312:	9305      	str	r3, [sp, #20]
 800c314:	f108 0801 	add.w	r8, r8, #1
 800c318:	2301      	movs	r3, #1
 800c31a:	9307      	str	r3, [sp, #28]
 800c31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d12a      	bne.n	800c378 <_dtoa_r+0x818>
 800c322:	2001      	movs	r0, #1
 800c324:	e030      	b.n	800c388 <_dtoa_r+0x828>
 800c326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c328:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c32c:	e795      	b.n	800c25a <_dtoa_r+0x6fa>
 800c32e:	9b07      	ldr	r3, [sp, #28]
 800c330:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c334:	42bb      	cmp	r3, r7
 800c336:	bfbf      	itttt	lt
 800c338:	9b07      	ldrlt	r3, [sp, #28]
 800c33a:	9707      	strlt	r7, [sp, #28]
 800c33c:	1afa      	sublt	r2, r7, r3
 800c33e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c340:	bfbb      	ittet	lt
 800c342:	189b      	addlt	r3, r3, r2
 800c344:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c346:	1bdf      	subge	r7, r3, r7
 800c348:	2700      	movlt	r7, #0
 800c34a:	f1b9 0f00 	cmp.w	r9, #0
 800c34e:	bfb5      	itete	lt
 800c350:	9b05      	ldrlt	r3, [sp, #20]
 800c352:	9d05      	ldrge	r5, [sp, #20]
 800c354:	eba3 0509 	sublt.w	r5, r3, r9
 800c358:	464b      	movge	r3, r9
 800c35a:	bfb8      	it	lt
 800c35c:	2300      	movlt	r3, #0
 800c35e:	e77e      	b.n	800c25e <_dtoa_r+0x6fe>
 800c360:	9f07      	ldr	r7, [sp, #28]
 800c362:	9d05      	ldr	r5, [sp, #20]
 800c364:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c366:	e783      	b.n	800c270 <_dtoa_r+0x710>
 800c368:	9a07      	ldr	r2, [sp, #28]
 800c36a:	e7ab      	b.n	800c2c4 <_dtoa_r+0x764>
 800c36c:	2300      	movs	r3, #0
 800c36e:	e7d4      	b.n	800c31a <_dtoa_r+0x7ba>
 800c370:	9b00      	ldr	r3, [sp, #0]
 800c372:	e7d2      	b.n	800c31a <_dtoa_r+0x7ba>
 800c374:	2300      	movs	r3, #0
 800c376:	9307      	str	r3, [sp, #28]
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c37e:	6918      	ldr	r0, [r3, #16]
 800c380:	f000 fa63 	bl	800c84a <__hi0bits>
 800c384:	f1c0 0020 	rsb	r0, r0, #32
 800c388:	4440      	add	r0, r8
 800c38a:	f010 001f 	ands.w	r0, r0, #31
 800c38e:	d047      	beq.n	800c420 <_dtoa_r+0x8c0>
 800c390:	f1c0 0320 	rsb	r3, r0, #32
 800c394:	2b04      	cmp	r3, #4
 800c396:	dd3b      	ble.n	800c410 <_dtoa_r+0x8b0>
 800c398:	9b05      	ldr	r3, [sp, #20]
 800c39a:	f1c0 001c 	rsb	r0, r0, #28
 800c39e:	4403      	add	r3, r0
 800c3a0:	9305      	str	r3, [sp, #20]
 800c3a2:	4405      	add	r5, r0
 800c3a4:	4480      	add	r8, r0
 800c3a6:	9b05      	ldr	r3, [sp, #20]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	dd05      	ble.n	800c3b8 <_dtoa_r+0x858>
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	9904      	ldr	r1, [sp, #16]
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f000 fb85 	bl	800cac0 <__lshift>
 800c3b6:	9004      	str	r0, [sp, #16]
 800c3b8:	f1b8 0f00 	cmp.w	r8, #0
 800c3bc:	dd05      	ble.n	800c3ca <_dtoa_r+0x86a>
 800c3be:	4639      	mov	r1, r7
 800c3c0:	4642      	mov	r2, r8
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f000 fb7c 	bl	800cac0 <__lshift>
 800c3c8:	4607      	mov	r7, r0
 800c3ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3cc:	b353      	cbz	r3, 800c424 <_dtoa_r+0x8c4>
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	9804      	ldr	r0, [sp, #16]
 800c3d2:	f000 fbc9 	bl	800cb68 <__mcmp>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	da24      	bge.n	800c424 <_dtoa_r+0x8c4>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	220a      	movs	r2, #10
 800c3de:	9904      	ldr	r1, [sp, #16]
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f000 f9f7 	bl	800c7d4 <__multadd>
 800c3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e8:	9004      	str	r0, [sp, #16]
 800c3ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f000 814d 	beq.w	800c68e <_dtoa_r+0xb2e>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	220a      	movs	r2, #10
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 f9ea 	bl	800c7d4 <__multadd>
 800c400:	9b02      	ldr	r3, [sp, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	4606      	mov	r6, r0
 800c406:	dc4f      	bgt.n	800c4a8 <_dtoa_r+0x948>
 800c408:	9b06      	ldr	r3, [sp, #24]
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	dd4c      	ble.n	800c4a8 <_dtoa_r+0x948>
 800c40e:	e011      	b.n	800c434 <_dtoa_r+0x8d4>
 800c410:	d0c9      	beq.n	800c3a6 <_dtoa_r+0x846>
 800c412:	9a05      	ldr	r2, [sp, #20]
 800c414:	331c      	adds	r3, #28
 800c416:	441a      	add	r2, r3
 800c418:	9205      	str	r2, [sp, #20]
 800c41a:	441d      	add	r5, r3
 800c41c:	4498      	add	r8, r3
 800c41e:	e7c2      	b.n	800c3a6 <_dtoa_r+0x846>
 800c420:	4603      	mov	r3, r0
 800c422:	e7f6      	b.n	800c412 <_dtoa_r+0x8b2>
 800c424:	f1b9 0f00 	cmp.w	r9, #0
 800c428:	dc38      	bgt.n	800c49c <_dtoa_r+0x93c>
 800c42a:	9b06      	ldr	r3, [sp, #24]
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	dd35      	ble.n	800c49c <_dtoa_r+0x93c>
 800c430:	f8cd 9008 	str.w	r9, [sp, #8]
 800c434:	9b02      	ldr	r3, [sp, #8]
 800c436:	b963      	cbnz	r3, 800c452 <_dtoa_r+0x8f2>
 800c438:	4639      	mov	r1, r7
 800c43a:	2205      	movs	r2, #5
 800c43c:	4620      	mov	r0, r4
 800c43e:	f000 f9c9 	bl	800c7d4 <__multadd>
 800c442:	4601      	mov	r1, r0
 800c444:	4607      	mov	r7, r0
 800c446:	9804      	ldr	r0, [sp, #16]
 800c448:	f000 fb8e 	bl	800cb68 <__mcmp>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	f73f adcc 	bgt.w	800bfea <_dtoa_r+0x48a>
 800c452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c454:	465d      	mov	r5, fp
 800c456:	ea6f 0a03 	mvn.w	sl, r3
 800c45a:	f04f 0900 	mov.w	r9, #0
 800c45e:	4639      	mov	r1, r7
 800c460:	4620      	mov	r0, r4
 800c462:	f000 f9a0 	bl	800c7a6 <_Bfree>
 800c466:	2e00      	cmp	r6, #0
 800c468:	f43f aeb7 	beq.w	800c1da <_dtoa_r+0x67a>
 800c46c:	f1b9 0f00 	cmp.w	r9, #0
 800c470:	d005      	beq.n	800c47e <_dtoa_r+0x91e>
 800c472:	45b1      	cmp	r9, r6
 800c474:	d003      	beq.n	800c47e <_dtoa_r+0x91e>
 800c476:	4649      	mov	r1, r9
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 f994 	bl	800c7a6 <_Bfree>
 800c47e:	4631      	mov	r1, r6
 800c480:	4620      	mov	r0, r4
 800c482:	f000 f990 	bl	800c7a6 <_Bfree>
 800c486:	e6a8      	b.n	800c1da <_dtoa_r+0x67a>
 800c488:	2700      	movs	r7, #0
 800c48a:	463e      	mov	r6, r7
 800c48c:	e7e1      	b.n	800c452 <_dtoa_r+0x8f2>
 800c48e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c492:	463e      	mov	r6, r7
 800c494:	e5a9      	b.n	800bfea <_dtoa_r+0x48a>
 800c496:	bf00      	nop
 800c498:	40240000 	.word	0x40240000
 800c49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c49e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 80fa 	beq.w	800c69c <_dtoa_r+0xb3c>
 800c4a8:	2d00      	cmp	r5, #0
 800c4aa:	dd05      	ble.n	800c4b8 <_dtoa_r+0x958>
 800c4ac:	4631      	mov	r1, r6
 800c4ae:	462a      	mov	r2, r5
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f000 fb05 	bl	800cac0 <__lshift>
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	9b07      	ldr	r3, [sp, #28]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d04c      	beq.n	800c558 <_dtoa_r+0x9f8>
 800c4be:	6871      	ldr	r1, [r6, #4]
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 f93c 	bl	800c73e <_Balloc>
 800c4c6:	6932      	ldr	r2, [r6, #16]
 800c4c8:	3202      	adds	r2, #2
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	0092      	lsls	r2, r2, #2
 800c4ce:	f106 010c 	add.w	r1, r6, #12
 800c4d2:	300c      	adds	r0, #12
 800c4d4:	f000 f928 	bl	800c728 <memcpy>
 800c4d8:	2201      	movs	r2, #1
 800c4da:	4629      	mov	r1, r5
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f000 faef 	bl	800cac0 <__lshift>
 800c4e2:	9b00      	ldr	r3, [sp, #0]
 800c4e4:	f8cd b014 	str.w	fp, [sp, #20]
 800c4e8:	f003 0301 	and.w	r3, r3, #1
 800c4ec:	46b1      	mov	r9, r6
 800c4ee:	9307      	str	r3, [sp, #28]
 800c4f0:	4606      	mov	r6, r0
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	9804      	ldr	r0, [sp, #16]
 800c4f6:	f7ff faa7 	bl	800ba48 <quorem>
 800c4fa:	4649      	mov	r1, r9
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c502:	9804      	ldr	r0, [sp, #16]
 800c504:	f000 fb30 	bl	800cb68 <__mcmp>
 800c508:	4632      	mov	r2, r6
 800c50a:	9000      	str	r0, [sp, #0]
 800c50c:	4639      	mov	r1, r7
 800c50e:	4620      	mov	r0, r4
 800c510:	f000 fb44 	bl	800cb9c <__mdiff>
 800c514:	68c3      	ldr	r3, [r0, #12]
 800c516:	4602      	mov	r2, r0
 800c518:	bb03      	cbnz	r3, 800c55c <_dtoa_r+0x9fc>
 800c51a:	4601      	mov	r1, r0
 800c51c:	9008      	str	r0, [sp, #32]
 800c51e:	9804      	ldr	r0, [sp, #16]
 800c520:	f000 fb22 	bl	800cb68 <__mcmp>
 800c524:	9a08      	ldr	r2, [sp, #32]
 800c526:	4603      	mov	r3, r0
 800c528:	4611      	mov	r1, r2
 800c52a:	4620      	mov	r0, r4
 800c52c:	9308      	str	r3, [sp, #32]
 800c52e:	f000 f93a 	bl	800c7a6 <_Bfree>
 800c532:	9b08      	ldr	r3, [sp, #32]
 800c534:	b9a3      	cbnz	r3, 800c560 <_dtoa_r+0xa00>
 800c536:	9a06      	ldr	r2, [sp, #24]
 800c538:	b992      	cbnz	r2, 800c560 <_dtoa_r+0xa00>
 800c53a:	9a07      	ldr	r2, [sp, #28]
 800c53c:	b982      	cbnz	r2, 800c560 <_dtoa_r+0xa00>
 800c53e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c542:	d029      	beq.n	800c598 <_dtoa_r+0xa38>
 800c544:	9b00      	ldr	r3, [sp, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	dd01      	ble.n	800c54e <_dtoa_r+0x9ee>
 800c54a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c54e:	9b05      	ldr	r3, [sp, #20]
 800c550:	1c5d      	adds	r5, r3, #1
 800c552:	f883 8000 	strb.w	r8, [r3]
 800c556:	e782      	b.n	800c45e <_dtoa_r+0x8fe>
 800c558:	4630      	mov	r0, r6
 800c55a:	e7c2      	b.n	800c4e2 <_dtoa_r+0x982>
 800c55c:	2301      	movs	r3, #1
 800c55e:	e7e3      	b.n	800c528 <_dtoa_r+0x9c8>
 800c560:	9a00      	ldr	r2, [sp, #0]
 800c562:	2a00      	cmp	r2, #0
 800c564:	db04      	blt.n	800c570 <_dtoa_r+0xa10>
 800c566:	d125      	bne.n	800c5b4 <_dtoa_r+0xa54>
 800c568:	9a06      	ldr	r2, [sp, #24]
 800c56a:	bb1a      	cbnz	r2, 800c5b4 <_dtoa_r+0xa54>
 800c56c:	9a07      	ldr	r2, [sp, #28]
 800c56e:	bb0a      	cbnz	r2, 800c5b4 <_dtoa_r+0xa54>
 800c570:	2b00      	cmp	r3, #0
 800c572:	ddec      	ble.n	800c54e <_dtoa_r+0x9ee>
 800c574:	2201      	movs	r2, #1
 800c576:	9904      	ldr	r1, [sp, #16]
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 faa1 	bl	800cac0 <__lshift>
 800c57e:	4639      	mov	r1, r7
 800c580:	9004      	str	r0, [sp, #16]
 800c582:	f000 faf1 	bl	800cb68 <__mcmp>
 800c586:	2800      	cmp	r0, #0
 800c588:	dc03      	bgt.n	800c592 <_dtoa_r+0xa32>
 800c58a:	d1e0      	bne.n	800c54e <_dtoa_r+0x9ee>
 800c58c:	f018 0f01 	tst.w	r8, #1
 800c590:	d0dd      	beq.n	800c54e <_dtoa_r+0x9ee>
 800c592:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c596:	d1d8      	bne.n	800c54a <_dtoa_r+0x9ea>
 800c598:	9b05      	ldr	r3, [sp, #20]
 800c59a:	9a05      	ldr	r2, [sp, #20]
 800c59c:	1c5d      	adds	r5, r3, #1
 800c59e:	2339      	movs	r3, #57	; 0x39
 800c5a0:	7013      	strb	r3, [r2, #0]
 800c5a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c5a6:	2b39      	cmp	r3, #57	; 0x39
 800c5a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c5ac:	d04f      	beq.n	800c64e <_dtoa_r+0xaee>
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	7013      	strb	r3, [r2, #0]
 800c5b2:	e754      	b.n	800c45e <_dtoa_r+0x8fe>
 800c5b4:	9a05      	ldr	r2, [sp, #20]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f102 0501 	add.w	r5, r2, #1
 800c5bc:	dd06      	ble.n	800c5cc <_dtoa_r+0xa6c>
 800c5be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c5c2:	d0e9      	beq.n	800c598 <_dtoa_r+0xa38>
 800c5c4:	f108 0801 	add.w	r8, r8, #1
 800c5c8:	9b05      	ldr	r3, [sp, #20]
 800c5ca:	e7c2      	b.n	800c552 <_dtoa_r+0x9f2>
 800c5cc:	9a02      	ldr	r2, [sp, #8]
 800c5ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c5d2:	eba5 030b 	sub.w	r3, r5, fp
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d021      	beq.n	800c61e <_dtoa_r+0xabe>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	220a      	movs	r2, #10
 800c5de:	9904      	ldr	r1, [sp, #16]
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 f8f7 	bl	800c7d4 <__multadd>
 800c5e6:	45b1      	cmp	r9, r6
 800c5e8:	9004      	str	r0, [sp, #16]
 800c5ea:	f04f 0300 	mov.w	r3, #0
 800c5ee:	f04f 020a 	mov.w	r2, #10
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	d105      	bne.n	800c604 <_dtoa_r+0xaa4>
 800c5f8:	f000 f8ec 	bl	800c7d4 <__multadd>
 800c5fc:	4681      	mov	r9, r0
 800c5fe:	4606      	mov	r6, r0
 800c600:	9505      	str	r5, [sp, #20]
 800c602:	e776      	b.n	800c4f2 <_dtoa_r+0x992>
 800c604:	f000 f8e6 	bl	800c7d4 <__multadd>
 800c608:	4631      	mov	r1, r6
 800c60a:	4681      	mov	r9, r0
 800c60c:	2300      	movs	r3, #0
 800c60e:	220a      	movs	r2, #10
 800c610:	4620      	mov	r0, r4
 800c612:	f000 f8df 	bl	800c7d4 <__multadd>
 800c616:	4606      	mov	r6, r0
 800c618:	e7f2      	b.n	800c600 <_dtoa_r+0xaa0>
 800c61a:	f04f 0900 	mov.w	r9, #0
 800c61e:	2201      	movs	r2, #1
 800c620:	9904      	ldr	r1, [sp, #16]
 800c622:	4620      	mov	r0, r4
 800c624:	f000 fa4c 	bl	800cac0 <__lshift>
 800c628:	4639      	mov	r1, r7
 800c62a:	9004      	str	r0, [sp, #16]
 800c62c:	f000 fa9c 	bl	800cb68 <__mcmp>
 800c630:	2800      	cmp	r0, #0
 800c632:	dcb6      	bgt.n	800c5a2 <_dtoa_r+0xa42>
 800c634:	d102      	bne.n	800c63c <_dtoa_r+0xadc>
 800c636:	f018 0f01 	tst.w	r8, #1
 800c63a:	d1b2      	bne.n	800c5a2 <_dtoa_r+0xa42>
 800c63c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c640:	2b30      	cmp	r3, #48	; 0x30
 800c642:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c646:	f47f af0a 	bne.w	800c45e <_dtoa_r+0x8fe>
 800c64a:	4615      	mov	r5, r2
 800c64c:	e7f6      	b.n	800c63c <_dtoa_r+0xadc>
 800c64e:	4593      	cmp	fp, r2
 800c650:	d105      	bne.n	800c65e <_dtoa_r+0xafe>
 800c652:	2331      	movs	r3, #49	; 0x31
 800c654:	f10a 0a01 	add.w	sl, sl, #1
 800c658:	f88b 3000 	strb.w	r3, [fp]
 800c65c:	e6ff      	b.n	800c45e <_dtoa_r+0x8fe>
 800c65e:	4615      	mov	r5, r2
 800c660:	e79f      	b.n	800c5a2 <_dtoa_r+0xa42>
 800c662:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c6c8 <_dtoa_r+0xb68>
 800c666:	e007      	b.n	800c678 <_dtoa_r+0xb18>
 800c668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c66a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c6cc <_dtoa_r+0xb6c>
 800c66e:	b11b      	cbz	r3, 800c678 <_dtoa_r+0xb18>
 800c670:	f10b 0308 	add.w	r3, fp, #8
 800c674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c676:	6013      	str	r3, [r2, #0]
 800c678:	4658      	mov	r0, fp
 800c67a:	b017      	add	sp, #92	; 0x5c
 800c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c680:	9b06      	ldr	r3, [sp, #24]
 800c682:	2b01      	cmp	r3, #1
 800c684:	f77f ae35 	ble.w	800c2f2 <_dtoa_r+0x792>
 800c688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c68a:	9307      	str	r3, [sp, #28]
 800c68c:	e649      	b.n	800c322 <_dtoa_r+0x7c2>
 800c68e:	9b02      	ldr	r3, [sp, #8]
 800c690:	2b00      	cmp	r3, #0
 800c692:	dc03      	bgt.n	800c69c <_dtoa_r+0xb3c>
 800c694:	9b06      	ldr	r3, [sp, #24]
 800c696:	2b02      	cmp	r3, #2
 800c698:	f73f aecc 	bgt.w	800c434 <_dtoa_r+0x8d4>
 800c69c:	465d      	mov	r5, fp
 800c69e:	4639      	mov	r1, r7
 800c6a0:	9804      	ldr	r0, [sp, #16]
 800c6a2:	f7ff f9d1 	bl	800ba48 <quorem>
 800c6a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c6aa:	f805 8b01 	strb.w	r8, [r5], #1
 800c6ae:	9a02      	ldr	r2, [sp, #8]
 800c6b0:	eba5 030b 	sub.w	r3, r5, fp
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	ddb0      	ble.n	800c61a <_dtoa_r+0xaba>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	220a      	movs	r2, #10
 800c6bc:	9904      	ldr	r1, [sp, #16]
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f000 f888 	bl	800c7d4 <__multadd>
 800c6c4:	9004      	str	r0, [sp, #16]
 800c6c6:	e7ea      	b.n	800c69e <_dtoa_r+0xb3e>
 800c6c8:	0800d448 	.word	0x0800d448
 800c6cc:	0800d46c 	.word	0x0800d46c

0800c6d0 <__locale_ctype_ptr_l>:
 800c6d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c6d4:	4770      	bx	lr
	...

0800c6d8 <_localeconv_r>:
 800c6d8:	4b04      	ldr	r3, [pc, #16]	; (800c6ec <_localeconv_r+0x14>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	6a18      	ldr	r0, [r3, #32]
 800c6de:	4b04      	ldr	r3, [pc, #16]	; (800c6f0 <_localeconv_r+0x18>)
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	bf08      	it	eq
 800c6e4:	4618      	moveq	r0, r3
 800c6e6:	30f0      	adds	r0, #240	; 0xf0
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	20000028 	.word	0x20000028
 800c6f0:	2000008c 	.word	0x2000008c

0800c6f4 <malloc>:
 800c6f4:	4b02      	ldr	r3, [pc, #8]	; (800c700 <malloc+0xc>)
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	f000 bb57 	b.w	800cdac <_malloc_r>
 800c6fe:	bf00      	nop
 800c700:	20000028 	.word	0x20000028

0800c704 <__ascii_mbtowc>:
 800c704:	b082      	sub	sp, #8
 800c706:	b901      	cbnz	r1, 800c70a <__ascii_mbtowc+0x6>
 800c708:	a901      	add	r1, sp, #4
 800c70a:	b142      	cbz	r2, 800c71e <__ascii_mbtowc+0x1a>
 800c70c:	b14b      	cbz	r3, 800c722 <__ascii_mbtowc+0x1e>
 800c70e:	7813      	ldrb	r3, [r2, #0]
 800c710:	600b      	str	r3, [r1, #0]
 800c712:	7812      	ldrb	r2, [r2, #0]
 800c714:	1c10      	adds	r0, r2, #0
 800c716:	bf18      	it	ne
 800c718:	2001      	movne	r0, #1
 800c71a:	b002      	add	sp, #8
 800c71c:	4770      	bx	lr
 800c71e:	4610      	mov	r0, r2
 800c720:	e7fb      	b.n	800c71a <__ascii_mbtowc+0x16>
 800c722:	f06f 0001 	mvn.w	r0, #1
 800c726:	e7f8      	b.n	800c71a <__ascii_mbtowc+0x16>

0800c728 <memcpy>:
 800c728:	b510      	push	{r4, lr}
 800c72a:	1e43      	subs	r3, r0, #1
 800c72c:	440a      	add	r2, r1
 800c72e:	4291      	cmp	r1, r2
 800c730:	d100      	bne.n	800c734 <memcpy+0xc>
 800c732:	bd10      	pop	{r4, pc}
 800c734:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c73c:	e7f7      	b.n	800c72e <memcpy+0x6>

0800c73e <_Balloc>:
 800c73e:	b570      	push	{r4, r5, r6, lr}
 800c740:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c742:	4604      	mov	r4, r0
 800c744:	460e      	mov	r6, r1
 800c746:	b93d      	cbnz	r5, 800c758 <_Balloc+0x1a>
 800c748:	2010      	movs	r0, #16
 800c74a:	f7ff ffd3 	bl	800c6f4 <malloc>
 800c74e:	6260      	str	r0, [r4, #36]	; 0x24
 800c750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c754:	6005      	str	r5, [r0, #0]
 800c756:	60c5      	str	r5, [r0, #12]
 800c758:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c75a:	68eb      	ldr	r3, [r5, #12]
 800c75c:	b183      	cbz	r3, 800c780 <_Balloc+0x42>
 800c75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c766:	b9b8      	cbnz	r0, 800c798 <_Balloc+0x5a>
 800c768:	2101      	movs	r1, #1
 800c76a:	fa01 f506 	lsl.w	r5, r1, r6
 800c76e:	1d6a      	adds	r2, r5, #5
 800c770:	0092      	lsls	r2, r2, #2
 800c772:	4620      	mov	r0, r4
 800c774:	f000 fabe 	bl	800ccf4 <_calloc_r>
 800c778:	b160      	cbz	r0, 800c794 <_Balloc+0x56>
 800c77a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c77e:	e00e      	b.n	800c79e <_Balloc+0x60>
 800c780:	2221      	movs	r2, #33	; 0x21
 800c782:	2104      	movs	r1, #4
 800c784:	4620      	mov	r0, r4
 800c786:	f000 fab5 	bl	800ccf4 <_calloc_r>
 800c78a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c78c:	60e8      	str	r0, [r5, #12]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1e4      	bne.n	800c75e <_Balloc+0x20>
 800c794:	2000      	movs	r0, #0
 800c796:	bd70      	pop	{r4, r5, r6, pc}
 800c798:	6802      	ldr	r2, [r0, #0]
 800c79a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7a4:	e7f7      	b.n	800c796 <_Balloc+0x58>

0800c7a6 <_Bfree>:
 800c7a6:	b570      	push	{r4, r5, r6, lr}
 800c7a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	b93c      	cbnz	r4, 800c7c0 <_Bfree+0x1a>
 800c7b0:	2010      	movs	r0, #16
 800c7b2:	f7ff ff9f 	bl	800c6f4 <malloc>
 800c7b6:	6270      	str	r0, [r6, #36]	; 0x24
 800c7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7bc:	6004      	str	r4, [r0, #0]
 800c7be:	60c4      	str	r4, [r0, #12]
 800c7c0:	b13d      	cbz	r5, 800c7d2 <_Bfree+0x2c>
 800c7c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c7c4:	686a      	ldr	r2, [r5, #4]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7cc:	6029      	str	r1, [r5, #0]
 800c7ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c7d2:	bd70      	pop	{r4, r5, r6, pc}

0800c7d4 <__multadd>:
 800c7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d8:	690d      	ldr	r5, [r1, #16]
 800c7da:	461f      	mov	r7, r3
 800c7dc:	4606      	mov	r6, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	f101 0c14 	add.w	ip, r1, #20
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f8dc 0000 	ldr.w	r0, [ip]
 800c7ea:	b281      	uxth	r1, r0
 800c7ec:	fb02 7101 	mla	r1, r2, r1, r7
 800c7f0:	0c0f      	lsrs	r7, r1, #16
 800c7f2:	0c00      	lsrs	r0, r0, #16
 800c7f4:	fb02 7000 	mla	r0, r2, r0, r7
 800c7f8:	b289      	uxth	r1, r1
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c800:	429d      	cmp	r5, r3
 800c802:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c806:	f84c 1b04 	str.w	r1, [ip], #4
 800c80a:	dcec      	bgt.n	800c7e6 <__multadd+0x12>
 800c80c:	b1d7      	cbz	r7, 800c844 <__multadd+0x70>
 800c80e:	68a3      	ldr	r3, [r4, #8]
 800c810:	42ab      	cmp	r3, r5
 800c812:	dc12      	bgt.n	800c83a <__multadd+0x66>
 800c814:	6861      	ldr	r1, [r4, #4]
 800c816:	4630      	mov	r0, r6
 800c818:	3101      	adds	r1, #1
 800c81a:	f7ff ff90 	bl	800c73e <_Balloc>
 800c81e:	6922      	ldr	r2, [r4, #16]
 800c820:	3202      	adds	r2, #2
 800c822:	f104 010c 	add.w	r1, r4, #12
 800c826:	4680      	mov	r8, r0
 800c828:	0092      	lsls	r2, r2, #2
 800c82a:	300c      	adds	r0, #12
 800c82c:	f7ff ff7c 	bl	800c728 <memcpy>
 800c830:	4621      	mov	r1, r4
 800c832:	4630      	mov	r0, r6
 800c834:	f7ff ffb7 	bl	800c7a6 <_Bfree>
 800c838:	4644      	mov	r4, r8
 800c83a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c83e:	3501      	adds	r5, #1
 800c840:	615f      	str	r7, [r3, #20]
 800c842:	6125      	str	r5, [r4, #16]
 800c844:	4620      	mov	r0, r4
 800c846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c84a <__hi0bits>:
 800c84a:	0c02      	lsrs	r2, r0, #16
 800c84c:	0412      	lsls	r2, r2, #16
 800c84e:	4603      	mov	r3, r0
 800c850:	b9b2      	cbnz	r2, 800c880 <__hi0bits+0x36>
 800c852:	0403      	lsls	r3, r0, #16
 800c854:	2010      	movs	r0, #16
 800c856:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c85a:	bf04      	itt	eq
 800c85c:	021b      	lsleq	r3, r3, #8
 800c85e:	3008      	addeq	r0, #8
 800c860:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c864:	bf04      	itt	eq
 800c866:	011b      	lsleq	r3, r3, #4
 800c868:	3004      	addeq	r0, #4
 800c86a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c86e:	bf04      	itt	eq
 800c870:	009b      	lsleq	r3, r3, #2
 800c872:	3002      	addeq	r0, #2
 800c874:	2b00      	cmp	r3, #0
 800c876:	db06      	blt.n	800c886 <__hi0bits+0x3c>
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	d503      	bpl.n	800c884 <__hi0bits+0x3a>
 800c87c:	3001      	adds	r0, #1
 800c87e:	4770      	bx	lr
 800c880:	2000      	movs	r0, #0
 800c882:	e7e8      	b.n	800c856 <__hi0bits+0xc>
 800c884:	2020      	movs	r0, #32
 800c886:	4770      	bx	lr

0800c888 <__lo0bits>:
 800c888:	6803      	ldr	r3, [r0, #0]
 800c88a:	f013 0207 	ands.w	r2, r3, #7
 800c88e:	4601      	mov	r1, r0
 800c890:	d00b      	beq.n	800c8aa <__lo0bits+0x22>
 800c892:	07da      	lsls	r2, r3, #31
 800c894:	d423      	bmi.n	800c8de <__lo0bits+0x56>
 800c896:	0798      	lsls	r0, r3, #30
 800c898:	bf49      	itett	mi
 800c89a:	085b      	lsrmi	r3, r3, #1
 800c89c:	089b      	lsrpl	r3, r3, #2
 800c89e:	2001      	movmi	r0, #1
 800c8a0:	600b      	strmi	r3, [r1, #0]
 800c8a2:	bf5c      	itt	pl
 800c8a4:	600b      	strpl	r3, [r1, #0]
 800c8a6:	2002      	movpl	r0, #2
 800c8a8:	4770      	bx	lr
 800c8aa:	b298      	uxth	r0, r3
 800c8ac:	b9a8      	cbnz	r0, 800c8da <__lo0bits+0x52>
 800c8ae:	0c1b      	lsrs	r3, r3, #16
 800c8b0:	2010      	movs	r0, #16
 800c8b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c8b6:	bf04      	itt	eq
 800c8b8:	0a1b      	lsreq	r3, r3, #8
 800c8ba:	3008      	addeq	r0, #8
 800c8bc:	071a      	lsls	r2, r3, #28
 800c8be:	bf04      	itt	eq
 800c8c0:	091b      	lsreq	r3, r3, #4
 800c8c2:	3004      	addeq	r0, #4
 800c8c4:	079a      	lsls	r2, r3, #30
 800c8c6:	bf04      	itt	eq
 800c8c8:	089b      	lsreq	r3, r3, #2
 800c8ca:	3002      	addeq	r0, #2
 800c8cc:	07da      	lsls	r2, r3, #31
 800c8ce:	d402      	bmi.n	800c8d6 <__lo0bits+0x4e>
 800c8d0:	085b      	lsrs	r3, r3, #1
 800c8d2:	d006      	beq.n	800c8e2 <__lo0bits+0x5a>
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	600b      	str	r3, [r1, #0]
 800c8d8:	4770      	bx	lr
 800c8da:	4610      	mov	r0, r2
 800c8dc:	e7e9      	b.n	800c8b2 <__lo0bits+0x2a>
 800c8de:	2000      	movs	r0, #0
 800c8e0:	4770      	bx	lr
 800c8e2:	2020      	movs	r0, #32
 800c8e4:	4770      	bx	lr

0800c8e6 <__i2b>:
 800c8e6:	b510      	push	{r4, lr}
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	f7ff ff27 	bl	800c73e <_Balloc>
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	6144      	str	r4, [r0, #20]
 800c8f4:	6102      	str	r2, [r0, #16]
 800c8f6:	bd10      	pop	{r4, pc}

0800c8f8 <__multiply>:
 800c8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	4614      	mov	r4, r2
 800c8fe:	690a      	ldr	r2, [r1, #16]
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	429a      	cmp	r2, r3
 800c904:	bfb8      	it	lt
 800c906:	460b      	movlt	r3, r1
 800c908:	4688      	mov	r8, r1
 800c90a:	bfbc      	itt	lt
 800c90c:	46a0      	movlt	r8, r4
 800c90e:	461c      	movlt	r4, r3
 800c910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c914:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c918:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c91c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c920:	eb07 0609 	add.w	r6, r7, r9
 800c924:	42b3      	cmp	r3, r6
 800c926:	bfb8      	it	lt
 800c928:	3101      	addlt	r1, #1
 800c92a:	f7ff ff08 	bl	800c73e <_Balloc>
 800c92e:	f100 0514 	add.w	r5, r0, #20
 800c932:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c936:	462b      	mov	r3, r5
 800c938:	2200      	movs	r2, #0
 800c93a:	4573      	cmp	r3, lr
 800c93c:	d316      	bcc.n	800c96c <__multiply+0x74>
 800c93e:	f104 0214 	add.w	r2, r4, #20
 800c942:	f108 0114 	add.w	r1, r8, #20
 800c946:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c94a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	9b00      	ldr	r3, [sp, #0]
 800c952:	9201      	str	r2, [sp, #4]
 800c954:	4293      	cmp	r3, r2
 800c956:	d80c      	bhi.n	800c972 <__multiply+0x7a>
 800c958:	2e00      	cmp	r6, #0
 800c95a:	dd03      	ble.n	800c964 <__multiply+0x6c>
 800c95c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c960:	2b00      	cmp	r3, #0
 800c962:	d05d      	beq.n	800ca20 <__multiply+0x128>
 800c964:	6106      	str	r6, [r0, #16]
 800c966:	b003      	add	sp, #12
 800c968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96c:	f843 2b04 	str.w	r2, [r3], #4
 800c970:	e7e3      	b.n	800c93a <__multiply+0x42>
 800c972:	f8b2 b000 	ldrh.w	fp, [r2]
 800c976:	f1bb 0f00 	cmp.w	fp, #0
 800c97a:	d023      	beq.n	800c9c4 <__multiply+0xcc>
 800c97c:	4689      	mov	r9, r1
 800c97e:	46ac      	mov	ip, r5
 800c980:	f04f 0800 	mov.w	r8, #0
 800c984:	f859 4b04 	ldr.w	r4, [r9], #4
 800c988:	f8dc a000 	ldr.w	sl, [ip]
 800c98c:	b2a3      	uxth	r3, r4
 800c98e:	fa1f fa8a 	uxth.w	sl, sl
 800c992:	fb0b a303 	mla	r3, fp, r3, sl
 800c996:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c99a:	f8dc 4000 	ldr.w	r4, [ip]
 800c99e:	4443      	add	r3, r8
 800c9a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c9a4:	fb0b 840a 	mla	r4, fp, sl, r8
 800c9a8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c9ac:	46e2      	mov	sl, ip
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c9b4:	454f      	cmp	r7, r9
 800c9b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c9ba:	f84a 3b04 	str.w	r3, [sl], #4
 800c9be:	d82b      	bhi.n	800ca18 <__multiply+0x120>
 800c9c0:	f8cc 8004 	str.w	r8, [ip, #4]
 800c9c4:	9b01      	ldr	r3, [sp, #4]
 800c9c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c9ca:	3204      	adds	r2, #4
 800c9cc:	f1ba 0f00 	cmp.w	sl, #0
 800c9d0:	d020      	beq.n	800ca14 <__multiply+0x11c>
 800c9d2:	682b      	ldr	r3, [r5, #0]
 800c9d4:	4689      	mov	r9, r1
 800c9d6:	46a8      	mov	r8, r5
 800c9d8:	f04f 0b00 	mov.w	fp, #0
 800c9dc:	f8b9 c000 	ldrh.w	ip, [r9]
 800c9e0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c9e4:	fb0a 440c 	mla	r4, sl, ip, r4
 800c9e8:	445c      	add	r4, fp
 800c9ea:	46c4      	mov	ip, r8
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c9f2:	f84c 3b04 	str.w	r3, [ip], #4
 800c9f6:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9fa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c9fe:	0c1b      	lsrs	r3, r3, #16
 800ca00:	fb0a b303 	mla	r3, sl, r3, fp
 800ca04:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ca08:	454f      	cmp	r7, r9
 800ca0a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ca0e:	d805      	bhi.n	800ca1c <__multiply+0x124>
 800ca10:	f8c8 3004 	str.w	r3, [r8, #4]
 800ca14:	3504      	adds	r5, #4
 800ca16:	e79b      	b.n	800c950 <__multiply+0x58>
 800ca18:	46d4      	mov	ip, sl
 800ca1a:	e7b3      	b.n	800c984 <__multiply+0x8c>
 800ca1c:	46e0      	mov	r8, ip
 800ca1e:	e7dd      	b.n	800c9dc <__multiply+0xe4>
 800ca20:	3e01      	subs	r6, #1
 800ca22:	e799      	b.n	800c958 <__multiply+0x60>

0800ca24 <__pow5mult>:
 800ca24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca28:	4615      	mov	r5, r2
 800ca2a:	f012 0203 	ands.w	r2, r2, #3
 800ca2e:	4606      	mov	r6, r0
 800ca30:	460f      	mov	r7, r1
 800ca32:	d007      	beq.n	800ca44 <__pow5mult+0x20>
 800ca34:	3a01      	subs	r2, #1
 800ca36:	4c21      	ldr	r4, [pc, #132]	; (800cabc <__pow5mult+0x98>)
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca3e:	f7ff fec9 	bl	800c7d4 <__multadd>
 800ca42:	4607      	mov	r7, r0
 800ca44:	10ad      	asrs	r5, r5, #2
 800ca46:	d035      	beq.n	800cab4 <__pow5mult+0x90>
 800ca48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca4a:	b93c      	cbnz	r4, 800ca5c <__pow5mult+0x38>
 800ca4c:	2010      	movs	r0, #16
 800ca4e:	f7ff fe51 	bl	800c6f4 <malloc>
 800ca52:	6270      	str	r0, [r6, #36]	; 0x24
 800ca54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca58:	6004      	str	r4, [r0, #0]
 800ca5a:	60c4      	str	r4, [r0, #12]
 800ca5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca64:	b94c      	cbnz	r4, 800ca7a <__pow5mult+0x56>
 800ca66:	f240 2171 	movw	r1, #625	; 0x271
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7ff ff3b 	bl	800c8e6 <__i2b>
 800ca70:	2300      	movs	r3, #0
 800ca72:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca76:	4604      	mov	r4, r0
 800ca78:	6003      	str	r3, [r0, #0]
 800ca7a:	f04f 0800 	mov.w	r8, #0
 800ca7e:	07eb      	lsls	r3, r5, #31
 800ca80:	d50a      	bpl.n	800ca98 <__pow5mult+0x74>
 800ca82:	4639      	mov	r1, r7
 800ca84:	4622      	mov	r2, r4
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7ff ff36 	bl	800c8f8 <__multiply>
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	4681      	mov	r9, r0
 800ca90:	4630      	mov	r0, r6
 800ca92:	f7ff fe88 	bl	800c7a6 <_Bfree>
 800ca96:	464f      	mov	r7, r9
 800ca98:	106d      	asrs	r5, r5, #1
 800ca9a:	d00b      	beq.n	800cab4 <__pow5mult+0x90>
 800ca9c:	6820      	ldr	r0, [r4, #0]
 800ca9e:	b938      	cbnz	r0, 800cab0 <__pow5mult+0x8c>
 800caa0:	4622      	mov	r2, r4
 800caa2:	4621      	mov	r1, r4
 800caa4:	4630      	mov	r0, r6
 800caa6:	f7ff ff27 	bl	800c8f8 <__multiply>
 800caaa:	6020      	str	r0, [r4, #0]
 800caac:	f8c0 8000 	str.w	r8, [r0]
 800cab0:	4604      	mov	r4, r0
 800cab2:	e7e4      	b.n	800ca7e <__pow5mult+0x5a>
 800cab4:	4638      	mov	r0, r7
 800cab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caba:	bf00      	nop
 800cabc:	0800d578 	.word	0x0800d578

0800cac0 <__lshift>:
 800cac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cac4:	460c      	mov	r4, r1
 800cac6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800caca:	6923      	ldr	r3, [r4, #16]
 800cacc:	6849      	ldr	r1, [r1, #4]
 800cace:	eb0a 0903 	add.w	r9, sl, r3
 800cad2:	68a3      	ldr	r3, [r4, #8]
 800cad4:	4607      	mov	r7, r0
 800cad6:	4616      	mov	r6, r2
 800cad8:	f109 0501 	add.w	r5, r9, #1
 800cadc:	42ab      	cmp	r3, r5
 800cade:	db32      	blt.n	800cb46 <__lshift+0x86>
 800cae0:	4638      	mov	r0, r7
 800cae2:	f7ff fe2c 	bl	800c73e <_Balloc>
 800cae6:	2300      	movs	r3, #0
 800cae8:	4680      	mov	r8, r0
 800caea:	f100 0114 	add.w	r1, r0, #20
 800caee:	461a      	mov	r2, r3
 800caf0:	4553      	cmp	r3, sl
 800caf2:	db2b      	blt.n	800cb4c <__lshift+0x8c>
 800caf4:	6920      	ldr	r0, [r4, #16]
 800caf6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cafa:	f104 0314 	add.w	r3, r4, #20
 800cafe:	f016 021f 	ands.w	r2, r6, #31
 800cb02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb0a:	d025      	beq.n	800cb58 <__lshift+0x98>
 800cb0c:	f1c2 0e20 	rsb	lr, r2, #32
 800cb10:	2000      	movs	r0, #0
 800cb12:	681e      	ldr	r6, [r3, #0]
 800cb14:	468a      	mov	sl, r1
 800cb16:	4096      	lsls	r6, r2
 800cb18:	4330      	orrs	r0, r6
 800cb1a:	f84a 0b04 	str.w	r0, [sl], #4
 800cb1e:	f853 0b04 	ldr.w	r0, [r3], #4
 800cb22:	459c      	cmp	ip, r3
 800cb24:	fa20 f00e 	lsr.w	r0, r0, lr
 800cb28:	d814      	bhi.n	800cb54 <__lshift+0x94>
 800cb2a:	6048      	str	r0, [r1, #4]
 800cb2c:	b108      	cbz	r0, 800cb32 <__lshift+0x72>
 800cb2e:	f109 0502 	add.w	r5, r9, #2
 800cb32:	3d01      	subs	r5, #1
 800cb34:	4638      	mov	r0, r7
 800cb36:	f8c8 5010 	str.w	r5, [r8, #16]
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	f7ff fe33 	bl	800c7a6 <_Bfree>
 800cb40:	4640      	mov	r0, r8
 800cb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb46:	3101      	adds	r1, #1
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	e7c7      	b.n	800cadc <__lshift+0x1c>
 800cb4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cb50:	3301      	adds	r3, #1
 800cb52:	e7cd      	b.n	800caf0 <__lshift+0x30>
 800cb54:	4651      	mov	r1, sl
 800cb56:	e7dc      	b.n	800cb12 <__lshift+0x52>
 800cb58:	3904      	subs	r1, #4
 800cb5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb5e:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb62:	459c      	cmp	ip, r3
 800cb64:	d8f9      	bhi.n	800cb5a <__lshift+0x9a>
 800cb66:	e7e4      	b.n	800cb32 <__lshift+0x72>

0800cb68 <__mcmp>:
 800cb68:	6903      	ldr	r3, [r0, #16]
 800cb6a:	690a      	ldr	r2, [r1, #16]
 800cb6c:	1a9b      	subs	r3, r3, r2
 800cb6e:	b530      	push	{r4, r5, lr}
 800cb70:	d10c      	bne.n	800cb8c <__mcmp+0x24>
 800cb72:	0092      	lsls	r2, r2, #2
 800cb74:	3014      	adds	r0, #20
 800cb76:	3114      	adds	r1, #20
 800cb78:	1884      	adds	r4, r0, r2
 800cb7a:	4411      	add	r1, r2
 800cb7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb84:	4295      	cmp	r5, r2
 800cb86:	d003      	beq.n	800cb90 <__mcmp+0x28>
 800cb88:	d305      	bcc.n	800cb96 <__mcmp+0x2e>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	bd30      	pop	{r4, r5, pc}
 800cb90:	42a0      	cmp	r0, r4
 800cb92:	d3f3      	bcc.n	800cb7c <__mcmp+0x14>
 800cb94:	e7fa      	b.n	800cb8c <__mcmp+0x24>
 800cb96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb9a:	e7f7      	b.n	800cb8c <__mcmp+0x24>

0800cb9c <__mdiff>:
 800cb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba0:	460d      	mov	r5, r1
 800cba2:	4607      	mov	r7, r0
 800cba4:	4611      	mov	r1, r2
 800cba6:	4628      	mov	r0, r5
 800cba8:	4614      	mov	r4, r2
 800cbaa:	f7ff ffdd 	bl	800cb68 <__mcmp>
 800cbae:	1e06      	subs	r6, r0, #0
 800cbb0:	d108      	bne.n	800cbc4 <__mdiff+0x28>
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	f7ff fdc2 	bl	800c73e <_Balloc>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc4:	bfa4      	itt	ge
 800cbc6:	4623      	movge	r3, r4
 800cbc8:	462c      	movge	r4, r5
 800cbca:	4638      	mov	r0, r7
 800cbcc:	6861      	ldr	r1, [r4, #4]
 800cbce:	bfa6      	itte	ge
 800cbd0:	461d      	movge	r5, r3
 800cbd2:	2600      	movge	r6, #0
 800cbd4:	2601      	movlt	r6, #1
 800cbd6:	f7ff fdb2 	bl	800c73e <_Balloc>
 800cbda:	692b      	ldr	r3, [r5, #16]
 800cbdc:	60c6      	str	r6, [r0, #12]
 800cbde:	6926      	ldr	r6, [r4, #16]
 800cbe0:	f105 0914 	add.w	r9, r5, #20
 800cbe4:	f104 0214 	add.w	r2, r4, #20
 800cbe8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cbec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800cbf0:	f100 0514 	add.w	r5, r0, #20
 800cbf4:	f04f 0e00 	mov.w	lr, #0
 800cbf8:	f852 ab04 	ldr.w	sl, [r2], #4
 800cbfc:	f859 4b04 	ldr.w	r4, [r9], #4
 800cc00:	fa1e f18a 	uxtah	r1, lr, sl
 800cc04:	b2a3      	uxth	r3, r4
 800cc06:	1ac9      	subs	r1, r1, r3
 800cc08:	0c23      	lsrs	r3, r4, #16
 800cc0a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cc0e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cc12:	b289      	uxth	r1, r1
 800cc14:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cc18:	45c8      	cmp	r8, r9
 800cc1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cc1e:	4694      	mov	ip, r2
 800cc20:	f845 3b04 	str.w	r3, [r5], #4
 800cc24:	d8e8      	bhi.n	800cbf8 <__mdiff+0x5c>
 800cc26:	45bc      	cmp	ip, r7
 800cc28:	d304      	bcc.n	800cc34 <__mdiff+0x98>
 800cc2a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cc2e:	b183      	cbz	r3, 800cc52 <__mdiff+0xb6>
 800cc30:	6106      	str	r6, [r0, #16]
 800cc32:	e7c5      	b.n	800cbc0 <__mdiff+0x24>
 800cc34:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cc38:	fa1e f381 	uxtah	r3, lr, r1
 800cc3c:	141a      	asrs	r2, r3, #16
 800cc3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc48:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cc4c:	f845 3b04 	str.w	r3, [r5], #4
 800cc50:	e7e9      	b.n	800cc26 <__mdiff+0x8a>
 800cc52:	3e01      	subs	r6, #1
 800cc54:	e7e9      	b.n	800cc2a <__mdiff+0x8e>

0800cc56 <__d2b>:
 800cc56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc5a:	460e      	mov	r6, r1
 800cc5c:	2101      	movs	r1, #1
 800cc5e:	ec59 8b10 	vmov	r8, r9, d0
 800cc62:	4615      	mov	r5, r2
 800cc64:	f7ff fd6b 	bl	800c73e <_Balloc>
 800cc68:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc72:	bb34      	cbnz	r4, 800ccc2 <__d2b+0x6c>
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	f1b8 0300 	subs.w	r3, r8, #0
 800cc7a:	d027      	beq.n	800cccc <__d2b+0x76>
 800cc7c:	a802      	add	r0, sp, #8
 800cc7e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cc82:	f7ff fe01 	bl	800c888 <__lo0bits>
 800cc86:	9900      	ldr	r1, [sp, #0]
 800cc88:	b1f0      	cbz	r0, 800ccc8 <__d2b+0x72>
 800cc8a:	9a01      	ldr	r2, [sp, #4]
 800cc8c:	f1c0 0320 	rsb	r3, r0, #32
 800cc90:	fa02 f303 	lsl.w	r3, r2, r3
 800cc94:	430b      	orrs	r3, r1
 800cc96:	40c2      	lsrs	r2, r0
 800cc98:	617b      	str	r3, [r7, #20]
 800cc9a:	9201      	str	r2, [sp, #4]
 800cc9c:	9b01      	ldr	r3, [sp, #4]
 800cc9e:	61bb      	str	r3, [r7, #24]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	bf14      	ite	ne
 800cca4:	2102      	movne	r1, #2
 800cca6:	2101      	moveq	r1, #1
 800cca8:	6139      	str	r1, [r7, #16]
 800ccaa:	b1c4      	cbz	r4, 800ccde <__d2b+0x88>
 800ccac:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ccb0:	4404      	add	r4, r0
 800ccb2:	6034      	str	r4, [r6, #0]
 800ccb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccb8:	6028      	str	r0, [r5, #0]
 800ccba:	4638      	mov	r0, r7
 800ccbc:	b003      	add	sp, #12
 800ccbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccc6:	e7d5      	b.n	800cc74 <__d2b+0x1e>
 800ccc8:	6179      	str	r1, [r7, #20]
 800ccca:	e7e7      	b.n	800cc9c <__d2b+0x46>
 800cccc:	a801      	add	r0, sp, #4
 800ccce:	f7ff fddb 	bl	800c888 <__lo0bits>
 800ccd2:	9b01      	ldr	r3, [sp, #4]
 800ccd4:	617b      	str	r3, [r7, #20]
 800ccd6:	2101      	movs	r1, #1
 800ccd8:	6139      	str	r1, [r7, #16]
 800ccda:	3020      	adds	r0, #32
 800ccdc:	e7e5      	b.n	800ccaa <__d2b+0x54>
 800ccde:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cce2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cce6:	6030      	str	r0, [r6, #0]
 800cce8:	6918      	ldr	r0, [r3, #16]
 800ccea:	f7ff fdae 	bl	800c84a <__hi0bits>
 800ccee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ccf2:	e7e1      	b.n	800ccb8 <__d2b+0x62>

0800ccf4 <_calloc_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	fb02 f401 	mul.w	r4, r2, r1
 800ccfa:	4621      	mov	r1, r4
 800ccfc:	f000 f856 	bl	800cdac <_malloc_r>
 800cd00:	4605      	mov	r5, r0
 800cd02:	b118      	cbz	r0, 800cd0c <_calloc_r+0x18>
 800cd04:	4622      	mov	r2, r4
 800cd06:	2100      	movs	r1, #0
 800cd08:	f7fe f988 	bl	800b01c <memset>
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}

0800cd10 <_free_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	4605      	mov	r5, r0
 800cd14:	2900      	cmp	r1, #0
 800cd16:	d045      	beq.n	800cda4 <_free_r+0x94>
 800cd18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd1c:	1f0c      	subs	r4, r1, #4
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	bfb8      	it	lt
 800cd22:	18e4      	addlt	r4, r4, r3
 800cd24:	f000 fa24 	bl	800d170 <__malloc_lock>
 800cd28:	4a1f      	ldr	r2, [pc, #124]	; (800cda8 <_free_r+0x98>)
 800cd2a:	6813      	ldr	r3, [r2, #0]
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	b933      	cbnz	r3, 800cd3e <_free_r+0x2e>
 800cd30:	6063      	str	r3, [r4, #4]
 800cd32:	6014      	str	r4, [r2, #0]
 800cd34:	4628      	mov	r0, r5
 800cd36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd3a:	f000 ba1a 	b.w	800d172 <__malloc_unlock>
 800cd3e:	42a3      	cmp	r3, r4
 800cd40:	d90c      	bls.n	800cd5c <_free_r+0x4c>
 800cd42:	6821      	ldr	r1, [r4, #0]
 800cd44:	1862      	adds	r2, r4, r1
 800cd46:	4293      	cmp	r3, r2
 800cd48:	bf04      	itt	eq
 800cd4a:	681a      	ldreq	r2, [r3, #0]
 800cd4c:	685b      	ldreq	r3, [r3, #4]
 800cd4e:	6063      	str	r3, [r4, #4]
 800cd50:	bf04      	itt	eq
 800cd52:	1852      	addeq	r2, r2, r1
 800cd54:	6022      	streq	r2, [r4, #0]
 800cd56:	6004      	str	r4, [r0, #0]
 800cd58:	e7ec      	b.n	800cd34 <_free_r+0x24>
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	b10a      	cbz	r2, 800cd64 <_free_r+0x54>
 800cd60:	42a2      	cmp	r2, r4
 800cd62:	d9fa      	bls.n	800cd5a <_free_r+0x4a>
 800cd64:	6819      	ldr	r1, [r3, #0]
 800cd66:	1858      	adds	r0, r3, r1
 800cd68:	42a0      	cmp	r0, r4
 800cd6a:	d10b      	bne.n	800cd84 <_free_r+0x74>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	4401      	add	r1, r0
 800cd70:	1858      	adds	r0, r3, r1
 800cd72:	4282      	cmp	r2, r0
 800cd74:	6019      	str	r1, [r3, #0]
 800cd76:	d1dd      	bne.n	800cd34 <_free_r+0x24>
 800cd78:	6810      	ldr	r0, [r2, #0]
 800cd7a:	6852      	ldr	r2, [r2, #4]
 800cd7c:	605a      	str	r2, [r3, #4]
 800cd7e:	4401      	add	r1, r0
 800cd80:	6019      	str	r1, [r3, #0]
 800cd82:	e7d7      	b.n	800cd34 <_free_r+0x24>
 800cd84:	d902      	bls.n	800cd8c <_free_r+0x7c>
 800cd86:	230c      	movs	r3, #12
 800cd88:	602b      	str	r3, [r5, #0]
 800cd8a:	e7d3      	b.n	800cd34 <_free_r+0x24>
 800cd8c:	6820      	ldr	r0, [r4, #0]
 800cd8e:	1821      	adds	r1, r4, r0
 800cd90:	428a      	cmp	r2, r1
 800cd92:	bf04      	itt	eq
 800cd94:	6811      	ldreq	r1, [r2, #0]
 800cd96:	6852      	ldreq	r2, [r2, #4]
 800cd98:	6062      	str	r2, [r4, #4]
 800cd9a:	bf04      	itt	eq
 800cd9c:	1809      	addeq	r1, r1, r0
 800cd9e:	6021      	streq	r1, [r4, #0]
 800cda0:	605c      	str	r4, [r3, #4]
 800cda2:	e7c7      	b.n	800cd34 <_free_r+0x24>
 800cda4:	bd38      	pop	{r3, r4, r5, pc}
 800cda6:	bf00      	nop
 800cda8:	20000280 	.word	0x20000280

0800cdac <_malloc_r>:
 800cdac:	b570      	push	{r4, r5, r6, lr}
 800cdae:	1ccd      	adds	r5, r1, #3
 800cdb0:	f025 0503 	bic.w	r5, r5, #3
 800cdb4:	3508      	adds	r5, #8
 800cdb6:	2d0c      	cmp	r5, #12
 800cdb8:	bf38      	it	cc
 800cdba:	250c      	movcc	r5, #12
 800cdbc:	2d00      	cmp	r5, #0
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	db01      	blt.n	800cdc6 <_malloc_r+0x1a>
 800cdc2:	42a9      	cmp	r1, r5
 800cdc4:	d903      	bls.n	800cdce <_malloc_r+0x22>
 800cdc6:	230c      	movs	r3, #12
 800cdc8:	6033      	str	r3, [r6, #0]
 800cdca:	2000      	movs	r0, #0
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	f000 f9cf 	bl	800d170 <__malloc_lock>
 800cdd2:	4a21      	ldr	r2, [pc, #132]	; (800ce58 <_malloc_r+0xac>)
 800cdd4:	6814      	ldr	r4, [r2, #0]
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	b991      	cbnz	r1, 800ce00 <_malloc_r+0x54>
 800cdda:	4c20      	ldr	r4, [pc, #128]	; (800ce5c <_malloc_r+0xb0>)
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	b91b      	cbnz	r3, 800cde8 <_malloc_r+0x3c>
 800cde0:	4630      	mov	r0, r6
 800cde2:	f000 f98f 	bl	800d104 <_sbrk_r>
 800cde6:	6020      	str	r0, [r4, #0]
 800cde8:	4629      	mov	r1, r5
 800cdea:	4630      	mov	r0, r6
 800cdec:	f000 f98a 	bl	800d104 <_sbrk_r>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d124      	bne.n	800ce3e <_malloc_r+0x92>
 800cdf4:	230c      	movs	r3, #12
 800cdf6:	6033      	str	r3, [r6, #0]
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f000 f9ba 	bl	800d172 <__malloc_unlock>
 800cdfe:	e7e4      	b.n	800cdca <_malloc_r+0x1e>
 800ce00:	680b      	ldr	r3, [r1, #0]
 800ce02:	1b5b      	subs	r3, r3, r5
 800ce04:	d418      	bmi.n	800ce38 <_malloc_r+0x8c>
 800ce06:	2b0b      	cmp	r3, #11
 800ce08:	d90f      	bls.n	800ce2a <_malloc_r+0x7e>
 800ce0a:	600b      	str	r3, [r1, #0]
 800ce0c:	50cd      	str	r5, [r1, r3]
 800ce0e:	18cc      	adds	r4, r1, r3
 800ce10:	4630      	mov	r0, r6
 800ce12:	f000 f9ae 	bl	800d172 <__malloc_unlock>
 800ce16:	f104 000b 	add.w	r0, r4, #11
 800ce1a:	1d23      	adds	r3, r4, #4
 800ce1c:	f020 0007 	bic.w	r0, r0, #7
 800ce20:	1ac3      	subs	r3, r0, r3
 800ce22:	d0d3      	beq.n	800cdcc <_malloc_r+0x20>
 800ce24:	425a      	negs	r2, r3
 800ce26:	50e2      	str	r2, [r4, r3]
 800ce28:	e7d0      	b.n	800cdcc <_malloc_r+0x20>
 800ce2a:	428c      	cmp	r4, r1
 800ce2c:	684b      	ldr	r3, [r1, #4]
 800ce2e:	bf16      	itet	ne
 800ce30:	6063      	strne	r3, [r4, #4]
 800ce32:	6013      	streq	r3, [r2, #0]
 800ce34:	460c      	movne	r4, r1
 800ce36:	e7eb      	b.n	800ce10 <_malloc_r+0x64>
 800ce38:	460c      	mov	r4, r1
 800ce3a:	6849      	ldr	r1, [r1, #4]
 800ce3c:	e7cc      	b.n	800cdd8 <_malloc_r+0x2c>
 800ce3e:	1cc4      	adds	r4, r0, #3
 800ce40:	f024 0403 	bic.w	r4, r4, #3
 800ce44:	42a0      	cmp	r0, r4
 800ce46:	d005      	beq.n	800ce54 <_malloc_r+0xa8>
 800ce48:	1a21      	subs	r1, r4, r0
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f000 f95a 	bl	800d104 <_sbrk_r>
 800ce50:	3001      	adds	r0, #1
 800ce52:	d0cf      	beq.n	800cdf4 <_malloc_r+0x48>
 800ce54:	6025      	str	r5, [r4, #0]
 800ce56:	e7db      	b.n	800ce10 <_malloc_r+0x64>
 800ce58:	20000280 	.word	0x20000280
 800ce5c:	20000284 	.word	0x20000284

0800ce60 <__ssputs_r>:
 800ce60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce64:	688e      	ldr	r6, [r1, #8]
 800ce66:	429e      	cmp	r6, r3
 800ce68:	4682      	mov	sl, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	4690      	mov	r8, r2
 800ce6e:	4699      	mov	r9, r3
 800ce70:	d837      	bhi.n	800cee2 <__ssputs_r+0x82>
 800ce72:	898a      	ldrh	r2, [r1, #12]
 800ce74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce78:	d031      	beq.n	800cede <__ssputs_r+0x7e>
 800ce7a:	6825      	ldr	r5, [r4, #0]
 800ce7c:	6909      	ldr	r1, [r1, #16]
 800ce7e:	1a6f      	subs	r7, r5, r1
 800ce80:	6965      	ldr	r5, [r4, #20]
 800ce82:	2302      	movs	r3, #2
 800ce84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce88:	fb95 f5f3 	sdiv	r5, r5, r3
 800ce8c:	f109 0301 	add.w	r3, r9, #1
 800ce90:	443b      	add	r3, r7
 800ce92:	429d      	cmp	r5, r3
 800ce94:	bf38      	it	cc
 800ce96:	461d      	movcc	r5, r3
 800ce98:	0553      	lsls	r3, r2, #21
 800ce9a:	d530      	bpl.n	800cefe <__ssputs_r+0x9e>
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	f7ff ff85 	bl	800cdac <_malloc_r>
 800cea2:	4606      	mov	r6, r0
 800cea4:	b950      	cbnz	r0, 800cebc <__ssputs_r+0x5c>
 800cea6:	230c      	movs	r3, #12
 800cea8:	f8ca 3000 	str.w	r3, [sl]
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebc:	463a      	mov	r2, r7
 800cebe:	6921      	ldr	r1, [r4, #16]
 800cec0:	f7ff fc32 	bl	800c728 <memcpy>
 800cec4:	89a3      	ldrh	r3, [r4, #12]
 800cec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ceca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cece:	81a3      	strh	r3, [r4, #12]
 800ced0:	6126      	str	r6, [r4, #16]
 800ced2:	6165      	str	r5, [r4, #20]
 800ced4:	443e      	add	r6, r7
 800ced6:	1bed      	subs	r5, r5, r7
 800ced8:	6026      	str	r6, [r4, #0]
 800ceda:	60a5      	str	r5, [r4, #8]
 800cedc:	464e      	mov	r6, r9
 800cede:	454e      	cmp	r6, r9
 800cee0:	d900      	bls.n	800cee4 <__ssputs_r+0x84>
 800cee2:	464e      	mov	r6, r9
 800cee4:	4632      	mov	r2, r6
 800cee6:	4641      	mov	r1, r8
 800cee8:	6820      	ldr	r0, [r4, #0]
 800ceea:	f000 f928 	bl	800d13e <memmove>
 800ceee:	68a3      	ldr	r3, [r4, #8]
 800cef0:	1b9b      	subs	r3, r3, r6
 800cef2:	60a3      	str	r3, [r4, #8]
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	441e      	add	r6, r3
 800cef8:	6026      	str	r6, [r4, #0]
 800cefa:	2000      	movs	r0, #0
 800cefc:	e7dc      	b.n	800ceb8 <__ssputs_r+0x58>
 800cefe:	462a      	mov	r2, r5
 800cf00:	f000 f938 	bl	800d174 <_realloc_r>
 800cf04:	4606      	mov	r6, r0
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d1e2      	bne.n	800ced0 <__ssputs_r+0x70>
 800cf0a:	6921      	ldr	r1, [r4, #16]
 800cf0c:	4650      	mov	r0, sl
 800cf0e:	f7ff feff 	bl	800cd10 <_free_r>
 800cf12:	e7c8      	b.n	800cea6 <__ssputs_r+0x46>

0800cf14 <_svfiprintf_r>:
 800cf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	461d      	mov	r5, r3
 800cf1a:	898b      	ldrh	r3, [r1, #12]
 800cf1c:	061f      	lsls	r7, r3, #24
 800cf1e:	b09d      	sub	sp, #116	; 0x74
 800cf20:	4680      	mov	r8, r0
 800cf22:	460c      	mov	r4, r1
 800cf24:	4616      	mov	r6, r2
 800cf26:	d50f      	bpl.n	800cf48 <_svfiprintf_r+0x34>
 800cf28:	690b      	ldr	r3, [r1, #16]
 800cf2a:	b96b      	cbnz	r3, 800cf48 <_svfiprintf_r+0x34>
 800cf2c:	2140      	movs	r1, #64	; 0x40
 800cf2e:	f7ff ff3d 	bl	800cdac <_malloc_r>
 800cf32:	6020      	str	r0, [r4, #0]
 800cf34:	6120      	str	r0, [r4, #16]
 800cf36:	b928      	cbnz	r0, 800cf44 <_svfiprintf_r+0x30>
 800cf38:	230c      	movs	r3, #12
 800cf3a:	f8c8 3000 	str.w	r3, [r8]
 800cf3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf42:	e0c8      	b.n	800d0d6 <_svfiprintf_r+0x1c2>
 800cf44:	2340      	movs	r3, #64	; 0x40
 800cf46:	6163      	str	r3, [r4, #20]
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf4c:	2320      	movs	r3, #32
 800cf4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf52:	2330      	movs	r3, #48	; 0x30
 800cf54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf58:	9503      	str	r5, [sp, #12]
 800cf5a:	f04f 0b01 	mov.w	fp, #1
 800cf5e:	4637      	mov	r7, r6
 800cf60:	463d      	mov	r5, r7
 800cf62:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cf66:	b10b      	cbz	r3, 800cf6c <_svfiprintf_r+0x58>
 800cf68:	2b25      	cmp	r3, #37	; 0x25
 800cf6a:	d13e      	bne.n	800cfea <_svfiprintf_r+0xd6>
 800cf6c:	ebb7 0a06 	subs.w	sl, r7, r6
 800cf70:	d00b      	beq.n	800cf8a <_svfiprintf_r+0x76>
 800cf72:	4653      	mov	r3, sl
 800cf74:	4632      	mov	r2, r6
 800cf76:	4621      	mov	r1, r4
 800cf78:	4640      	mov	r0, r8
 800cf7a:	f7ff ff71 	bl	800ce60 <__ssputs_r>
 800cf7e:	3001      	adds	r0, #1
 800cf80:	f000 80a4 	beq.w	800d0cc <_svfiprintf_r+0x1b8>
 800cf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf86:	4453      	add	r3, sl
 800cf88:	9309      	str	r3, [sp, #36]	; 0x24
 800cf8a:	783b      	ldrb	r3, [r7, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 809d 	beq.w	800d0cc <_svfiprintf_r+0x1b8>
 800cf92:	2300      	movs	r3, #0
 800cf94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf9c:	9304      	str	r3, [sp, #16]
 800cf9e:	9307      	str	r3, [sp, #28]
 800cfa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfa4:	931a      	str	r3, [sp, #104]	; 0x68
 800cfa6:	462f      	mov	r7, r5
 800cfa8:	2205      	movs	r2, #5
 800cfaa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cfae:	4850      	ldr	r0, [pc, #320]	; (800d0f0 <_svfiprintf_r+0x1dc>)
 800cfb0:	f7f3 f916 	bl	80001e0 <memchr>
 800cfb4:	9b04      	ldr	r3, [sp, #16]
 800cfb6:	b9d0      	cbnz	r0, 800cfee <_svfiprintf_r+0xda>
 800cfb8:	06d9      	lsls	r1, r3, #27
 800cfba:	bf44      	itt	mi
 800cfbc:	2220      	movmi	r2, #32
 800cfbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfc2:	071a      	lsls	r2, r3, #28
 800cfc4:	bf44      	itt	mi
 800cfc6:	222b      	movmi	r2, #43	; 0x2b
 800cfc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cfcc:	782a      	ldrb	r2, [r5, #0]
 800cfce:	2a2a      	cmp	r2, #42	; 0x2a
 800cfd0:	d015      	beq.n	800cffe <_svfiprintf_r+0xea>
 800cfd2:	9a07      	ldr	r2, [sp, #28]
 800cfd4:	462f      	mov	r7, r5
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	250a      	movs	r5, #10
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfe0:	3b30      	subs	r3, #48	; 0x30
 800cfe2:	2b09      	cmp	r3, #9
 800cfe4:	d94d      	bls.n	800d082 <_svfiprintf_r+0x16e>
 800cfe6:	b1b8      	cbz	r0, 800d018 <_svfiprintf_r+0x104>
 800cfe8:	e00f      	b.n	800d00a <_svfiprintf_r+0xf6>
 800cfea:	462f      	mov	r7, r5
 800cfec:	e7b8      	b.n	800cf60 <_svfiprintf_r+0x4c>
 800cfee:	4a40      	ldr	r2, [pc, #256]	; (800d0f0 <_svfiprintf_r+0x1dc>)
 800cff0:	1a80      	subs	r0, r0, r2
 800cff2:	fa0b f000 	lsl.w	r0, fp, r0
 800cff6:	4318      	orrs	r0, r3
 800cff8:	9004      	str	r0, [sp, #16]
 800cffa:	463d      	mov	r5, r7
 800cffc:	e7d3      	b.n	800cfa6 <_svfiprintf_r+0x92>
 800cffe:	9a03      	ldr	r2, [sp, #12]
 800d000:	1d11      	adds	r1, r2, #4
 800d002:	6812      	ldr	r2, [r2, #0]
 800d004:	9103      	str	r1, [sp, #12]
 800d006:	2a00      	cmp	r2, #0
 800d008:	db01      	blt.n	800d00e <_svfiprintf_r+0xfa>
 800d00a:	9207      	str	r2, [sp, #28]
 800d00c:	e004      	b.n	800d018 <_svfiprintf_r+0x104>
 800d00e:	4252      	negs	r2, r2
 800d010:	f043 0302 	orr.w	r3, r3, #2
 800d014:	9207      	str	r2, [sp, #28]
 800d016:	9304      	str	r3, [sp, #16]
 800d018:	783b      	ldrb	r3, [r7, #0]
 800d01a:	2b2e      	cmp	r3, #46	; 0x2e
 800d01c:	d10c      	bne.n	800d038 <_svfiprintf_r+0x124>
 800d01e:	787b      	ldrb	r3, [r7, #1]
 800d020:	2b2a      	cmp	r3, #42	; 0x2a
 800d022:	d133      	bne.n	800d08c <_svfiprintf_r+0x178>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	1d1a      	adds	r2, r3, #4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	9203      	str	r2, [sp, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	bfb8      	it	lt
 800d030:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d034:	3702      	adds	r7, #2
 800d036:	9305      	str	r3, [sp, #20]
 800d038:	4d2e      	ldr	r5, [pc, #184]	; (800d0f4 <_svfiprintf_r+0x1e0>)
 800d03a:	7839      	ldrb	r1, [r7, #0]
 800d03c:	2203      	movs	r2, #3
 800d03e:	4628      	mov	r0, r5
 800d040:	f7f3 f8ce 	bl	80001e0 <memchr>
 800d044:	b138      	cbz	r0, 800d056 <_svfiprintf_r+0x142>
 800d046:	2340      	movs	r3, #64	; 0x40
 800d048:	1b40      	subs	r0, r0, r5
 800d04a:	fa03 f000 	lsl.w	r0, r3, r0
 800d04e:	9b04      	ldr	r3, [sp, #16]
 800d050:	4303      	orrs	r3, r0
 800d052:	3701      	adds	r7, #1
 800d054:	9304      	str	r3, [sp, #16]
 800d056:	7839      	ldrb	r1, [r7, #0]
 800d058:	4827      	ldr	r0, [pc, #156]	; (800d0f8 <_svfiprintf_r+0x1e4>)
 800d05a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d05e:	2206      	movs	r2, #6
 800d060:	1c7e      	adds	r6, r7, #1
 800d062:	f7f3 f8bd 	bl	80001e0 <memchr>
 800d066:	2800      	cmp	r0, #0
 800d068:	d038      	beq.n	800d0dc <_svfiprintf_r+0x1c8>
 800d06a:	4b24      	ldr	r3, [pc, #144]	; (800d0fc <_svfiprintf_r+0x1e8>)
 800d06c:	bb13      	cbnz	r3, 800d0b4 <_svfiprintf_r+0x1a0>
 800d06e:	9b03      	ldr	r3, [sp, #12]
 800d070:	3307      	adds	r3, #7
 800d072:	f023 0307 	bic.w	r3, r3, #7
 800d076:	3308      	adds	r3, #8
 800d078:	9303      	str	r3, [sp, #12]
 800d07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07c:	444b      	add	r3, r9
 800d07e:	9309      	str	r3, [sp, #36]	; 0x24
 800d080:	e76d      	b.n	800cf5e <_svfiprintf_r+0x4a>
 800d082:	fb05 3202 	mla	r2, r5, r2, r3
 800d086:	2001      	movs	r0, #1
 800d088:	460f      	mov	r7, r1
 800d08a:	e7a6      	b.n	800cfda <_svfiprintf_r+0xc6>
 800d08c:	2300      	movs	r3, #0
 800d08e:	3701      	adds	r7, #1
 800d090:	9305      	str	r3, [sp, #20]
 800d092:	4619      	mov	r1, r3
 800d094:	250a      	movs	r5, #10
 800d096:	4638      	mov	r0, r7
 800d098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d09c:	3a30      	subs	r2, #48	; 0x30
 800d09e:	2a09      	cmp	r2, #9
 800d0a0:	d903      	bls.n	800d0aa <_svfiprintf_r+0x196>
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d0c8      	beq.n	800d038 <_svfiprintf_r+0x124>
 800d0a6:	9105      	str	r1, [sp, #20]
 800d0a8:	e7c6      	b.n	800d038 <_svfiprintf_r+0x124>
 800d0aa:	fb05 2101 	mla	r1, r5, r1, r2
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	4607      	mov	r7, r0
 800d0b2:	e7f0      	b.n	800d096 <_svfiprintf_r+0x182>
 800d0b4:	ab03      	add	r3, sp, #12
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4b11      	ldr	r3, [pc, #68]	; (800d100 <_svfiprintf_r+0x1ec>)
 800d0bc:	a904      	add	r1, sp, #16
 800d0be:	4640      	mov	r0, r8
 800d0c0:	f7fe f848 	bl	800b154 <_printf_float>
 800d0c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d0c8:	4681      	mov	r9, r0
 800d0ca:	d1d6      	bne.n	800d07a <_svfiprintf_r+0x166>
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	065b      	lsls	r3, r3, #25
 800d0d0:	f53f af35 	bmi.w	800cf3e <_svfiprintf_r+0x2a>
 800d0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0d6:	b01d      	add	sp, #116	; 0x74
 800d0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0dc:	ab03      	add	r3, sp, #12
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	4622      	mov	r2, r4
 800d0e2:	4b07      	ldr	r3, [pc, #28]	; (800d100 <_svfiprintf_r+0x1ec>)
 800d0e4:	a904      	add	r1, sp, #16
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	f7fe faea 	bl	800b6c0 <_printf_i>
 800d0ec:	e7ea      	b.n	800d0c4 <_svfiprintf_r+0x1b0>
 800d0ee:	bf00      	nop
 800d0f0:	0800d584 	.word	0x0800d584
 800d0f4:	0800d58a 	.word	0x0800d58a
 800d0f8:	0800d58e 	.word	0x0800d58e
 800d0fc:	0800b155 	.word	0x0800b155
 800d100:	0800ce61 	.word	0x0800ce61

0800d104 <_sbrk_r>:
 800d104:	b538      	push	{r3, r4, r5, lr}
 800d106:	4c06      	ldr	r4, [pc, #24]	; (800d120 <_sbrk_r+0x1c>)
 800d108:	2300      	movs	r3, #0
 800d10a:	4605      	mov	r5, r0
 800d10c:	4608      	mov	r0, r1
 800d10e:	6023      	str	r3, [r4, #0]
 800d110:	f7fd fe60 	bl	800add4 <_sbrk>
 800d114:	1c43      	adds	r3, r0, #1
 800d116:	d102      	bne.n	800d11e <_sbrk_r+0x1a>
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	b103      	cbz	r3, 800d11e <_sbrk_r+0x1a>
 800d11c:	602b      	str	r3, [r5, #0]
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	20001634 	.word	0x20001634

0800d124 <__ascii_wctomb>:
 800d124:	b149      	cbz	r1, 800d13a <__ascii_wctomb+0x16>
 800d126:	2aff      	cmp	r2, #255	; 0xff
 800d128:	bf85      	ittet	hi
 800d12a:	238a      	movhi	r3, #138	; 0x8a
 800d12c:	6003      	strhi	r3, [r0, #0]
 800d12e:	700a      	strbls	r2, [r1, #0]
 800d130:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d134:	bf98      	it	ls
 800d136:	2001      	movls	r0, #1
 800d138:	4770      	bx	lr
 800d13a:	4608      	mov	r0, r1
 800d13c:	4770      	bx	lr

0800d13e <memmove>:
 800d13e:	4288      	cmp	r0, r1
 800d140:	b510      	push	{r4, lr}
 800d142:	eb01 0302 	add.w	r3, r1, r2
 800d146:	d807      	bhi.n	800d158 <memmove+0x1a>
 800d148:	1e42      	subs	r2, r0, #1
 800d14a:	4299      	cmp	r1, r3
 800d14c:	d00a      	beq.n	800d164 <memmove+0x26>
 800d14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d152:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d156:	e7f8      	b.n	800d14a <memmove+0xc>
 800d158:	4283      	cmp	r3, r0
 800d15a:	d9f5      	bls.n	800d148 <memmove+0xa>
 800d15c:	1881      	adds	r1, r0, r2
 800d15e:	1ad2      	subs	r2, r2, r3
 800d160:	42d3      	cmn	r3, r2
 800d162:	d100      	bne.n	800d166 <memmove+0x28>
 800d164:	bd10      	pop	{r4, pc}
 800d166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d16a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d16e:	e7f7      	b.n	800d160 <memmove+0x22>

0800d170 <__malloc_lock>:
 800d170:	4770      	bx	lr

0800d172 <__malloc_unlock>:
 800d172:	4770      	bx	lr

0800d174 <_realloc_r>:
 800d174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d176:	4607      	mov	r7, r0
 800d178:	4614      	mov	r4, r2
 800d17a:	460e      	mov	r6, r1
 800d17c:	b921      	cbnz	r1, 800d188 <_realloc_r+0x14>
 800d17e:	4611      	mov	r1, r2
 800d180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d184:	f7ff be12 	b.w	800cdac <_malloc_r>
 800d188:	b922      	cbnz	r2, 800d194 <_realloc_r+0x20>
 800d18a:	f7ff fdc1 	bl	800cd10 <_free_r>
 800d18e:	4625      	mov	r5, r4
 800d190:	4628      	mov	r0, r5
 800d192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d194:	f000 f814 	bl	800d1c0 <_malloc_usable_size_r>
 800d198:	42a0      	cmp	r0, r4
 800d19a:	d20f      	bcs.n	800d1bc <_realloc_r+0x48>
 800d19c:	4621      	mov	r1, r4
 800d19e:	4638      	mov	r0, r7
 800d1a0:	f7ff fe04 	bl	800cdac <_malloc_r>
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d0f2      	beq.n	800d190 <_realloc_r+0x1c>
 800d1aa:	4631      	mov	r1, r6
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	f7ff fabb 	bl	800c728 <memcpy>
 800d1b2:	4631      	mov	r1, r6
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	f7ff fdab 	bl	800cd10 <_free_r>
 800d1ba:	e7e9      	b.n	800d190 <_realloc_r+0x1c>
 800d1bc:	4635      	mov	r5, r6
 800d1be:	e7e7      	b.n	800d190 <_realloc_r+0x1c>

0800d1c0 <_malloc_usable_size_r>:
 800d1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1c4:	1f18      	subs	r0, r3, #4
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	bfbc      	itt	lt
 800d1ca:	580b      	ldrlt	r3, [r1, r0]
 800d1cc:	18c0      	addlt	r0, r0, r3
 800d1ce:	4770      	bx	lr

0800d1d0 <_init>:
 800d1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d2:	bf00      	nop
 800d1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1d6:	bc08      	pop	{r3}
 800d1d8:	469e      	mov	lr, r3
 800d1da:	4770      	bx	lr

0800d1dc <_fini>:
 800d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1de:	bf00      	nop
 800d1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1e2:	bc08      	pop	{r3}
 800d1e4:	469e      	mov	lr, r3
 800d1e6:	4770      	bx	lr
